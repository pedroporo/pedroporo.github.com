<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://pedroporo.github.io">
    <title>Notas de pedro</title>
    <link href="https://pedroporo.github.io/feed.xml" rel="self" >
    <link href="https://pedroporo.github.io" >
    <updated>2024-10-15T18:18:28Z</updated>
    <id>https://pedroporo.github.io</id>
        <entry>
            <title>
                xx-tests
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/xx-tests/</id>
            <content type="html">
                &lt;h2 id=&quot;usar-tdd-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Usar TDD en Javascript&lt;/h2&gt;
&lt;p&gt;Lo más sencillo es usar alguna librería como &lt;strong&gt;Jest&lt;/strong&gt;, &lt;strong&gt;Mocha&lt;/strong&gt; o &lt;strong&gt;Vitests&lt;/strong&gt; (una adaptación de &lt;em&gt;Jest&lt;/em&gt; para &lt;em&gt;Vite&lt;/em&gt;). Se trata de librerías que se ejecutan sobre &lt;em&gt;Node.js&lt;/em&gt; y permiten crear tests tanto síncronos como asíncronos. Para usarlo necesitaremos tener &lt;strong&gt;npm&lt;/strong&gt; instalado.&lt;/p&gt;
&lt;h2 id=&quot;uso-de-vitest&quot; tabindex=&quot;-1&quot;&gt;Uso de Vitest&lt;/h2&gt;
&lt;p&gt;Podéis obtener información sobre cómo hacer test con &lt;em&gt;Vitest&lt;/em&gt; en muchas páginas de Internet como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/tests.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vitejs.dev/guide/features.html#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vitest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;uso-de-mocha&quot; tabindex=&quot;-1&quot;&gt;Uso de Mocha&lt;/h2&gt;
&lt;p&gt;Para instalarlo ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g mocha    # lo instalamos globalmente para que esté disponible para todos los proyectos
npm init                # crea en el directorio el package.json
npm install chai     # en vez de chai podríamos usar assert, should, etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La librería &lt;em&gt;Chai&lt;/em&gt; permite 3 tipos de sentencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts&lt;/li&gt;
&lt;li&gt;expects&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros vamos a usar &lt;em&gt;asserts&lt;/em&gt; por lo que es lo que deberemos importar en los ficheros de tests.&lt;/p&gt;
&lt;p&gt;Dentro de nuestro proyecto crearemos una carpeta donde guardaremos los ficheros JS de los tests (podemos llamarla &#39;&lt;em&gt;tests&lt;/em&gt;&#39;) y en cada fichero importaremos &lt;em&gt;chai&lt;/em&gt; y los ficheros necesarios. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;tests/store.specs.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const Store = require(&#39;../store.class.js&#39;);

describe(&#39;Store&#39;, () =&amp;gt; {

	it(&#39;should had an integer id&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.id, &#39;integer&#39;, &#39;La id no es un entero&#39;)
	});

	it(&#39;should had an empty array of products&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.products, &#39;array&#39;, &#39;Products no es un array&#39;)
		assert.lengthOf(foo.products, 0, &#39;Products no es un array vacío&#39;)
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder importar un módulo con &lt;em&gt;require&lt;/em&gt; debemos haberlo exprtado previamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;store.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Store {
    constructor (id) {
        this.id=id;
        this.products=[];
    }
    ...
}
 module.exports = Store;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ejecutar todos los tests de nuestro proyecto ejecutaremos desde la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si sólo queremos pasar uno lo indicamos en el comando: &lt;code&gt;mocha tests/store.specs.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos hacer que &lt;em&gt;mocha&lt;/em&gt; escuche en segundo plano y se ejecute automáticamente cada vez que hacemos algún cambio en un fichero con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;el-fichero-de-tests&quot; tabindex=&quot;-1&quot;&gt;El fichero de tests&lt;/h2&gt;
&lt;p&gt;Debemos importar le librería &lt;em&gt;Chai&lt;/em&gt; y el fichero con el código a testear como hemov visto antes. El fichero con el código que debe exportar la clase o función que contiene con &lt;code&gt;module.exports&lt;/code&gt;. Si queremos exportar varias funciones exportaremos un objeto con todas ellas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;module.exports = {
    addItem,
    removeItem
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras importar los ficheros pondremos el &lt;em&gt;describe&lt;/em&gt; y los bloques &lt;em&gt;it&lt;/em&gt; que queramos y dentro de cada uno los &lt;em&gt;aasert&lt;/em&gt; necesarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const index = require(&#39;../index.js&#39;);

describe(&#39;manage items&#39;, () =&amp;gt; {
	it(&#39;add a new item&#39;, function() {
		let myItem = ...;
		assert.typeOf(item, &#39;object&#39;, &#39;No crea un objeto sino &#39;+typeof(item) );
		assert.equal(item.units, 0);
	});
	
	if (&#39;change an item () =&amp;gt; {
	...
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;algunas-sentecias-em-assert-em&quot; tabindex=&quot;-1&quot;&gt;Algunas sentecias &lt;em&gt;assert&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Estas&lt;br /&gt;
Aquí tenéis un pequeño resumen de algunas de las sentencias que podemos usar. Recordad que todas pueden tener un último parámetro opcional que es un mensaje a mostrar en caso de que falle esta comprobación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.equal(actual, esperado): comprueba que sea el mismo valor, pero sin comprobar los tupos (usa ==, no ===)&lt;/li&gt;
&lt;li&gt;.notEqual(actual, esperado)&lt;/li&gt;
&lt;li&gt;.strictEqual, .notStrictEqual: igual pero hace la compribaciónestricta (===)&lt;/li&gt;
&lt;li&gt;.deepEqual, notDeepEqual: hace una comprobación de cada propiedad del objeto pasado&lt;/li&gt;
&lt;li&gt;.match(valor, regexp), .notMatch: comprueba si el valor cumple o no la expresión regular pasada&lt;/li&gt;
&lt;li&gt;.isAbove(actual, esperado): comprueba que actual &amp;gt; esperado&lt;/li&gt;
&lt;li&gt;.isAtLeast(actual, esperado): comprueba que actual &amp;gt;= esperado&lt;/li&gt;
&lt;li&gt;.isBelow, .isAtMost: comprueba que sea &amp;lt; o &amp;lt;= respectivamente&lt;/li&gt;
&lt;li&gt;.isTrue, .isNotTrue, .isFalse, .isNotFalse, .isNull, .isNotNull, .isUndefined, .isDefined, .isNaN, .isNotNaN, .isFunction, .isNotFunction, .isObject, .isNotObject, .isArray, .isNotArray, .isString, .isNotString, .isNumber, .isNotNumber, .isBoolean, .isNotBoolean, .isFinite&lt;/li&gt;
&lt;li&gt;.exists(valor), .notExists: comprueba que valor no sea (o sea) &lt;em&gt;null&lt;/em&gt; o &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;.typeOf(valor, tipo), .notTypeOf: indica si valor es o no del tipo indicado, que puede ser &#39;string&#39;, &#39;number&#39;, boolean&#39;, &#39;array&#39;, &#39;object&#39;, &#39;null&#39;, &#39;undefined&#39;, &#39;regexp&#39;, ...&lt;/li&gt;
&lt;li&gt;.instanceOf(objeto, Clase), .notInstanceOf: indica si un objeto es o no una instancia de la clase indicada&lt;/li&gt;
&lt;li&gt;.include(string/array/objeto, substring/elemento/propiedad:valor): comprueba si la subcadena existe en el string o el elemento se encuentra en el array (usa =&lt;mark&gt;) o si existe la propiedad o propiedades pasadas y su valor es estrictamente (&lt;/mark&gt;=) igual al indicado.&lt;/li&gt;
&lt;li&gt;.notInclude&lt;/li&gt;
&lt;li&gt;.property(objeto, propiedad), .notProperty: comprueba si el objeto posee o no la propiedad pasada&lt;/li&gt;
&lt;li&gt;.lengthOf(string/array, num): comprueba que la longitud de la cadena o el array sea la indicada&lt;/li&gt;
&lt;li&gt;.isEmpty(string/array/object), .isNotEmpty: comprueba que la cadena sea &#39;&#39;, el array [] o el objeto {}, o no.&lt;/li&gt;
&lt;li&gt;.throws(funcion, [errorLike/string], [string]): para comprobar que la función lanza un error del tipo indicado (TypeError, RangeError, ...) e incluso con el mensaje indicado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la [página de &lt;em&gt;Chai&lt;/em&gt;])&lt;a href=&quot;https://www.chaijs.com/api/assert/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.chaijs.com/api/assert/&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tests-de-funciones-asincronas-con-promesas&quot; tabindex=&quot;-1&quot;&gt;Tests de funciones asíncronas con promesas&lt;/h2&gt;
&lt;p&gt;Si hacemos llamadas asíncronas Mocha permite testearlas tras el .then o el .catch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;API de artículos&#39;, () =&amp;gt; {
	it(&#39;should return the article 3&#39;, function() {
		return getArticulo(3)
			.then(art =&amp;gt; {
				assert.instanceOf(art, Articulos);
				assert.equal(art.id, 3);
			})
	});
	it(&#39;should return an error&#39;, function() {
		return getArticulo(undefined)
			.catch(err =&amp;gt; {
				...
			})
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-hooks-em-de-mocha&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Hooks&lt;/em&gt; de Mocha&lt;/h2&gt;
&lt;p&gt;Nos permiten ejecutar código en momentos puntuales. Reciben como parámetro la función a ejecutar. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before(): el código se ejecutará una vez antes del primer test del bloque &lt;em&gt;describe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;beforeEach(): se ejecutará antes de cada test&lt;/li&gt;
&lt;li&gt;after(), afterEach(): lo mismo pero tras ejecutar los tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tests-para-la-ui&quot; tabindex=&quot;-1&quot;&gt;Tests para la UI&lt;/h2&gt;
&lt;p&gt;Necesitaremos alguna librería que nos permita contruir escenarios de navegación como &lt;em&gt;CasperJS&lt;/em&gt; y otra que imite al navegador como &lt;em&gt;PhantomJS&lt;/em&gt; (para WebKit) o &lt;em&gt;SlimerJS&lt;/em&gt; (para Gecko).&lt;/p&gt;
&lt;p&gt;Hay muchas páginas que nos enseñan a usar Mocha para testear la UI como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/ykyuen/web-ui-testing-in-nodejs--kda&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web UI Testing in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/nilayshah/2018/01/21/ui-test-automation-with-node-js-typescript-mocha-and-selenium/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UI Test Automation with Node.js, TypeScript, Mocha and Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itnext.io/automated-ui-testing-with-selenium-and-javascript-90bbe7ca13a3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI Testing with Selenium and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tariqul.islam.rony/automated-ui-ux-testing-with-puppeteer-mocha-and-chai-800cfb028ab9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI/UX Testing with Puppeteer Mocha and Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/xx-tests/" >
        </entry>
        <entry>
            <title>
                ejercicios
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/ejercicios/</id>
            <content type="html">
                &lt;h1 id=&quot;ejercicios-de-javascript&quot; tabindex=&quot;-1&quot;&gt;Ejercicios de Javascript&lt;/h1&gt;
&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a href=&quot;https://github.com/thlorenz/doctoc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejercicios-de-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejercicios de Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#1--sintaxis&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1.- Sintaxis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#11-frase&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1.1 Frase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#2--arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2.- Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#3--poo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3.- POO&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#31--productos-de-un-almac%C3%A9n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3.1.- Productos de un almacén&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#32--carro-de-compra&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3.2.- Carro de compra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#4--dom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;4.- DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#5--bom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;5.- BOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#6--eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;6.- Eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#7--objetos-globales&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;7.- Objetos globales&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#8--ajax&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;8.- Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#9--apis&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;9.- APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h2 id=&quot;1-sintaxis&quot; tabindex=&quot;-1&quot;&gt;1.- Sintaxis&lt;/h2&gt;
&lt;h3 id=&quot;1-1-frase&quot; tabindex=&quot;-1&quot;&gt;1.1 Frase&lt;/h3&gt;
&lt;p&gt;Vamos a pedir al usuario que introduzca una frase y a continuación mostraremos en la consola:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el número de letras y de palabras que tiene&lt;/li&gt;
&lt;li&gt;la frase en mayúsculas&lt;/li&gt;
&lt;li&gt;la frase con la primera letra de cada palabra en mayúsculas&lt;/li&gt;
&lt;li&gt;la frase escrita con las letras al revés&lt;/li&gt;
&lt;li&gt;la frase escrita con las palabras al revés&lt;/li&gt;
&lt;li&gt;si es o no un palíndromo (si se lee igual al revés) pero omitiendo espacios en blanco y sin diferenciar mayúsculas y minúsculas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ej.: con la frase introducida “&lt;em&gt;La ruta nos aporto otro paso natural&lt;/em&gt;” se mostraría&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;36 letras y 7 palabras&lt;br /&gt;
LA RUTA NOS APORTO OTRO PASO NATURAL&lt;br /&gt;
La Ruta Nos Aporto Otro Paso Natural&lt;br /&gt;
larutan osap orto otropa son atur aL&lt;br /&gt;
natural paso otro aporto nos ruta La&lt;br /&gt;
Sí es un palíndromo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Intenta usar en cada caso el bucle más adecuado. Las funciones &lt;code&gt;split&lt;/code&gt; y &lt;code&gt;join&lt;/code&gt; (lo opuesto) de String y Array nos pueden ayudar a algunas cosas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RECUERDA&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el código deberá estar en un fichero externo y se incluirá al final del body&lt;/li&gt;
&lt;li&gt;debes comentarlo para tener claro qué hace&lt;/li&gt;
&lt;li&gt;tanto el código JS como el HTML deben estar correctamente indentados&lt;/li&gt;
&lt;li&gt;ten en cuenta los datos que pueden “estropearnos” el programa: introducir un dato de un tipo que no te esperas, omitir algún parámetro, ...&lt;/li&gt;
&lt;li&gt;usa las recomendaciones indicadas: &#39;use strict&#39;, ...&lt;/li&gt;
&lt;li&gt;el código debe ser lo más limpio y claro posible, sin variables o código innecesario&lt;/li&gt;
&lt;li&gt;siempre es bueno refactorizar el código: cuando nuestro programa ya funciona bien le damos un “repaso” para mejorar su claridad (y lo volvemos a probar)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-arrays&quot; tabindex=&quot;-1&quot;&gt;2.- Arrays&lt;/h2&gt;
&lt;p&gt;Vamos a hacer un programa que va pidiendo al usuario que introduzca las notas de un examen y las va guardando en un array. El usuario puede introducir una sóla nota o varias separadas por un guión (ej. 4,5 - 6 - 8,75) y se continuará pidiendo notas al usuario hasta que éste pulse &#39;Cancelar&#39;. Recuerda que en Javascript el símbolo decimal es el punto pero el usuario puede introducir decimales con la coma.&lt;/p&gt;
&lt;p&gt;Cada nota introducida se almacenará en un array y una vez que estén todas se mostrará por la consola:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el array con los datos suministrados por el usuario&lt;/li&gt;
&lt;li&gt;el array &amp;quot;limpiado&amp;quot;: quitaremos del mismo todo lo que no sean números o no estén entre 0 y 10&lt;/li&gt;
&lt;li&gt;el nº total de aprobados y sus notas&lt;/li&gt;
&lt;li&gt;el nº total de suspensos y sus notas&lt;/li&gt;
&lt;li&gt;la nota del 1º suspenso y su posición en el array&lt;/li&gt;
&lt;li&gt;la nota media del examen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siempre que sea posible utilizaremos métodos de arrays en lugar de bucles.&lt;/p&gt;
&lt;h2 id=&quot;3-poo&quot; tabindex=&quot;-1&quot;&gt;3.- POO&lt;/h2&gt;
&lt;h3 id=&quot;3-1-productos-de-un-almacen&quot; tabindex=&quot;-1&quot;&gt;3.1.- Productos de un almacén&lt;/h3&gt;
&lt;p&gt;En este ejercicio vamos a trabajar con los productos de un almacén, para lo que crearemos las clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Product&lt;/em&gt;&lt;/strong&gt;: cada producto será un objeto con las propiedades &lt;em&gt;cod&lt;/em&gt;, &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;price&lt;/em&gt; y &lt;em&gt;units&lt;/em&gt; (las unidades que tenemos de ese producto). Si no le pasamos unidades al constructor su número por defecto será 1. Esta clase tendrá los siguientes métodos:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;changeUnits&lt;/em&gt;&lt;/strong&gt;: recibe la cantidad a aumentar (positiva o negativa) e incrementa (o decrementa) las unidades en la cantidad recibida. Si se intentan restar más unidades de las que hay no hace nada y devuelve &lt;em&gt;false&lt;/em&gt; y en otro caso cambia las unidades y devuelve &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;productImport&lt;/em&gt;&lt;/strong&gt;: devuelve el importe total del producto (su precio multiplicado por el nº de unidades)&lt;/li&gt;
&lt;li&gt;además si se intenta imprimir el producto se mostrará su descripción, sus unidades entre paréntesis, su precio y el importe total, como en el siguiente ejemplo: &lt;code&gt;TV Samsung MP45 (5): 235,95 €/u =&amp;gt; 1179,75 €&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Store&lt;/em&gt;&lt;/strong&gt;: es el almacén de productos y tendrá las propiedades &lt;em&gt;id&lt;/em&gt; (código numérico que nos pasan al crear el almacén) y &lt;em&gt;products&lt;/em&gt; (array de productos que al crearlo estará vacío) y los métodos:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;findProduct&lt;/em&gt;&lt;/strong&gt;: recibe un código de producto y devuelve el producto que tiene dicho código o &lt;em&gt;null&lt;/em&gt; si ese código no existe en el almacén&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;addProduct&lt;/em&gt;&lt;/strong&gt;: recibe como parámetro el código y unidades a añadir y, opcionalmente, el nombre y precio (si se trata de un producto nuevo) y lo añade al almacén. Si ya existe el código suma al producto las unidades indicadas y si no existe crea un nuevo producto en el array. Devuelve &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;delProduct&lt;/em&gt;&lt;/strong&gt;: recibe como parámetro el código y las unidades a quitar de un producto y lo resta del almacén. Devuelve &lt;em&gt;true&lt;/em&gt; a menos que haya menos unidades de las que quieren restarse, en cuyo caso no hace nada y devuelve &lt;em&gt;false&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;totalImport&lt;/em&gt;&lt;/strong&gt;: devuelve el valor total de los productos del almacén&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;orderByDescrip&lt;/em&gt;&lt;/strong&gt;: devuelve el array de productos ordenado por el nombre&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;orderByUnits&lt;/em&gt;&lt;/strong&gt;: devuelve el array de productos ordenado por unidades descendente&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para probar que funciona correctamente ejecutaremos en nuestro fichero main.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let almacen=new Store(1);
almacen.addProduct(1, 4, &#39;TV Samsung MP45&#39;, 345.95);
almacen.addProduct(2, 8, &#39;Portátil Acer Travelmate 200&#39;, 245.95);
almacen.addProduct(3, 15, &#39;Impresora Epson LX-455&#39;, 45.95);
almacen.addProduct(4, 25, &#39;USB Kingston 16GB&#39;, 5.95);

console.log(&#39;LISTADO DEL ALMACÉN&#39;);
almacen.products.forEach(prod=&amp;gt;console.log(prod.toString()));

almacen.addProduct(5, 15, &#39;USB Kingston 64GB&#39;, 15.95);
almacen.delProduct(3, 11);
almacen.delProduct(3, 7);
almacen.addProduct(1, 9);

console.log(&#39;LISTADO DEL ALMACÉN&#39;);
almacen.products.forEach(prod=&amp;gt;console.log(prod.toString()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además en nuestro main.js haremos que se muestren por consola todos los productos de los que tenemos menos de 5 unidades en stock o cuyo importe es inferior a 150 €.&lt;/p&gt;
&lt;h3 id=&quot;3-2-carro-de-compra&quot; tabindex=&quot;-1&quot;&gt;3.2.- Carro de compra&lt;/h3&gt;
&lt;p&gt;Vamos a permitir que los usuarios hagan compras on-line para lo que crearemos una clase para los carritos de la compra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Cart&lt;/em&gt;&lt;/strong&gt;: esta clase la usaremos para crear carritos de compra con los productos a comprar. Es como la clase &lt;em&gt;Store&lt;/em&gt; pero tiene además la propiedad &lt;em&gt;user&lt;/em&gt; con el identificador del usuario que hace la compra y que nos lo pasarán al crear el carrito. Respecto a sus métodos son igual que los de la clase &lt;em&gt;Store&lt;/em&gt; pero:
&lt;ul&gt;
&lt;li&gt;el método &lt;em&gt;delProduct&lt;/em&gt; eliminará el producto del array de productos si sus unidades son 0&lt;/li&gt;
&lt;li&gt;tendrá dos nuevos métodos &lt;strong&gt;&lt;em&gt;addToCart&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;removeFromCart&lt;/em&gt;&lt;/strong&gt; que nos permitan añadir y quitar productos del carro y que recibirán como parámetros el código del producto y las unidades a añadir o quitar.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTA: la variable del almacén será una variable global en el fichero main.js&lt;/p&gt;
&lt;h2 id=&quot;4-dom&quot; tabindex=&quot;-1&quot;&gt;4.- DOM&lt;/h2&gt;
&lt;p&gt;Vamos a mostrar en una tabla los products de nuestro almacén. Cada fila corresponderá a un producto y se mostrará su código, nombre, unidades, precio por unidad e importe. Debajo de la tabla mostraremos el importe total del almacén. En el fichero &lt;em&gt;index.html&lt;/em&gt; crearemos la tabla vacía y el párrafo para poner el importe total.&lt;/p&gt;
&lt;p&gt;Para simplificar nuestro código a la clase &lt;em&gt;Product&lt;/em&gt; le añadiremos el método &lt;strong&gt;&lt;em&gt;toTR&lt;/em&gt;&lt;/strong&gt; que devolverá el código HTML para mostrar una fila con los datos del producto y a la clase &lt;em&gt;Store&lt;/em&gt; le añadiremos el método &lt;strong&gt;&lt;em&gt;toHTML&lt;/em&gt;&lt;/strong&gt; que devolverá el código HTML que insertaremos dentro de la tabla del almacén.&lt;/p&gt;
&lt;p&gt;Además cada vez que creemos un carrito se mostrará en la página una nueva UL con su código y su usuario. Cada artículo del carro será una LI de la UL y al final habrá una LI con el importe total del carro. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carro 2 - juan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 x TV Samsung MP45 (345.95 €) = 345.95 €&lt;/li&gt;
&lt;li&gt;3 x USB Kingston 16GB (5.95 €) = 17.85 €&lt;/li&gt;
&lt;li&gt;Importe total: 353.80 €&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;NOTA: podemos hacer algo para que sea más fácil crear los elementos del DOM tal y como hems hecho para crear la tabla???.&lt;/p&gt;
&lt;p&gt;OPCIONAL: mejorar la presentación usando bootstrap. Pondremos la tabla del almacén y debajo los carritos, 2 por fila.&lt;/p&gt;
&lt;h2 id=&quot;5-bom&quot; tabindex=&quot;-1&quot;&gt;5.- BOM&lt;/h2&gt;
&lt;h2 id=&quot;6-eventos&quot; tabindex=&quot;-1&quot;&gt;6.- Eventos&lt;/h2&gt;
&lt;p&gt;Botones y enlaces para el ejercicio del almacén&lt;/p&gt;
&lt;h2 id=&quot;7-objetos-globales&quot; tabindex=&quot;-1&quot;&gt;7.- Objetos globales&lt;/h2&gt;
&lt;p&gt;Fechas, ...&lt;/p&gt;
&lt;h2 id=&quot;8-ajax&quot; tabindex=&quot;-1&quot;&gt;8.- Ajax&lt;/h2&gt;
&lt;p&gt;Leer y guardar el almacén (y los carritos?)&lt;/p&gt;
&lt;h2 id=&quot;9-ap-is&quot; tabindex=&quot;-1&quot;&gt;9.- APIs&lt;/h2&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/ejercicios/" >
        </entry>
        <entry>
            <title>
                TDD-mocha
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/tdd-mocha/</id>
            <content type="html">
                &lt;h1 id=&quot;desarrollo-guiado-por-pruebas-tdd&quot; tabindex=&quot;-1&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/h1&gt;
&lt;p&gt;Es una forma de programar que consiste en escribir primero las pruebas que deba pasar el código (Test Dirve Development) y después refactorizarlo (&lt;a href=&quot;https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Refactoring&lt;/a&gt;). Para escribir las pruebas generalmente se utilizan las &lt;a href=&quot;https://es.wikipedia.org/wiki/Prueba_unitaria&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pruebas unitarias&lt;/a&gt; (unit test en inglés).&lt;/p&gt;
&lt;p&gt;El ciclo de programación usando TDD tiene tres fases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fase &lt;em&gt;roja&lt;/em&gt;: escribimos el test que cumpla los requerimientos y lo pasamos. Fallará ya que nuestro código no pasa el est (de hecho la primera vez no tenemos ni código)&lt;/li&gt;
&lt;li&gt;Fase &lt;em&gt;verde&lt;/em&gt;: conseguimos que nuestro código pase el test. Ya funciona aunque seguramente no estará muy bien escrito&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactorización&lt;/em&gt;: mejoramos nuestro código&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente y seguidamente se refactoriza el código escrito. El propósito del desarrollo guiado por pruebas es lograr un código limpio que funcione. La idea es que los requisitos sean traducidos a pruebas, de este modo, cuando las pruebas pasen se garantizará que el software cumple con los requisitos que se han establecido.&lt;/p&gt;
&lt;p&gt;Para ello debemos en primer lugar se debe definir una lista de requisitos y después se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elegir un requisito: Se elige de una lista el requisito que se cree que nos dará mayor conocimiento del problema y que a la vez sea fácilmente implementable.&lt;/li&gt;
&lt;li&gt;Escribir una prueba: Se comienza escribiendo una prueba para el requisito. Para ello el programador debe entender claramente las especificaciones y los requisitos de la funcionalidad que está por implementar. Este paso fuerza al programador a tomar la perspectiva de un cliente considerando el código a través de sus interfaces.&lt;/li&gt;
&lt;li&gt;Verificar que la prueba falla: Si la prueba no falla es porque el requisito ya estaba implementado o porque la prueba es errónea.&lt;/li&gt;
&lt;li&gt;Escribir la implementación: Escribir el código más sencillo que haga que la prueba funcione. Se usa la expresión &amp;quot;Déjelo simple&amp;quot; (&amp;quot;Keep It Simple, Stupid!&amp;quot;), conocida como principio KISS.&lt;/li&gt;
&lt;li&gt;Ejecutar las pruebas automatizadas: Verificar si todo el conjunto de pruebas funciona correctamente.&lt;/li&gt;
&lt;li&gt;Eliminación de duplicación: El paso final es la refactorización, que se utilizará principalmente para eliminar código duplicado. Se hace un pequeño cambio cada vez y luego se corren las pruebas hasta que funcionen.&lt;/li&gt;
&lt;li&gt;Actualización de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado. Asimismo se agregan requisitos que se hayan visto como necesarios durante este ciclo y se agregan requisitos de diseño (P. ej que una funcionalidad esté desacoplada de otra).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tener un único repositorio universal de pruebas facilita complementar TDD con otra práctica recomendada por los procesos ágiles de desarrollo, la &amp;quot;Integración Continua&amp;quot;. Integrar continuamente nuestro trabajo con el del resto del equipo de desarrollo permite ejecutar toda batería de pruebas y así descubrir si nuestra última versión es compatible con el resto del sistema. Es recomendable y menos costoso corregir pequeños problemas cada pocas horas que enfrentarse a problemas enormes cerca de la fecha de entrega fijada.&lt;/p&gt;
&lt;p&gt;(Fuente &lt;a href=&quot;https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;usar-tdd-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Usar TDD en Javascript&lt;/h2&gt;
&lt;p&gt;Lo más sencillo es usar alguna librería como &lt;strong&gt;Mocha&lt;/strong&gt;. Se trata de un gramework que se ejecuta sobre &lt;em&gt;Node.js&lt;/em&gt; y permite crear tests tanto síncronos como asíncronos. Para usarlo necesitaremos tener &lt;strong&gt;npm&lt;/strong&gt; instalado. Luego creamos una carpeta para nuestro proyecto y dentro ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g mocha    # lo instalamos globalmente para que esté disponible para todos los proyectos
npm init                # crea en el directorio el package.json
npm install chai     # en vez de chai podríamos usar assert, should, etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La librería &lt;em&gt;Chai&lt;/em&gt; permite 3 tipos de sentencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts&lt;/li&gt;
&lt;li&gt;expects&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros vamos a usar &lt;em&gt;asserts&lt;/em&gt; por lo que es lo que deberemos importar en los ficheros de tests.&lt;/p&gt;
&lt;p&gt;Dentro de nuestro proyecto crearemos una carpeta donde guardaremos los ficheros JS de los tests (podemos llamarla &#39;&lt;em&gt;tests&lt;/em&gt;&#39;) y en cada fichero importaremos &lt;em&gt;chai&lt;/em&gt; y los ficheros necesarios. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;tests/store.specs.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const Store = require(&#39;../store.class.js&#39;);

describe(&#39;Store&#39;, () =&amp;gt; {

	it(&#39;should had an integer id&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.id, &#39;integer&#39;, &#39;La id no es un entero&#39;)
	});

	it(&#39;should had an empty array of products&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.products, &#39;array&#39;, &#39;Products no es un array&#39;)
		assert.lengthOf(foo.products, 0, &#39;Products no es un array vacío&#39;)
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder importar un módulo con &lt;em&gt;require&lt;/em&gt; debemos haberlo exprtado previamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;store.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Store {
    constructor (id) {
        this.id=id;
        this.products=[];
    }
    ...
}
 module.exports = Store;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ejecutar todos los tests de nuestro proyecto ejecutaremos desde la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si sólo queremos pasar uno lo indicamos en el comando: &lt;code&gt;mocha tests/store.specs.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos hacer que &lt;em&gt;mocha&lt;/em&gt; escuche en segundo plano y se ejecute automáticamente cada vez que hacemos algún cambio en un fichero con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;el-fichero-de-tests&quot; tabindex=&quot;-1&quot;&gt;El fichero de tests&lt;/h2&gt;
&lt;p&gt;Debemos importar le librería &lt;em&gt;Chai&lt;/em&gt; y el fichero con el código a testear como hemov visto antes. El fichero con el código que debe exportar la clase o función que contiene con &lt;code&gt;module.exports&lt;/code&gt;. Si queremos exportar varias funciones exportaremos un objeto con todas ellas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;module.exports = {
    addItem,
    removeItem
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras importar los ficheros pondremos el &lt;em&gt;describe&lt;/em&gt; y los bloques &lt;em&gt;it&lt;/em&gt; que queramos y dentro de cada uno los &lt;em&gt;aasert&lt;/em&gt; necesarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const index = require(&#39;../index.js&#39;);

describe(&#39;manage items&#39;, () =&amp;gt; {
	it(&#39;add a new item&#39;, function() {
		let myItem = ...;
		assert.typeOf(item, &#39;object&#39;, &#39;No crea un objeto sino &#39;+typeof(item) );
		assert.equal(item.units, 0);
	});
	
	if (&#39;change an item () =&amp;gt; {
	...
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;algunas-sentecias-em-assert-em&quot; tabindex=&quot;-1&quot;&gt;Algunas sentecias &lt;em&gt;assert&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Estas&lt;br /&gt;
Aquí tenéis un pequeño resumen de algunas de las sentencias que podemos usar. Recordad que todas pueden tener un último parámetro opcional que es un mensaje a mostrar en caso de que falle esta comprobación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.equal(actual, esperado): comprueba que sea el mismo valor, pero sin comprobar los tupos (usa ==, no ===)&lt;/li&gt;
&lt;li&gt;.notEqual(actual, esperado)&lt;/li&gt;
&lt;li&gt;.strictEqual, .notStrictEqual: igual pero hace la compribaciónestricta (===)&lt;/li&gt;
&lt;li&gt;.deepEqual, notDeepEqual: hace una comprobación de cada propiedad del objeto pasado&lt;/li&gt;
&lt;li&gt;.match(valor, regexp), .notMatch: comprueba si el valor cumple o no la expresión regular pasada&lt;/li&gt;
&lt;li&gt;.isAbove(actual, esperado): comprueba que actual &amp;gt; esperado&lt;/li&gt;
&lt;li&gt;.isAtLeast(actual, esperado): comprueba que actual &amp;gt;= esperado&lt;/li&gt;
&lt;li&gt;.isBelow, .isAtMost: comprueba que sea &amp;lt; o &amp;lt;= respectivamente&lt;/li&gt;
&lt;li&gt;.isTrue, .isNotTrue, .isFalse, .isNotFalse, .isNull, .isNotNull, .isUndefined, .isDefined, .isNaN, .isNotNaN, .isFunction, .isNotFunction, .isObject, .isNotObject, .isArray, .isNotArray, .isString, .isNotString, .isNumber, .isNotNumber, .isBoolean, .isNotBoolean, .isFinite&lt;/li&gt;
&lt;li&gt;.exists(valor), .notExists: comprueba que valor no sea (o sea) &lt;em&gt;null&lt;/em&gt; o &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;.typeOf(valor, tipo), .notTypeOf: indica si valor es o no del tipo indicado, que puede ser &#39;string&#39;, &#39;number&#39;, boolean&#39;, &#39;array&#39;, &#39;object&#39;, &#39;null&#39;, &#39;undefined&#39;, &#39;regexp&#39;, ...&lt;/li&gt;
&lt;li&gt;.instanceOf(objeto, Clase), .notInstanceOf: indica si un objeto es o no una instancia de la clase indicada&lt;/li&gt;
&lt;li&gt;.include(string/array/objeto, substring/elemento/propiedad:valor): comprueba si la subcadena existe en el string o el elemento se encuentra en el array (usa =&lt;mark&gt;) o si existe la propiedad o propiedades pasadas y su valor es estrictamente (&lt;/mark&gt;=) igual al indicado.&lt;/li&gt;
&lt;li&gt;.notInclude&lt;/li&gt;
&lt;li&gt;.property(objeto, propiedad), .notProperty: comprueba si el objeto posee o no la propiedad pasada&lt;/li&gt;
&lt;li&gt;.lengthOf(string/array, num): comprueba que la longitud de la cadena o el array sea la indicada&lt;/li&gt;
&lt;li&gt;.isEmpty(string/array/object), .isNotEmpty: comprueba que la cadena sea &#39;&#39;, el array [] o el objeto {}, o no.&lt;/li&gt;
&lt;li&gt;.throws(funcion, [errorLike/string], [string]): para comprobar que la función lanza un error del tipo indicado (TypeError, RangeError, ...) e incluso con el mensaje indicado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la [página de &lt;em&gt;Chai&lt;/em&gt;])&lt;a href=&quot;https://www.chaijs.com/api/assert/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.chaijs.com/api/assert/&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tests-de-funciones-asincronas-con-promesas&quot; tabindex=&quot;-1&quot;&gt;Tests de funciones asíncronas con promesas&lt;/h2&gt;
&lt;p&gt;Si hacemos llamadas asíncronas Mocha permite testearlas tras el .then o el .catch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;API de artículos&#39;, () =&amp;gt; {
	it(&#39;should return the article 3&#39;, function() {
		return getArticulo(3)
			.then(art =&amp;gt; {
				assert.instanceOf(art, Articulos);
				assert.equal(art.id, 3);
			})
	});
	it(&#39;should return an error&#39;, function() {
		return getArticulo(undefined)
			.catch(err =&amp;gt; {
				...
			})
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-hooks-em-de-mocha&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Hooks&lt;/em&gt; de Mocha&lt;/h2&gt;
&lt;p&gt;Nos permiten ejecutar código en momentos puntuales. Reciben como parámetro la función a ejecutar. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before(): el código se ejecutará una vez antes del primer test del bloque &lt;em&gt;describe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;beforeEach(): se ejecutará antes de cada test&lt;/li&gt;
&lt;li&gt;after(), afterEach(): lo mismo pero tras ejecutar los tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tests-para-la-ui&quot; tabindex=&quot;-1&quot;&gt;Tests para la UI&lt;/h2&gt;
&lt;p&gt;Necesitaremos alguna librería que nos permita contruir escenarios de navegación como &lt;em&gt;CasperJS&lt;/em&gt; y otra que imite al navegador como &lt;em&gt;PhantomJS&lt;/em&gt; (para WebKit) o &lt;em&gt;SlimerJS&lt;/em&gt; (para Gecko).&lt;/p&gt;
&lt;p&gt;Hay muchas páginas que nos enseñan a usar Mocha para testear la UI como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/ykyuen/web-ui-testing-in-nodejs--kda&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web UI Testing in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/nilayshah/2018/01/21/ui-test-automation-with-node-js-typescript-mocha-and-selenium/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UI Test Automation with Node.js, TypeScript, Mocha and Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itnext.io/automated-ui-testing-with-selenium-and-javascript-90bbe7ca13a3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI Testing with Selenium and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tariqul.islam.rony/automated-ui-ux-testing-with-puppeteer-mocha-and-chai-800cfb028ab9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI/UX Testing with Puppeteer Mocha and Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/tdd-mocha/" >
        </entry>
        <entry>
            <title>
                README
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/readme/</id>
            <content type="html">
                &lt;h1 id=&quot;bloque-1-el-lenguaje-javascript&quot; tabindex=&quot;-1&quot;&gt;BLOQUE 1 - El lenguaje Javascript&lt;/h1&gt;
&lt;p&gt;En este primer bloque vamos a conocer el lenguaje Javascript. El bloque se divide en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n-a-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/01-sintaxis.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1-Sintaxis&lt;/a&gt;: Variables. Funciones. Estructuras y bucles. Tipos de datos. Buenas prácticas
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/tests.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a los test en Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/02.1-objetos.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2.1-Objetos&lt;/a&gt;: Introducción a los objetos en Javascript&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/02.2-arrays.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2.2-Arrays&lt;/a&gt;: Métodos. &lt;em&gt;Functional Programming&lt;/em&gt;. Referencia vs copia. Rest y Spread. Desestructuración de arrays. Map. Set
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/03.1-vite.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vite&lt;/a&gt;: Cómo usar vite&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/03.1-webpack.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webpack&lt;/a&gt;: Cómo usar webpack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/03-oop.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3-Programación Orientada a Objetos&lt;/a&gt;: Introducción. Clases. POO en JS5&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/05-BOM.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;4-Browser Object Model - BOM&lt;/a&gt;: Timers. Objetos del BOM (window,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/09-ajax.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;5-Ajax. Promesas. SPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/04-DOM.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;6-Document Object Model - DOM&lt;/a&gt;: Acceso a nodos. Acceso desde otros nodos. Manipular el árbol DOM. Atributos de los nodos
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/04.1-MVC.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;6.1-MVC&lt;/a&gt;: Cómo usaremos el patrón MVC para crear la UI de nuestra aplicación&lt;br /&gt;
location, history, otros objetos)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/06-eventos.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;7-Eventos&lt;/a&gt;: Escuchadores. Tipos de eventos. Los objetos &lt;em&gt;this&lt;/em&gt; y &lt;em&gt;event&lt;/em&gt;. Propagación de eventos (&lt;em&gt;bubbling&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07-globales.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;8-Objetos nativos&lt;/a&gt;: Funciones globales. Objetos nativos del lenguaje: Math, Date, RegExp, ...&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/08-forms.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;9-Validación de formularios&lt;/a&gt;: Validación de formularios. La API de validación de formularios. Expresiones regulares&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/10-apis.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;10-APIs HTML5&lt;/a&gt;: Drag and drop. API Storage. Geolocalización. API de Google Maps&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/11-mas.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;11-Más cosas a aprender...&lt;/a&gt;: WebComponents. WebSockets. WebWorkers. Typescript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/12-tests.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;12-Tests&lt;/a&gt;: Testear JS con Jest&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;introduccion-a-javascript&quot; tabindex=&quot;-1&quot;&gt;Introducción a Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bloque-1---el-lenguaje-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;BLOQUE 1 - El lenguaje Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n-a-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#un-poco-de-historia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Un poco de historia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soporte-en-los-navegadores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Soporte en los navegadores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#herramientas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Herramientas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#la-consola-del-navegador&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;La consola del navegador&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#editores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Editores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#editores-on-line&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Editores on-line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#incluir-javascript-en-una-p%C3%A1gina-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Incluir javascript en una página web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mostrar-informaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mostrar información&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bibliograf%C3%ADa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bibliografía&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En las páginas web el elemento fundamental es el fichero HTML con la información a mostrar en el navegador. Posteriormente surgió la posibilidad de &amp;quot;decorar&amp;quot; esa información para mejorar su apariencia, lo que dio lugar al CSS. Y también se pensó en dar dinamismo a las páginas y apareció el lenguaje Javascript.&lt;/p&gt;
&lt;p&gt;En un primer momento las 3 cosas estaban mezcladas en el fichero HTML pero eso complicaba bastante el poder leer esa página a la hora de mantenerla por lo que se pensó en separar los 3 elementos básicos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML: se encarga de estructurar la página y proporciona su información, pero es una información estática&lt;/li&gt;
&lt;li&gt;CSS: es lo que da forma a dicha información, permite mejorar su apariencia, permite que se adapte a distintos dispositivos, ...&lt;/li&gt;
&lt;li&gt;Javascript: es el que da vida a un sitio web y le permite reaccionar a las acciones del usuario&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto nuestras aplicaciones tendrán estos 3 elementos y lo recomendable es que estén separados en distintos ficheros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El HTML lo tendremos habitualmente en un fichero index.html, normalmente en una carpeta llamada &lt;em&gt;public&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;El CSS lo tendremos en uno o más ficheros con extensión &lt;em&gt;.css&lt;/em&gt; dentro de una carpeta llamada &lt;em&gt;styles&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;EL JS estará en ficheros con extensión &lt;em&gt;.js&lt;/em&gt; en un directorio llamado &lt;em&gt;scripts&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las características principales de Javascript son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es un lenguaje interpretado, no compilado&lt;/li&gt;
&lt;li&gt;se ejecuta en el lado cliente (en un navegador web), aunque hay implementaciones como NodeJS para el lado servidor&lt;/li&gt;
&lt;li&gt;es un lenguaje orientado a objetos (podemos crear e isntanciar objetos y usar objetos predefinidos del lenguaje) pero basado en prototipos (por debajo un objeto es un prototipo y nosotros podemos crear objetos sin instanciarlos, haciendo copias del prototipo)&lt;/li&gt;
&lt;li&gt;se trata de un lenguaje débilmente tipado, con tipificación dinámica (no se indica el tipo de datos de una variable al declararla e incluso puede cambiarse)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo usaremos para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cambiar el contenido de la página&lt;/li&gt;
&lt;li&gt;Cambiar los atributos de un elemento&lt;/li&gt;
&lt;li&gt;Cambiar la apariencia de algo&lt;/li&gt;
&lt;li&gt;Validar datos de formularios&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sin embargo, por razones de seguridad, Javascript no nos permite hacer cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceder al sistema de ficheros del cliente&lt;/li&gt;
&lt;li&gt;Capturar datos de un servidor (puede pedirlo y el servidor se los servirá, o no)&lt;/li&gt;
&lt;li&gt;Modificar las preferencias del navegador&lt;/li&gt;
&lt;li&gt;Enviar e-mails de forma invisible o crear ventanas sin que el usuario lo vea&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;un-poco-de-historia&quot; tabindex=&quot;-1&quot;&gt;Un poco de historia&lt;/h3&gt;
&lt;p&gt;Javascript es una implementación del lenguaje &lt;strong&gt;ECMAScript&lt;/strong&gt; (el estándar que define sus características). El lenguaje surgió en 1997 y todos los navegadores a partir de 2012 soportan al menos la versión &lt;strong&gt;ES5.1&lt;/strong&gt; completamente. En 2015 se lanzó la 6ª versión, inicialmente llamada &lt;strong&gt;ES6&lt;/strong&gt; y posteriormente renombrada como &lt;strong&gt;ES2015&lt;/strong&gt;, que introdujo importantes mejoras en el lenguaje y que es la versión mínima que usaremos nosotros. Desde entonces van saliendo nuevas versiones cada año que introducen cambios pequeños. La última es la &lt;strong&gt;ES2024&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Las principales mejoras que introdujo ES2015 son: clases de objetos, let, for..of, Map, Set, Arrow functions, Promesas, spread, destructuring, ...&lt;/p&gt;
&lt;h3 id=&quot;soporte-en-los-navegadores&quot; tabindex=&quot;-1&quot;&gt;Soporte en los navegadores&lt;/h3&gt;
&lt;p&gt;Los navegadores no se adaptan inmediatamente a las nuevas versiones de Javascript por lo que puede ser un problema usar una versión muy moderna ya que puede haber partes de los programas que no funcionen en los navegadores de muchos usuarios. En la página de &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Kangax&lt;/em&gt;&lt;/a&gt; podemos ver la compatibilidad de los diferentes navegadores con las distintas versiones de Javascript. También podemos usar &lt;a href=&quot;https://caniuse.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;CanIUse&lt;/em&gt;&lt;/a&gt; para buscar la compatibilidad de un elemento concreto de Javascript así como de HTML5 o CSS3.&lt;/p&gt;
&lt;p&gt;Si queremos asegurar la máxima compatibilidad debemos usar la versión ES5 (pero nos perdemos muchas mejoras del lenguaje) o mejor, usar la ES6 (o posterior) y después &lt;em&gt;transpilar&lt;/em&gt; nuestro código a la version ES5. De esto se ocupan los &lt;em&gt;transpiladores&lt;/em&gt; (&lt;strong&gt;Babel&lt;/strong&gt; es el más conocido) por lo que no suponen un esfuerzo extra para el programador.&lt;/p&gt;
&lt;h2 id=&quot;herramientas&quot; tabindex=&quot;-1&quot;&gt;Herramientas&lt;/h2&gt;
&lt;h3 id=&quot;la-consola-del-navegador&quot; tabindex=&quot;-1&quot;&gt;La consola del navegador&lt;/h3&gt;
&lt;p&gt;Es la herramienta que más nos va a ayudar a la hora de depurar nuestro código. Abrimos las herramientas para el desarrollador (en Chrome y Firefox pulsando la tecla &lt;em&gt;F12&lt;/em&gt;) y vamos a la pestaña &lt;em&gt;Consola&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;![Consola](/img/user/notas/Javascript Teoria Batoi/img/Consola.png)&lt;/p&gt;
&lt;p&gt;Allí vemos mensajes del navegador como errores y advertencias que genera el código y todos los mensajes que pongamos en el código para ayudarnos a depurarlo (usando los comandos &lt;strong&gt;console.log&lt;/strong&gt; y &lt;strong&gt;console.error&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Además en ella podemos escribir instrucciones Javascript que se ejecutarán mostrando su resultado. También la usaremos para mostrar el valor de nuestras variables y para probar código que, una vez que funcione correctamente, lo copiaremos a nuestro programa.&lt;/p&gt;
&lt;p&gt;Podemos obtener ayuda sobre el funcionamiento de la consola en la web de &lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mozilla&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: abre la consola y prueba las funciones &lt;em&gt;alert&lt;/em&gt;, &lt;em&gt;confirm&lt;/em&gt; y &lt;em&gt;prompt&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Siempre depuraremos los programas desde aquí (ponemos puntos de interrupción, vemos el valor de las variables, ...).&lt;/p&gt;
&lt;p&gt;![Consola - depurar](/img/user/notas/Javascript Teoria Batoi/img/Consola-depurar.png)&lt;/p&gt;
&lt;p&gt;Es fundamental dedicar tiempo a saber utilizar la consola porque nos facilitará enormemente la tarea de depurar nuestro código. Podéis encontrar infinidad de páginas en internet donde nos explican en profundidad el uso de la consola, como &lt;a href=&quot;https://es.javascript.info/debugging-chrome&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Debugging en el navegador&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;editores&quot; tabindex=&quot;-1&quot;&gt;Editores&lt;/h3&gt;
&lt;p&gt;Podemos usar el que más nos guste, desde editores tan simples como NotePad++ hasta complejos IDEs. La mayoría soportan las últimas versiones de la sintaxis de Javascript (Netbeans, Eclipse, Visual Studio, Sublime, Atom, Kate, Notepad++, ...). Yo voy a utilizar &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/a&gt; o &lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;Sublime text&lt;/strong&gt;&lt;/a&gt; por su sencillez y por los plugins que incorpora para hacer más cómodo mi trabajo. En &lt;em&gt;Visual Studio Code&lt;/em&gt; instalaré algún &lt;em&gt;plugin&lt;/em&gt; como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SonarLint: es más que un &lt;em&gt;linter&lt;/em&gt; y me informa de todo tipo de errores pero también del código que no cumple las recomendaciones (incluye gran número de reglas). Marca el código mientras lo escribimos y además podemos ver todas las advertencias en el panel de Problemas (Ctrl+&lt;/li&gt;
&lt;li&gt;Vetur: lo instalaremos en el segundo bloque. Necesario para trabajar con los ficheros de &lt;em&gt;Vue&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;editores-on-line&quot; tabindex=&quot;-1&quot;&gt;Editores on-line&lt;/h3&gt;
&lt;p&gt;Son muy útiles porque permiten ver el código y el resultado a la vez. Normalmente tienen varias pestañas o secciones de la página donde poner el código HTML, CSS yJavascript y ver su resultado.&lt;/p&gt;
&lt;p&gt;Algunos de los más conocidos son &lt;a href=&quot;https://codesandbox.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Codesandbox&lt;/a&gt;, &lt;a href=&quot;https://jsfiddle.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Fiddle&lt;/a&gt;, &lt;a href=&quot;https://plnkr.co/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Plunker&lt;/a&gt;, &lt;a href=&quot;https://codepen.io/pen/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CodePen&lt;/a&gt;, ...aunque hay muchos más.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ejemplo de &#39;Hello World&#39; en Fiddle:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/afabbro/vrVAP/embed/&quot;&gt;&lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;Ejemplo de &#39;Hello World&#39; en CodePen:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;kscatcensus&quot; data-slug-hash=&quot;XedLvZ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Hello World Codepen&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/kscatcensus/pen/XedLvZ/&quot;&gt;
  Hello World Codepen&lt;/a&gt; by Kevin Schweickhardt (&lt;a href=&quot;https://codepen.io/kscatcensus&quot;&gt;@kscatcensus&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;incluir-javascript-en-una-pagina-web&quot; tabindex=&quot;-1&quot;&gt;Incluir javascript en una página web&lt;/h2&gt;
&lt;p&gt;El código Javascript va entre etiquetas &lt;em&gt;&amp;lt;script&amp;gt;&lt;/em&gt;. Puede ponerse en el &lt;em&gt;&amp;lt;head&amp;gt;&lt;/em&gt; o en el &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt;. Funciona como cualquier otra etiqueta y el navegador la interpreta cuando llega a ella (va leyendo y ejecutando el fichero línea a línea). Podéis ver en &lt;a href=&quot;https://www.youtube.com/watch?v=AQn22gjtSWQ&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este vídeo&lt;/a&gt; un ejemplo muy simple de cómo se ejecuta el código en el HEAD y en el BODY.&lt;/p&gt;
&lt;p&gt;Lo mejor en cuanto a rendimiento es ponerla al final del &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt; para que no se detenga el renderizado de la página mientras se descarga y se ejecuta el código. También podemos ponerlo en el &amp;lt;head&amp;gt; pero usando los atributos &lt;strong&gt;async&lt;/strong&gt; y/o &lt;strong&gt;defer&lt;/strong&gt; (en Internet encontraréis mucha información sobre esta cuestión, por ejemplo &lt;a href=&quot;https://es.javascript.info/script-async-defer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como se ve en el primer vídeo, es posible poner el código directamente entre la etiqueta &lt;em&gt;&amp;lt;script&amp;gt;&lt;/em&gt;  y su etiqueta de finalización pero lo correcto es que esté en un fichero externo (con extensión &lt;strong&gt;.js&lt;/strong&gt;) que cargamos mediante el atributo &lt;em&gt;src&lt;/em&gt; de la etiqueta. Así conseguimos que la página HTML cargue más rápido (si lo ponemos al final del BODY o usamos &lt;em&gt;async&lt;/em&gt;) y además no mezclar HTML y JS en el mismo fichero, lo mejora la legibilidad del código y facilita su mantenimento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;./scripts/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mostrar-informacion&quot; tabindex=&quot;-1&quot;&gt;Mostrar información&lt;/h2&gt;
&lt;p&gt;Javascript permite mostrar al usuario ventanas modales para pedirle o mostrarle información. Las funciones que lo hacen son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.alert(mensaje)&lt;/code&gt;: Muesta en una ventana modal &lt;em&gt;mensaje&lt;/em&gt; con un botón de &lt;em&gt;Aceptar&lt;/em&gt; para cerra la ventana.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.confirm(mensaje)&lt;/code&gt;: Muesta en una ventana modal &lt;em&gt;mensaje&lt;/em&gt; con botones de &lt;em&gt;Aceptar&lt;/em&gt; y &lt;em&gt;Cancelar&lt;/em&gt;. La función devuelve &lt;strong&gt;true&lt;/strong&gt; o &lt;strong&gt;false&lt;/strong&gt; en función del botón pulsado por el usuario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.prompt(mensaje [, valor predeterminado])&lt;/code&gt;: Muesta en una ventana modal &lt;em&gt;mensaje&lt;/em&gt; y debajo tiene un campo donde el usuario puede escribir, junto con botones de &lt;em&gt;Aceptar&lt;/em&gt; y &lt;em&gt;Cancelar&lt;/em&gt;. La función devuelve el valor introducido por el usuario como texto (es decir que si introduce 54 lo que se obtiene es &amp;quot;54&amp;quot;) o &lt;strong&gt;false&lt;/strong&gt; si el usuario pulsa &lt;em&gt;Cancelar&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También se pueden escribir las funciones sin &lt;em&gt;window.&lt;/em&gt; (es decir &lt;code&gt;alert(&#39;Hola&#39;)&lt;/code&gt; en vez de &lt;code&gt;window.alert(&#39;Hola&#39;)&lt;/code&gt;) ya que en Javascript todos los métodos y propiedades de los que no se indica de qué objeto son se ejecutan en el objeto &lt;em&gt;window&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos mostrar una información para depurar nuestro código no utilizaremos &lt;em&gt;alert(mensaje)&lt;/em&gt; sino &lt;code&gt;console.log(mensaje)&lt;/code&gt; o &lt;code&gt;console.error(mensaje)&lt;/code&gt;. Estas funciones muestran la información pero en la consola del navegador. La diferencia es que &lt;em&gt;console.error&lt;/em&gt; la muestra como si fuera un error de Javascript.&lt;/p&gt;
&lt;h1 id=&quot;bibliografia&quot; tabindex=&quot;-1&quot;&gt;Bibliografía&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Curso &amp;quot;Programación con JavaScript&amp;quot;. CEFIRE Xest. Arturo Bernal Mayordomo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLiZCpIzKtvqvt4tcQV4SAvaJn7QMdwUbd&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso de JavaScript y TypeScript&lt;/a&gt; de Arturo Bernal en Youtube&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN Web Docs&lt;/a&gt;. Moz://a. &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developer.mozilla.org/es/docs/Web/JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://librosweb.es/libro/javascript/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a JavaScript&lt;/a&gt;. Librosweb. &lt;a href=&quot;http://librosweb.es/libro/javascript/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://librosweb.es/libro/javascript/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso de Javascript (Desarrollo web en entorno cliente)&lt;/a&gt;. Ada Lovecode - Didacticode (90 vídeos) de Laura Folgado&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sergarb1/ApuntesDWEC&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Apuntes Desarrollo Web en Entorno Cliente (DWEC)&lt;/a&gt;. Sergi García Barea&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/readme/" >
        </entry>
        <entry>
            <title>
                12-tests
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/12-tests/</id>
            <content type="html">
                &lt;h1 id=&quot;testing&quot; tabindex=&quot;-1&quot;&gt;Testing&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n-al-testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción al testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testing-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-npm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#transpilar-nuestro-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Transpilar nuestro código&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usando-babel-con-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usando Babel con Jest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usando-webpack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usando Webpack&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-webpack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejecutar-webpack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejecutar webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlazar-el-fichero-generado-en-el-html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlazar el fichero generado en el HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testear-la-ui&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testear la UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar jest&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#matchers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Matchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#test-suites&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Test suites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mocks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testear-promesas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testear promesas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#hooks-de-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hooks de Jest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desarrollo-guiado-por-pruebas-tdd&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion-al-testing&quot; tabindex=&quot;-1&quot;&gt;Introducción al testing&lt;/h2&gt;
&lt;p&gt;Es fundamental que nuestro código tenga un cierto nivel de calidad para minimizar los fallos del programa, más cuanto más compleja es la aplicación que estamos desarrollando. Para ello debemos testearlo y dicho testeo seguramente incluirá test automáticos. Dichos test nos permiten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comprobar que nuestro código responde como se espera de él&lt;/li&gt;
&lt;li&gt;evitar los &lt;em&gt;errores de regresión&lt;/em&gt; (fallos tras incluir una nueva funcionalidad en cosas que antes funcionaban en nuestro programa)&lt;/li&gt;
&lt;li&gt;incluso mejoran la documentación del proyecto ya que el test indica cómo debe funcionar mi código&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como ya sabéis existen varios tipos de tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unitarios: prueban un trozo de código que sólo hace una cosa (habitualmente una función)&lt;/li&gt;
&lt;li&gt;de integración: prueban que varias partes del código funcionan bien juntas&lt;/li&gt;
&lt;li&gt;de aceptación: prueba que el código permite hacer algo que el cliente quiere qu pueda hacerse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De momento desarrollaremos tests unitarios. Estos tienen 3 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preparación (&lt;em&gt;Arrange&lt;/em&gt;): perparamos el código para poder probarlo, por ejemplo, creamos las variables u objetos a probar&lt;/li&gt;
&lt;li&gt;Actuación (&lt;em&gt;Act&lt;/em&gt;): realizamos la acción, por ejemplo, llamamos a la función&lt;/li&gt;
&lt;li&gt;Aserción (&lt;em&gt;Assert&lt;/em&gt;): comprobamos que el resultado es el esperado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;wordCount() returns 2 when the input is &amp;quot;Hello world&amp;quot;&#39;, () =&amp;gt; {
  // Arrange
  const string = &#39;Hello world&#39;;
  
  // Act
  const result = wordCount(string);
  
  // Assert
  expect(result).toBe(2);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;testing-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Testing en Javascript&lt;/h1&gt;
&lt;p&gt;Tenemos muchas herramientas para hacer tests unitarios. Usaremos una llamada &lt;strong&gt;&lt;em&gt;Jest&lt;/em&gt;&lt;/strong&gt;. Para instalarla usaremos el gestor de paquetes &lt;strong&gt;&lt;em&gt;npm&lt;/em&gt;&lt;/strong&gt; que es el más utlizado para usar bibliotecas y sus dependencias en el FrontEnd.&lt;/p&gt;
&lt;h2 id=&quot;instalar-npm&quot; tabindex=&quot;-1&quot;&gt;Instalar npm&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt; es el gestor de dependencias de &lt;strong&gt;&lt;em&gt;nodejs&lt;/em&gt;&lt;/strong&gt; y aprenderemos más de él en el bloque de &lt;strong&gt;Vue&lt;/strong&gt;. Debemos instalar &lt;em&gt;NodeJS&lt;/em&gt; para tener npm. Esto podemos hacerlo desde el repositorio de nuestra distribución (con &lt;code&gt;apt install nodejs&lt;/code&gt;) pero no se instalará la última versión. Es mejor seguir las indicaciones de la &lt;a href=&quot;https://nodejs.org/es/download/package-manager/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página oficial de NodeJS&lt;/a&gt;. Aquí tenéis cómo hacerlo para &lt;a href=&quot;https://github.com/nodesource/distributions/blob/master/README.md#debinstall&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;distribuciones basadas en Debian/Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;instalar-jest&quot; tabindex=&quot;-1&quot;&gt;Instalar jest&lt;/h2&gt;
&lt;p&gt;Una vez instalado npm crearemos una carpeta para cada proyecto que vayamos a hacer y lo inicializamos ejecutando dentro de ella:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando crea un nuevo proyecto y nos pedirá información sobre el mismo. Cuando nos pregunten por la herramienta para hacer tests escribiremos &lt;strong&gt;jest&lt;/strong&gt;. Tras ello tendremos ya creado el fichero &lt;strong&gt;package.json&lt;/strong&gt; de nuestra aplicación (es el fichero donde se configura el proyecto y sus dependencias). En el apartado de &lt;em&gt;scripts&lt;/em&gt; encontramos uno llamado &lt;em&gt;test&lt;/em&gt; que lo que hace es ejecutar &lt;em&gt;jest&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
   &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora falta instalar jest, lo que haremos con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install --save-dev jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos instalando jest sólo como dependencia de desarrollo ya que no lo necesitaremos en producción (lo mismo abreviado sería &lt;code&gt;npm i -D jest&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Aunque, como vamos a utilizar &lt;em&gt;jest&lt;/em&gt; en muchos proyectos distintos, es más conveniente instalarlo globalmente con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm i -g jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma no tendremos que instalar &lt;em&gt;jest&lt;/em&gt;  en cada nuevo proyecto, sólo hacer el &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Las dependencias que instalemos están en el directorio &lt;em&gt;node_modules&lt;/em&gt;. Si estamos usando &lt;em&gt;git&lt;/em&gt; debemos asegurarnos de incluir este directorio en nuestro fichero &lt;em&gt;.gitignore&lt;/em&gt; (si no tenemos ese fichero podemos crearlo simplemente con &lt;code&gt;echo &amp;quot;node_modules&amp;quot; &amp;gt; .gitignore&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;transpilar-nuestro-codigo&quot; tabindex=&quot;-1&quot;&gt;Transpilar nuestro código&lt;/h2&gt;
&lt;p&gt;Vamos a crear las funciones de nuestro código en un fichero JS y para que se puedan usar el otro fichero Javascript (el de los tests) debemos exportarlas con &lt;code&gt;module.exports&lt;/code&gt;. El fichero de test deberá importarlas con &lt;code&gt;require&lt;/code&gt; (se explica más adelante, en el apartado de &lt;a href=&quot;https://pedroporo.github.io/#usar-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Jest&lt;/a&gt;). Por ejemplo, tenemos un fichero llamado &lt;strong&gt;suma.js&lt;/strong&gt; que contiene la función &lt;em&gt;add&lt;/em&gt; que suma 2 números pasados por parámetro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function add(a, b) {
  return a + b;
}
module.exports = add;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fichero de test, &lt;strong&gt;suma.test.js&lt;/strong&gt; (normalmente le llamaremos igual pero anteponiendo &lt;em&gt;.test&lt;/em&gt; a la extensión .js) contiene los test a ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const add = require(&#39;./suma&#39;)

describe(&#39;Addition&#39;, () =&amp;gt; {
    test(&#39;given 3 and 7 as inputs, should return 10&#39;, () =&amp;gt; {
        const expected = 10;
        const actual = add(3,7);
        expect(actual).toEqual(expected)
    });

    test(&#39;given -4 and 2 as inputs, should return -2&#39;, () =&amp;gt; {
        const expected = -2;
        const actual = add(-4,2);
        expect(actual).toEqual(expected)
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que hace es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importa la función que exporta &lt;em&gt;suma.js&lt;/em&gt; y la almacena en la constante &lt;strong&gt;add&lt;/strong&gt;. Ya pude llamar a esa función&lt;/li&gt;
&lt;li&gt;el bloque &lt;em&gt;describe&lt;/em&gt; permite agrupar varios tests relacionados bajo un mismo nombre&lt;/li&gt;
&lt;li&gt;cada sentencia &lt;em&gt;test&lt;/em&gt; es un test que se realizará&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si ejecutamos los tests en la terminal (&lt;code&gt;npm run test&lt;/code&gt;) muestra un error ya que Jest no sabe cómo gestionar las sentencias ECMAScript &lt;em&gt;import&lt;/em&gt; y &lt;em&gt;export&lt;/em&gt;. Para solucionarlo debemos transpilar nuestro código de manera que Jest pueda entenderlo. Podemos hacerlo de 2 maneras:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instalando el transpilador &lt;strong&gt;Babel&lt;/strong&gt; y configurando &lt;em&gt;Jest&lt;/em&gt; para que transpile el código&lt;/li&gt;
&lt;li&gt;utilizando un &lt;em&gt;bundler&lt;/em&gt; como &lt;strong&gt;Webpack&lt;/strong&gt;. En este caso no sólo transpilamos el código sino que juntamos todos nuestros ficheros JS en uno sólo que será el que enlazaremos en el fichero HTML de nuestra aplicación. Es la solución si queremos que nuestro código funcione en el navegador además de poder pasar los tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;usando-babel-con-jest&quot; tabindex=&quot;-1&quot;&gt;Usando Babel con Jest&lt;/h3&gt;
&lt;p&gt;Si queremos sólo poder pasar los tests pero no vamos a usar ese código en el navegador sólo tenemos que instalar el transpilador Babel:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm add jest babel-jest @babel/core @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y crear 2 ficheros para configurarlo y que sepa trabajar junto a Jest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jest.config.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;transform&amp;quot;: {
        &amp;quot;^.+&#92;&#92;.jsx?$&amp;quot;: &amp;quot;babel-jest&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;presets&amp;quot;: [&amp;quot;@babel/preset-env&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora ya podemos ejecutar los test y comprobar que nuestro código los pasa.&lt;/p&gt;
&lt;p&gt;En la siguiente página explica cómo configurar npm y jest con babel (sin usar webpack) e integrarlo con Travis-CI, la herramienta de integracion continua de GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://levelup.gitconnected.com/automate-npm-releases-with-jest-codecov-io-semantic-release-and-travisci-eff812e97541&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automate NPM releases with Jest, codecov.io, Semantic Release, and TravisCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;usando-webpack&quot; tabindex=&quot;-1&quot;&gt;Usando Webpack&lt;/h2&gt;
&lt;p&gt;Con la configuración anterior nuestro código es transpilado para ejecutar los tests, pero dará error si intentamos ejecutarlo en el navegador porque allí no está transpilado. Podemos solucionarlo usando &lt;em&gt;webpack&lt;/em&gt; para empaquetar y transpilar el código (por tanto no sería necesario realizar lo indicado en al apartado anterior).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webpack&lt;/a&gt; el un &lt;em&gt;bundler&lt;/em&gt; o empaquetador de código que además puede usar transpiladores para convertir nuestro código que usa versiones modernas de ECMAscript en otro soportado por la mayoría de navegadores.&lt;/p&gt;
&lt;p&gt;Por tanto nos va a permitir, entre otras cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tener en nuestro &lt;em&gt;index.html&lt;/em&gt; una sóla entrada de script (&lt;code&gt;&amp;lt;script src=&amp;quot;./dist/main.js&#39;&amp;gt;&lt;/code&gt;) en lugar de una para cada archivo que estemos utilizando (index.js, functions.js, ...)&lt;/li&gt;
&lt;li&gt;Además podremos usar instrucciones como &lt;code&gt;module.exports&lt;/code&gt; para exportar funciones o &lt;code&gt;require&lt;/code&gt; para importarlas en otro fichero Javascript, que sin traspilar provocarían errores en el navegador&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existen infinidad de páginas que nos enseñan las mil posibilidades que tiene &lt;em&gt;webpack&lt;/em&gt;, pero nosotros por ahora sólo necesitamos:&lt;/p&gt;
&lt;h3 id=&quot;instalar-webpack&quot; tabindex=&quot;-1&quot;&gt;Instalar webpack&lt;/h3&gt;
&lt;p&gt;Tenemos que instalar webpack y webpack-cli. Como son dependencias de desarrollo (en producción no las necesitaremos) ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejecutar-webpack&quot; tabindex=&quot;-1&quot;&gt;Ejecutar webpack&lt;/h3&gt;
&lt;p&gt;Se ejecuta con el comando &lt;code&gt;npx webpack&lt;/code&gt; y hay que indicarle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuál es nuestro archivo Javascript principal de nuestro código (si no lo ponemos supondrá que es &lt;strong&gt;./src/index.js&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;cuál será el archivo que creará de salida (por defecto &lt;strong&gt;./dist/main.js&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;si estamos en desarrollo o en producción, para permitir o no depurar el código generado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siguiendo con el ejemplo anterior de la suma crearemos un fichero &lt;strong&gt;index.js&lt;/strong&gt; dentro de &lt;em&gt;src/&lt;/em&gt; que importará el fichero &lt;em&gt;suma.js&lt;/em&gt; (con el comando &lt;code&gt;require&lt;/code&gt;como se hace en el fichero de tests) y que contendrá el resto de código de la aplicación (como pedir al usuario los números a sumar, mostrar el resultado, ...). Para que webpack empaquete y transpile esos 2 ficheros (index.js y suma.js) ejecutaremos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;enlazar-el-fichero-generado-en-el-html&quot; tabindex=&quot;-1&quot;&gt;Enlazar el fichero generado en el HTML&lt;/h3&gt;
&lt;p&gt;Por último, en nuestro &lt;em&gt;index.html&lt;/em&gt; debemos incluir sólo el &lt;em&gt;main.js&lt;/em&gt; generado por webpack &lt;code&gt;&amp;lt;script src=&amp;quot;dist/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;testear-la-ui&quot; tabindex=&quot;-1&quot;&gt;Testear la UI&lt;/h2&gt;
&lt;p&gt;Si queremos hacer tests unitarios de los cambios que produce nuestro código en la página web hay varios frameworks que podemos usar, pero también podemos hacerlo sin usar ninguno, usando sólo los módulos de Node que ya tenemos instalados y &lt;em&gt;Jest&lt;/em&gt;, en concreto su herramienta &lt;em&gt;jsdom&lt;/em&gt; que usa para emular un navegador.&lt;/p&gt;
&lt;p&gt;Para usarlo debemos instalar la librería &lt;a href=&quot;https://testing-library.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Library&lt;/a&gt;. Para ello, tras configurar nuestro proyecto con &lt;em&gt;Babel&lt;/em&gt; como hemos visto antes, instalaremos para desarrollo los paquetes &lt;strong&gt;@testing-library/dom&lt;/strong&gt; y &lt;strong&gt;@testing-library/jest-dom&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D @testing-library/dom @testing-library/jest-dom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el fichero de test debemos poner al principio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { fireEvent, getByText } = require(&#39;@testing-library/dom&#39;)
import &#39;@testing-library/jest-dom/extend-expect&#39;
import { JSDOM } from &#39;jsdom&#39;
import fs from &#39;fs&#39;
import path from &#39;path&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y antes de ejecutar cada test cargamos nuestra página HTML con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const html = fs.readFileSync(path.resolve(__dirname, &#39;../index.html&#39;), &#39;utf8&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OJO: sólo debemos cargar así la página si confiamos totalmente en el código que vamos a probar (en este caso es nuestro código) y no deberíamos hacerlo para código de terceros.&lt;/p&gt;
&lt;p&gt;Luego ya podemos acceder al HTML y mirar si existen ciertas etiquetas o su contenido, como en este ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { fireEvent, getByText } = require(&#39;@testing-library/dom&#39;)
import &#39;@testing-library/jest-dom/extend-expect&#39;
import { JSDOM } from &#39;jsdom&#39;
import fs from &#39;fs&#39;
import path from &#39;path&#39;

const html = fs.readFileSync(path.resolve(__dirname, &#39;../index.html&#39;), &#39;utf8&#39;);

let dom
let container

describe(&#39;index.html&#39;, () =&amp;gt; {
  beforeEach(() =&amp;gt; {
    // Constructing a new JSDOM with this option is the key
    // to getting the code in the script tag to execute.
    // This is indeed dangerous and should only be done with trusted content.
    // https://github.com/jsdom/jsdom#executing-scripts
    dom = new JSDOM(html, { runScripts: &#39;dangerously&#39; })
    container = dom.window.document.body
  })

  it(&#39;renders a heading element&#39;, () =&amp;gt; {
    expect(container.querySelector(&#39;h1&#39;)).not.toBeNull()
    expect(getByText(container, &#39;Almacén central - ACME SL&#39;)).toBeInTheDocument()
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además de &lt;em&gt;getByText&lt;/em&gt; para comprobar los elementos de la página tenemos otras &lt;a href=&quot;https://testing-library.com/docs/dom-testing-library/api-queries&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;queries&lt;/a&gt; que podemos utilizar.&lt;/p&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://levelup.gitconnected.com/how-to-unit-test-html-and-vanilla-javascript-without-a-ui-framework-c4c89c9f5e56&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to Unit Test HTML and Vanilla JavaScript Without a UI Framework&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;usar-jest&quot; tabindex=&quot;-1&quot;&gt;Usar jest&lt;/h1&gt;
&lt;p&gt;La &lt;a href=&quot;https://jestjs.io/docs/en/getting-started.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt; proporciona muy buena información de cómo usarlo. En resumen, en los ficheros con las funciones que vayamos a testear debemos &#39;&lt;em&gt;exportar&lt;/em&gt;&#39; esas funciones para que las pueda importar el fichero de test. Lo haremos con &lt;code&gt;module.exports&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function suma(a, b) {
  return a + b;
}
module.exports = suma;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tenemos varias funciones podemos exportar un objeto con todas ellas:&lt;br /&gt;
&lt;code&gt;module.exports&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function suma(a, b) {
  return a + b;
}
module.exports = { suma, resta, multiplica, divide };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el fichero de test (que normalmente se llamará como el original más &lt;em&gt;test&lt;/em&gt; antes de la extensión, por ejemplo &lt;em&gt;funciones.test.js&lt;/em&gt;) importamos esas funciones con un &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const suma = require(&#39;./funciones&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y ya podemos acceder llamar a la función &#39;suma&#39; desde el fichero de test. Si queremos importar varias funciones haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const funciones = require(&#39;./funciones&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y accederemos a cada una como &#39;funciones.suma&#39;, ...&lt;/p&gt;
&lt;p&gt;Ya podemos crear nuestro primer test para probar la función suma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;Suma 1 + 1 devuelve 2&#39;, () =&amp;gt; {
  expect(funciones.suma(1, 1)).toBe(2);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para crear un test usamos la instrucción &lt;code&gt;test&lt;/code&gt; (o &lt;code&gt;it&lt;/code&gt;) a la que le pasamos como primer parámetro un nombre descriptivo de lo que hace y como segundo parámetro la función que realiza el test. En general usaremos &lt;code&gt;expect&lt;/code&gt; y le pasamos como parámetro la llamada a la función a testear y comparamos el resultado devuelto usando un &lt;em&gt;matcher&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;matchers&quot; tabindex=&quot;-1&quot;&gt;Matchers&lt;/h2&gt;
&lt;p&gt;Los más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;toBe()&lt;/strong&gt;: compara el resultado del &lt;em&gt;expect&lt;/em&gt; con lo que le pasamos como parámetro. Sólo sirve para valores primitivos (number, string, boolean, ...) no para arrays ni objetos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeCLoseTo()&lt;/strong&gt;: se usa para números de punto flotante. &lt;code&gt;expect(0.1 + 0.2).toBe(0.3)&lt;/code&gt; fallaría por el error de redondeo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toEqual()&lt;/strong&gt;: como el anterior pero para objetos y arrays. Comprueba cada uno de los elementos el objeto o array&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeLessThan&lt;/strong&gt;, &lt;strong&gt;toBeLessThanOrEqual&lt;/strong&gt;, &lt;strong&gt;toBeGreaterThan&lt;/strong&gt;, &lt;strong&gt;toBeGreaterThanOrEqual&lt;/strong&gt;: para comparaciones &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeTruthy&lt;/strong&gt;: el valor devuelvo es verdadero o asimilable a verdadero (si fuera la condición de un &lt;em&gt;if&lt;/em&gt; se ejecutaría el &lt;em&gt;then&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeFalsy&lt;/strong&gt;: el valor devuelvo es falso o asimilable a falso (si fuera la condición de un &lt;em&gt;if&lt;/em&gt; se ejecutaría el &lt;em&gt;else&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeUndefined&lt;/strong&gt;: el valor es &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeDefined&lt;/strong&gt;: el valor NO es &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeNull&lt;/strong&gt;: el valor devuelto es &lt;em&gt;null&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toMatch&lt;/strong&gt;: el valor devuelto debe cumplir con la expresión regular pasada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toContain&lt;/strong&gt;: el array devuelto debe contener el elemento pasado como parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toHaveLength&lt;/strong&gt;: el array o el string devueltos debe tener la longitud indicada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para comprobar si una función ha lanzado una excepción se usa &lt;code&gt;toThrow&lt;/code&gt;. Podemos comprobar sólo que haya lanzado un error, que sea de un tipo determinado, el mensaje exacto que tiene o si el mensaje cumple con una expresión regular:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function compileAndroidCode() {
  throw new Error(&#39;you are using the wrong JDK&#39;);
}

test(&#39;compiling android goes as expected&#39;, () =&amp;gt; {
  expect(compileAndroidCode).toThrow();
  expect(compileAndroidCode).toThrow(Error);
  expect(compileAndroidCode).toThrow(&#39;you are using the wrong JDK&#39;);
  expect(compileAndroidCode).toThrow(/JDK/);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos obtener la lsita completa de &lt;em&gt;matchers&lt;/em&gt; en al &lt;a href=&quot;https://jestjs.io/docs/es-ES/expect&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Jest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;test-suites&quot; tabindex=&quot;-1&quot;&gt;Test suites&lt;/h2&gt;
&lt;p&gt;En muchas ocasiones no vamos a pasar un único test sino un conjunto de ellos. En ese caso podemos agruparlos en un &lt;em&gt;test suite&lt;/em&gt; que definimos con la instruacción &lt;code&gt;describe&lt;/code&gt; a la que pasamos un nombre que la describa y una función que contiene todos los tests a pasar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;Funciones aritméticas&#39;, () =&amp;gt; {
  test(&#39;Suma 1 + 1 devuelve 2&#39;, () =&amp;gt; {
    expect(funciones.suma(1, 1)).toBe(2);
  });

  test(&#39;Resta 2 - 1 devuelve 1&#39;, () =&amp;gt; {
    expect(funciones.resta(2, 1)).toBe(1);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mocks&quot; tabindex=&quot;-1&quot;&gt;Mocks&lt;/h2&gt;
&lt;p&gt;Muchas veces debemos testear partes del código que llaman a otras funciones pero no nos interesa que se ejecuten esas funciones sino simplemente saber si se han llamado o no y con qué parámetros. Para eso se definen las fuciones &lt;em&gt;mock&lt;/em&gt;. Consiste en declarar en nuestro fichero de test una función a la que llama el código como función de &lt;em&gt;jest&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, tenemos un método de un controlador llamado &lt;em&gt;addProduct&lt;/em&gt; que llama a otro de la vista llamado &lt;em&gt;renderProduct&lt;/em&gt; para renderizar algo. Nosotros sólo queremos testear que se llama a la vista y que el parámetro que se le pasa es el adecuado. En nuestro test haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;renderProduct = jest.fn();

test(&#39;renderProduct called once with product {id: 1, name: &amp;quot;Prod 1&amp;quot;, price: 49.99}&#39;, () =&amp;gt; {
  const product = {id: 1, name: &amp;quot;Prod 1&amp;quot;, price: 49.99};
  
  renderProduct(product);
  renderProduct({});
  
	expect(renderProduct.mock.calls.length).toBe(2);
	expect(renderProduct.mock.calls[0][0]).toEqual(newProd);
	expect(renderProduct.mock.calls[1][0]).toEqual({});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En realidad no se llama a la función real sino a la definida por el mock y podemos ver las veces que ha sido llamada (&lt;code&gt;fn.mock.calls.length&lt;/code&gt;) o el primer parámetro pasado en la primera llamada (&lt;code&gt;fn.mock.calls[0][0]&lt;/code&gt;) o en la segunda (&lt;code&gt;fn.mock.calls[1][0]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Podéis obtener toda la información en la &lt;a href=&quot;https://jestjs.io/docs/en/mock-functions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de jest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También podemos encontrar muchos ejemplos en otras webs, como en &lt;a href=&quot;https://books.adalab.es/materiales-front-end-e/sprint-3.-react/3_14_testing_js&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;adalab&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;testear-promesas&quot; tabindex=&quot;-1&quot;&gt;Testear promesas&lt;/h2&gt;
&lt;p&gt;Para testear una función que devuelve una promesa debemos hacerlo de diferente manera. Por ejemplo tenemos una función &#39;getData&#39; que devuelve una promesa. Para testearla:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;getData devuelve un arrya de 3 elementos&#39;, () =&amp;gt; {
  return getData().then(data =&amp;gt; expect(data).toHaveLength(3) );
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No olvidéis poner el &#39;return&#39;, si no el test acabará sin esperar a que se resuelva la promesa. Si lo que queremos es comprobar que la promesa es rechazada haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;getData devuelve un arrya de 3 elementos&#39;, () =&amp;gt; {
  expect.assertions(1);
  return getData().catch(err =&amp;gt; expect(err).toMatch(&#39;404&#39;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso esperamos que devuelva un error que contenga &#39;404&#39;. Hay que poner la línea de &lt;code&gt;expect.assertions&lt;/code&gt; para evitar que una promesa cumplida no haga que falle el test.&lt;/p&gt;
&lt;p&gt;En la &lt;a href=&quot;https://jestjs.io/docs/en/asynchronous&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Jest&lt;/a&gt; podemos encontrar información de cómo probar todo tipo de llamadas asíncronas (&lt;em&gt;callback&lt;/em&gt;, &lt;em&gt;async/await&lt;/em&gt;, ...).&lt;/p&gt;
&lt;h2 id=&quot;hooks-de-jest&quot; tabindex=&quot;-1&quot;&gt;Hooks de Jest&lt;/h2&gt;
&lt;p&gt;Permiten ejecutar código antes o depués de pasar cada test o el conjunto de ellos. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;afterEach()&lt;/strong&gt;: Después de cada prueba.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;afterAll()&lt;/strong&gt;: Después de todas las pruebas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeEach()&lt;/strong&gt;: Antes de cada prueba.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeAll()&lt;/strong&gt;: Antes de todas las pruebas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo podemos querer inicializar la base de datos antes de pasar cada test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeAll(() =&amp;gt; {
  initializeCityDatabase();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si se trata de una función asíncrona habrá que añadirle un &#39;return&#39; igual que hacíamos con las promesas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeAll(() =&amp;gt; {
  return initializeCityDatabase();
});

afterAll(() =&amp;gt; {
  return clearCityDatabase();
});

test(&#39;city database has Vienna&#39;, () =&amp;gt; {
  expect(isCity(&#39;Vienna&#39;)).toBeTruthy();
});

test(&#39;city database has San Juan&#39;, () =&amp;gt; {
  expect(isCity(&#39;San Juan&#39;)).toBeTruthy();
});`
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;desarrollo-guiado-por-pruebas-tdd&quot; tabindex=&quot;-1&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/h1&gt;
&lt;p&gt;Es una forma de programar que consiste en escribir primero las pruebas que deba pasar el código (Test Dirve Development) y luego el código que las pase. Por último deberíamos refactorizarlo (&lt;a href=&quot;https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Refactoring&lt;/a&gt;). Para escribir las pruebas generalmente se utilizan las &lt;a href=&quot;https://es.wikipedia.org/wiki/Prueba_unitaria&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pruebas unitarias&lt;/a&gt; (unit test en inglés).&lt;/p&gt;
&lt;p&gt;El ciclo de programación usando TDD tiene tres fases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fase &lt;em&gt;roja&lt;/em&gt;: escribimos el test que cumpla los requerimientos y lo pasamos. Fallará ya que nuestro código no pasa el test (de hecho la primera vez no tenemos ni código)&lt;/li&gt;
&lt;li&gt;Fase &lt;em&gt;verde&lt;/em&gt;: conseguimos que nuestro código pase el test. Ya funciona aunque seguramente no estará muy bien escrito&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactorización&lt;/em&gt;: mejoramos nuestro código&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente y seguidamente se refactoriza el código escrito. El propósito del desarrollo guiado por pruebas es lograr un código limpio que funcione. La idea es que los requisitos sean traducidos a pruebas, de este modo, cuando las pruebas pasen se garantizará que el software cumple con los requisitos que se han establecido.&lt;/p&gt;
&lt;p&gt;Para ello debemos en primer lugar se debe definir una lista de requisitos y después se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elegir un requisito: Se elige de una lista el requisito que se cree que nos dará mayor conocimiento del problema y que a la vez sea fácilmente implementable.&lt;/li&gt;
&lt;li&gt;Escribir una prueba: Se comienza escribiendo una prueba para el requisito. Para ello el programador debe entender claramente las especificaciones y los requisitos de la funcionalidad que está por implementar. Este paso fuerza al programador a tomar la perspectiva de un cliente considerando el código a través de sus interfaces.&lt;/li&gt;
&lt;li&gt;Verificar que la prueba falla: Si la prueba no falla es porque el requisito ya estaba implementado o porque la prueba es errónea.&lt;/li&gt;
&lt;li&gt;Escribir la implementación: Escribir el código más sencillo que haga que la prueba funcione. Se usa la expresión &amp;quot;Déjelo simple&amp;quot; (&amp;quot;Keep It Simple, Stupid!&amp;quot;), conocida como principio KISS.&lt;/li&gt;
&lt;li&gt;Ejecutar las pruebas automatizadas: Verificar si todo el conjunto de pruebas funciona correctamente.&lt;/li&gt;
&lt;li&gt;Eliminación de duplicación: El paso final es la refactorización, que se utilizará principalmente para eliminar código duplicado. Se hace un pequeño cambio cada vez y luego se corren las pruebas hasta que funcionen.&lt;/li&gt;
&lt;li&gt;Actualización de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado. Asimismo se agregan requisitos que se hayan visto como necesarios durante este ciclo y se agregan requisitos de diseño (P. ej que una funcionalidad esté desacoplada de otra).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tener un único repositorio universal de pruebas facilita complementar TDD con otra práctica recomendada por los procesos ágiles de desarrollo, la &amp;quot;Integración Continua&amp;quot;. Integrar continuamente nuestro trabajo con el del resto del equipo de desarrollo permite ejecutar toda batería de pruebas y así descubrir si nuestra última versión es compatible con el resto del sistema. Es recomendable y menos costoso corregir pequeños problemas cada pocas horas que enfrentarse a problemas enormes cerca de la fecha de entrega fijada.&lt;/p&gt;
&lt;p&gt;(Fuente &lt;a href=&quot;https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/12-tests/" >
        </entry>
        <entry>
            <title>
                11-mas
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/11-mas/</id>
            <content type="html">
                &lt;h1 id=&quot;mas-cosas-a-aprender-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Más cosas a aprender en Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A1s-cosas-a-aprender-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Más cosas a aprender en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#webcomponents&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebComponents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#websockets&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#webworkers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebWorkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#jquery&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hace unos años Javscript era considerado un lenguaje de programación de segunda categoría, que se usaba para hacer molestas páginas web. Hoy en día el navegador es la aplicación más importante de un equipo y con él, además de navegar, se ejecutan todo tipo de aplicaciones. Además HTML5 y JavaScript han pasado de estar solo en nuestro navegador a ser un pilar básico de las plataformas móviles, de aplicaciones de escritorio e incluso JavaScript lo encontramos en servidores (con &lt;em&gt;Node.js&lt;/em&gt;) o como lenguaje estándar de algunos entornos de escritorio (como &lt;em&gt;GNOME&lt;/em&gt; para Linux).&lt;/p&gt;
&lt;p&gt;Por ello HTML5 y Javascript siguen su contínuo crecimiento... y su contínua evolución que les permite hacer cada vez más cosas. En esta página vamos a hablar muy brevemente de algunas de las características que están incorporando.&lt;/p&gt;
&lt;h2 id=&quot;web-components&quot; tabindex=&quot;-1&quot;&gt;WebComponents&lt;/h2&gt;
&lt;p&gt;Son distintas tecnologías que podemos usar (todas o alguna de ellas) para crear componentes reutilizables para nuestras páginas HTML. Las tecnologías que hay tras los Web Components son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Custom Elements&lt;/a&gt;: permite crear elementos HTML personalizados, es decir, nuevas etiquetas definidas por nosotros con funcionalidad propia. Por ejemplo&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;comp-calendar
    mode=&amp;quot;month&amp;quot;
    date=&amp;quot;2020-02-23&amp;quot;
    on-select=&amp;quot;dateSelected()&amp;quot; &amp;gt;
&amp;lt;/comp-calendar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML Templates&lt;/a&gt;: la etiqueta &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; permite definir fragmentos de código HTML que no serán renderizados y que usaremos más adelante. Pueden incluir &lt;strong&gt;slots&lt;/strong&gt; o huecos a los que se pasa un contenido&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Shadow DOM&lt;/a&gt;: permite asociar un DOM oculto a un elemento. Esto permite que tenga su propio código JS y estilos CSS aislados del resto del DOM&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-module-system&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ES Modules&lt;/a&gt;: Es el estándar de ECMAScript para importar módulos Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un WebComponent es un elemento que creamos y que tiene su propia representación (HTML) y funcionalidad (establecida con Javascript). Este elemento es reusable y compartible y se contruye sin librerías externas, sólo con HTML5, ES6 y CSS3.&lt;/p&gt;
&lt;p&gt;Algunos ejemplos de componentes útiles que podríamos usar son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componente para loguearnos mediante Google, Facebook, etc&lt;/li&gt;
&lt;li&gt;componente que me muestre el tiempo en una ciudad&lt;/li&gt;
&lt;li&gt;componente para hacer un modal&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hay infinidad de páginas donde podemos aprender más sobre WebComponents y cómo crear nuestro propio componente, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/Web_Components&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web Components | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.webcomponents.org/introduction&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introduction - webcomponents.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lenguajejs.com/webcomponents/introduccion/que-son-webcomponents/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;¿Qué son los WebComponents? - Javascript en español&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8bcfgXePHnk&amp;amp;feature=em-subs_digest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Carlos Azaustre - Cómo crear un WebComponent de forma nativa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En resumen debemos crear un fichero donde definimos la clase de nuestro componente que debe heredar de &lt;code&gt;HTMLElement&lt;/code&gt;. Es conveniente que su nombre (y por tanto el de la etiqueta que usaremos para mostrarlo) tenga al menos 2 palabras para evitar que pueda entrar en conflicto con posibles futuras etiquetas de HTML (por ejemplo podría ser &amp;lt;social-login&amp;gt; o &amp;lt;my-weather&amp;gt;). En esta clase definiremos el HTML y el estilo que tendrá nuestro componente, así como su comportamiento.&lt;/p&gt;
&lt;p&gt;Actualmente no todos los navegadores ofrecen soporte para WebComponents. Esto junto al hecho de que frameworks como Vue, Angular o React ofrecen soluciones con sus propios componentes han hecho que el uso de los WebComponents no acabe de despegar. A pesar de ello hay lugares como &lt;a href=&quot;https://www.webcomponents.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebComponents.org&lt;/a&gt; donde podemos encontrar un catálogo de componentes hechos y que podemos usar en nuestras páginas.&lt;/p&gt;
&lt;p&gt;Por su parte Google ha desarrollado la librería Polymer para ayudarnos a crear nuestros propios componentes basados en WebComponents y los principales frameworks JS como Angular o Vue permiten crear sus propios componentes de forma muy sencilla, com veremos en el bloque de Vue.&lt;/p&gt;
&lt;h2 id=&quot;web-sockets&quot; tabindex=&quot;-1&quot;&gt;WebSockets&lt;/h2&gt;
&lt;p&gt;WebSockets es una tecnología basada en el protocolo &lt;strong&gt;ws&lt;/strong&gt; que permite establecer una conexión continua &lt;em&gt;full-duplex&lt;/em&gt; entre un cliente (puede ser un navegador) y un servidor. La conexión siempre la abre el cliente pero una vez abierta no se cierra por lo que el servidor puede comunicar en cualquier momento con el cliente y enviarle información.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let exampleSocket=new WebSocket(uri);
exampleWebsocjet.onopen=function(event) {
    console.log(&#39;Se ha establecido la conexión&#39;);
}
exampleSocket.onclose=function(event) {
    console.log(&#39;Se ha cerrado la conexión&#39;);
}
exampleSocket.onerror=function(event) {
    console.log(&#39;Se ha producido un error en la conexión&#39;);
}
exampleSocket.onmessage=function(event) {
    console.log(&#39;Se ha recibido el mensaje:&#39; + event.data);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El &lt;em&gt;uri&lt;/em&gt; de la conexión deberá usar el protocolo &lt;strong&gt;ws&lt;/strong&gt; (o wss), no http (ej. &amp;quot;ws://miservidor.com/socketserver&amp;quot;). El evento &lt;em&gt;open&lt;/em&gt; se produce cuando la propiedad &lt;em&gt;readyState&lt;/em&gt; cambia a OPEN y el &lt;em&gt;close&lt;/em&gt; cuando cambia su valor a CLOSED. Cada vez que se reciba algo del servidor se produce el evento &lt;em&gt;message&lt;/em&gt; y en la propiedad &lt;strong&gt;data&lt;/strong&gt; del mismo tendremos lo que se nos ha enviado.&lt;/p&gt;
&lt;p&gt;Para enviar algo al servidor usamos el mátodo &lt;strong&gt;.send&lt;/strong&gt;. Lo que le enviamos ex texto en formato utf-8 (o un objeto convertido a JSON):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;exampleSocket.send(&#39;Your message&#39;);
exampleSocket.send(JSON.stringify(msg));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos enviar (y recibir) imágenes (convertidas a ArrayBuffer) o ficheros como un objeto Blob.&lt;/p&gt;
&lt;p&gt;Para cerrar la conexión llamamos al método &lt;strong&gt;.close()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;exampleSocket.close();
console.log(&#39;Conexión cerrada&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para programar la parte del servidor podemos usar librerías que nos ayudan como &lt;a href=&quot;https://github.com/ghedipunk/PHP-WebSockets&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PHP-WebSockets&lt;/a&gt;, SocketIO, ...&lt;/p&gt;
&lt;p&gt;Las aplicaciones de esta tecnología son muchas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Juegos multjugador&lt;/li&gt;
&lt;li&gt;Aplicaciones de chat&lt;/li&gt;
&lt;li&gt;Actualización en tiempo real de cotizaciones de bolsa, recursos en uso o cualquier otra información&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos practicar con &lt;a href=&quot;https://www.websocket.org/echo.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;www.websocket.org&lt;/a&gt; que tiene un servidor websocket que devuelve lo que le enviamos. En esta web también tenemos ejemplos de aplicaciones.&lt;/p&gt;
&lt;p&gt;Saber más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/WebSockets-840092-dup/Writing_WebSocket_client_applications&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN: Escribiendo aplicaciones con WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es.javascript.info/websocket&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebSocket - El Tutorial de JavaScript Moderno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ppiAvvkvAz0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Carlos Azaustre: Crear chat con WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;web-workers&quot; tabindex=&quot;-1&quot;&gt;WebWorkers&lt;/h2&gt;
&lt;p&gt;En principio Javascript se ejecuta en un único hilo de ejecución pero esta tecnología permite ejecutar scripts en segundo plano en hilos separados que se ejecutan en segundo plano y se comunican con la tarea que los crea mediante el envío de mensajes.&lt;/p&gt;
&lt;p&gt;Cuando se está ejecutando un script la página no responde hasta que finaliza su ejecución. Si el script lo ejecuta un web worker la página será funcional (podemos interactuar con ella) ya que le ejecución del script se realiza en segundo plano en otro hilo.&lt;/p&gt;
&lt;p&gt;Hay 3 tipos de &lt;em&gt;WebWorkers&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dedicated Workers: Estos son los más comunes y se ejecutan en un hilo dedicado al contexto del script que los creó. No comparten recursos con otros scripts y son útiles para tareas intensivas que requieren mucho procesamiento.&lt;/li&gt;
&lt;li&gt;Shared Workers: Pueden ser compartidos por varios scripts ejecutándose en diferentes ventanas, pestañas o iframes dentro del mismo dominio. Son ideales para aplicaciones que necesitan coordinar tareas entre múltiples instancias de la misma aplicación web.&lt;/li&gt;
&lt;li&gt;Service Workers: Actúan como servidores proxy que se ejecutan en segundo plano y gestionan eventos de red como las peticiones HTTP. Son esenciales para crear aplicaciones web progresivas (PWAs) que funcionen sin conexión y mejoren la velocidad de carga.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis ver un ejemplo de cómo crear un WebWorker para generar números primos en el  &lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/webworkers.html#ejemplo-de-uso-dedicated-worker&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saber más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/webworkers.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/Guide/Performance/Usando_web_workers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN - Usando WebWorkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/html5_webworkers.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools - HTML5 Web Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;Typescript&lt;/h2&gt;
&lt;p&gt;TypeScript es un lenguaje de programación libre y de código abierto desarrollado y mantenido por Microsoft. Es un superconjunto de JavaScript, que esencialmente añade tipado estático y objetos basados en clases. TypeScript extiende la sintaxis de JavaScript, por tanto cualquier código JavaScript existente debería funcionar sin problemas.&lt;/p&gt;
&lt;p&gt;Puede que la principal diferencia entre ambos es que Typescript obliga al tipado de las variables (y por supuesto no permite cambios de tipo) lo que evita muchos errores a la hora de programar.&lt;/p&gt;
&lt;p&gt;Algunos frameworks y librerías, como Angular, utilizan TS en lugar de JS como lenguaje, que luego es transpilado a JS a la hora de generar la aplicación para producción.&lt;/p&gt;
&lt;p&gt;Quizá el inconveniente es que es algo más difícil que JS pero como está basado en él y la sintaxis es prácticamente igual el esfuerzo de aprender TS para un programador JS es muy pequeño.&lt;/p&gt;
&lt;p&gt;Saber más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TypeScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia - Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescriptlang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;j-query&quot; tabindex=&quot;-1&quot;&gt;jQuery&lt;/h2&gt;
&lt;p&gt;Se trata de una biblioteca que nos facilita enormemente el trabajo con el DOM ya que tiene &amp;quot;atajos&amp;quot; para muchas instrucciones, por ejemplo para poner &#39;Hola mundo&#39; como contenido de un elemento cuya &lt;em&gt;id&lt;/em&gt; es &lt;code&gt;mensaje&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con Javascript sólo
document.getElementById(&#39;mensaje&#39;).textContent = &#39;Hola mundo&#39;

// Código con jQuery
$(&#39;#mensaje&#39;).text(&#39;Hola mundo&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otra ventaja de jQuery es que permite trabajar con conjuntos de elementos sin tener que hacer un &lt;code&gt;forEach&lt;/code&gt; (lo hace internamente). Por ejemplo para poner un escuchador que muestre un alert &#39;Párrafo pinchado&#39; al hacer click sobre cualquier párrafo de la clase &#39;importante&#39; tendríamos que hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con Javascript sólo
Array.from(document.querySelectorAll(&#39;p.importante&#39;))
.forEach(parrafo =&amp;gt; parrafo.addEventListener(&#39;click&#39;, () =&amp;gt; alert(&#39;Párrafo pinchado&#39;))

// Código con jQuery
$(&#39;p.importante&#39;).click(() =&amp;gt; alert(&#39;Párrafo pinchado&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vemos, básicamente nos permite hacer lo mismo pero escribiendo mucho menos código. También incluye funciones para cosas que en Javascript requieren varias líneas de código como animaciones o Ajax. Por ejemplo una pertición para mostrar en una tabla con id &lt;em&gt;posts&lt;/em&gt; todos los posts del servidor &lt;em&gt;jsonplaceholder&lt;/em&gt; tendremos que hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con Javascript sólo
const SERVER = &#39;https://jsonplaceholder.typicode.com&#39;;

function getPosts() {   // Función que pide los datos al servidor
  return new Promise(function(resolve, reject) {
    let peticion = new XMLHttpRequest();
    peticion.open(&#39;GET&#39;, SERVER + &#39;/posts&#39;);
    peticion.send();
    peticion.addEventListener(&#39;load&#39;, function() {
      if (peticion.status === 200) {
        resolve(JSON.parse(peticion.responseText));
      } else {
        reject(&amp;quot;Error &amp;quot; + this.status + &amp;quot; (&amp;quot; + this.statusText + &amp;quot;) en la petición&amp;quot;);
      }
    })
    peticion.addEventListener(&#39;error&#39;, () =&amp;gt; reject(&#39;Error en la petición HTTP&#39;));
  })
}

function renderPosts() {   // Función que los muestra en la página
  getPosts(idUser)
    .then((posts) =&amp;gt; {
      document.querySelector(&#39;#posts tbody&#39;).innerHTML = &#39;&#39;; // borramos su contenido
      posts.forEach((post) =&amp;gt; {
        const newPost = document.createElement(&#39;tr&#39;);
        newPost.innerHTML = `
          &amp;lt;td&amp;gt;${post.userId}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.id}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.title}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.body}&amp;lt;/td&amp;gt;`;
        document.querySelector(&#39;#posts tbody&#39;).appendChild(newPost);
      })
    })
    .catch((error) =&amp;gt; console.error(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando jQuery es mucho más sencillo. En primer lugar no hay que hacer la función que hace la petición al servidor porque hay uns función que hace eso: &lt;code&gt;$.ajax&lt;/code&gt; y sus derivadas &lt;code&gt;$.get&lt;/code&gt;, &lt;code&gt;$.post&lt;/code&gt;, ... Además la parte de pintar los datos es también mucho más corta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con jquery
const SERVER = &#39;https://jsonplaceholder.typicode.com&#39;;

function renderPosts() {   // Función que los muestra en la página
  $.get(SERVER + &#39;/posts&#39;)
    .done((posts) =&amp;gt; {
      $(&#39;#posts tbody&#39;).text(&#39;&#39;);    // borramos el contenido de la tabla
      posts.forEach(post =&amp;gt; $(&#39;#posts tbody&#39;).append(
        `&amp;lt;tr&amp;gt;
          &amp;lt;td&amp;gt;${post.userId}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.id}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.title}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.body}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;`
      ))
    })
    .fail((error) =&amp;gt; console.error(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Encontraréis infinidad de tutoriales por Internet donde aprender &lt;em&gt;jQuery&lt;/em&gt;, por ejemplo unos vídeos de &lt;a href=&quot;https://didacticode.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Didacticode&lt;/a&gt; que podéis encontrar en &lt;a href=&quot;https://didacticode.com/curso/curso-de-jquery/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://didacticode.com/curso/curso-de-jquery/&lt;/a&gt; (tenéis que registraros para tener acceso a muchos cursos de Javascript y &amp;quot;derivados&amp;quot; pero vale la pena) o directamente en su &lt;a href=&quot;https://www.youtube.com/channel/UCPbFiM-HA4lwJH12JXdXxDA&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;canal de Youtube&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/11-mas/" >
        </entry>
        <entry>
            <title>
                10-apis
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/10-apis/</id>
            <content type="html">
                &lt;h1 id=&quot;ap-is-html-5-drag-and-drop-local-storage-geolocalizacion-api-de-google-maps&quot; tabindex=&quot;-1&quot;&gt;APIs HTML5: Drag And Drop. Local Storage. Geolocalización. API de Google Maps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#apis-html5-drag-and-drop-local-storage-geolocalizaci%C3%B3n-api-de-google-maps&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;APIs HTML5: Drag And Drop. Local Storage. Geolocalización. API de Google Maps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#html-drag-and-drop-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML Drag And Drop API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#almacenamiento-en-el-cliente-api-storage&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Almacenamiento en el cliente: API Storage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a-tener-en-cuenta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;A tener en cuenta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#storage-vs-cookies&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Storage vs cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cookies&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#geolocation-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Geolocation API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#google-maps-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google Maps API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema varemos diferentes APIs incluidas en HTML5 (como la de Local Storage) y otras que se han hecho muy populares como la de Google Maps.&lt;/p&gt;
&lt;p&gt;HTML5 incluye un buen número de APIs que facilitan el trabajo con cosas complejas, como&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIs para manejo de audio y vídeo&lt;/li&gt;
&lt;li&gt;APIs para manejo de formularios&lt;/li&gt;
&lt;li&gt;API de dibujo canvas (en el módulo de DIW)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aquí comentaremos Storage, Drag&amp;amp;Drop, Geolocation, File Access, Communication, Web Workers, History y Offline&lt;/p&gt;
&lt;h2 id=&quot;html-drag-and-drop-api&quot; tabindex=&quot;-1&quot;&gt;HTML Drag And Drop API&lt;/h2&gt;
&lt;p&gt;Con HTML5 es muy sencillo arrastrar y soltar elementos en una página web. Podemos arrastrar y soltar cualquier nodo DOM (una imagen, un archivo, enlaces, texto seleccionado, ...). Para ello sólo es necesario que ese elemento tenga el atributo &lt;code&gt;dragable=&amp;quot;true&amp;quot;&lt;/code&gt;. Si le ponemos &lt;code&gt;false&lt;/code&gt; no se podrá arrastrar y si no definimos el atributo podrá o no arrastrarse según el valor predeterminado del navegador (en la mayoría son &lt;em&gt;dragables&lt;/em&gt; las imágenes, los links y las selecciones de texto).&lt;/p&gt;
&lt;p&gt;Al arrastrar y soltar intervienen 2 elementos diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el elemento que estamos arrastrando&lt;/li&gt;
&lt;li&gt;el elemento sobre el cual lo soltamos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para poder realizar la operación &lt;em&gt;event&lt;/em&gt; tiene una propiedad llamada &lt;strong&gt;dataTransfer&lt;/strong&gt; que es un objeto en el que almacenamos qué elemento estamos arrastrando (o cualquier otra cosa que queramos) y así cuando se suelte sobre el elemento destino éste último pueda saber quién se le ha soltado.&lt;/p&gt;
&lt;p&gt;Los pasos para arrastrar y soltar un elemento son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El elemento debe ser &lt;strong&gt;&lt;em&gt;draggable&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Capturamos el evento &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;dragstart&lt;/strong&gt;&lt;/a&gt;. Este evento se produce sobre un elemento cuando comenzamos a arrastrarlo. Deberemos almacenar en el &lt;em&gt;dataTransfer&lt;/em&gt; quién está siendo arrastrado (si no guardamos nada se guarda automáticamente su &lt;code&gt;src&lt;/code&gt; si es una imagen o su &lt;code&gt;href&lt;/code&gt; si es un enlace). Indicaremos el tipo del dato que estamos almacenando (texto plano, HTML, fichero, etc) y su valor. Ej.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img id=&amp;quot;imgGoogle&amp;quot; src=&amp;quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Google.png/320px-Google.png&amp;quot;&amp;gt;
&amp;lt;div id=&amp;quot;zonaDrop1&amp;quot; class=&amp;quot;drop&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Puedes soltar aquí la imagen&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;zonaDrop2&amp;quot; class=&amp;quot;drop&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Y también aquí&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;imgGoogle&#39;).addEventListener(&#39;dragstart&#39;, (event) =&amp;gt; {
    event.dataTransfer.setData(&#39;text/plain&#39;, event.target.id);  // Estamos guardando el texto &#39;imgGoogle&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Capturamos el evento &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;dragover&lt;/strong&gt;&lt;/a&gt;. Este evento se produce cada pocas décimas de segundo sobre elemento sobre el que se está arrastrando algo. Por defecto no se puede soltar un elemento en ningún sitio así que capturamos este evento para evitar que el navegador haga la acción por defecto e impida que se suelte lo que estamos arrastrando. Ej.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;zonaDrop1&#39;).addEventListener(&#39;dragover&#39;, (event) =&amp;gt; {
    event.preventDefault();
})
document.getElementById(&#39;zonaDrop2&#39;).addEventListener(&#39;dragover&#39;, (event) =&amp;gt; {
    event.preventDefault();
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Capturamos el evento &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;drop&lt;/strong&gt;&lt;/a&gt;. Este evento se produce sobre elemento sobre el que se suelta lo que estábamos arrastrando. Lo que haremos es evitar el comportamiento por defecto del navegador (que en caso de imágenes o enlaces es cargarlos en la página), obtener quién se ha soltado a partir del objeto &lt;em&gt;dataTransfer&lt;/em&gt; y realizar lo que queramos, que normalmente será añadir el objeto arrastrado como hijo del objeto sobre el que se ha hecho el &lt;em&gt;drop&lt;/em&gt;. Ej.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;zonaDrop1&#39;).addEventListener(&#39;drop&#39;, (event) =&amp;gt; {
    event.preventDefault();
    const data=event.dataTransfer.getData(&amp;quot;text/plain&amp;quot;);      // Obtenemos ìmgGoogle&#39;
    event.target.appendChild(document.getElementById(data));
})
document.getElementById(&#39;zonaDrop2&#39;).addEventListener(&#39;drop&#39;, (event) =&amp;gt; {
    event.preventDefault();
    const data=event.dataTransfer.getData(&amp;quot;text/plain&amp;quot;);      // Obtenemos ìmgGoogle&#39;
    event.target.appendChild(document.getElementById(data));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver el funcionamiento de este ejemplo:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/bn495ygj/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;NOTA: si hacemos &lt;em&gt;draggable&lt;/em&gt; un elemento, por ejemplo un párrafo, ya no se puede seleccionar con el ratón ya que al pinchar y arrastrar se mueve, no se selecciona. Para poder seleccionarlo debemos pinchar y arrastrar el ratón con las teclas &lt;em&gt;Ctrl+Alt&lt;/em&gt; pulsadas o hacerlo con el teclado. Ejemplo:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/dgyvLtho/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Podemos obtener más información de esta API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: mira y modifica el ejemplo de &lt;a href=&quot;https://www.w3schools.com/html/html5_draganddrop.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt; para entender bien el funcionamiento del Drag&amp;amp;Drop (ten en cuenta que en vez de &lt;code&gt;.addEventListener()&lt;/code&gt; las llamadas a los escuchadores están puestas como atributos del HTML pero el funcionamiento es el mismo).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;almacenamiento-en-el-cliente-api-storage&quot; tabindex=&quot;-1&quot;&gt;Almacenamiento en el cliente: API Storage&lt;/h2&gt;
&lt;p&gt;Antes de HTML5 la única manera que tenían los programadores de guardar algo en el navegador del cliente (como sus preferencias, su idioma predeterminado para nuestra web, etc) era utilizando &lt;em&gt;cookies&lt;/em&gt;. Las cookies tienen muchas limitaciones y es engorroso trabajar con ellas.&lt;/p&gt;
&lt;p&gt;HTML5 incorpora la &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API de Storage&lt;/a&gt; para subsanar esto. Además existen otros métodos de almacenamiento en el cliente más avanzados como &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/IndexedDB_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;IndexedDB&lt;/a&gt; (es un estándar del W3C pero aún con poco soporte entre los navegadores).&lt;/p&gt;
&lt;p&gt;El funcionamiento de la API Storage es muy sencillo: dentro del objeto &lt;em&gt;window&lt;/em&gt; tendremos los objetos &lt;strong&gt;localStorage&lt;/strong&gt; y &lt;strong&gt;sessionStorage&lt;/strong&gt; donde podremos almacenar información en el espacio de almacenamiento local (5 o 10 MB por sitio web según el navegador, que es mucho más de lo que teníamos con las cookies). La principal diferencia entre ellos es que la información almacenada en &lt;em&gt;localStorage&lt;/em&gt; nunca expira, permanece allí hasta que la borremos (nosotros o el usuario) mientras que la almacenada en &lt;em&gt;sessionStorage&lt;/em&gt; se elimina automáticamente al cerrar la sesión el usuario.&lt;/p&gt;
&lt;p&gt;Sólo los navegadores muy antiguos (Internet Explorer 7 y anteriores) no soportan esta característica. Puedo saber si el navegador soporta o no esta API simplemente mirando su &lt;code&gt;typeof&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(Storage) === &#39;undefined&#39;)    // NO está soportado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tanto &lt;em&gt;localStorage&lt;/em&gt; como &lt;em&gt;sessionStorage&lt;/em&gt; son como un objeto global al que tengo acceso desde el código. Lo que puedo hacer con ellos es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guardar&lt;/strong&gt; un dato: &lt;code&gt;localStorage.setItem(&#39;dato&#39;, &#39;valor&#39;)&lt;/code&gt; o también &lt;code&gt;localStorage.dato = &#39;valor&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recuperar&lt;/strong&gt; un dato: &lt;code&gt;let miDato=localStorage.getItem(&#39;dato&#39;)&lt;/code&gt; o también &lt;code&gt;let miDato = localStorage.dato&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Borrar&lt;/strong&gt; datos: &lt;code&gt;localStorage.removeItem(&#39;dato&#39;)&lt;/code&gt; para borrar &#39;dato&#39;. Si quiero borrar TODO lo que tengo &lt;code&gt;localStorage.clear()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Saber &lt;strong&gt;cuántos&lt;/strong&gt; datos tenemos: &lt;code&gt;localStorage.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sólo podemos guardar objetos primitivos (cadenas, números, ...) por lo que si queremos guardar un objeto o un array hay que convertirlo a una cadena JSON con &lt;code&gt;localStorage.setItem(&#39;dato&#39;, JSON.stringify(&#39;objeto&#39;))&lt;/code&gt;. Para recuperar el objeto haremos &lt;code&gt;let miObjeto = JSON.parse(localStorage.getItem(&#39;dato&#39;))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cada vez que cambia la información que tenemos en nuestro localStorage se produce un evento &lt;strong&gt;storage&lt;/strong&gt;. Si, por ejemplo, queremos que una ventana actualice su información si otra cambia algún dato del storage haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.addEventListener(&amp;quot;storage&amp;quot;, actualizaDatos);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y la función &#39;actualizaDatos&#39; podrá leer de nuevo lo que hay y actuar en consecuencia.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: comprueba qué tienes almacenado en el localStorage y el sessionStorage de tu navegador. Guarda y recupera algunas variables. Luego cierra el navegador y vuelve a abrir la página. ¿Están las variables guardadas en localStorage? ¿Y las de sessionStorage?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Puedes ver un ejemplo &lt;a href=&quot;https://www.youtube.com/watch?v=ASQQUSFtr8g&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=65&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;en este vídeo&lt;/a&gt; de cómo almacenar en el &lt;em&gt;Storage&lt;/em&gt; datos del usuario.&lt;/p&gt;
&lt;h3 id=&quot;a-tener-en-cuenta&quot; tabindex=&quot;-1&quot;&gt;A tener en cuenta&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;localStorage&lt;/em&gt;, &lt;em&gt;sessionStorage&lt;/em&gt; y &lt;em&gt;cookies&lt;/em&gt; almacenan información en un navegador específico del cliente, y por tanto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No podemos asegurar que permanece ahí&lt;/li&gt;
&lt;li&gt;Puede ser borrada/manipulada&lt;/li&gt;
&lt;li&gt;Puede ser leída, por lo que NO es adecuada para almacenar información sensible pero sí para preferencias del usuario, marcadores de juegos, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podríamos usar &lt;em&gt;localStorage&lt;/em&gt; para almacenar localmente los datos con los que trabaja una aplicación web. Así conseguiríamos minimizan los accesos al servidor y que la velocidad de la aplicación sea mucho mayor al trabajar con datos locales. Pero periódicamente debemos sincronizar la información con el servidor.&lt;/p&gt;
&lt;h3 id=&quot;storage-vs-cookies&quot; tabindex=&quot;-1&quot;&gt;Storage vs cookies&lt;/h3&gt;
&lt;p&gt;Ventajas de localStorage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 o 10 MB de almacenamiento frente a 4 KB de las cookies&lt;/li&gt;
&lt;li&gt;Todas las cookies del dominio se envían al servidor con cada petición al mismo lo que aumenta el tráfico innecesariamente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ventajas de las cookies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Soportadas por navegadores muy antiguos&lt;/li&gt;
&lt;li&gt;Las cookies ofrecen algo de protección frente a &lt;em&gt;XSS&lt;/em&gt; (&lt;em&gt;Cross-Site Scripting&lt;/em&gt;) y &lt;em&gt;Script injection&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cookies&quot; tabindex=&quot;-1&quot;&gt;Cookies&lt;/h3&gt;
&lt;p&gt;Son pequeños ficheros de texto y tienen las siguientes limitaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Máximo 300 cookies, si hay más se borran las antiguas&lt;/li&gt;
&lt;li&gt;Máximo 4 KB por cookie, si nos pasamos se truncará&lt;/li&gt;
&lt;li&gt;Máximo 20 cookies por dominio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada cookie almacena los siguientes datos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nombre de la cookie (obligatorio)&lt;/li&gt;
&lt;li&gt;Valor de la misma&lt;/li&gt;
&lt;li&gt;&lt;em&gt;expires&lt;/em&gt;: timestamp en que se borrará (si no pone nada se borra al salir del dominio)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;max-age&lt;/em&gt;: en lugar de &lt;em&gt;expires&lt;/em&gt; podemos indicar aquí los segundos que durará la cookie antes de expirar&lt;/li&gt;
&lt;li&gt;&lt;em&gt;path&lt;/em&gt;: ruta desde dónde es accesible (/: todo el dominio, /xxx: esa carpeta y subcarpetas). Si no se pone nada sólo lo será desde la carpeta actual&lt;/li&gt;
&lt;li&gt;&lt;em&gt;domain&lt;/em&gt;: dominio desde el que es accesible. Si no ponemos nada lo será desde este dominio y sus subdominios&lt;/li&gt;
&lt;li&gt;&lt;em&gt;secure&lt;/em&gt;: si aparece indica que sólo se enviará esta cookie con https&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un ejemplo de cookie sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se puede acceder a las cookies desde &lt;strong&gt;document.cookie&lt;/strong&gt; que es una cadena con las cookies de nuestras páginas. Para trabajar con ellas conviene que creemos funciones para guardar, leer o borrar cookies, por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear una nueva cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function setCookie(cname, cvalue, cexpires, cpath, cdomain, csecure) {
  document.cookie = cname + &#39;=&#39; + cvalue + 
    (cexpires?&#39;;expires=&#39;+cexpires.toUTCString():&#39;&#39;) + 
    (cpath?&#39;;path=&#39;+cpath:&#39;&#39;) + 
    (cdomain?&#39;;domain=&#39;+cdomain:&#39;&#39;) + 
    (csecure?&#39;;secure&#39;:&#39;&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Leer una cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getCookie(cname) {
    if(document.cookie.length &amp;gt; 0){
        start = document.cookie.indexOf(cname + &#39;=&#39;)
        if (start != -1) {   // Existe la cookie, busquemos dónde acaba su valor
            //El inicio de la cookie, el nombre de la cookie mas les simbolo &#39;=&#39;
            start = start + nombre.length + 1
            //Buscamos el final de la cookie (es el simbolo &#39;;&#39;)
            end = document.cookie.indexOf(&#39;;&#39;, start + cname.length + 1)
            if (end === -1) {   // si no encuentra el ; es que es la última cookie
                end = document.cookie.length;
            }
            return document.cookie.substring(start + cname.length + 1, end)
        }
    }
    return &#39;&#39;   // Si estamos aquí es que no hemos encontrado la cookie
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Borrar una cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function delCookie(cname) {
    return document.cookie = cname + &#39;=;expires=Thu, 01 Jan 1970 00:00:01 GMT;&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver en &lt;a href=&quot;https://www.youtube.com/watch?v=k7pteU48rpc&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=62&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este vídeo&lt;/a&gt; un ejemplo de cómo trabajar con cookies, aunque como ya hemos dicho lo recomendable es trabajar con &lt;em&gt;Storage&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;geolocation-api&quot; tabindex=&quot;-1&quot;&gt;Geolocation API&lt;/h2&gt;
&lt;p&gt;Esta API permite a la aplicación web acceder a la localización del usuario si éste da su permiso. Muchos navegadores sólo permiten usarlo en páginas seguras (https).&lt;/p&gt;
&lt;p&gt;Podemos acceder a esta API mediante el objeto &lt;strong&gt;geolocation&lt;/strong&gt; de &lt;em&gt;navigator&lt;/em&gt;. Para saber si nuestro navegador soporta o no la API podemos hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (geolocation in navigator)   // devuelve true si está soportado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obtener la posición este objeto proporciona el método &lt;strong&gt;navigator.geolocation.getCurrentPosition()&lt;/strong&gt; que hace una petición &lt;strong&gt;asíncrona&lt;/strong&gt;. Cuando se reciba la posición se ejecutará la función &lt;em&gt;callback&lt;/em&gt; que pasemos como parámetro y que recibirá las coordenadas de la localización. Podemos pasar otra como segundo parámetro que se ejecutará si se produce algú error y que recibirá un objeto con la propiedad &lt;em&gt;code&lt;/em&gt; que indica el error producido. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;navigator.geolocation.getCurrentPosition(
  (position) =&amp;gt; {
    pinta_posicion(position.coords.latitude, position.coords.longitude)
  },
  (error) =&amp;gt; {
    switch(error.code) {
      case error.PERMISSION_DENIED: // El usuario no autoriza al navegador a acceder a la localización
        msg = &#39;El usuario ha denegado la petición de geolocalización&#39;
        break
      case error.POSITION_UNAVAILABLE: // No se puede obtener la localización
        msg = &#39;La información de localización no está disponible.&#39;
        break
      case error.TIMEOUT: // Ha expirado el tiempo para obtener la localización
        msg = &#39;Ha expirado el tiempo para obtener la localización&#39;
        break
      case error.UNKNOWN_ERROR:
        msg = &#39;Se ha producido un error desconocido.&#39;
        break
    }
    muestra_error(msg)
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos ir obteniendo continuamente la posición podemos usar el método  &lt;strong&gt;.watchPosition()&lt;/strong&gt; que tiene los mismos parámetros y funciona igual pero se ejecuta repetidamente. Este método devuelve un identificador para que lo podemos detener cuando queremos con &lt;strong&gt;.clearWatch(ident)&lt;/strong&gt;. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const watchIdent = navigator.geolocation.watchPosition(
  (position) =&amp;gt; pinta_posicion(position.coords.latitude, position.coords.longitude),
  (error) =&amp;gt; muestra_error(error)
)
...
// Cuando queremos dejar de obtener la posición haremos
navigator.geolocation.clearWatch(watchIdent)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las principales propiedades del objeto de localización (algunas sólo estarán disponible cuando usemos un GPS) son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coords.latitude: latitud&lt;/li&gt;
&lt;li&gt;coords.longitude: longitud&lt;/li&gt;
&lt;li&gt;coords.accuracy: precisión (en metros)&lt;/li&gt;
&lt;li&gt;coords.altitude: altitud (en metros, sobre el nivel del mar)&lt;/li&gt;
&lt;li&gt;coords.altitudeAccuracy: precisión de la altitud&lt;/li&gt;
&lt;li&gt;coords.heading: orientación (en grados)&lt;/li&gt;
&lt;li&gt;coords.speed: velocidad (en metros/segundo)&lt;/li&gt;
&lt;li&gt;timestamp: tiempo de respuesta UNIX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos pasarle como tercer parámetro al método getCurrentPosition un objeto JSON con una o más de estas propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enableHighAccuracy: true/false que indica si el dispositivo debe usar todo lo posible para obtener la posición con mayor precisión (por defecto false porque consume más batería y tiempo)&lt;/li&gt;
&lt;li&gt;timeout: milisegundos a esperar para obtener la posición antes de lanzar un error (por defecto es 0, espera indefinidamente)&lt;/li&gt;
&lt;li&gt;maximumAge: milisegundos que guarda la última posición en caché. Si se solicita una nueva posición antes de expirar el&lt;br /&gt;
tiempo, el navegador devuelve directamente el dato almacenado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos obtener más información de esta API en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; y ver y modificar ejemplos en &lt;a href=&quot;http://www.w3schools.com/html/html5_geolocation.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt; y muchas otras páginas. i&lt;/p&gt;
&lt;h2 id=&quot;google-maps-api&quot; tabindex=&quot;-1&quot;&gt;Google Maps API&lt;/h2&gt;
&lt;p&gt;Para poder utilizar la API en primer lugar debemos &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/get-api-key&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;obtener una API KEY&lt;/a&gt; de Google.&lt;/p&gt;
&lt;p&gt;Una vez hecho para incluir un mapa en nuestra web debemos cargar la librería para lo que incluiremos en nuestro código el  script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script async defer
  src=&amp;quot;https://maps.googleapis.com/maps/api/js?key=ESCRIBE_AQUI_TU_API_KEY&amp;amp;callback=initMap&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(el parámetro &lt;em&gt;callback&lt;/em&gt; será el encargado de llamar a la función &lt;em&gt;initMap()&lt;/em&gt; que inicie el mapa)&lt;/p&gt;
&lt;p&gt;Ahora incluir un mapa es tán sencillo como crear un nuevo objeto de tipo &lt;em&gt;Map&lt;/em&gt; que recibe el elemento DOM donde se pintará (un div normalmente) y un objeto con los parámetros del mapa (como mínimo su centro y el zoom):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let map
function initMap() {
  map = new google.maps.Map(document.getElementById(&#39;map&#39;), {
    center: { lat: 38.6909085, lng: -0.4963000000000193 },
    zoom: 12
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por su parte añadir un marcador es igual de simple. Creamos una instancia de la clase &lt;em&gt;Marker&lt;/em&gt; a la que le pasamos al menos la posición, el mapa en que se creará y un título para el marcador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let marker = new google.maps.Marker({
  position: { lat: 38.6909085, lng: -0.4963000000000193 },
  map: map,
  title: &#39;CIP FP Batoi&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí tenéis el ejemplo anterior:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/pqzhd2vm/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Podemos obtener más información de esta API en &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google Maps Plataform&lt;/a&gt;, en el tutorial de &lt;a href=&quot;https://www.w3schools.com/graphics/google_maps_intro.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt; y en muchas otras páginas.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/10-apis/" >
        </entry>
        <entry>
            <title>
                09-ajax
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/09-ajax/</id>
            <content type="html">
                &lt;h1 id=&quot;ajax&quot; tabindex=&quot;-1&quot;&gt;Ajax&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ajax&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ajax&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos-http&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#json-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Json Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#rest-client&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;REST client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-objeto-xmlhttprequest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El objeto XMLHttpRequest&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-xmlhttprequest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de XMLHttpRequest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplos-de-env%C3%ADo-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplos de envío de datos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enviar-datos-al-servidor-en-formato-json&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enviar datos al servidor en formato JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enviar-datos-al-servidor-en-formato-uriencoded&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enviar datos al servidor en formato URIEncoded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enviar-ficheros-al-servidor-con-formdata&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enviar ficheros al servidor con FormData&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#callbakcs-promesas-y-asyncawait&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Callbakcs, Promesas y Async/Await&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#si-ajax-fuera-s%C3%ADncrono&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Si Ajax fuera síncrono...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-mala&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución mala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#algo-mejor-funciones-callback&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Algo mejor: Funciones &lt;em&gt;callback&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-buena-promesas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución buena: Promesas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#la-mejor-soluci%C3%B3n-usar-asyncawait&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;La mejor solución: usar &lt;em&gt;Async/Await&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-y-m%C3%A9todos-de-la-respuesta-de-fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades y métodos de la respuesta de &lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#gesti%C3%B3n-de-errores-con-fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Gestión de errores con &lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otros-m%C3%A9todos-de-petici%C3%B3n-con-fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otros métodos de petición con &lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#hacer-varias-peticiones-simult%C3%A1neamente-promiseall&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hacer varias peticiones simultáneamente. Promise.all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-bien-el-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar bien el código&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-fichero-env&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#distintas-peticiones-distintos-ficheros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Distintas peticiones, distintos ficheros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#single-page-application&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Single Page Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#resumen-de-llamadas-as%C3%ADncronas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Resumen de llamadas asíncronas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cors&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CORS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;AJAX es el acrónimo de &lt;strong&gt;&lt;em&gt;Asynchronous Javascript And XML&lt;/em&gt;&lt;/strong&gt; (Javascript asíncrono y XML) y es lo que usamos para hacer peticiones asíncronas al servidor desde Javascript. Cuando hacemos una petición al servidor no nos responde inmediatamente (la petición tiene que llegar al servidor, procesarse allí y enviarse la respuesta que llegará al cliente).&lt;/p&gt;
&lt;p&gt;Lo que significa &lt;strong&gt;asíncrono&lt;/strong&gt; es que la página no permanecerá bloqueada esperando esa respuesta sino que continuará ejecutando su código e interactuando con el usuario, y en el momento en que llegue la respuesta del servidor se ejecutará la función que indicamos al hacer la llamada Ajax. Respecto a &lt;strong&gt;XML&lt;/strong&gt;, es el formato en que se intercambia la información entre el servidor y el cliente, aunque actualmente el formato más usado es &lt;strong&gt;JSON&lt;/strong&gt; que es más simple y legible.&lt;/p&gt;
&lt;p&gt;Básicamente Ajax nos permite poder mostrar nuevos datos enviados por el servidor sin tener que recargar la página, que continuará disponible mientras se reciben y procesan los datos enviados por el servidor en segundo plano.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;By DanielSHaischt, via Wikimedia Commons [CC BY-SA 3.0 
 (https://creativecommons.org/licenses/by-sa/3.0
)], via Wikimedia Commons&quot; href=&quot;https://commons.wikimedia.org/wiki/File:Ajax-vergleich-en.svg&quot;&gt;&lt;img width=&quot;512&quot; alt=&quot;Ajax-vergleich-en&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Ajax-vergleich-en.svg/512px-Ajax-vergleich-en.svg.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sin Ajax cada vez que necesitamos nuevos datos del servidor la página deja de estar disponible para el usuario hasta que se recarga con lo que envía el servidor. Con Ajax la página está siempre disponible para el usuario y simplemente se modifica (cambiando el DOM) cuando llegan los datos del servidor:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://uniwebsidad.com/static/libros/imagenes/ajax/f0103.gif&quot; alt=&quot;Uniwebsidad: Introducción a Ajax&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Fuente Uniwebsidad&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;metodos-http&quot; tabindex=&quot;-1&quot;&gt;Métodos HTTP&lt;/h3&gt;
&lt;p&gt;Las peticiones Ajax usan el protocolo HTTP (el mismo que utiliza el navegador para cargar una página). Este protocolo envía al servidor unas cabeceras HTTP (con información como el &lt;em&gt;userAgent&lt;/em&gt; del navegador, el idioma, etc), el tipo de petición y, opcionalmente, datos o parámetros (por ejemplo en la petición que procesa un formulario se envían los datos del mismo).&lt;/p&gt;
&lt;p&gt;Hay diferentes tipos de petición que podemos hacer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;: suele usarse para obtener datos sin modificar nada (equivale a un SELECT en SQL). Si enviamos datos (ej. la ID del registro a obtener) suelen ir en la url de la petición (formato URIEncoded). Ej.: locahost/users/3, &lt;a href=&quot;https://jsonplaceholder.typicode.com/users&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://jsonplaceholder.typicode.com/users&lt;/a&gt; o &lt;a href=&quot;https://pedroporo.github.io/www.google.es?search=js&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;www.google.es?search=js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;: suele usarse para añadir un dato en el servidor (equivalente a un INSERT). Los datos enviados van en el cuerpo de la petición HTTP (igual que sucede al enviar desde el navegador un formulario por POST)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;: es similar al &lt;em&gt;POST&lt;/em&gt; pero suele usarse para actualizar datos del servidor (como un UPDATE de SQL). Los datos se envían en el cuerpo de la petición (como en el POST) y la información para identificar el objeto a modificar en la url (como en el GET). El servidor hará un UPDATE sustituyendo el objeto actual por el que se le pasa como parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: es similar al PUT pero la diferencia es que en el PUT hay que pasar todos los campos del objeto a modificar (los campos no pasados se eliminan del objeto) mientras que en el PATCH sólo se pasan los campos que se quieren cambiar y en resto permanecen como están&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;: se usa para eliminar un dato del servidor (como un DELETE de SQL). La información para identificar el objeto a eliminar se envía en la url (como en el GET)&lt;/li&gt;
&lt;li&gt;existen otros tipos que no veremos aquí (como &lt;em&gt;HEAD&lt;/em&gt;, &lt;em&gt;PATCH&lt;/em&gt;, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El servidor acepta la petición, la procesa y le envía una respuesta al cliente con el recurso solicitado y además unas cabeceras de respuesta (con el tipo de contenido enviado, el idioma, etc) y el código de estado. Los códigos de estado más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2xx: son peticiones procesadas correctamente. Las más usuales son 200 (&lt;em&gt;ok&lt;/em&gt;) o 201 (&lt;em&gt;created&lt;/em&gt;, como respuesta a una petición POST satisfactoria)&lt;/li&gt;
&lt;li&gt;3xx: son códigos de redirección que indican que la petición se redirecciona a otro recurso del servidor, como 301 (el recurso se ha movido permanentemente a otra URL) o 304 (el recurso no ha cambiado desde la última petición por lo que se puede recuperar desde la caché)&lt;/li&gt;
&lt;li&gt;4xx: indican un error por parte del cliente, como 404 (&lt;em&gt;Not found&lt;/em&gt;, no existe el recurso solicitado) o 401 (&lt;em&gt;Not authorized&lt;/em&gt;, el cliente no está autorizado a acceder al recurso solicitado)&lt;/li&gt;
&lt;li&gt;5xx: indican un error por parte del servidor, como 500 (error interno del servidor) o 504 (&lt;em&gt;timeout&lt;/em&gt;, el servidor no responde).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En cuanto a la información enviada por el servidor al cliente normalmente serán datos en formato &lt;strong&gt;JSON&lt;/strong&gt; o XML (cada vez menos usado) que el cliente procesará y mostrará en la página al usuario. También podría ser HTML, texto plano, ...&lt;/p&gt;
&lt;p&gt;El formato &lt;em&gt;JSON&lt;/em&gt; es una forma de convertir un objeto Javascript en una cadena de texto para poderla enviar, por ejemplo el objeto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumno = {
  id: 5,
  nombre: Marta,
  apellidos: Pérez Rodríguez
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se transformaría en la cadena de texto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{ &amp;quot;id&amp;quot;: 5, &amp;quot;nombre&amp;quot;: &amp;quot;Marta&amp;quot;, &amp;quot;apellidos&amp;quot;: &amp;quot;Pérez Rodríguez&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y el array&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnos = [
  {
    id: 5,
    nombre: &amp;quot;Marta&amp;quot;,
    apellidos: &amp;quot;Pérez Rodríguez&amp;quot;
  },
  {
    id: 7,
    nombre: &amp;quot;Joan&amp;quot;,
    apellidos: &amp;quot;Reig Peris&amp;quot;
  },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;en la cadena:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{ &amp;quot;id&amp;quot;: 5, &amp;quot;nombre&amp;quot;: Marta, &amp;quot;apellidos&amp;quot;: Pérez Rodríguez }, { &amp;quot;id&amp;quot;: 7, &amp;quot;nombre&amp;quot;: &amp;quot;Joan&amp;quot;, &amp;quot;apellidos&amp;quot;: &amp;quot;Reig Peris&amp;quot; }]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para convertir objetos en cadenas de texto &lt;em&gt;JSON&lt;/em&gt; y viceversa Javascript proporciona 2 funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JSON.stringify(&lt;em&gt;objeto&lt;/em&gt;)&lt;/strong&gt;: recibe un objeto JS y devuelve la cadena de texto correspondiente. Ej.: &lt;code&gt;const cadenaAlumnos = JSON.stringify(alumnos)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON.parse(&lt;em&gt;cadena&lt;/em&gt;)&lt;/strong&gt;: realiza el proceso inverso, convirtiendo una cadena de texto en un objeto. Ej.: &lt;code&gt;const alumnos = JSON.parse(cadenaAlumnos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Vamos a realizar diferentes peticions HTTP a la API &lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://jsonplaceholder.typicode.com&lt;/a&gt;, en concreto trabajaremos contra la tabla &lt;strong&gt;todos&lt;/strong&gt; con tareas para hacer. Las peticiones GET podríamos hacerlas directamente desde el navegador pero para el resto debemos instalar alguna de las extensiones de cliente REST en nuestro navegador. Por tanto instalaremos dicha extensión (por ejemplo &lt;a href=&quot;https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Advanced Rest Client&lt;/em&gt;&lt;/a&gt; para Chrome o &lt;a href=&quot;https://addons.mozilla.org/es/firefox/addon/rested/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Rested&lt;/em&gt;&lt;/a&gt; para Firefox y haremos todas las peticiones desde allí (incluyendo los GET) lo que nos permitirá ver los códigos de estado devueltos, las cabeceras, etc.&lt;/p&gt;
&lt;p&gt;Lo que queremos hacer en este ejercicio es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;obtener todas las tareas (devuelve un array con todas las tareas y el código devuelto será 200 - Ok)&lt;br /&gt;
![GET all](/img/user/notas/Javascript Teoria Batoi/img/Ajax-GETall.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;obtener la tarea con id 55 (devuelve el objeto de la tarea 55 y el código devuelto será 200 - Ok)&lt;br /&gt;
![GET one](/img/user/notas/Javascript Teoria Batoi/img/Ajax-GETone.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;obtener la tarea con id 201 (como no existe devolverá un objeto vacío y como código de error 404 - Not found)&lt;br /&gt;
![GET Non Existent](/img/user/notas/Javascript Teoria Batoi/img/Ajax-GETnonExistent.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crear una nueva tarea. En el cuerpo de la petición le pasaremos sus datos: userID: 1, title: Prueba de POST y completed: false. No se le pasa la id (de eso se encarga la BBDD). La respuesta debe ser un código 201 (created) y el nuevo registro creado con todos sus datos incluyendo la id. Como es una API de prueba en realidad no lo está añadiendo a la BBDD por lo que si luego hacemos una petición buscando esa id nos dirá que no existe.&lt;br /&gt;
![POST](/img/user/notas/Javascript Teoria Batoi/img/Ajax-POST.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modificar con un PATCH la tarea con id 55 para que su title sea &#39;Prueba de POST&#39;. Devolverá el nuevo registro con un código 200. Como veis al hacer un PATCH los campos que no se pasan se mantienen como estaban&lt;br /&gt;
![PATCH](/img/user/notas/Javascript Teoria Batoi/img/Ajax-PATCH.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modificar con un PUT la tarea con id 55 para que su title sea &#39;Prueba de POST&#39;. Devolverá el nuevo registro con un código 200. Como veis en esta API los campos que no se pasan se eliminan; en otras los campos no pasados se mantienen como estaban&lt;br /&gt;
![PUT](/img/user/notas/Javascript Teoria Batoi/img/Ajax-PUT.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eliminar la tarea con id 55. Como veis esta API devuelve un objeto vacío al eliminar; otras devuelven el objeto eliminado&lt;br /&gt;
![DELETE](/img/user/notas/Javascript Teoria Batoi/img/Ajax-DELETE.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;json-server&quot; tabindex=&quot;-1&quot;&gt;Json Server&lt;/h3&gt;
&lt;p&gt;Las peticiones Ajax se hacen a un servidor que proporcione una API. Como ahora no tenemos ninguno podemos utilizar Json Server que es un servidor API-REST que funciona bajo Node.js (que ya tenemos instalado para usar NPM) y que utiliza un fichero JSON como contenedor de los datos en lugar de una base de datos.&lt;/p&gt;
&lt;p&gt;Para instalarlo en nuestra máquina (lo instalaremos global para poderlo usar en todas nuestras prácticas) ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g json-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para que sirva un fichero datos.json:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;json-server datos.json 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le podemos poner la opción &lt;em&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;/em&gt; ( o &lt;code&gt;-w&lt;/code&gt;) para que actualice los datos si se modifica el fichero &lt;em&gt;.json&lt;/em&gt; externamente (si lo editamos).&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;datos.json&lt;/em&gt; será un fichero que contenga un objeto JSON con una propiedad para cada &amp;quot;&lt;em&gt;tabla&lt;/em&gt;&amp;quot; de nuestra BBDD. Por ejemplo, si queremos simular una BBDD con las tablas &lt;em&gt;users&lt;/em&gt; y &lt;em&gt;posts&lt;/em&gt; vacías el contenido del fichero será:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;users&amp;quot;: [],
  &amp;quot;posts&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La API escucha en el puerto 3000 y servirá los diferentes objetos definidos en el fichero &lt;em&gt;.json&lt;/em&gt;. Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/users:&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000/users:&lt;/a&gt; devuelve un array con todos los elementos de la tabla &lt;em&gt;users&lt;/em&gt; del fichero &lt;em&gt;.json&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/users/5:&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000/users/5:&lt;/a&gt; devuelve un objeto con el elemento de la tabla &lt;em&gt;users&lt;/em&gt; cuya propiedad &lt;em&gt;id&lt;/em&gt; valga 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También pueden hacerse peticiones más complejas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/users?rol=3:&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000/users?rol=3:&lt;/a&gt; devuelve un array con todos los elementos de &lt;em&gt;users&lt;/em&gt; cuya propiedad &lt;em&gt;rol&lt;/em&gt; valga 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para más información: &lt;a href=&quot;https://github.com/typicode/json-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/typicode/json-server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos acceder a la API desde otro equipo (no desde &lt;em&gt;localhost&lt;/em&gt;) tenemos que indicar la IP de la máquina que ejecuta &lt;em&gt;json-server&lt;/em&gt; y que se usará para acceder, por ejemplo si vamos a ejecutarlo en la máquina 192.168.0.10 pondremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-[bash]&quot;&gt;json-server --host 192.168.0.10 datos.json 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la ruta para acceder a la API será &lt;code&gt;http://192.168.0.10:3000&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: instalar json-server en tu máquina. Ejecútalo indicando un nombre de fichero que no existe: como verás crea un fichero json de prueba con 3 tablas: &lt;em&gt;posts&lt;/em&gt;, &lt;em&gt;comments&lt;/em&gt; y &lt;em&gt;profiles&lt;/em&gt;. Ábrelo en tu navegador para ver los datos&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;rest-client&quot; tabindex=&quot;-1&quot;&gt;REST client&lt;/h3&gt;
&lt;p&gt;Para probar las peticiones GET podemos poner la URL en la barra de direcciones del navegador pero para probar el resto de peticiones debemos instalar en nuestro navegador una extensión que nos permita realizar las peticiones indicando el método a usar, las cabeceras a enviar y los datos que enviaremos a servidor, además de la URL.&lt;/p&gt;
&lt;p&gt;Existen multitud de aplicaciones para realizar peticiones HTTP, como &lt;a href=&quot;https://install.advancedrestclient.com/install&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Advanced REST client&lt;/a&gt;. Cada navegador tiene sus propias extensiones para hacer esto, como &lt;a href=&quot;https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Advanced Rest Client&lt;/em&gt;&lt;/a&gt; para Chrome o &lt;a href=&quot;https://addons.mozilla.org/es/firefox/addon/restclient/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;RestClient&lt;/em&gt;&lt;/a&gt; para Firefox.&lt;/p&gt;
&lt;h2 id=&quot;el-objeto-xml-http-request&quot; tabindex=&quot;-1&quot;&gt;El objeto XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;Hasta ahora hemos hecho un repaso a lo que es el protocolo HTTP. Ahora que lo tenemos claro y hemos instalado un servidor que nos proporciona una API (json-server) vamos a realizar peticiones HTTP en nuestro código javascript usando Ajax.&lt;/p&gt;
&lt;p&gt;Para hacer una petición debemos crear una instancia del objeto &lt;strong&gt;XMLHttpRequest&lt;/strong&gt; que es el que controlará todo el proceso. Los pasos a seguir son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creamos la instancia del objeto: &lt;code&gt;const peticion=new XMLHttpRequest()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Para establecer la comunicación con el servidor ejecutamos el método &lt;strong&gt;.open()&lt;/strong&gt; al que se le pasa como parámetro el tipo de petición (GET, POST, ...) y la URL del servidor: &lt;code&gt;peticion.open(&#39;GET&#39;, &#39;https://jsonplaceholder.typicode.com/users&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OPCIONAL: Si queremos añadir cabeceras a la petición HTTP llamaremos al método &lt;strong&gt;.setRequestHeader()&lt;/strong&gt;. Por ejemplo si enviamos datos con POST hay que añadir la cabecera &lt;em&gt;Content-type&lt;/em&gt; que le indica al servidor en qué formato van los datos: &lt;code&gt;peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enviamos la petición al servidor con el método &lt;strong&gt;.send()&lt;/strong&gt;. A este método se le pasa como parámetro los datos a enviar al servidor en el cuerpo de la petición (si es un POST, PUT o PATCH le pasaremos una cadena de texto con los datos a enviar: &lt;code&gt;peticion.send(&#39;dato1=&#39;+encodeURIComponent(dato1)+&#39;&amp;amp;dato2=&#39;+encodeURIComponent(dato2))&lt;/code&gt;). Si es una petición GET o DELETE no le pasaremos datos (&lt;code&gt;peticion.send()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Ponemos un escuchador al objeto &lt;em&gt;peticion&lt;/em&gt; para saber cuándo está disponible la respuesta del servidor&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;eventos-de-xml-http-request&quot; tabindex=&quot;-1&quot;&gt;Eventos de XMLHttpRequest&lt;/h3&gt;
&lt;p&gt;Tenemos diferentes eventos que el servidor envía para informarnos del estado de nuestra petición y que nosotros podemos capturar. El evento &lt;strong&gt;readystatechange&lt;/strong&gt; se produce cada vez que el servidor cambia el estado de la petición. Cuando hay un cambio en el estado cambia el valor de la propiedad &lt;strong&gt;readyState&lt;/strong&gt; de la petición. Sus valores posibles son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: petición no iniciada (se ha creado el objeto XMLHttpRequest)&lt;/li&gt;
&lt;li&gt;1: establecida conexión con el servidor (se ha hecho el &lt;em&gt;open&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;2: petición recibida por el servidor (se ha hecho el &lt;em&gt;send&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;3: se está procesando la petición&lt;/li&gt;
&lt;li&gt;4: petición finalizada y respuesta lista (este es el evento que nos interesa porque ahora tenemos la respuesta disponible)&lt;br /&gt;
A nosotros sólo nos interesa cuando su valor sea 4 que significa que ya están los datos. En ese momento la propiedad &lt;strong&gt;status&lt;/strong&gt; contiene el estado de la petición HTTP (200: &lt;em&gt;Ok&lt;/em&gt;, 404: &lt;em&gt;Not found&lt;/em&gt;, 500: &lt;em&gt;Server error&lt;/em&gt;, ...) que ha devuelto el servidor. Cuando &lt;em&gt;readyState&lt;/em&gt; vale 4 y &lt;em&gt;status&lt;/em&gt; vale 200 tenemos los datos en la propiedad &lt;strong&gt;responseText&lt;/strong&gt; (o &lt;strong&gt;responseXML&lt;/strong&gt; si el servidor los envía en formato XML).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El siguiente ejemplo nos enseña cómo se producen los distintos eventos en una petición asíncrona:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const peticion = new XMLHttpRequest();
console.log(&amp;quot;Estado inicial de la petición: &amp;quot; + peticion.readyState);
peticion.open(&#39;GET&#39;, &#39;https://jsonplaceholder.typicode.com/users&#39;);
console.log(&amp;quot;Estado de la petición tras el &#39;open&#39;: &amp;quot; + peticion.readyState);
peticion.send();
console.log(&amp;quot;Petición hecha&amp;quot;);
peticion.addEventListener(&#39;readystatechange&#39;, function() {
    console.log(&amp;quot;Estado de la petición: &amp;quot; + peticion.readyState);
    if (peticion.readyState === 4) {
        if (peticion.status === 200) {
            console.log(&amp;quot;Datos recibidos:&amp;quot;);
            let usuarios = JSON.parse(peticion.responseText);  // Convertirmos los datos JSON a un objeto
            console.log(usuarios);
        } else {
            console.log(&amp;quot;Error &amp;quot; + peticion.status + &amp;quot; (&amp;quot; + peticion.statusText + &amp;quot;) en la petición&amp;quot;);
        }
    }
})
console.log(&amp;quot;Petición acabada&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado de ejecutar ese código es el siguiente:&lt;/p&gt;
&lt;p&gt;![Ejemplo 1: consola](/img/user/notas/Javascript Teoria Batoi/img/ajax-ej1.png)&lt;/p&gt;
&lt;p&gt;Fijaos cuándo cambia de estado (&lt;em&gt;readyState&lt;/em&gt;) la petición:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vale 0 al crear el objeto XMLHttpRequest&lt;/li&gt;
&lt;li&gt;vale 1 cuando abrimos la conexión con el servidor&lt;/li&gt;
&lt;li&gt;luego se envía al servidor y es éste el que va informando al cliente de cuándo cambia su estado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MUY IMPORTANTE&lt;/strong&gt;: notad que la última línea (&#39;Petición acabada&#39;) se ejecuta antes que las de &#39;Estado de la petición&#39;. Recordad que es una &lt;strong&gt;petición asíncrona&lt;/strong&gt; y la ejecución del programa continúa sin esperar a que responda el servidor.&lt;/p&gt;
&lt;p&gt;Como normalmente no nos interesa cada cambio en el estado de la petición sino que sólo queremos saber cuándo ha terminado de procesarse tenemos otros eventos que nos pueden ser de utilidad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;load&lt;/strong&gt;: se produce cuando se recibe la respuesta del servidor. Equivale a &lt;em&gt;readyState===4&lt;/em&gt;. En &lt;em&gt;status&lt;/em&gt; tendremos el estado de la respuesta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error&lt;/strong&gt;: se produce si sucede algún error al procesar la petición (de red, de servidor, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;timeout&lt;/strong&gt;: si ha transcurrido el tiempo indicado y no se ha recibido respuesta del servidor. Podemos cambiar el tiempo por defecto modificando la propiedad &lt;em&gt;timeout&lt;/em&gt; antes de enviar la petición&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abort&lt;/strong&gt;: si se cancela la petición (se hace llamando al método &lt;strong&gt;.abort()&lt;/strong&gt; de la petición)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loadend&lt;/strong&gt;: se produce siempre que termina la petición, independientemente de si se recibe respuesta o sucede algún error (incluyendo un &lt;em&gt;timeout&lt;/em&gt; o un &lt;em&gt;abort&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este es un ejemplo de código que sí podríamos usar para este tipo de peticiones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const peticion=new XMLHttpRequest();
peticion.open(&#39;GET&#39;, &#39;https://jsonplaceholder.typicode.com/users&#39;);
peticion.send();
peticion.addEventListener(&#39;load&#39;, function() {
    if (peticion.status===200) {
        let usuarios=JSON.parse(peticion.responseText);
        // procesamos los datos que tenemos en usuarios
    } else {
        muestraError(peticion);
    }
})
peticion.addEventListener(&#39;error&#39;, muestraError);
peticion.addEventListener(&#39;abort&#39;, muestraError);
peticion.addEventListener(&#39;timeout&#39;, muestraError);

function muestraError(peticion) {
    if (peticion.status) {
        console.log(&amp;quot;Error &amp;quot;+peticion.status+&amp;quot; (&amp;quot;+peticion.statusText+&amp;quot;) en la petición&amp;quot;);
    } else {
        console.log(&amp;quot;Ocurrió un error o se abortó la conexión&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuerda que tratamos con peticiones asíncronas por lo que tras la línea&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;peticion.addEventListener(&#39;load&#39;, function() {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;no se ejecuta la línea siguiente&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    if (peticion.status===200) {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sino la de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;peticion.addEventListener(&#39;error&#39;, muestraError);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una petición asíncrona es como pedir una pizza: tras llamar por teléfono lo siguiente no es ir a la puerta a recogerla sino que seguimos haciendo cosas por casa y cuando suena el timbre de casa entonces vamos a la puerta a por ella.&lt;/p&gt;
&lt;h3 id=&quot;ejemplos-de-envio-de-datos&quot; tabindex=&quot;-1&quot;&gt;Ejemplos de envío de datos&lt;/h3&gt;
&lt;p&gt;Podemos enviar datos al servidor en el cuerpo de la petición &lt;em&gt;http&lt;/em&gt;. Siempre deberemos indicar en una cabecera de la petición en qué formato enviamos los datos y en función de dicho formato se hace la petición de diferente manera.&lt;/p&gt;
&lt;p&gt;Vamos a ver algunos ejemplos de envío de datos al servidor con POST. Supondremos que tenemos una página con un formulario para dar de alta nuevos productos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form id=&amp;quot;addProduct&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Nombre: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; id=&amp;quot;name&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;label for=&amp;quot;descrip&amp;quot;&amp;gt;Descripción: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;descrip&amp;quot; id=&amp;quot;descrip&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;

    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Añadir&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;enviar-datos-al-servidor-en-formato-json&quot; tabindex=&quot;-1&quot;&gt;Enviar datos al servidor en formato JSON&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const newProduct={
      name: document.getElementById(&amp;quot;name&amp;quot;).value,
      descrip: document.getElementById(&amp;quot;descrip&amp;quot;).value,
  }    
  const peticion=new XMLHttpRequest();
  peticion.open(&#39;POST&#39;, &#39;https://localhost/products&#39;);
  peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/json&#39;);  // Siempre tiene que estar esta línea si se envían datos
  peticion.send(JSON.stringify(newProduct));              // Hay que convertir el objeto a una cadena de texto JSON para enviarlo
  peticion.addEventListener(&#39;load&#39;, function() {
    // procesamos los datos
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para enviar el objeto hay que convertirlo a una cadena JSON con la función &lt;strong&gt;JSON.stringify()&lt;/strong&gt;. Siempre que enviamos datos al servidor debemos decirle el formato que tienen en la cabecera de &lt;em&gt;Content-type&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/json&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;enviar-datos-al-servidor-en-formato-uri-encoded&quot; tabindex=&quot;-1&quot;&gt;Enviar datos al servidor en formato URIEncoded&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const name=document.getElementById(&amp;quot;name&amp;quot;).value;
  const descrip=document.getElementById(&amp;quot;descrip&amp;quot;).value;

  const peticion=new XMLHttpRequest();
  peticion.open(&#39;GET&#39;, &#39;https://localhost/products&#39;);
  peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);
  peticion.send(&#39;name=&#39;+encodeURIComponent(name)+&#39;&amp;amp;descrip=&#39;+encodeURIComponent(descrip));
  peticion.addEventListener(&#39;load&#39;, function() {
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso los datos se envían como hace el navegador por defecto en un formulario. Recordad siempre codificar lo que introduce el usuario para evitar problemas con caracteres no estándar y &lt;strong&gt;ataques &lt;em&gt;SQL Injection&lt;/em&gt;&lt;/strong&gt; u otros.&lt;/p&gt;
&lt;h4 id=&quot;enviar-ficheros-al-servidor-con-form-data&quot; tabindex=&quot;-1&quot;&gt;Enviar ficheros al servidor con FormData&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/XMLHttpRequest/FormData&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;FormData&lt;/a&gt; es una interfaz de XMLHttpRequest que permite construir fácilmente pares de &lt;code&gt;clave=valor&lt;/code&gt; para enviar los datos de un formulario. Se envían en el mismo formato en que se enviarían directamente desde un formulario (&amp;quot;multipart/form-data&amp;quot;) por lo que no hay que poner encabezado de &#39;Content-type&#39;.&lt;/p&gt;
&lt;p&gt;De esta manera podemos enviar ficheros al servidor, no sólo valores de texto.&lt;/p&gt;
&lt;p&gt;Vamos a añadir al formulario un campo donde el usuario pueda subir la foto del producto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form id=&amp;quot;addProduct&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Nombre: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; id=&amp;quot;name&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;label for=&amp;quot;descrip&amp;quot;&amp;gt;Descripción: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;descrip&amp;quot; id=&amp;quot;descrip&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;label for=&amp;quot;photo&amp;quot;&amp;gt;Fotografía: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;photo&amp;quot; id=&amp;quot;photo&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;

    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Añadir&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos enviar al servidor todo el contenido del formulario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const peticion=new XMLHttpRequest();
  const datosForm = new FormData(document.getElementById(&#39;addProduct&#39;));
  // Automáticamente ha añadido todos los inputs, incluyendo tipo &#39;file&#39;, blob, ...
  // Si quisiéramos añadir algún dato más haríamos:
  formData.append(&#39;otrodato&#39;, 12345);
  // Y lo enviamos
  peticion.open(&#39;POST&#39;, &#39;https://localhost/products&#39;);
  peticion.send(datosForm);
  peticion.addEventListener(&#39;load&#39;, function() {
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos enviar sólo los campos que queramos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const formData=new FormData();  // creamos un formData vacío
  formData.append(&#39;name&#39;, document.getElementById(&#39;name&#39;).value);
  formData.append(&#39;descrip&#39;, document.getElementById(&#39;descrip&#39;).value);
  formData.append(&#39;photo&#39;, document.getElementById(&#39;photo&#39;).files[0]);

  const peticion=new XMLHttpRequest();
  peticion.open(&#39;POST&#39;, &#39;https://localhost/products&#39;);
  peticion.send(formData);
  peticion.addEventListener(&#39;load&#39;, function() {
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver más información de cómo usar formData en &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/Guide/Usando_Objetos_FormData&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;callbakcs-promesas-y-async-await&quot; tabindex=&quot;-1&quot;&gt;Callbakcs, Promesas y Async/Await&lt;/h2&gt;
&lt;p&gt;Para ver un ejemplo real de cómo e haría una llamada a Ajax vamos a hacer una página que muestre en una tabla los posts del usuario indicado en un input. En resumen lo que hacemos es:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El usuario de nuestra aplicación introduce el código del usuario del que queremos ver sus posts&lt;/li&gt;
&lt;li&gt;Tenemos un escuchador para que al introducir un código de un usuario llamamos a una función &lt;em&gt;getPosts()&lt;/em&gt; que:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Se encarga de hacer la petición Ajax al servidor&lt;/li&gt;
&lt;li&gt;Si se produce un error se encarga de informar al usuario de nuestra aplicación&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Cuando se reciben los datos del servidor deben pintarse en la tabla&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;si-ajax-fuera-sincrono&quot; tabindex=&quot;-1&quot;&gt;Si Ajax fuera síncrono...&lt;/h3&gt;
&lt;p&gt;Si Ajax no fuera una petición asíncrona el código de todo esto será algo como el siguiente (ATENCIÓN, este código &lt;strong&gt;NO FUNCIONA&lt;/strong&gt;):&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/b0znLwkt/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Pero esto no funciona porque el valor de &lt;code&gt;posts&lt;/code&gt; siempre es &lt;em&gt;undefined&lt;/em&gt;. Esto es porque cuando se llama a &lt;code&gt;getPosts&lt;/code&gt; esta función no devuelve nada (por eso &lt;em&gt;posts&lt;/em&gt; es undefined) sino que devuelve los datos tiempo después, cuando el servidor contesta, pero entonces ya no hay nadie escuchando.&lt;/p&gt;
&lt;h3 id=&quot;solucion-mala&quot; tabindex=&quot;-1&quot;&gt;Solución mala&lt;/h3&gt;
&lt;p&gt;La solución es que todo el código, no sólo de la petición Ajax sino también el de qué hacer con los datos cuando llegan, se encuentre en la función que pide los datos al servidor:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/y8xdk1t4/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Este código sí que funcionaría pero tiene una pega: tenemos que tratar los datos (en este caso pintarlos en la tabla) en la función que gestiona la petición porque es la que sabe cuándo están disponibles esos datos. Y sabemos que una función no debería tener 2 responsabilidades diferentes (obtener los datos del servidor y renderizarlos en la página).&lt;/p&gt;
&lt;h3 id=&quot;algo-mejor-funciones-em-callback-em&quot; tabindex=&quot;-1&quot;&gt;Algo mejor: Funciones &lt;em&gt;callback&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Esto se podría mejorar usando una función &lt;strong&gt;&lt;em&gt;callback&lt;/em&gt;&lt;/strong&gt;. La idea es que creamos una función que procese los datos (&lt;code&gt;renderPosts&lt;/code&gt;) y se la pasamos a &lt;code&gt;getPosts&lt;/code&gt; para que la llame cuando tenga los datos:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/cob8m3zx/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Hemos creado una función que se ocupa de renderizar los datos y se la pasamos a la función que gestiona la petición para que la llame cuando los datos están disponibles. Utilizando la función &lt;em&gt;callback&lt;/em&gt; hemos conseguido que &lt;em&gt;getPosts()&lt;/em&gt; se encargue sólo de obtener los datos y cuando los tenga los pasa a la encargada de pintarlos en la tabla.&lt;/p&gt;
&lt;h3 id=&quot;solucion-buena-promesas&quot; tabindex=&quot;-1&quot;&gt;Solución buena: Promesas&lt;/h3&gt;
&lt;p&gt;Sin embargo hay una forma más limpia de resolver una función asíncrona y que el código se parezca al primero que hicimos que no funcionaba, donde la función &lt;code&gt;getPosts()&lt;/code&gt; sólo debía ocuparse de obtener los datos y devolverlos a quien se los pidió. Ese código era:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    ...
    let idUser = document.getElementById(&#39;id-usuario&#39;).value;
    if (isNaN(idUser) || idUser == &#39;&#39;) {
      alert(&#39;Debes introducir un número&#39;);
    } else {
      const posts = getPosts(idUser);
      // y aquí usamos los datos recibidos, en este caso para pintar los posts
    }
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como dijimos esto NO funciona, a menos que convirtamos a &lt;code&gt;getPosts()&lt;/code&gt; en una &lt;strong&gt;&lt;em&gt;promesa&lt;/em&gt;&lt;/strong&gt;. Cuando se realiza una llamada a una promesa quien la llama puede usar unos métodos (&lt;em&gt;.then()&lt;/em&gt; y &lt;em&gt;.catch()&lt;/em&gt;) que NO SE EJECUTARÁN hasta que la promesa se haya resuelto (es decir, hasta que el servidor haya contestado):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.then(_function(datos) { ... }_)&lt;/code&gt;&lt;/strong&gt;: se ejecuta cuando la promesa se haya resuelto satisfactoriamente. Su parámetro es una función que recibe como parámetro los datos que haya devuelto la promesa (que serán los datos pedidos al servidor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.catch(&lt;em&gt;function(datos) { ... }&lt;/em&gt;)&lt;/strong&gt;: se ejecuta cuando se haya rechazado la promesa (si ha fallado, normalmente porque se ha recibido una respuesta errónea del servidor). Esta función recibe como parámetro la información pasada por la promesa al ser rechazada (que será información sobre el error producido).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De esta manera nuestro código quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    ...
    let idUser = document.getElementById(&#39;id-usuario&#39;).value
    if (isNaN(idUser) || idUser == &#39;&#39;) {
      alert(&#39;Debes introducir un número&#39;)
    } else {
      getPosts(idUser)
        .then((posts) =&amp;gt; {  // aquí ya tenemos los datos en &#39;posts&#39;
          tbody.innerHTML = &#39;&#39;
          posts.forEach((post) =&amp;gt; {
            const newPost = document.createElement(&#39;tr&#39;)
            newPost.innerHTML = `
                &amp;lt;td&amp;gt;${post.userId}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${post.id}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${post.title}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${post.body}&amp;lt;/td&amp;gt;`
            tbody.appendChild(newPost)
          })
          document.getElementById(&#39;num-posts&#39;).textContent = posts.length
        })
          // en el .catch() está el tratamiento de errores
        .catch((error) =&amp;gt; console.error(error))
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para convertir a &lt;em&gt;&lt;code&gt;getPosts()&lt;/code&gt;&lt;/em&gt; en una promesa sólo tenemos que &amp;quot;envolverla&amp;quot; en la instrucción&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  return new Promise((resolve, reject) =&amp;gt; {
    // Aquí el contenido de GetPosts()
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto hace que devuelva un objeto de tipo &lt;em&gt;Promise&lt;/em&gt; (&lt;code&gt;return new Promise()&lt;/code&gt;) cuyo parámetro es una función que recibe 2 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;resolve&lt;/em&gt;&lt;/strong&gt;: función &lt;em&gt;callback&lt;/em&gt; a la que se llamará cuando se resuelva la promesa satisfactoriamente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;reject&lt;/em&gt;&lt;/strong&gt;: función &lt;em&gt;callback&lt;/em&gt; a la que se llamará si se resuelve la promesa con errores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El funcionamiento es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuando la promesa se resuelva satisfactoriamente &lt;em&gt;getPosts&lt;/em&gt; llama a la función &lt;strong&gt;&lt;em&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; y le pasa los datos recibidos por el servidor. Esto hace que se ejecute el método &lt;strong&gt;&lt;em&gt;then&lt;/em&gt;&lt;/strong&gt; de la llamada a la promesa que recibirá como parámetro esos datos&lt;/li&gt;
&lt;li&gt;si se produce algún error se rechaza la promesa llamando a la función &lt;strong&gt;&lt;em&gt;&lt;code&gt;reject()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; y pasando como parámetro la información del fallo producido y esto hará que se ejecute el &lt;strong&gt;&lt;em&gt;.catch&lt;/em&gt;&lt;/strong&gt; en la función que llamó a la promesa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto nuestra función &lt;em&gt;getPosts&lt;/em&gt; ahora quedará así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getPosts(idUser) {
  return new Promise((resolve, reject) =&amp;gt; {
    const peticion = new XMLHttpRequest();
    peticion.open(&#39;GET&#39;, SERVER + &#39;/posts?userId=&#39; + idUser);
    peticion.send();
    peticion.addEventListener(&#39;load&#39;, () =&amp;gt; {
      if (peticion.status === 200) {
        resolve(JSON.parse(peticion.responseText));
      } else {
        reject(&amp;quot;Error &amp;quot; + peticion.status + &amp;quot; (&amp;quot; + peticion.statusText + &amp;quot;) en la petición&amp;quot;);
      }
    })
    peticion.addEventListener(&#39;error&#39;, () =&amp;gt; reject(&#39;Error en la petición HTTP&#39;));
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que el único cambio es la primera línea donde convertimos nuestra función en una promesa, y que luego para &amp;quot;devolver&amp;quot; los datos en lugar de hacer un &lt;em&gt;return&lt;/em&gt;, que ya hemos visto que no funciona, se hace un &lt;em&gt;resolve&lt;/em&gt; si todo ha ido bien o un &lt;em&gt;reject&lt;/em&gt; si ha fallado.&lt;/p&gt;
&lt;p&gt;Desde donde llamamos a la promesa nos suscribimos a ella usando los métodos &lt;strong&gt;&lt;em&gt;.then()&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;.catch()&lt;/em&gt;&lt;/strong&gt; que hemos visto anteriormente.&lt;/p&gt;
&lt;p&gt;Básicamente lo que nos van a proporcionar las promesas es un código más claro y mantenible ya que el código a ejecutar cuando se obtengan los datos asíncronamente estará donde se piden esos datos y no en una función escuchadora o en una función &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Utilizando promesas vamos a conseguir que la función que pide los datos sea quien los obtiene y los trate o quien informa si hay un error.&lt;/p&gt;
&lt;p&gt;El código del ejemplo de los posts usando promesas sería el siguiente:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/t4o8vq10/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Fijaos que los errores del servidor SIEMPRE llegan a la consola. En el ejemplo anterior me aparecerán 2 veces: la primera que es el error original y la segunda donde lo pinto yo con el &lt;code&gt;console.error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podéis consultar aprender más en &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Usar_promesas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;la-mejor-solucion-usar-em-async-await-em&quot; tabindex=&quot;-1&quot;&gt;La mejor solución: usar &lt;em&gt;Async/Await&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Las promesas son una mejora respecto a los &lt;em&gt;callbacks&lt;/em&gt; pero aún así el código puede ser difícil de leer y mantener. Para solucionar esto se introdujeron en ES2017 las palabras reservadas &lt;strong&gt;&lt;em&gt;async&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;await&lt;/em&gt;&lt;/strong&gt; que permiten escribir código asíncrono de una manera más clara y sencilla.&lt;/p&gt;
&lt;p&gt;La palabra reservada &lt;strong&gt;&lt;em&gt;async&lt;/em&gt;&lt;/strong&gt; se pone delante de una función e indica que esa función va a devolver una promesa. La palabra reservada &lt;strong&gt;&lt;em&gt;await&lt;/em&gt;&lt;/strong&gt; se pone delante de una llamada a una promesa y le indica a Javascript que espere a que esa promesa se resuelva antes de continuar con la ejecución del código.&lt;/p&gt;
&lt;p&gt;Usando esto sí funcionaría el primer ejemplo que hicimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    let idUser = document.getElementById(&#39;id-usuario&#39;).value;
    if (isNaN(idUser) || idUser == &#39;&#39;) {
      alert(&#39;Debes introducir un número&#39;);
    } else {
      const posts = await getPosts(idUser);
      // y aquí SÍ recibimos los datos porque ponemos AWAIT, en este caso para pintar los posts
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la función &lt;em&gt;getPosts()&lt;/em&gt; quedaría igual que la que hicimos con promesas.&lt;/p&gt;
&lt;p&gt;Aquí el tratamiento de errores se hace con un &lt;em&gt;try/catch&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    try {
      const posts = await getPosts(idUser);
    } catch (error) {
      console.error(error);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando &lt;em&gt;async/await&lt;/em&gt; nuestro código se asemeja a un código síncrono ya que no continuan ejecutándose las instrucciones que hay después de un &lt;em&gt;await&lt;/em&gt; hasta que esa petición se ha resuelto. Podemos anteponer un &lt;em&gt;await&lt;/em&gt; a cualquier llamada a una función asíncrona, como una promesa, un &lt;em&gt;setTimeout&lt;/em&gt;, ...&lt;/p&gt;
&lt;p&gt;Cualquier función que realice un &lt;em&gt;await&lt;/em&gt; pasa a ser asíncrona ya que no se ejecuta al instante toda ella sino que se espera un tiempo. Para indicarlo debemos anteponer la palabra &lt;strong&gt;async&lt;/strong&gt; a su declaración &lt;em&gt;&lt;code&gt;function&lt;/code&gt;&lt;/em&gt;. Al hacer esto automáticamente se &amp;quot;envuelve&amp;quot; esa función en una promesa (o sea que esa función pasa a devolver una promesa, a la que podríamos ponerle un &lt;code&gt;await&lt;/code&gt; o un &lt;code&gt;.then()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Podéis ver algunos ejemplos del uso de &lt;em&gt;async / await&lt;/em&gt; en la &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/funcion_asincrona&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de MDN&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;fetch&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Como el código a escribir para hacer una petición Ajax es largo y siempre igual, la &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API Fetch&lt;/a&gt; permite realizar una petición Ajax genérica que directamente devuelve una &lt;strong&gt;promesa&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Básicamente lo que hace es encapsular en una función todo el código que se repite siempre en una petición AJAX (crear la petición, hacer el &lt;em&gt;open&lt;/em&gt;, el &lt;em&gt;send&lt;/em&gt;, escuchar los eventos, ...). La función &lt;em&gt;fetch&lt;/em&gt; se similar a la función &lt;em&gt;getPosts&lt;/em&gt; que hemos creado antes pero genérica para que sirva para cualquier petición pasándole la URL. Lo que internamente hace es algo similar a:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function fetch(url) {
  return new Promise((resolve, reject) =&amp;gt; {
    const peticion = new XMLHttpRequest();
    peticion.open(&#39;GET&#39;, url);
    peticion.send();
    peticion.addEventListener(&#39;load&#39;, () =&amp;gt; {
        resolve(peticion.responseText);
    })
    peticion.addEventListener(&#39;error&#39;, () =&amp;gt; reject(&#39;Network Error&#39;));
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos en 2 cosas que cambian respecto a nuestra función &lt;em&gt;&lt;code&gt;getPosts()&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;fetch&lt;/em&gt; devuelve los datos &amp;quot;en crudo&amp;quot; por lo que si la respuesta está en formato JSON habrá con convertirlos. Para ello dispone de un método (&lt;strong&gt;&lt;code&gt;.json()&lt;/code&gt;&lt;/strong&gt;) que hace el &lt;code&gt;JSON.parse&lt;/code&gt;. Este método devuelve una nueva promesa a la que nos suscribimos con un nuevo &lt;code&gt;.then&lt;/code&gt;. Ejemplo.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(&#39;https://jsonplaceholder.typicode.com/posts?userId=&#39; + idUser)
  .then(response =&amp;gt; response.json())    // los datos son una cadena JSON
  .then(myData =&amp;gt; {      // ya tenemos los datos en _myData_ como un objeto o array
     // Aquí procesamos los datos (en nuestro ejemplo los pintaríamos en la tabla)
     console.log(myData)
  }) 
  .catch(err =&amp;gt; console.error(err));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ese mismo ejemplo usando &lt;em&gt;async/await&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  const response = await fetch(&#39;https://jsonplaceholder.typicode.com/posts?userId=&#39; + idUser);
  const myData = await response.json();
  console.log(myData);
} catch (err) {
  console.error(err);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;fetch&lt;/em&gt; llama a &lt;em&gt;resolve&lt;/em&gt; siempre que el servidor conteste, &lt;strong&gt;sin comprobar&lt;/strong&gt; si la respuesta es de éxito (200, 201, ...) o de error (4xx, 5xx). Por tanto siempre se ejecutará el &lt;em&gt;then&lt;/em&gt; excepto si se trata de un error de red y el servidor no responde&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;propiedades-y-metodos-de-la-respuesta-de-em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;Propiedades y métodos de la respuesta de &lt;em&gt;fetch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;La respuesta devuelta por &lt;em&gt;fetch()&lt;/em&gt; tiene las siguientes propiedades y métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status&lt;/strong&gt;: el código de estado devuelto por el servidor (200, 404, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;statusText&lt;/strong&gt;: el texto correspondiente a ese código (Ok, Not found, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ok&lt;/strong&gt;: booleano que vale &lt;em&gt;true&lt;/em&gt; si el status está entre 200 y 299 y &lt;em&gt;false&lt;/em&gt; en caso contrario&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;json()&lt;/strong&gt;: devuelve una promesa que se resolverá con los datos de la respuesta convertidos a un objeto (les hace un &lt;em&gt;JSON.parse()&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;otros métodos para convertir los datos según el formato que tengan: &lt;strong&gt;text()&lt;/strong&gt;, &lt;strong&gt;blob()&lt;/strong&gt;, &lt;strong&gt;formData()&lt;/strong&gt;, ... Todos devuelven una promesa con los datos de distintos formatos convertidos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El ejemplo que hemos visto con las promesas, usando &lt;em&gt;fetch&lt;/em&gt; quedaría:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/wr5ah769/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Este ejemplo fallaría si hubiéramos puesto mal la url: contestaría con un 404 pero se ejecutaría el &lt;em&gt;then&lt;/em&gt; intentando pintar unos posts que no tenemos.&lt;/p&gt;
&lt;p&gt;El ejemplo con &lt;em&gt;async/await&lt;/em&gt; y &lt;em&gt;fetch&lt;/em&gt; sería:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/zghq5dt6/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;gestion-de-errores-con-em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;Gestión de errores con &lt;em&gt;fetch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Según &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Fetch_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN&lt;/a&gt; la promesa devuelta por la &lt;em&gt;API fetch&lt;/em&gt; sólo es rechazada en el caso de un error de red, es decir, el &lt;em&gt;.catch&lt;/em&gt; sólo saltará si no hemos recibido respuesta del servidor; en caso contrario la promesa siempre es resuelta.&lt;/p&gt;
&lt;p&gt;Por tanto para saber si se ha resuelto &lt;strong&gt;satisfactoriamente&lt;/strong&gt; o no debemos comprobar la propiedad &lt;strong&gt;&lt;em&gt;.ok&lt;/em&gt;&lt;/strong&gt; de la respuesta. El código correcto del ejemplo anterior gestionando los posibles errores del servidor sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  const response = await fetch(&#39;https://jsonplaceholder.typicode.com/posts?userId=&#39; + idUser);
  if (!response.ok) {
    throw `Error ${response.status} de la BBDD: ${response.statusText}`
  }
  const myData = await response.json();
  console.log(myData);
} catch (err) {
  console.error(err);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso si la respuesta del servidor no es &lt;em&gt;ok&lt;/em&gt; lanzamos un error que es interceptado por nuestro propio &lt;em&gt;catch&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;otros-metodos-de-peticion-con-em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;Otros métodos de petición con &lt;em&gt;fetch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Los ejemplos anteriores hacen peticiones GET al servidor. Para peticiones que no sean GET la función &lt;em&gt;fetch()&lt;/em&gt; admite un segundo parámetro con un objeto con la información a enviar en la petición HTTP. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(url, {
  method: &#39;POST&#39;, // o &#39;PUT&#39;, &#39;GET&#39;, &#39;DELETE&#39;
  body: JSON.stringify(data), // los datos que enviamos al servidor en el &#39;send&#39;
  headers:{
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
}).then(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo de una petición para añadir datos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(url, {
  method: &#39;POST&#39;, 
  body: JSON.stringify(data), // los datos que enviamos al servidor en el &#39;send&#39;
  headers:{
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
})
.then(response =&amp;gt; {
  if (!response.ok) {
    throw `Error ${response.status} de la BBDD: ${response.statusText}`
  } 
  return response.json()
})
.then(datos =&amp;gt; {
  alert(&#39;Datos recibidos&#39;)
  console.log(datos)
})
.catch(err =&amp;gt; {
  alert(&#39;Error en la petición HTTP: &#39; + err.message);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver mś ejemplos en &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch#Enviando_datos_JSON&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; y otras páginas.&lt;/p&gt;
&lt;h2 id=&quot;hacer-varias-peticiones-simultaneamente-promise-all&quot; tabindex=&quot;-1&quot;&gt;Hacer varias peticiones simultáneamente. Promise.all&lt;/h2&gt;
&lt;p&gt;En ocasiones necesitamos hacer más de una petición al servidor. Por ejemplo para obtener los productos y sus categorías podríamos hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getData() {
  getTable(&#39;/categories&#39;)
    .then((categories) =&amp;gt; categories.forEach((category) =&amp;gt; renderCategory(category)))
    .catch((error) =&amp;gt; renderErrorMessage(error))
  getTable(&#39;/products&#39;)
    .then((products) =&amp;gt; products.forEach((product) =&amp;gt; renderProduct(product)))
    .catch((error) =&amp;gt; renderErrorMessage(error))
}

function getTable(table) {
  return new Promise((resolve, reject) =&amp;gt; {
    fetch(SERVER + table)
      .then(response =&amp;gt; {
        if (!response.ok) {
          throw `Error ${response.status} de la BBDD: ${response.statusText}`
        } 
        return response.json()
      })
      .then((data) =&amp;gt; resolve(data))
      .catch((error) =&amp;gt; reject(error))
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero si para renderizar los productos necesitamos tener las categorías este código no nos lo garantiza ya que el servidor podría devolver antes los productos aunque los pedimos después.&lt;/p&gt;
&lt;p&gt;Una solución sería no pedir los productos hasta tener las categorías:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getData() {
  getTable(&#39;/categories&#39;)
    .then((categories) =&amp;gt; {
      categories.forEach((category) =&amp;gt; renderCategory(category))
      getTable(&#39;/products&#39;)
        .then((products) =&amp;gt; products.forEach((product) =&amp;gt; renderProduct(product)))
        .catch((error) =&amp;gt; renderErrorMessage(error))
    })
    .catch((error) =&amp;gt; renderErrorMessage(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pero esto hará más lento nuestro código al no hacer las 2 peticiones simultáneamente. La solución es usar el método &lt;code&gt;Promise.all()&lt;/code&gt; al que se le pasa un array de promesas a hacer y devuelve una promesa que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;se resuelve en el momento en que todas las promesas se han resuelto satisfactoriamente o&lt;/li&gt;
&lt;li&gt;se rechaza en el momento en que alguna de las promesas es rechazada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El código anterior de forma correcta sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getData() {
  Promise.all([
    getTable(&#39;/categories&#39;)
    getTable(&#39;/products&#39;)
  ])
  .then(([categories, products]) =&amp;gt; {
    categories.forEach((category) =&amp;gt; renderCategory(category))
    products.forEach((product) =&amp;gt; renderProduct(product))
  })
  .catch((error) =&amp;gt; renderErrorMessage(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo mismo pasa si en vez de promesas usamos &lt;em&gt;async/await&lt;/em&gt;. Si hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function getTable(table) {
    const response = await fetch(SERVER + table)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

async function getData() {
  const responseCategories = await getTable(&#39;/categories&#39;);
  const responseProducts = await getTable(&#39;/products&#39;);
  categories.forEach((category) =&amp;gt; renderCategory(category))
  products.forEach((product) =&amp;gt; renderProduct(product))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tenemos el problema de que no comienza la petición de los productos hasta que se reciben las categorías. La solución con &lt;code&gt;Promise.all()&lt;/code&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function getData() {
  const [categories, products] = await Promise.all([
    getTable(&#39;/categories&#39;)
    getTable(&#39;/products&#39;)
  ])
  categories.forEach((category) =&amp;gt; renderCategory(category))
  products.forEach((product) =&amp;gt; renderProduct(product))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;organizar-bien-el-codigo&quot; tabindex=&quot;-1&quot;&gt;Organizar bien el código&lt;/h2&gt;
&lt;h3 id=&quot;el-fichero-em-env-em&quot; tabindex=&quot;-1&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;En los ejemplos anteriores estamos guardando la URL a la que hacer la petición a la API en una constante a la que estamos llamando &lt;em&gt;SERVER&lt;/em&gt;. Esto plantea algunos problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si tenemos varios ficheros que hacen peticiones a la API deberemos declararla en todos ellos&lt;/li&gt;
&lt;li&gt;si cambia hay que cambiarla en todos los ficheros y en ese caso tenemos que cambiar nuestro código&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para evitarlo podemos almacenar ete tipo de cosas en el fichero &lt;code&gt;.env&lt;/code&gt;. Se trata de un fichero donde guardar las configuraciones de la aplicación, como la URL de la API.&lt;/p&gt;
&lt;p&gt;Por medio de &lt;em&gt;Vite&lt;/em&gt; podemos acceder a todas las variables de &lt;em&gt;.env&lt;/em&gt; que comiencen por VITE_ por medio del objeto &lt;code&gt;import.meta.env&lt;/code&gt; por lo que en nuestro código en vez de darle el valor a &lt;em&gt;SERVER&lt;/em&gt; podríamos haber puesto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SERVER = import.meta.env.VITE_URL_API
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el fichero &lt;strong&gt;&lt;em&gt;.env&lt;/em&gt;&lt;/strong&gt; ponemos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;VITE_URL_API=http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fichero &lt;em&gt;.env&lt;/em&gt; por defecto se sube al repositorio por lo que no debemos poner información sensible (como usuarios o contraseñas). Para ello tenemos un fichero &lt;strong&gt;&lt;em&gt;.env.local&lt;/em&gt;&lt;/strong&gt; que no se sube, o bien debemos añadir al &lt;em&gt;.gitignore&lt;/em&gt; dicho fichero. Si el fichero con la configuración no lo subimos al repositorio es conveniente tener un fichero &lt;em&gt;.env.exemple&lt;/em&gt;, que sí se sube, con valores predeterminados para las distintas variables, que quien quiera desplegar nuestra aplicación deberá cambiar por sus valores adecuados en producción. Además del &lt;em&gt;.env&lt;/em&gt; y el &lt;em&gt;.env.local&lt;/em&gt; también hay distintos ficheros que son usados en desarrollo (&lt;em&gt;.env.development&lt;/em&gt;) y en producción (&lt;em&gt;.env.production&lt;/em&gt;) y que pueden tener distintos datos según el entorno en que nos encontramos. Por ejemplo en el de desarrollo el valor de &lt;strong&gt;VITE_URL_API&lt;/strong&gt; podría ser &amp;quot;&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000&lt;/a&gt;&amp;quot; si usamos &lt;em&gt;json-server&lt;/em&gt; mientras que en el de producción tendríamos la ruta del servidor de producción de la API.&lt;/p&gt;
&lt;h3 id=&quot;distintas-peticiones-distintos-ficheros&quot; tabindex=&quot;-1&quot;&gt;Distintas peticiones, distintos ficheros&lt;/h3&gt;
&lt;p&gt;Las peticiones a la API deberíamos ponerlas en un fichero aparte para tener nuestro código organizado. Y peticiones a diferentes tipos de datos también deberían estar en ficheros diferentes. Por ejemplo si necesitamos obtener datos de posts y de usuarios podríamos crear una carpeta &lt;code&gt;/repositories&lt;/code&gt; y dentro los ficheros &lt;code&gt;posts.repository.js&lt;/code&gt; y &lt;code&gt;users.repository.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dentro de cada fichero haremos diferentes funciones y métodos para los diferentes tipos de petición, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SERVER = import.meta.env.VITE_URL_API

async getAllPosts() {
    const response = await fetch(SERVER + &#39;/posts&#39;)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

async getPostById(idPost) {
    const response = await fetch(SERVER + `/posts/${idPost}`)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

async insertPost(newPost) {
    const response = await fetch(SERVER + &#39;/posts&#39;, {
      method: &#39;POST&#39;,
      body: JSON.stringify(newPost),
      headers:{
        &#39;Content-Type&#39;: &#39;application/json&#39;
      }
    })
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

export {
  getAllPosts,
  getPostById,
  insertPost
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde necesitemos los datos haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { getAllPosts } from &amp;quot;../repositories/posts.repositories&amp;quot;

const posts = await getAllPosts()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando clases el ejemplo quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SERVER = import.meta.env.VITE_URL_API

export default class PostsRepository {
  async getAllPosts() {
    const response = await fetch(SERVER + &#39;/posts&#39;)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
  }

  async getPostById(idPost) {
    const response = await fetch(SERVER + `/posts/${idPost}`)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
  }

  async insertPost(newPost) {
    const response = await fetch(SERVER + &#39;/posts&#39;, {
      method: &#39;POST&#39;,
      body: JSON.stringify(newPost),
      headers:{
        &#39;Content-Type&#39;: &#39;application/json&#39;
      }
    })
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde necesitemos los datos haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import PostsRepository from &amp;quot;../repositories/posts.repositories&amp;quot;

const repository = new PostsRepository()
const posts = await repository.getAllPosts()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;single-page-application&quot; tabindex=&quot;-1&quot;&gt;Single Page Application&lt;/h2&gt;
&lt;p&gt;Ajax es la base para construir SPAs que permiten al usuario interactuar con una aplicación web como si se tratara de una aplicación de escritorio (sin &amp;quot;esperas&amp;quot; que dejen la página en blanco o no funcional mientras se recarga desde el servidor).&lt;/p&gt;
&lt;p&gt;En una SPA sólo se carga la página de inicio (es la única página que existe) que se va modificando y cambiando sus datos como respuesta a la interacción del usuario. Para obtener los nuevos datos se realizan peticiones al servidor (normalmente Ajax). La respuesta son datos (JSON, XML, …) que se muestran al usuario modificando mediante DOM la página mostrada (o podrían ser trozos de HTML que se cargan en determinadas partes de la página, o ...).&lt;/p&gt;
&lt;h2 id=&quot;resumen-de-llamadas-asincronas&quot; tabindex=&quot;-1&quot;&gt;Resumen de llamadas asíncronas&lt;/h2&gt;
&lt;p&gt;Una llamada Ajax es un tipo de llamada asíncrona que podemos hacer en Javascript aunque hay muchas más, como un &lt;code&gt;setTimeout()&lt;/code&gt; o las funciones manejadoras de eventos. Como hemos visto, para la gestión de las llamadas asíncronas tenemos varios métodos y los más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;funciones &lt;em&gt;callback&lt;/em&gt; (no recomendado)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;promesas&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;async / await&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;librerías, como &lt;a href=&quot;https://axios-http.com/es/docs/intro&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;axios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cuando se produce una llamada asíncrona el orden de ejecución del código no es el que vemos en el programa ya que el código de respuesta de la llamada no se ejecutará hasta completarse esta. Podemos ver &lt;a href=&quot;https://repl.it/DhKt/1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;un ejemplo&lt;/a&gt; de esto extraído de &lt;strong&gt;todoJS&lt;/strong&gt; usando &lt;strong&gt;funciones &lt;em&gt;callback&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Además, si hacemos varias llamadas tampoco sabemos el qué orden se ejecutarán sus respuestas ya que depende de cuándo el servidor finalice cada una, como podemos ver en &lt;a href=&quot;https://repl.it/DhLA/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este otro ejemplo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si usamos funciones &lt;em&gt;callback&lt;/em&gt; y necesitamos que cada función no se ejecute hasta que haya terminado la anterior debemos llamarla en la respuesta a la función anterior lo que provoca un tipo de código difícil de leer llamado &lt;a href=&quot;https://repl.it/DhLN/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;callback hell&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para evitar esto surgieron las &lt;strong&gt;&lt;em&gt;promesas&lt;/em&gt;&lt;/strong&gt; que permiten evitar las funciones &lt;em&gt;callback&lt;/em&gt; tan difíciles de leer. Podemos ver &lt;a href=&quot;https://repl.it/DhMA/1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;el primer ejemplo&lt;/a&gt; usando promesas. Y si necesitamos ejecutar secuencialmente las funciones evitaremos la pirámide de llamadas &lt;em&gt;callback&lt;/em&gt; como vemos en &lt;a href=&quot;https://repl.it/DhMK/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este ejemplo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aún así el código no es muy claro. Para mejorarlo surgió &lt;strong&gt;&lt;em&gt;async&lt;/em&gt; y &lt;em&gt;await&lt;/em&gt;&lt;/strong&gt; como vemos en &lt;a href=&quot;https://repl.it/DhMa/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este ejemplo&lt;/a&gt;. Estas funciones forman parte del estándar ES2017 por lo que no están soportadas por navegadores muy antiguos (aunque siempre podemos transpilar con &lt;em&gt;Babel&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://www.todojs.com/controlar-la-ejecucion-asincrona/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;todoJs: Controlar la ejecución asíncrona&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cors&quot; tabindex=&quot;-1&quot;&gt;CORS&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; (CORS) es un mecanismo de seguridad que incluyen los navegadores y que por defecto impiden que se pueden realizar peticiones Ajax desde un navegador a un servidor con un dominio diferente al de la página cargada originalmente.&lt;/p&gt;
&lt;p&gt;Si necesitamos hacer este tipo de peticiones necesitamos que el servidor  al que hacemos la petición añada en su respuesta la cabecera &lt;em&gt;Access-Control-Allow-Origin&lt;/em&gt; donde indiquemos el dominio desde el que se pueden hacer peticiones (o &lt;strong&gt;*&lt;/strong&gt; para permitirlas desde cualquier dominio).&lt;/p&gt;
&lt;p&gt;El navegador comprobará las cabeceras de respuesta y si el dominio indicado por ella coincide con el dominio desde el que se hizo la petición, esta se permitirá.&lt;/p&gt;
&lt;p&gt;Como en desarrollo normalmente no estamos en el dominio de producción (para el que se permitirán las peticiones) podemos instalar en el navegador la extensión &lt;em&gt;allow CORS&lt;/em&gt; que al activarla deshabilita la seguridad CORS en el navegador.&lt;/p&gt;
&lt;p&gt;Podéis ampliar la información en numerosaas páginas web como &lt;a href=&quot;https://www.enmilocalfunciona.io/entendiendo-cors-y-aplicando-soluciones/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;quot;Entendiendo CORS y aplicando soluciones&amp;quot;&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/09-ajax/" >
        </entry>
        <entry>
            <title>
                08-forms
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/08-forms/</id>
            <content type="html">
                &lt;h1 id=&quot;validacion-de-formularios&quot; tabindex=&quot;-1&quot;&gt;Validación de formularios&lt;/h1&gt;
&lt;p&gt;Índice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-de-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación de formularios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-del-navegador-incorporada-en-html5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación del navegador incorporada en HTML5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-mediante-la-api-de-validaci%C3%B3n-de-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación mediante la API de validación de formularios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;yup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#expresiones-regulares&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Expresiones regulares&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#patrones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Patrones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema vamos a ver cómo realizar una de las acciones principales de Javascript que es la validación de formularios en el lado cliente.&lt;/p&gt;
&lt;p&gt;Se trata de una verificación útil porque evita enviar datos al servidor que sabemos que no son válidos pero NUNCA puede sustituir a la validación en el lado servidor ya que en el lado cliente se puede manipular el código desde la consola para que se salte las validaciones que le pongamos.&lt;/p&gt;
&lt;p&gt;Podéis encontrar una guía muy completa de validación de formularios en el lado cliente el la página de &lt;a href=&quot;https://developer.mozilla.org/es/docs/Learn/HTML/Forms/Validacion_formulario_datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; que ha servido como base para estos apuntes.&lt;/p&gt;
&lt;p&gt;Además, al final de este tema, veremos una pequeña introducción a las expresiones regulares en Javascript.&lt;/p&gt;
&lt;p&gt;Básicamente tenemos 2 maneras de validar un formulario en el lado cliente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usar la validación incorporada en HTML5 y dejar que sea el navegador quien se encargue de todo&lt;/li&gt;
&lt;li&gt;realizar nosotros la validación mediante Javascript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La ventaja de la primera opción es que no tenemos que escribir código sino simplemente poner unos atributos a los INPUT que indiquen qué se ha de validar. La principal desventaja es que no tenemos ningún control sobre el proceso, lo que provocará cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el navegador valida campo a campo: cuando encuentra un error en un campo lo muestra y hasta que no se soluciona no valida el siguiente lo que hace que el proceso sea molesto para el usuario que no ve todo lo que hay mal de una vez&lt;/li&gt;
&lt;li&gt;los mensajes son los predeterminados del navegador y en ocasiones pueden no ser muy claros para el usuario&lt;/li&gt;
&lt;li&gt;los mensajes se muestran en el idioma en que está configurado el navegador, no en el de nuestra página&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;validacion-del-navegador-incorporada-en-html-5&quot; tabindex=&quot;-1&quot;&gt;Validación del navegador incorporada en HTML5&lt;/h3&gt;
&lt;p&gt;Funciona añadiendo atributos a los campos del formulario que queremos validar. Los más usados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: indica que el campo es obligatorio. La valdación fallará si no hay nada escrito en el input. En el caso de un grupo de &lt;em&gt;radiobuttons&lt;/em&gt; se pone sobre cualquiera de ellos (o sobre todos) y obliga a que haya seleccionada una opción cualquiera del grupo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt;: obliga a que el contenido del campo cumpla la expresión regular indicada. Por ejemplo para un código postal sería &lt;code&gt;pattern=&amp;quot;^[0-9]{5}$&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minlength&lt;/strong&gt; / &lt;strong&gt;maxlength&lt;/strong&gt;: indica la longitud mínima/máxima del contenido del campo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt; / &lt;strong&gt;max&lt;/strong&gt;: indica el valor mínimo/máximo del contenido de un campo numérico&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También producen errores de validación si el contenido de un campo no se adapta al &lt;em&gt;type&lt;/em&gt; indicado (email, number, ...) o si el valor de un campo numérico no cumple con el &lt;em&gt;step&lt;/em&gt; indicado.&lt;/p&gt;
&lt;p&gt;Cuando el contenido de un campo es valido dicho campo obtiene automáticamente la pseudoclase &lt;strong&gt;:valid&lt;/strong&gt; y si no lo es tendrá la pseudoclase &lt;strong&gt;:invalid&lt;/strong&gt; lo que nos permite poner reglas en nuestro CSS para destacar dichos campos, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;input:invalid {
  border: 2px dashed red;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además de las anteriores tenemos las pseudoclases &lt;strong&gt;:required&lt;/strong&gt;, &lt;strong&gt;:optional&lt;/strong&gt;, que nos permiten poner reglas de estilo a los campos obligatorios o no, y &lt;strong&gt;:focus&lt;/strong&gt; para el campo con el foco.&lt;/p&gt;
&lt;p&gt;La validación del navegador se realiza al enviar el formulario. Si encuentra un error lo muestra, se detiene la validación del resto de campos y no se envía el formulario.&lt;/p&gt;
&lt;h3 id=&quot;validacion-mediante-la-api-de-validacion-de-formularios&quot; tabindex=&quot;-1&quot;&gt;Validación mediante la API de validación de formularios&lt;/h3&gt;
&lt;p&gt;Mediante Javscript tenemos acceso a todos los campos del formulario por lo que podemos hacer la validación como queramos, pero es una tarea pesada, repetitiva y que provoca código spaguetti difícil de leer y mantener más adelante.&lt;/p&gt;
&lt;p&gt;Para hacerla más simple podemos usar la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API de validación de formularios&lt;/a&gt; de HTML5 que permite que sea el navegador quien se encargue de comprobar la validez de cada campo pero las acciones (mostrar mensajes de error, no enviar el formulario, ...) las realizamos desde Javascript.&lt;/p&gt;
&lt;p&gt;Esto nos da la ventaja de:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;los requisitos de validación de cada campo están como atributos HTML de dicho campo por lo que son fáciles de ver&lt;/li&gt;
&lt;li&gt;nos evitamos la mayor parte del código dedicada a comprobar si el contenido del campo es válido. Nosotros mediante la API sólo preguntamos si se cumplen o no y tomamos las medidas adecuadas&lt;/li&gt;
&lt;li&gt;aprovechamos las pseudo-clases &lt;em&gt;:valid&lt;/em&gt; o &lt;em&gt;:invalid&lt;/em&gt; que el navegador pone automáticamente a los campos por lo que no tenemos que añadirles clases para desacarlos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las principales propiedades y métodos que nos proporciona esta API son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkValidity()&lt;/strong&gt;: método booleano que nos dice si el campo al que se aplica es o no válido. También se puede aplicar al formulario para saber si es válido o no&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;validationMessage&lt;/strong&gt;: en caso de que un campo no sea válido esta propiedad contiene el texto del error de validación proporcionado por el navegador. Si es válido esta propiedad es una cadena vacía&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;setCustomValidity(mensaje)&lt;/strong&gt;: añade un error personalizado al campo (que ahora ya NO será válido para el navegador) con el mensaje pasado como parámetro. Por ejemplo podemos usarlo para indicar que el nick elegido no es válido porque ya está en uso por otro usuario. Para quitar este error se hace &lt;code&gt;setCustomValidity(&#39;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ValidityState&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;validity&lt;/a&gt;&lt;/strong&gt;: es un objeto que tiene propiedades booleanas para saber qué requisito del campo es el que falla:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;valueMissing&lt;/strong&gt;: indica si no se cumple el atributo &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; (es decir, valdrá &lt;em&gt;true&lt;/em&gt; si el campo tiene el atributo &lt;em&gt;required&lt;/em&gt; pero no se ha introducido nada en él)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typeMismatch&lt;/strong&gt;: indica si el contenido del campo no cumple con su atributo &lt;strong&gt;&lt;em&gt;type&lt;/em&gt;&lt;/strong&gt; (ej. type=&amp;quot;email&amp;quot;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patternMismatch&lt;/strong&gt;: indica si no se cumple con el &lt;strong&gt;&lt;em&gt;pattern&lt;/em&gt;&lt;/strong&gt; indicado en su atributo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tooShort&lt;/strong&gt; / &lt;strong&gt;tooLong&lt;/strong&gt;: indican si no se cumple el atributo &lt;strong&gt;&lt;em&gt;minlength&lt;/em&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;em&gt;maxlength&lt;/em&gt;&lt;/strong&gt; respectivamente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rangeUnderflow&lt;/strong&gt; / &lt;strong&gt;rangeOverflow&lt;/strong&gt;: indica si no se cumple el atributo &lt;strong&gt;&lt;em&gt;min&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;max&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stepMismatch&lt;/strong&gt;: indica si no se cumple el atributo &lt;strong&gt;&lt;em&gt;step&lt;/em&gt;&lt;/strong&gt; del campo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;customError&lt;/strong&gt;: indica al campo se le ha puesto un error personalizado con &lt;strong&gt;&lt;em&gt;setCustomValidity&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt;: indica si es campo es válido&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la página de &lt;a href=&quot;https://www.w3schools.com/js/js_validation_api.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;W3Schools&lt;/a&gt; podéis ver algún ejemplo básico de esto. También a continuación tenéis un ejemplo simple del valor de las diferentes propiedades involucradas en la validación de un campo de texto que es obligatorio y cuyo tamaño debe estar entre 5 y 50 caracteres:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/vbdrxjsz/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Para validar un formulario nosotros pero usando esta API debemos añadir a la etiqueta &lt;em&gt;&amp;lt;form&amp;gt;&lt;/em&gt; el atributo &lt;strong&gt;&lt;code&gt;novalidate&lt;/code&gt;&lt;/strong&gt; que hace que no se encargue el navegador de mostrar los mensajes de error ni de decidir si se envía o no el formulario (aunque sí valida los campos) sino que lo haremos nosotros.&lt;/p&gt;
&lt;h4 id=&quot;ejemplo&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h4&gt;
&lt;p&gt;Un ejemplo sencillo de validación de un formulario podría ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form novalidate&amp;gt;
  &amp;lt;label for=&amp;quot;nombre&amp;quot;&amp;gt;Por favor, introduzca su nombre (entre 5 y 50 caracteres): &amp;lt;/span&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;nombre&amp;quot; name=&amp;quot;nombre&amp;quot; required minlength=&amp;quot;5&amp;quot; maxlength=&amp;quot;50&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;br /&amp;gt;
  &amp;lt;label for=&amp;quot;mail&amp;quot;&amp;gt;Por favor, introduzca una dirección de correo electrónico: &amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; id=&amp;quot;mail&amp;quot; name=&amp;quot;mail&amp;quot; required minlength=&amp;quot;8&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Enviar&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const form  = document.getElementsByTagName(&#39;form&#39;)[0];

const nombre = document.getElementById(&#39;nombre&#39;);
const nombreError = document.querySelector(&#39;#nombre + span.error&#39;);
const email = document.getElementById(&#39;mail&#39;);
const emailError = document.querySelector(&#39;#mail + span.error&#39;);

form.addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  if(!form.checkValidity()) {
    event.preventDefault();
  }
  nombreError.textContent = nombre.validationMessage;
  emailError.textContent = email.validationMessage;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;style.css&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.error {
  color: red;
}

input:invalid {
  border: 2px dashed red;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos usando&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;validationMessage&lt;/code&gt; para mostrar el posible error de cada campo, o quitar el error cuando el campo sea válido&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkValidity()&lt;/code&gt; para no enviar/procesar el formulario si contiene errores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si no nos gusta el mensaje del navegador y queremos personalizarlo podemos hacer una función que reciba un &amp;lt;input&amp;gt; y usando su propiedad &lt;code&gt;validity&lt;/code&gt; devuelva un mensaje en función del error detectado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function customErrorValidationMessage(input) {
  if (input.checkValidity()) {
    return &#39;&#39;
  }
  if (input.validity.valueMissing) {
    return &#39;Este campo es obligatorio&#39;
  }
  if (input.validity.tooShort) {
    return `Debe tener al menos ${input.minLength} caracteres` 
  }
  // Y seguiremos comprobando cada atributo que hayamos usado en el HTML
  return &#39;Error en el campo&#39;   // por si se nos ha olvidado comprobar algo
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahora en vez de &lt;code&gt;nombreError.textContent = nombre.validationMessage&lt;/code&gt; haremos &lt;code&gt;nombreError.textContent = customErrorValidationMessage(nombre)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si tenemos que validar algo que no puede hacerse mediante atributos HTML (por ejemplo si el nombre de usuario ya está en uso) deberemos hacer la validación &amp;quot;a mano&amp;quot; y en caso de no ser válido ponerle un error con &lt;code&gt;.setCustomValidity()&lt;/code&gt;, pero debemos recordar quitar el error si todo es correcto o el formulario siempre será inválido. Modificando el ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const nombre = document.getElementById(&#39;nombre&#39;);
const nombreError = document.querySelector(&#39;#nombre + span.error&#39;);

form.addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  if (nombreEnUso(nombre.value)) {
    nombre.setCustomValidity(&#39;Ese nombre de usuario ya está en uso&#39;)
  } else {
    nombre.setCustomValidity(&#39;&#39;)  // Se quita el error personalizado
  }

  if(!form.checkValidity()) {
    ...
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ficheros-en-formularios&quot; tabindex=&quot;-1&quot;&gt;Ficheros en formularios&lt;/h3&gt;
&lt;p&gt;Hay infinidad de páginas donde poder consultar cómo validar ficheros e imágenes en un formulario. Os recomiendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/dom.html#ficheros-en-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de José Castillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/js/js_validation_file.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#validating_files&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;developer.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;yup&quot; tabindex=&quot;-1&quot;&gt;yup&lt;/h3&gt;
&lt;p&gt;Existen múltiples librerías que facilitan enormenmente el tedioso trabajo de validar un formulario. Un ejemplo es &lt;a href=&quot;https://www.npmjs.com/package/yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;yup&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;expresiones-regulares&quot; tabindex=&quot;-1&quot;&gt;Expresiones regulares&lt;/h2&gt;
&lt;p&gt;Las expresiones regulares permiten buscar un patrón dado en una cadena de texto. Se usan mucho a la hora de validar formularios o para buscar y reemplazar texto. En Javascript se crean poniéndolas entre caracteres &lt;code&gt;/&lt;/code&gt; (o instanciándolas de la clase &lt;em&gt;RegExp&lt;/em&gt;, aunque es mejor de la otra forma):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cadena=&#39;Hola mundo&#39;;
let expr=/mundo/;
expr.test(cadena);      // devuelve true porque en la cadena se encuentra la expresión &#39;mundo&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;patrones&quot; tabindex=&quot;-1&quot;&gt;Patrones&lt;/h3&gt;
&lt;p&gt;La potencia de las expresiones regulares es que podemos usar patrones para construir la expresión. Los más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[..]&lt;/strong&gt; (corchetes): dentro se ponen varios caracteres o un rango y permiten comprobar si el carácter de esa posición de la cadena coincide con alguno de ellos. Ejemplos:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt;: cualquier carácter de los indicados (&#39;a&#39; o &#39;b&#39; o &#39;c&#39;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^abc]&lt;/code&gt;: cualquiera excepto los indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt;: cualquier minúscula (el carácter &#39;-&#39; indica el rango entre &#39;a&#39; y &#39;z&#39;, incluidas)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt;: cualquier letra&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( | )&lt;/code&gt; (&lt;em&gt;pipe&lt;/em&gt;): debe coincidir con una de las opciones indocadas:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(x|y)&lt;/code&gt;: la letra x o la y (sería equivalente a &lt;code&gt;[xy]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(http|https)&lt;/code&gt;: cualquiera de las 2 palabras&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metacaracteres&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; (punto): un único carácter, sea el que sea&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;d&lt;/code&gt;: un dígito (&lt;code&gt;&#92;D&lt;/code&gt;: cualquier cosa menos dígito)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;s&lt;/code&gt;: espacio en blanco (&lt;code&gt;&#92;S&lt;/code&gt;: lo opuesto)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;w&lt;/code&gt;: una palabra o carácter alfanumérico (&lt;code&gt;&#92;W&lt;/code&gt; lo contrario)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;b&lt;/code&gt;: delimitador de palabra (espacio, ppio, fin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;n&lt;/code&gt;: nueva línea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cuantificadores&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: al menos 1 vez (ej. &lt;code&gt;[0-9]+&lt;/code&gt; al menos un dígito)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;: 0 o más veces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;: 0 o 1 vez&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt;: n caracteres (ej. &lt;code&gt;[0-9]{5}&lt;/code&gt; = 5 dígitos)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt;: n o más caracteres&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,m}&lt;/code&gt;: entre n y m caracteres&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;: al ppio de la cadena (ej.: &lt;code&gt;^[a-zA-Z]&lt;/code&gt; = empieza por letra)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;: al final de la cadena (ej.: &lt;code&gt;[0-9]$&lt;/code&gt; = que acabe en dígito)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modificadores&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/i&lt;/code&gt;: que no distinga entre Maysc y minsc (Ej. &lt;code&gt;/html/i&lt;/code&gt; = buscará html, Html, HTML, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/g&lt;/code&gt;: búsqueda global, busca todas las coincidencias y no sólo la primera&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/m&lt;/code&gt;: busca en más de 1 línea (para cadenas con saltos de línea)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: contruye una expresión regular para lo que se pide a continuación y pruébala con distintas cadenas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un código postal&lt;/li&gt;
&lt;li&gt;un NIF formado por 8 números, un guión y una letra mayúscula o minúscula&lt;/li&gt;
&lt;li&gt;un número de teléfono y aceptamos 2 formatos: XXX XX XX XX o XXX XXX XXX. EL primer número debe ser un 6, un 7, un 8 o un 9&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;metodos&quot; tabindex=&quot;-1&quot;&gt;Métodos&lt;/h3&gt;
&lt;p&gt;Los usaremos para saber si la cadena coincide con determinada expresión o para buscar y reemplazar texto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expr.test(cadena)&lt;/code&gt;: devuelve &lt;strong&gt;true&lt;/strong&gt; si la cadena coincide con la expresión. Con el modificador &lt;em&gt;/g&lt;/em&gt; hará que cada vez que se llama busque desde la posición de la última coincidencia. Ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
let reg = /am/g;
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime false, hay solo dos coincidencias

let reg2 = /am/gi;          // ahora no distinguirá mayúsculas y minúsculas
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime true. Ahora tenemos 3 coincidencias con este nuevo patrón
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expr.exec(cadena)&lt;/code&gt;: igual pero en vez de &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt; devuelve un objeto con la coincidencia encontrada, su posición y la cadena completa:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
let reg = /am/gi;
console.log(reg.exec(str)); // Imprime [&amp;quot;am&amp;quot;, index: 2, input: &amp;quot;I am amazed in America&amp;quot;]
console.log(reg.exec(str)); // Imprime [&amp;quot;am&amp;quot;, index: 5, input: &amp;quot;I am amazed in America&amp;quot;]
console.log(reg.exec(str)); // Imprime [&amp;quot;Am&amp;quot;, index: 15, input: &amp;quot;I am amazed in America&amp;quot;]
console.log(reg.exec(str)); // Imprime null
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cadena.match(expr)&lt;/code&gt;: igual que &lt;em&gt;exec&lt;/em&gt; pero se aplica a la cadena y se le pasa la expresión. Si ésta tiene el modificador &lt;em&gt;/g&lt;/em&gt; devolverá un array con todas las coincidencis:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
let reg = /am/gi;
console.log(str.match(reg)); // Imprime [&amp;quot;am&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;Am&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cadena.search(expr)&lt;/code&gt;: devuelve la posición donde se encuentra la coincidencia buscada o -1 si no aparece&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cadena.replace(expr, cadena2)&lt;/code&gt;: devuelve una nueva cadena xon las coincidncias de la cadena reemplazadas por la cedena pasada como 2º parámetro:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
console.log(str.replace(/am/gi, &amp;quot;xx&amp;quot;)); // Imprime &amp;quot;I xx xxazed in xxerica&amp;quot;

console.log(str.replace(/am/gi, function(match) {
  return &amp;quot;-&amp;quot; + match.toUpperCase() + &amp;quot;-&amp;quot;;
})); // Imprime &amp;quot;I -AM- -AM-azed in -AM-erica&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No vamos a profundizar más sobre las expresiones regulares. Es muy fácil encontrar por internet la que necesitemos en cada caso (para validar un e-mail, un NIF, un CP, ...). Podemos aprender más en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regular-expressions.info/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;regular-expressions.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://html5pattern.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;html5pattern&lt;/a&gt; atributo&lt;/li&gt;
&lt;li&gt;y muchas otras páginas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También, hay páginas que nos permiten probar expresiones regulares con cualquier texto, como &lt;a href=&quot;http://regexr.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;regexr&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/08-forms/" >
        </entry>
        <entry>
            <title>
                07-globales
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/07-globales/</id>
            <content type="html">
                &lt;h1 id=&quot;objetos-nativos&quot; tabindex=&quot;-1&quot;&gt;Objetos nativos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objetos-nativos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objetos nativos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#funciones-globales&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Funciones globales&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objetos-nativos-del-lenguaje&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objetos nativos del lenguaje&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-math&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto Math&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-date&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto Date&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema vamos a ver las funciones globales de Javascript (muchas de las cuales ya hemos visto como &lt;em&gt;Number()&lt;/em&gt; o &lt;em&gt;String()&lt;/em&gt;) y los objetos nativos que incorpora Javascript y que nos facilitarán el trabajo proporcionándonos métodos y propiedades útiles para no tener que &amp;quot;reinventar la rueda&amp;quot; en nuestras aplicaciones. Dentro de ellos está el objeto &lt;strong&gt;RegExpr&lt;/strong&gt; que nos permite trabajar con &lt;strong&gt;expresiones regulares&lt;/strong&gt; (son iguales que en otros lenguajes) que nos serán de gran ayuda, sobre todo a la hora de validar formularios y que por eso veremos en la siguiente unidad.&lt;/p&gt;
&lt;h2 id=&quot;funciones-globales&quot; tabindex=&quot;-1&quot;&gt;Funciones globales&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parseInt(valor)&lt;/code&gt;: devuelve el valor pasado como parámetro convertido a entero o &lt;em&gt;NaN&lt;/em&gt; si no es posible la conversión. Este método es mucho más permisivo que &lt;em&gt;Number&lt;/em&gt; y convierte cualquier cosa que comience por un número (si encuentra un carácter no numérico detiene la conversión y devuelve lo convertido hasta el momento). Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( parseInt(3.84) )            // imprime 3 (ignora los decimales)
console.log( parseInt(&#39;3.84&#39;) )          // imprime 3
console.log( parseInt(&#39;28manzanas&#39;) )    // imprime 28
console.log( parseInt(&#39;manzanas28&#39;) )    // imprime NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parseFloat(valor)&lt;/code&gt;: igual pero devuelve un número decimal. Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( parseFloat(3.84) )            // imprime 3.84
console.log( parseFloat(&#39;3.84&#39;) )          // imprime 3.84
console.log( parseFloat(&#39;3,84&#39;) )          // imprime 3 (la coma no es un carácter numérico)
console.log( parseFloat(&#39;28manzanas&#39;) )    // imprime 28
console.log( parseFloat(&#39;manzanas28&#39;) )    // imprime NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Number(valor)&lt;/code&gt;: convierte el valor a un número. Es como &lt;em&gt;parseFloat&lt;/em&gt; pero más estricto y si no puede convertir todo el valor devuelve &lt;em&gt;NaN&lt;/em&gt;. Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( Number(3.84) )            // imprime 3.84
console.log( Number(&#39;3.84&#39;) )          // imprime 3.84
console.log( Number(&#39;3,84&#39;) )          // imprime NaN (la coma no es un carácter numérico)
console.log( Number(&#39;28manzanas&#39;) )    // imprime NaN
console.log( Number(&#39;manzanas28&#39;) )    // imprime NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String(valor)&lt;/code&gt;: convierte el valor pasado a una cadena de texto. Si le pasamos un objeto llama al método &lt;em&gt;.toString()&lt;/em&gt; del objeto. Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( String(3.84) )                  // imprime &#39;3.84&#39;
console.log( String([24, 3. 12]) )           // imprime &#39;24,3,12&#39;
console.log( {nombre: &#39;Marta&#39;, edad: 26} )   // imprime &amp;quot;[object Object]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Boolean(valor)&lt;/code&gt;: convierte el valor pasado a un booleano. Sería el resultado de tenerlo como condición en un &lt;code&gt;if&lt;/code&gt;. Muchas veces en vez de usar esto usamos la doble negación &lt;code&gt;!!&lt;/code&gt; que da el mismo resultado. Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( Boolean(&#39;Hola&#39;) )      // Equivaldría a !!&#39;Hola&#39;. Imprime true
console.log( Boolean(0) )           // Equivaldría a !!0. Imprime false
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isNaN(valor)&lt;/code&gt;: devuelve &lt;em&gt;true&lt;/em&gt; si lo pasado NO es un número o no puede convertirse en un número. Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( isNaN(3.84) )            // imprime false
console.log( isNaN(&#39;3.84&#39;) )          // imprime false
console.log( isNaN(&#39;3,84&#39;) )          // imprime true (la coma no es un carácter numérico)
console.log( isNaN(&#39;28manzanas&#39;) )    // imprime true
console.log( isNaN(&#39;manzanas28&#39;) )    // imprime true
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isFinite(valor)&lt;/code&gt;: devuelve &lt;em&gt;false&lt;/em&gt; si es número pasado es infinito (o demasiado grande)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( isFinite(3.84) )            // imprime true
console.log( isFinite(3.84 / 0) )            // imprime false
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;encodeURI(string)&lt;/code&gt; / &lt;code&gt;decodeURI(string)&lt;/code&gt;: transforma la cadena pasada a una URL codificada válida transformando los caracteres especiales que contenga, excepto , / ? : @ &amp;amp; = + $ #. Debemos usarla siempre que vayamos a pasar una URL. Ejemplo:
&lt;ul&gt;
&lt;li&gt;Decoded: “&lt;a href=&quot;http://domain.com/?val=1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://domain.com?val=1&lt;/a&gt; 2 3&amp;amp;val2=r+y%6&amp;quot;&lt;/li&gt;
&lt;li&gt;Encoded: “&lt;a href=&quot;http://domain.com/?val=1%202%203&amp;amp;val2=r+y%256%E2%80%9D&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://domain.com?val=1 2 3&amp;amp;val2=r+y%256”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encodeURIComponent(string)&lt;/code&gt; / &lt;code&gt;decodeURIComponent(string)&lt;/code&gt;: transforma también los caracteres que no transforma la anterior. Debemos usarla para codificar parámetros pero no una URL entera. Ejemplo:
&lt;ul&gt;
&lt;li&gt;Decoded: “&lt;a href=&quot;http://domain.com/?val=1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://domain.com?val=1&lt;/a&gt; 2 3&amp;amp;val2=r+y%6&amp;quot;&lt;/li&gt;
&lt;li&gt;Encoded: “http%3A%2F%&lt;a href=&quot;http://2fdomain.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2Fdomain.com&lt;/a&gt;%3Fval%3D1%202%203%26val2%3Dr%2By%256”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;objetos-nativos-del-lenguaje&quot; tabindex=&quot;-1&quot;&gt;Objetos nativos del lenguaje&lt;/h2&gt;
&lt;p&gt;En Javascript casi todo son objetos. Ya hemos visto diferentes objetos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;window&lt;/li&gt;
&lt;li&gt;screen&lt;/li&gt;
&lt;li&gt;navigator&lt;/li&gt;
&lt;li&gt;location&lt;/li&gt;
&lt;li&gt;history&lt;/li&gt;
&lt;li&gt;document&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Los 5 primeros se corresponden al modelo de objetos del navegador (&lt;em&gt;BOM, Browser Object Model&lt;/em&gt;) y &lt;em&gt;document&lt;/em&gt; se corresponde al modelo de objetos del documento (&lt;em&gt;DOM, Document Object Model&lt;/em&gt;, ya lo hemos visto). Todos nos permiten interactuar con el navegador para realizar distintas acciones.&lt;/p&gt;
&lt;p&gt;Pero además tenemos los tipos de objetos nativos, que no dependen del navegador. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Math&lt;/li&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;RegExp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además de los tipos primitivos de número, cadena, booleano, undefined y null, Javascript tiene todos los objetos indicados. Como vimos se puede crear un número usando su tipo primitivo (&lt;code&gt;const num = 5&lt;/code&gt;) o su objeto (&lt;code&gt;const num = new Number(5)&lt;/code&gt;) pero es mucho más eficiente usar los tipos primitivos. Pero aunque lo creemos usando el tipo de dato primitivo se considera un objeto y tenemos acceso a todas sus propiedades y métodos (&lt;code&gt;num.toFixed(2)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Ya hemos visto las principales propiedades y métodos de &lt;a href=&quot;https://pedroporo.github.io/01-sintaxis.html#number&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Number&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://pedroporo.github.io/01-sintaxis.html#string&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;String&lt;/em&gt;&lt;/a&gt;, &lt;a href=&quot;https://pedroporo.github.io/01-sintaxis.html#boolean&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Boolean&lt;/a&gt; y &lt;a href=&quot;https://pedroporo.github.io/02-arrays.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Array&lt;/em&gt;&lt;/a&gt; y aquí vamos a ver las de &lt;strong&gt;Math&lt;/strong&gt; y &lt;strong&gt;Date&lt;/strong&gt; y en el apartado de validar formularios las de &lt;strong&gt;RegExp&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;objeto-math&quot; tabindex=&quot;-1&quot;&gt;Objeto Math&lt;/h2&gt;
&lt;p&gt;Proporciona constantes y métodos para trabajar con valores numéricos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;constantes: &lt;code&gt;.PI&lt;/code&gt; (número pi), &lt;code&gt;.E&lt;/code&gt; (número de Euler), &lt;code&gt;.LN2&lt;/code&gt; (algoritmo natural en base 2), &lt;code&gt;.LN10&lt;/code&gt; (logaritmo natural en base 10), &lt;code&gt;.LOG2E&lt;/code&gt; (logaritmo de E en base 2), &lt;code&gt;.LOG10E&lt;/code&gt; (logaritmo de E en base 10), &lt;code&gt;.SQRT2&lt;/code&gt; (raíz cuadrada de 2), &lt;code&gt;.SQRT1_2&lt;/code&gt; (raíz cuadrada de 1⁄2). Ejemplos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( Math.PI )            // imprime 3.141592653589793
console.log( Math.SQRT2 )         // imprime 1.4142135623730951
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Math.round(x)&lt;/code&gt;: redondea x al entero más cercano&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor(x)&lt;/code&gt;: redondea x hacia abajo (5.99 → 5. Quita la parte decimal)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.ceil(x)&lt;/code&gt;: redondea x hacia arriba (5.01 → 6)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.min(x1,x2,...)&lt;/code&gt;: devuelve el número más bajo de los argumentos que se le pasan.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.max(x1,x2,...)&lt;/code&gt;: devuelve el número más alto de los argumentos que se le pasan.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.pow(x, y)&lt;/code&gt;: devuelve x y (x elevado a y).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.abs(x)&lt;/code&gt;: devuelve el valor absoluto de x.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.random()&lt;/code&gt;: devuelve un número decimal aleatorio entre 0 (incluido) y 1 (no incluido). Si queremos un número entre otros rangos haremos &lt;code&gt;Math.random() * (max - min) + min&lt;/code&gt; o si lo queremos sin decimales &lt;code&gt;Math.round(Math.random() * (max - min) + min)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.cos(x)&lt;/code&gt;: devuelve el coseno de x (en radianes).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.sin(x)&lt;/code&gt;: devuelve el seno de x.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.tan(x)&lt;/code&gt;: devuelve la tangente de x.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.sqrt(x)&lt;/code&gt;: devuelve la raíz cuadrada de x&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log( Math.round(3.14) )     // imprime 3
console.log( Math.round(3.84) )     // imprime 4
console.log( Math.floor(3.84) )     // imprime 3
console.log( Math.ceil(3.14) )      // imprime 4
console.log( Math.sqrt(2) )         // imprime 1.4142135623730951
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;objeto-date&quot; tabindex=&quot;-1&quot;&gt;Objeto Date&lt;/h2&gt;
&lt;p&gt;Es la clase que usaremos siempre que vayamos a trabajar con fechas. Al crear una instancia de la clase le pasamos la fecha que queremos crear o lo dejamos en blanco para que nos cree la fecha actual. Si le pasamos la fecha podemos pasarle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;milisegundos, desde la fecha EPOCH&lt;/li&gt;
&lt;li&gt;cadena de fecha (en formato AAAA-MM-DD o MM-DD-AAAA)&lt;/li&gt;
&lt;li&gt;valor para año, mes (entre 0 y 11), día, hora, minutos, segundos, milisegundos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const date1=new Date()    // Mon Jul 30 2018 12:44:07 GMT+0200 (CEST) (es cuando he ejecutado la instrucción)
const date7=new Date(1532908800000)    // Mon Jul 30 2018 00:00:00 GMT+0200 (CEST) (miliseg. desde 1/1/1070)
const date2=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST) (la fecha pasada a las 0h. GMT)
const date3=new Date(&#39;2018-07-30 05:30&#39;)  // Mon Jul 30 2018 05:30:00 GMT+0200 (CEST) (la fecha pasada a las 05:300h. local)
const date6=new Date(&#39;30-07-2018&#39;)    // Mon Jul 30 2018 00:00:00 GMT+0200 (CEST) (OJO: formato MM-DD-AAAA)
const date6=new Date(&#39;07-30-2018&#39;)    // Invalid date
const date7=new Date(&#39;30-Jul-2018&#39;)    // Mon Jul 30 2018 00:00:00 GMT+0200 (CEST) (tb. podemos poner &#39;July&#39;)
const date4=new Date(2018,7,30)    // OJO: Thu Ago 30 2018 00:00:00 GMT+0200 (CEST) (OJO: 0-&amp;gt;Ene,1-&amp;gt;Feb... y a las 0h. local)
const date5=new Date(2018,7,30,5,30)    // OJO: Thu Ago 30 2018 05:30:00 GMT+0200 (CEST) (OJO: 0-&amp;gt;Ene,1-&amp;gt;Feb,...)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea en la consola dos variables fecNac1 y fecNac2 que contengan tu fecha de nacimiento. La primera la creas pasandole una cadena y la segunda pasándole año, mes y día&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Cuando ponemos la fecha como texto, como separador de las fechas podemos usar &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt; o &lt;code&gt;espacio&lt;/code&gt;. Como separador de las horas debemos usar &lt;code&gt;:&lt;/code&gt;. Cuando ponemos la fecha cono parámetros numéricos (separados por &lt;code&gt;,&lt;/code&gt;) podemos poner valores fuera de rango que se sumarán al valor anterior. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const date=new Date(2018,7,41)    // Mon Sep 10 2018 00:00:00 GMT+0200 (CEST) -&amp;gt; 41=31Ago+10
const date=new Date(2018,7,0)     // Tue Jul 31 2018 00:00:00 GMT+0200 (CEST) -&amp;gt; 0=0Ago=31Jul (el anterior)
const date=new Date(2018,7,-1)    // Mon Jul 30 2018 00:00:00 GMT+0200 (CEST) -&amp;gt; -1=0Ago-1=31Jul-1=30Jul
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OJO con el rango de los meses que empieza en 0-&amp;gt;Ene, 1-&amp;gt;Feb,...,11-&amp;gt;Dic&lt;/p&gt;
&lt;p&gt;Tenemos métodos &lt;strong&gt;&lt;em&gt;getter&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;setter&lt;/em&gt;&lt;/strong&gt; para obtener o cambiar los valores de una fecha:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fullYear&lt;/strong&gt;: permite ver (&lt;em&gt;get&lt;/em&gt;) y cambiar (&lt;em&gt;set&lt;/em&gt;) el año de la fecha:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getFullYear() )  // imprime 2018
fecha.setFullYear(2019)             // Tue Jul 30 2019 02:00:00 GMT+0200 (CEST)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;month&lt;/strong&gt;: devuelve/cambia el número de mes, pero recuerda que 0-&amp;gt;Ene,...,11-&amp;gt;Dic&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getMonth() )     // imprime 6
fecha.setMonth(8)                   // Mon Sep 30 2019 02:00:00 GMT+0200 (CEST)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;date&lt;/strong&gt;: devuelve/cambia el número de día:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getDate() )      // imprime 30
fecha.setDate(-2)                   // Thu Jun 28 2018 02:00:00 GMT+0200 (CEST)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;day&lt;/strong&gt;: devuelve el número de día de la semana (0-&amp;gt;Dom, 1-&amp;gt;Lun, ..., 6-&amp;gt;Sáb). Este método NO tiene &lt;em&gt;setter&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getDay() )       // imprime 1
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;hours&lt;/strong&gt;, &lt;strong&gt;minutes&lt;/strong&gt;, &lt;strong&gt;seconds&lt;/strong&gt;, &lt;strong&gt;milliseconds&lt;/strong&gt;, : devuelve/cambia el número de la hora, minuto, segundo o milisegundo, respectivamente.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;time&lt;/strong&gt;: devuelve/cambia el número de milisegundos desde Epoch (1/1/1970 00:00:00 GMT):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getTime() )      // imprime 1532908800000
fecha.setTime(1000*60*60*24*25)     // Fri Jan 02 1970 01:00:00 GMT+0100 (CET) (le hemos añadido 25 días a Epoch)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Realiza en la consola los siguientes ejercicios (usa las variables que creaste antes)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;muestra el día de la semana en que naciste&lt;/li&gt;
&lt;li&gt;modifica fecNac1 para que contenga la fecha de tu cumpleaños de este año (cambia sólo el año)&lt;/li&gt;
&lt;li&gt;muestra el día de la semana de tu cumpleaños de este año&lt;/li&gt;
&lt;li&gt;calcula el nº de días que han pasado desde que naciste hasta hoy&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Para mostrar la fecha tenemos varios métodos diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.toString()&lt;/strong&gt;: &amp;quot;Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toUTCString()&lt;/strong&gt;: &amp;quot;Mon, 30 Jul 2018 00:00:00 GMT&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toDateString()&lt;/strong&gt;: &amp;quot;Mon, 30 Jul 2018&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toTimeString()&lt;/strong&gt;: &amp;quot;02:00:00 GMT+0200 (hora de verano de Europa central)&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toISOString()&lt;/strong&gt;: &amp;quot;2018-07-30T00:00:00.000Z&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toLocaleString()&lt;/strong&gt;: &amp;quot;30/7/2018 2:00:00&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toLocaleDateString()&lt;/strong&gt;: &amp;quot;30/7/2018&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toLocaleTimeString()&lt;/strong&gt;: &amp;quot;2:00:00&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: muestra en distintos formatos la fecha y la hora de hoy&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: recuerda que las fechas son objetos y que se copian y se pasan como parámetro por referencia:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
const otraFecha=fecha
otraFecha.setDate(28)               // Thu Jul 28 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getDate() )      // imprime 28 porque fecha y otraFecha son el mismo objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una forma sencilla de copiar una fecha es crear una nueva pasándole la que queremos copiar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const fecha=new Date(&#39;2018-07-30&#39;)    // Mon Jul 30 2018 02:00:00 GMT+0200 (CEST)
const otraFecha=new Date(fecha)
otraFecha.setDate(28)               // Thu Jul 28 2018 02:00:00 GMT+0200 (CEST)
console.log( fecha.getDate() )      // imprime 30
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En realidad lo que le estamos pasando es el tiempo Epoch de la fecha (es como hacer &lt;code&gt;otraFecha=new Date(fecha.getTime())&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: la comparación entre fechas funciona correctamente con los operadores &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; y &lt;code&gt;&amp;lt;=&lt;/code&gt; pero NO con &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt; y &lt;code&gt;!==&lt;/code&gt; ya que compara los objetos y ve que son objetos diferentes. Si queremos saber si 2 fechas son iguales (siendo diferentes objetos) el código que pondremos NO es &lt;code&gt;fecha1 === fecha2&lt;/code&gt; sino &lt;code&gt;fecha1.getTime() === fecha2.getTime()&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: comprueba si es mayor tu fecha de nacimiento o el 1 de enero de este año&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Podemos probar los distintos métodos de las fechas en la página de &lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_date.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/07-globales/" >
        </entry>
        <entry>
            <title>
                06-eventos
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/06-eventos/</id>
            <content type="html">
                &lt;h1 id=&quot;eventos&quot; tabindex=&quot;-1&quot;&gt;Eventos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#c%C3%B3mo-escuchar-un-evento&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cómo escuchar un evento&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#event-listeners&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Event listeners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos de eventos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-p%C3%A1gina&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de página&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-rat%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de ratón&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-teclado&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de teclado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-toque&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de toque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-formulario&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de formulario&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#los-objetos-this-y-event&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Los objetos &lt;em&gt;this&lt;/em&gt; y &lt;em&gt;event&lt;/em&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bindeo-del-objeto-this&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Bindeo&lt;/em&gt; del objeto &lt;em&gt;this&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propagaci%C3%B3n-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propagación de eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#innerhtml-y-escuchadores-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;innerHTML y escuchadores de eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#delegaci%C3%B3n-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Delegación de eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-personalizados&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos personalizados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Nos permiten detectar acciones que realiza el usuario o cambios que suceden en la página y reaccionar en respuesta a ellas. Existen muchos eventos diferentes (podéis ver la lista en &lt;a href=&quot;https://www.w3schools.com/jsref/dom_obj_event.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;) aunque nosotros nos centraremos en los más comunes.&lt;/p&gt;
&lt;p&gt;Javascript nos permite ejecutar código cuando se produce un evento (por ejemplo el evento &lt;em&gt;click&lt;/em&gt; del ratón) asociando al mismo una función. Hay varias formas de hacerlo.&lt;/p&gt;
&lt;h2 id=&quot;como-escuchar-un-evento&quot; tabindex=&quot;-1&quot;&gt;Cómo escuchar un evento&lt;/h2&gt;
&lt;p&gt;La primera manera &amp;quot;estándar&amp;quot; de asociar código a un evento era añadiendo un atributo con el nombre del evento a escuchar (con &#39;on&#39; delante) en el elemento HTML. Por ejemplo, para ejecutar código al producirse el evento &#39;click&#39; sobre un botón se escribía:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;boton1&amp;quot; onclick=&amp;quot;alert(&#39;Se ha pulsado&#39;);&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una mejora era llamar a una función que contenía el código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;boton1&amp;quot; onclick=&amp;quot;clicked()&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function clicked() {
  alert(&#39;Se ha pulsado&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto &amp;quot;ensuciaba&amp;quot; con código la página HTML por lo que se creó el modelo de registro de eventos tradicional que permitía asociar a un elemento HTML una propiedad con el nombre del evento a escuchar (con &#39;on&#39; delante). En el caso anterior:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).onclick = funnction () {
  alert(&#39;Se ha pulsado&#39;);
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: hay que tener cuidado porque si se ejecuta el código antes de que se haya creado el botón estaremos asociando la función al evento &lt;em&gt;click&lt;/em&gt; de un elemento que aún no existe así que no hará nada. Para evitarlo siempre es conveniente poner el código que atiende a los eventos dentro de una función que se ejecute al producirse el evento &lt;em&gt;load&lt;/em&gt; de la ventana. Este evento se produce cuando se han cargado todos los elementos HTML de la página y se ha creado el árbol DOM. Lo mismo habría que hacer con cualquier código que modifique el árbol DOM. El código correcto sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.onload = function() {
  document.getElementById(&#39;boton1&#39;).onclick = function() {
    alert(&#39;Se ha pulsado&#39;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;event-listeners&quot; tabindex=&quot;-1&quot;&gt;Event listeners&lt;/h3&gt;
&lt;p&gt;La forma recomendada de hacerlo es usando el modelo avanzado de registro de eventos del W3C. Se usa el método &lt;code&gt;addEventListener&lt;/code&gt; que recibe como primer parámetro el nombre del evento a escuchar (sin &#39;on&#39;) y como segundo parámetro la función a ejecutar (OJO, sin paréntesis) cuando se produzca:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).addEventListener(&#39;click&#39;, pulsado);
...
function pulsado() {
  alert(&#39;Se ha pulsado&#39;);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Habitualmente se usan funciones anónimas ya que no necesitan ser llamadas desde fuera del escuchador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).addEventListener(&#39;click&#39;, function() {
  alert(&#39;Se ha pulsado&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos pasarle algún parámetro a la función escuchadora (cosa bastante poco usual) debemos usar funciones anónimas como escuchadores de eventos:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/L5pkg93w/1/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;NOTA: igual que antes debemos estar seguros de que se ha creado el árbol DOM antes de poner un escuchador por lo que se recomienda ponerlos siempre dentro de la función asociada al evento &lt;code&gt;window.onload&lt;/code&gt; (o mejor &lt;code&gt;window.addEventListener(&#39;load&#39;, ...)&lt;/code&gt; como en el ejemplo anterior).&lt;/p&gt;
&lt;p&gt;Una ventaja de este método es que podemos poner varios escuchadores para el mismo evento y se ejecutarán todos ellos. Para eliminar un escuchador se usa el método &lt;code&gt;removeEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: no se puede quitar un escuchador si hemos usado una función anónima, para quitarlo debemos usar como escuchador una función con nombre.&lt;/p&gt;
&lt;h2 id=&quot;tipos-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Tipos de eventos&lt;/h2&gt;
&lt;p&gt;Según qué o dónde se produce un evento estos se clasifican en:&lt;/p&gt;
&lt;h3 id=&quot;eventos-de-pagina&quot; tabindex=&quot;-1&quot;&gt;Eventos de página&lt;/h3&gt;
&lt;p&gt;Se producen en el documento HTML, normalmente en el BODY:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;load&lt;/strong&gt;: se produce cuando termina de cargarse la página. Es útil para hacer acciones que requieran que la página esté cargada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOMContentLoaded&lt;/strong&gt;: se produce cuando se ha cargado el árbol DOM pero no se han cargado imágenes, hojas de estilo, ni subframes. Es el ideal para realizar acciones del DOM sin tener que esperar a que se carguen las imágenes y el CSS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unload&lt;/strong&gt;: al destruirse el documento (ej. cerrar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeUnload&lt;/strong&gt;: antes de destruirse (podríamos mostrar un mensaje de confirmación)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;resize&lt;/strong&gt;: si cambia el tamaño del documento (porque se redimensiona la ventana)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eventos-de-raton&quot; tabindex=&quot;-1&quot;&gt;Eventos de ratón&lt;/h3&gt;
&lt;p&gt;Los produce el usuario con el ratón:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;click&lt;/strong&gt; / &lt;strong&gt;dblclick&lt;/strong&gt;: cuando se hace click/doble click sobre un elemento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mousedown&lt;/strong&gt; / &lt;strong&gt;mouseup&lt;/strong&gt;: al pulsar/soltar cualquier botón del ratón&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mouseenter&lt;/strong&gt; / &lt;strong&gt;mouseleave&lt;/strong&gt;: cuando el puntero del ratón entra/sale del elemento (tb. podemos usar mouseover/mouseout)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mousemove&lt;/strong&gt;: se produce continuamente mientras el puntero se mueva dentro del elemento&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTA: si hacemos doble click sobre un elemento la secuencia de eventos que se produciría es: &lt;em&gt;mousedown&lt;/em&gt; -&amp;gt; &lt;em&gt;mouseup&lt;/em&gt; -&amp;gt; &lt;em&gt;click&lt;/em&gt; -&amp;gt; &lt;em&gt;mousedown&lt;/em&gt; -&amp;gt; &lt;em&gt;mouseup&lt;/em&gt; -&amp;gt; &lt;em&gt;click&lt;/em&gt; -&amp;gt; &lt;em&gt;dblclick&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Pon un escuchador desde la consola al botón 1 de la &lt;a href=&quot;https://pedroporo.github.io/ejemploDOM.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de ejemplo de DOM&lt;/a&gt; para que al hacer click se muestre el un alert con &#39;Click sobre botón 1&#39;. Ponle otro para que al pasar el ratón sobre él se muestre &#39;Entrando en botón 1&#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;eventos-de-teclado&quot; tabindex=&quot;-1&quot;&gt;Eventos de teclado&lt;/h3&gt;
&lt;p&gt;Los produce el usuario al usar el teclado:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;keydown&lt;/strong&gt;: se produce al presionar una tecla y se repite continuamente si la tecla se mantiene pulsada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyup&lt;/strong&gt;: cuando se deja de presionar la tecla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keypress&lt;/strong&gt;: acción de pulsar y soltar (sólo se produce en las teclas alfanuméricas)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTA: el orden de secuencia de los eventos es:&lt;br /&gt;
&lt;em&gt;keyDown&lt;/em&gt; -&amp;gt; &lt;em&gt;keyPress&lt;/em&gt; -&amp;gt; &lt;em&gt;keyUp&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;eventos-de-toque&quot; tabindex=&quot;-1&quot;&gt;Eventos de toque&lt;/h3&gt;
&lt;p&gt;Se producen al usar una pantalla táctil:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;touchstart&lt;/strong&gt;: se produce cuando se detecta un toque en la pantalla táctil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touchend&lt;/strong&gt;: cuando se deja de pulsar la pantalla táctil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touchmove&lt;/strong&gt;: cuando un dedo es desplazado a través de la pantalla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touchcancel&lt;/strong&gt;: cuando se interrumpe un evento táctil.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eventos-de-formulario&quot; tabindex=&quot;-1&quot;&gt;Eventos de formulario&lt;/h3&gt;
&lt;p&gt;Se producen en los formularios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;focus&lt;/strong&gt; / &lt;strong&gt;blur&lt;/strong&gt;: al obtener/perder el foco el elemento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;change&lt;/strong&gt;: al perder el foco un &amp;lt;input&amp;gt; o &amp;lt;textarea&amp;gt; si ha cambiado su contenido o al cambiar de valor un &amp;lt;select&amp;gt; o un &amp;lt;checkbox&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;: al cambiar el valor de un &amp;lt;imput&amp;gt; o &amp;lt;textarea&amp;gt; (se produce cada vez que escribimos una letra es estos elementos)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;select&lt;/strong&gt;: al cambiar el valor de un &amp;lt;select&amp;gt; o al seleccionar texto de un &amp;lt;imput&amp;gt; o &amp;lt;textarea&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;submit&lt;/strong&gt; / &lt;strong&gt;reset&lt;/strong&gt;: al enviar/recargar un formulario&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;los-objetos-em-this-em-y-em-event-em&quot; tabindex=&quot;-1&quot;&gt;Los objetos &lt;em&gt;this&lt;/em&gt; y &lt;em&gt;event&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Al producirse un evento se generan automáticamente en su función manejadora 2 objetos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: siempre hace referencia al elemento que contiene el código en donde se encuentra la variable &lt;em&gt;this&lt;/em&gt;. En el caso de una función escuchadora será el elemento que tiene el escuchador que ha recibido el evento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;event&lt;/strong&gt;: es un objeto y la función escuchadora lo recibe como parámetro. Tiene propiedades y métodos que nos dan información sobre el evento, como:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.type&lt;/strong&gt;: qué evento se ha producido (click, submit, keyDown, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.target&lt;/strong&gt;: el elemento donde se produjo el evento (puede ser &lt;em&gt;this&lt;/em&gt;  o un descendiente de &lt;em&gt;this&lt;/em&gt;, como en el ejemplo siguiente)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.currentTarget&lt;/strong&gt;: el elemento que contiene el escuchador del evento lanzado (normalmente el mismo que &lt;em&gt;this&lt;/em&gt;). Por ejemplo si tenemos un &lt;em&gt;&lt;p&gt;&lt;/p&gt;&lt;/em&gt; al que le ponemos un escuchador de &#39;click&#39; que dentro tiene un elemento &lt;em&gt;&lt;span&gt;&lt;/span&gt;&lt;/em&gt;, si hacemos &lt;em&gt;click&lt;/em&gt; sobre el &lt;em&gt;&lt;span&gt;&lt;/span&gt;&lt;/em&gt; &lt;strong&gt;event.target&lt;/strong&gt; será el &lt;em&gt;&lt;span&gt;&lt;/span&gt;&lt;/em&gt; que es donde hemos hecho click (está dentro de &lt;em&gt;&lt;p&gt;&lt;/p&gt;&lt;/em&gt;) pero tanto &lt;em&gt;&lt;this&gt;&lt;/this&gt;&lt;/em&gt; como &lt;em&gt;event.currentTarget&lt;/em&gt; será &lt;em&gt;&lt;p&gt;&lt;/p&gt;&lt;/em&gt; (que es quien tiene el escuchador que se está ejecutando).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.relatedTarget&lt;/strong&gt;: en un evento &#39;mouseover&#39; &lt;strong&gt;event.target&lt;/strong&gt; es el elemento donde ha entrado el puntero del ratón y &lt;strong&gt;event.relatedTarget&lt;/strong&gt; el elemento del que ha salido. En un evento &#39;mouseout&#39; sería al revés.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.cancelable&lt;/strong&gt;: si el evento puede cancelarse. En caso afirmativo se puede llamar a &lt;strong&gt;event.preventDefault()&lt;/strong&gt; para cancelarlo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.preventDefault()&lt;/strong&gt;: si un evento tiene un escuchador asociado se ejecuta el código de dicho escuchador y después el navegador realiza la acción que correspondería por defecto al evento si no tuviera escuchador (por ejemplo un escuchador del evento &lt;em&gt;click&lt;/em&gt; sobre un hiperenlace hará que se ejecute su código y después saltará a la página indicada en el &lt;em&gt;href&lt;/em&gt; del hiperenlace). Este método cancela la acción por defecto del navegador para el evento. Por ejemplo si el evento era el &lt;em&gt;submit&lt;/em&gt; de un formulario éste no se enviará o si era un &lt;em&gt;click&lt;/em&gt; sobre un hiperenlace no se irá a la página indicada en él.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.stopPropagation&lt;/strong&gt;: un evento se produce sobre un elemento y todos su padres. Por ejemplo si hacemos click en un &amp;lt;span&amp;gt; que está en un &amp;lt;p&amp;gt; que está en un &amp;lt;div&amp;gt; que está en el BODY el evento se va propagando por todos estos elementos y saltarían los escuchadores asociados a todos ellos (si los hubiera). Si alguno llama a este método el evento no se propagará a los demás elementos padre.&lt;/li&gt;
&lt;li&gt;dependiento del tipo de evento tendrá más propiedades:
&lt;ul&gt;
&lt;li&gt;eventos de ratón:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.button&lt;/strong&gt;: qué botón del ratón se ha pulsado (0: izq, 1: rueda; 2: dcho).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.screenX&lt;/strong&gt; / &lt;strong&gt;.screenY&lt;/strong&gt;: las corrdenadas del ratón respecto a la pantalla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.clientX&lt;/strong&gt; / &lt;strong&gt;.clientY&lt;/strong&gt;: las coordenadas del ratón respecto a la ventana cuando se produjo el evento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.pageX&lt;/strong&gt; / &lt;strong&gt;.pageY&lt;/strong&gt;: las coordenadas del ratón respecto al documento (si se ha hecho un scroll será el clientX/Y más el scroll)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.offsetX&lt;/strong&gt; / &lt;strong&gt;.offsetY&lt;/strong&gt;: las coordenadas del ratón respecto al elemento sobre el que se produce el evento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.detail&lt;/strong&gt;: si se ha hecho click, doble click o triple click&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eventos de teclado: son los más incompatibles entre diferentes navegadores. En el teclado hay teclas normales y especiales (Alt, Ctrl, Shift, Enter, Tab, flechas, Supr, ...). En la información del teclado hay que distinguir entre el código del carácter pulsado (e=101, E=69, €=8364) y el código de la tecla pulsada (para los 3 caracteres es el 69 ya que se pulsa la misma tecla). Las principales propiedades de &lt;em&gt;event&lt;/em&gt; son:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.key&lt;/strong&gt;: devuelve el nombre de la tecla pulsada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.which&lt;/strong&gt;: devuelve el código de la tecla pulsada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.keyCode&lt;/strong&gt; / &lt;strong&gt;.charCode&lt;/strong&gt;: código de la tecla pulsada y del carácter pulsado (según navegadores)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.shiftKey&lt;/strong&gt; / &lt;strong&gt;.ctrlKey&lt;/strong&gt; / &lt;strong&gt;.altKey&lt;/strong&gt; / &lt;strong&gt;.metaKey&lt;/strong&gt;: si está o no pulsada la tecla SHIFT / CTRL / ALT / META. Esta propiedad también la tienen los eventos de ratón&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTA: a la hora de saber qué tecla ha pulsado el usuario es conveniente tener en cuenta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;para saber qué carácter se ha pulsado lo mejor usar la propiedad &lt;em&gt;key&lt;/em&gt; o &lt;em&gt;charCode&lt;/em&gt; de &lt;em&gt;keyPress&lt;/em&gt;, pero varía entre navegadores&lt;/li&gt;
&lt;li&gt;para saber la tecla especial pulsada mejor usar el &lt;em&gt;key&lt;/em&gt; o el &lt;em&gt;keyCode&lt;/em&gt; de &lt;em&gt;keyUp&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;captura sólo lo que sea necesario, se producen muchos eventos de teclado&lt;/li&gt;
&lt;li&gt;para obtener el carácter a partir del código: &lt;code&gt;String fromCharCode(codigo);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo mejor para familiarizarse con los diferentes eventos es consultar los &lt;a href=&quot;https://www.w3schools.com/js/js_events_examples.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ejemplos de w3schools&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Pon desde la consola un escuchador al BODY de la página de ejemplo para que al mover el ratón en cualquier punto de la ventana del navegador, se muestre en algún sitio (añade un DIV o un P al HTML) la posición del puntero respecto del navegador y respecto de la página.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Pon desde la consola un escuchador al BODY de la página de ejemplo para que al pulsar cualquier tecla nos muestre en un alert el &lt;em&gt;key&lt;/em&gt; y el &lt;em&gt;keyCode&lt;/em&gt; de la tecla pulsada. Pruébalo con diferentes teclas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;em-bindeo-em-del-objeto-em-this-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Bindeo&lt;/em&gt; del objeto &lt;em&gt;this&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;En ocasiones no queremos que &lt;em&gt;this&lt;/em&gt; sea el elemento sobre quien se produce el evento sino que queremos conservar el valor que tenía antes de entrar a la función escuchadora. Por ejemplo la función escuchadora es un método de una clase en &lt;em&gt;this&lt;/em&gt; tenemos el objeto de la clase sobre el que estamos actuando pero al entrar en la función perdemos esa referencia.&lt;/p&gt;
&lt;p&gt;El método &lt;em&gt;.bind()&lt;/em&gt; nos permite pasarle a una función el valor que queremos darle a la variable &lt;em&gt;this&lt;/em&gt; dentro de dicha función. Por defecto a una función escuchadora de eventos se le &lt;em&gt;bindea&lt;/em&gt; le valor de &lt;strong&gt;event.currentTarget&lt;/strong&gt;. Si queremos que tenga otro valor se lo indicamos con &lt;strong&gt;.bind()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado.bind(variable));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo el valor de &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;aceptado&lt;/em&gt; será &lt;em&gt;variable&lt;/em&gt;. En el ejemplo que habíamos comentado de un escuchador dentro de una clase, para mantener el valor de &lt;em&gt;this&lt;/em&gt; y que haga referencia al objeto sobre el que estamos actuando haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado.bind(this));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;por lo que el valor de &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;aceptado&lt;/em&gt; será el mismo que tenía fuera, es decir, el objeto.&lt;/p&gt;
&lt;p&gt;Podemos &lt;em&gt;bindear&lt;/em&gt;, es decir, pasarle a la función escuchadora más variables declarándolas como parámetros de &lt;em&gt;bind&lt;/em&gt;. El primer parámetro será el valor de &lt;em&gt;this&lt;/em&gt; y los demás serán parámetros que recibirá la función antes de recibir el parámetro &lt;em&gt;event&lt;/em&gt; que será el último. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado.bind(var1, var2, var3));
...
function aceptado(param1, param2, event) {
  // Aquí dentro tendremos los valores
  // this = var1
  // param1 = var2
  // param2 = var3
  // event es el objeto con la información del evento producido
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;propagacion-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Propagación de eventos&lt;/h2&gt;
&lt;p&gt;Normalmente en una página web los elementos HTML se solapan unos con otros, por ejemplo, un &amp;lt;span&amp;gt; está en un &amp;lt;p&amp;gt; que está en un &amp;lt;div&amp;gt; que está en el &amp;lt;body&amp;gt;. Si ponemos un escuchador del evento &lt;em&gt;click&lt;/em&gt; a todos ellos se ejecutarán todos ellos, pero ¿en qué orden?.&lt;/p&gt;
&lt;p&gt;Pues el W3C establecíó un modelo en el que primero se disparan los eventos de fuera hacia dentro (primero el &amp;lt;body&amp;gt;) y al llegar al más interno (el &amp;lt;span&amp;gt;) se vuelven a disparar de nuevo pero de dentro hacia afuera. La primera fase se conoce como &lt;strong&gt;fase de captura&lt;/strong&gt; y la segunda como &lt;strong&gt;fase de burbujeo (&lt;em&gt;bubbling&lt;/em&gt;)&lt;/strong&gt;. Cuando ponemos un escuchador con &lt;code&gt;addEventListener&lt;/code&gt; el tercer parámetro indica en qué fase debe dispararse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;true&lt;/strong&gt;: en fase de captura&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;false&lt;/strong&gt; (valor por defecto): en fase de burbujeo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto, por defecto se disparará el escuchador más interno (el del &amp;lt;span&amp;gt;) y continuará el resto hasta el más externo (&amp;lt;body&amp;gt;) como si fuera una burbuja que sale afuera desde el interior.&lt;/p&gt;
&lt;p&gt;Podéis ver un ejemplo en:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/n3b6fph0/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Sin embargo si al método &lt;code&gt;.addEventListener&lt;/code&gt; le pasamos un tercer parámetro con el valor &lt;em&gt;true&lt;/em&gt; el comportamiento será el contrario, lo que se conoce como &lt;em&gt;captura&lt;/em&gt; y el primer escuchador que se ejecutará es el del &amp;lt;body&amp;gt; y el último el del &amp;lt;span&amp;gt; (podéis probarlo añadiendo ese parámetro a los escuchadores del ejemplo anterior).&lt;/p&gt;
&lt;p&gt;En cualquier momento podemos evitar que se siga propagando el evento ejecutando el método &lt;code&gt;.stopPropagation()&lt;/code&gt; en el código de cualquiera de los escuchadores.&lt;/p&gt;
&lt;p&gt;Podéis ver las distintas fases de un evento en la página &lt;a href=&quot;https://domevents.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;domevents.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;inner-html-y-escuchadores-de-eventos&quot; tabindex=&quot;-1&quot;&gt;innerHTML y escuchadores de eventos&lt;/h2&gt;
&lt;p&gt;Si cambiamos la propiedad &lt;em&gt;innerHTML&lt;/em&gt; de un elemento del árbol DOM todos sus escuchadores de eventos desaparecen ya que es como si se volviera a crear ese elemento (y los escuchadores deben ponerse después de crearse).&lt;/p&gt;
&lt;p&gt;Por ejemplo, tenemos una tabla de datos y queremos que al hacer doble click en cada fila se muestre su id. La función que añade una nueva fila podría ser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function renderNewRow(data) {
  let miTabla = document.getElementById(&#39;tabla-datos&#39;);
  let nuevaFila = `&amp;lt;tr id=&amp;quot;${data.id}&amp;quot;&amp;gt;&amp;lt;td&amp;gt;${data.dato1}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${data.dato2}...&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`;
  miTabla.innerHTML += nuevaFila;
  document.getElementById(data.id).addEventListener(&#39;dblclick&#39;, event =&amp;gt; alert(&#39;Id: &#39;+ event.target.id));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo esto sólo funcionaría para la última fila añadida ya que la línea &lt;code&gt;miTabla.innerHTML += nuevaFila&lt;/code&gt; equivale a &lt;code&gt;miTabla.innerHTML = miTabla.innerHTML + nuevaFila&lt;/code&gt;. Por tanto estamos asignando a &lt;em&gt;miTabla&lt;/em&gt; un código HTML que ya no contiene escuchadores, excepto el de &lt;em&gt;nuevaFila&lt;/em&gt; que lo ponemos después de hacer la asignación.&lt;/p&gt;
&lt;p&gt;La forma correcta de hacerlo sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function renderNewRow(data) {
  let miTabla = document.getElementById(&#39;tabla-datos&#39;);
  let nuevaFila = document.createElement(&#39;tr&#39;);
  nuevaFila.id = data.id;
  nuevaFila.innerHTML = `&amp;lt;td&amp;gt;${data.dato1}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${data.dato2}...&amp;lt;/td&amp;gt;`;
  nuevaFila.addEventListener(&#39;dblclick&#39;, event =&amp;gt; alert(&#39;Id: &#39; + event.target.id) );
  miTabla.appendChild(nuevaFila);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma además mejoramos el rendimiento ya que el navegador sólo tiene que renderizar el nodo correspondiente a la nuevaFila. Si lo hacemos como estaba al principio se deben volver a crear y a renderizar todas las filas de la tabla (todo lo que hay dentro de miTabla).&lt;/p&gt;
&lt;h2 id=&quot;delegacion-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Delegación de eventos&lt;/h2&gt;
&lt;p&gt;Es un patrón de diseño que nos permite no tener que poner un escuchador a cada elemento sino uno global que haga el trabajo de todos.&lt;/p&gt;
&lt;p&gt;Por ejemplo si queremos escuchar cuándo hacemos &lt;em&gt;click&lt;/em&gt; en cada celda de la tabla en lugar de poner un escuchador en cada una (que podría tener cientos) pongo sólo 1  en la tabla y mediante la propiedad &lt;code&gt;event.target&lt;/code&gt; puede saber sobre qué celda en concreto se ha hecho &lt;em&gt;click&lt;/em&gt;. Esto además seguirá funcionando si dinámicamente añado nuevas celdas a la tabla ya que no son ellas las que tienen el escuchador sino la propia tabla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: ten en cuenta que a veces el evento se produce en alguna etiqueta interna y &lt;code&gt;event.target&lt;/code&gt; no es el elemento que buscamos. Por ejemplo si hay una imagen en la celda el &lt;code&gt;event.target&lt;/code&gt; podría ser la &amp;lt;img&amp;gt; y no la &amp;lt;td&amp;gt;. Para asegurarnos de llegar al elemento deseado podemos usar el selector &lt;code&gt;closest()&lt;/code&gt; que vimos en el DOM.&lt;/p&gt;
&lt;p&gt;Podéis ver más ejemplos de delegación de eventos en &lt;a href=&quot;https://es.javascript.info/event-delegation&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El Tutorial de JavaScript Moderno&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;eventos-personalizados&quot; tabindex=&quot;-1&quot;&gt;Eventos personalizados&lt;/h2&gt;
&lt;p&gt;También podemos mediante código lanzar manualmente cualquier evento sobre un elemento con el método &lt;code&gt;dispatchEvent()&lt;/code&gt; e incluso crear eventos personalizados, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const event = new Event(&#39;build&#39;);

// Listen for the event.
elem.addEventListener(&#39;build&#39;, (e) =&amp;gt; { /* ... */ });

// Dispatch the event.
elem.dispatchEvent(event);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Incluso podemos añadir datos al objeto &lt;em&gt;event&lt;/em&gt; si creamos el evento con &lt;code&gt;new CustomEvent()&lt;/code&gt;. Podéis obtener más información en la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de MDN&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/06-eventos/" >
        </entry>
        <entry>
            <title>
                05-BOM
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/05-bom/</id>
            <content type="html">
                &lt;h1 id=&quot;browser-object-model-bom&quot; tabindex=&quot;-1&quot;&gt;Browser Object Model (BOM)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#browser-object-model-bom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Browser Object Model (BOM)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#timers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Timers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objetos-del-bom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objetos del BOM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-window&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto window&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#di%C3%A1logos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Diálogos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-location&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto location&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-history&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-navigator&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto navigator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otros-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otros objetos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema veremos cómo acceder a objetos que nos permitan interactuar con el navegador (&lt;em&gt;Browser Object Model, BOM&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Usando los objetos BOM podemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abrir, cambiar y cerrar ventanas&lt;/li&gt;
&lt;li&gt;Ejecutar código en cierto tiempo (&lt;em&gt;timers&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Obtener información del navegador&lt;/li&gt;
&lt;li&gt;Ver y modificar propiedades de la pantalla&lt;/li&gt;
&lt;li&gt;Gestionar cookies, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timers&quot; tabindex=&quot;-1&quot;&gt;Timers&lt;/h2&gt;
&lt;p&gt;Permiten ejecutar código en el futuro (cuando transcurran los milisegundos indicados). Hay 2 tipos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout(función, milisegundos)&lt;/code&gt;: ejecuta la función pasada como parámetro una sóla vez, cuando transcurran los milisegundos indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval(función, milisegundos)&lt;/code&gt;: ejecuta la función cada vez que transcurran los milisegundos indicados, hasta que sea cancelado el &lt;em&gt;timer&lt;/em&gt;. A ambas se le pueden pasar más parámetros tras los milisegundos y serán los parámetros que recibirá la función a ejecutar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ambas funciones devuelven un identificador que nos permitirá cancelar la ejecución del código usando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clearTiemout(identificador)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearInterval(identificador)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const idTimeout = setTimeout(() =&amp;gt; alert(&#39;Timeout que se ejecuta al cabo de 1 seg.&#39;), 1000);

let i = 1;
const idInterval = setInterval(() =&amp;gt; {
	alert(&#39;Interval cada 3 seg. Ejecución nº: &#39;+ i++);
  if (i === 5) {
    clearInterval(idInterval);
    alert(&#39;Fin de la ejecución del Interval&#39;);
	}
}, 3000);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta en la consola cada una de esas funciones&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;En lugar de definir la función a ejecutar podemos llamar a una función que ya exista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showMessage() {
  alert(&#39;Timeout que se ejecuta al cabo de 1 seg.&#39;)
}

const idTimeout=setTimeout(showMessage, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero en ese caso hay que poner sólo el nombre de la función, sin &lt;code&gt;()&lt;/code&gt; ya que si los ponemos se ejecutaría la función en ese momento y no transcurrido el tiempo indicado.&lt;/p&gt;
&lt;p&gt;Si necesitamos pasarle algún parámetro a la función lo añadiremos como parámetros de &lt;code&gt;setTimeout&lt;/code&gt; o &lt;code&gt;setInterval&lt;/code&gt; después del intervalo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showMessage(msg) {
  alert(msg)
}

const idTimeout = setTimeout(showMessage, 1000, &#39;Timeout que se ejecuta al cabo de 1 seg.&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;objetos-del-bom&quot; tabindex=&quot;-1&quot;&gt;Objetos del BOM&lt;/h2&gt;
&lt;p&gt;Al contrario que para el DOM, no existe un estándar de BOM pero es bastante parecido en los diferentes navegadores.&lt;/p&gt;
&lt;h3 id=&quot;objeto-a-href-http-www-w3schools-com-jsref-obj-window-asp-target-blank-class-external-link-window-a&quot; tabindex=&quot;-1&quot;&gt;Objeto &lt;a href=&quot;http://www.w3schools.com/jsref/obj_window.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;window&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Representa la ventana del navegador y es el objeto principal. De hecho puede omitirse al llamar a sus propiedades y métodos, por ejemplo, el método &lt;code&gt;setTimeout()&lt;/code&gt; es en realidad &lt;code&gt;window.setTimeout()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sus principales propiedades y métodos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.name&lt;/code&gt;: nombre de la ventana actual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.status&lt;/code&gt;: valor de la barra de estado&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.screenX&lt;/code&gt;/&lt;code&gt;.screenY&lt;/code&gt;: distancia de la ventana a la esquina izquierda/superior de la pantalla&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.outerWidth&lt;/code&gt;/&lt;code&gt;.outerHeight&lt;/code&gt;: ancho/alto total de la ventana, incluyendo la toolbar y la scrollbar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.innerWidth&lt;/code&gt;/&lt;code&gt;.innerHeight&lt;/code&gt;: ancho/alto útil del documento, sin la toolbar y la scrollbar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.open(url, nombre, opciones)&lt;/code&gt;: abre una nueva ventana. Devuelve el nuevo objeto ventana. Las principales opciones son:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.toolbar&lt;/code&gt;: si tendrá barra de herramientas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.location&lt;/code&gt;: si tendrá barra de dirección&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.directories&lt;/code&gt;: si tendrá botones Adelante/Atrás&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.status&lt;/code&gt;: si tendrá barra de estado&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.menubar&lt;/code&gt;: si tendrá barra de menú&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.scrollbar&lt;/code&gt;: si tendrá barras de desplazamiento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.resizable&lt;/code&gt;: si se puede cambiar su tamaño&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.width=px&lt;/code&gt;/&lt;code&gt;.height=px&lt;/code&gt;: ancho/alto&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.left=px&lt;/code&gt;/&lt;code&gt;.top=px&lt;/code&gt;: posición izq/sup de la ventana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.opener&lt;/code&gt;: referencia a la ventana desde la que se abrió esta ventana (para ventanas abiertas con &lt;em&gt;open&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.close()&lt;/code&gt;: la cierra (pide confirmación, a menos que la hayamos abierto con open)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.moveTo(x,y)&lt;/code&gt;: la mueve a las coord indicadas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.moveBy(x,y)&lt;/code&gt;: la desplaza los px indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.resizeTo(x,y)&lt;/code&gt;: la da el ancho y alto indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.resizeBy(x,y)&lt;/code&gt;: le añade ese ancho/alto&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pageXoffset / pageYoffset&lt;/code&gt;: scroll actual de la ventana horizontal / vertical&lt;/li&gt;
&lt;li&gt;Otros métodos: &lt;code&gt;.back()&lt;/code&gt;, &lt;code&gt;.forward()&lt;/code&gt;, &lt;code&gt;.home()&lt;/code&gt;, &lt;code&gt;.stop()&lt;/code&gt;, &lt;code&gt;.focus()&lt;/code&gt;, &lt;code&gt;.blur()&lt;/code&gt;, &lt;code&gt;.find()&lt;/code&gt;, &lt;code&gt;.print()&lt;/code&gt;, …&lt;br /&gt;
NOTA: por seguridad no se puede mover una ventana fuera de la pantalla ni darle un tamaño menor de 100x100 px ni tampoco se puede mover una ventana no abierta con .open() o si tiene varias pestañas&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta desde la consola:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abre una nueva ventana de dimensiones 500x200px en la posición (100,200)&lt;/li&gt;
&lt;li&gt;escribe en ella (con document.write) un título h1 que diga &#39;Hola&#39;&lt;/li&gt;
&lt;li&gt;muévela 300 px hacia abajo y 100 a la izquierda&lt;/li&gt;
&lt;li&gt;ciérrala&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Puedes ver un ejemplo de cómo abrir ventanas en &lt;a href=&quot;https://www.youtube.com/watch?v=jkTt6bs2tPo&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=40&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este vídeo&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz que a los 2 segundos de abrir la página se abra un &lt;em&gt;popup&lt;/em&gt; con un mensaje de bienvenida. Esta ventana tendrá en su interior un botón Cerrar que permitirá que el usuario la cierre haciendo clic en él. Tendrá el tamaño justo para visualizar el mensaje y no tendrá barras de scroll, ni de herramientas, ni de dirección... únicamente el mensaje.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;dialogos&quot; tabindex=&quot;-1&quot;&gt;Diálogos&lt;/h4&gt;
&lt;p&gt;Hay 3 métodos del objeto &lt;em&gt;window&lt;/em&gt; que ya conocemos y que nos permiten abrir ventanas de diálogo con el usuario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.alert(mensaje)&lt;/code&gt;: muestra un diálogo con el mensaje indicado y un botón de &#39;Aceptar&#39;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.confirm(mensaje)&lt;/code&gt;: muestra un diálogo con el mensaje indicado y botones de &#39;Aceptar&#39; y &#39;Cancelar&#39;. Devuelve &lt;em&gt;true&lt;/em&gt; si se ha pulsado el botón de aceptar del diálogo y &lt;em&gt;false&lt;/em&gt; si no.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.prompt(mensaje [, valor predeterminado])&lt;/code&gt;: muestra un diálogo con el mensaje indicado, un cuadro de texto (vacío o co el valor predeterminado indicado) y botones de &#39;Aceptar&#39; y &#39;Cancelar&#39;. Si se pulsa &#39;Aceptar&#39; devolverá un &lt;em&gt;string&lt;/em&gt; con el valor que haya en el cuadro de texto y si se pulsa &#39;Cancelar&#39; o se cierra devolverá &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;objeto-a-href-http-www-w3schools-com-jsref-obj-location-asp-target-blank-class-external-link-location-a&quot; tabindex=&quot;-1&quot;&gt;Objeto &lt;a href=&quot;http://www.w3schools.com/jsref/obj_location.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;location&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Contiene información sobre la URL actual del navegador y podemos modificarla. Sus principales propiedades y métodos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.href&lt;/code&gt;: devuelve la URL actual completa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.protocol&lt;/code&gt;, &lt;code&gt;.hostname&lt;/code&gt;, &lt;code&gt;.port&lt;/code&gt;: devuelve el protocolo, host y puerto respectivamente de la URL actual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pathname&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;: devuelve la ruta al recurso actual, el gragmento (&lt;code&gt;#...&lt;/code&gt;) y la cadena de búsqueda (&lt;code&gt;?...&lt;/code&gt;) respectivamente&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.reload()&lt;/code&gt;: recarga la página actual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.assign(url)&lt;/code&gt;: carga la página pasada como parámetro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.replace(url)&lt;/code&gt;: ídem pero sin guardar la actual en el historial&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta en la consola&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;muestra la ruta completa de la página actual&lt;/li&gt;
&lt;li&gt;muestra el servidor de esta página&lt;/li&gt;
&lt;li&gt;carga la página de Google usando el objeto &lt;em&gt;location&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;objeto-a-href-http-www-w3schools-com-jsref-obj-history-asp-target-blank-class-external-link-history-a&quot; tabindex=&quot;-1&quot;&gt;Objeto &lt;a href=&quot;http://www.w3schools.com/jsref/obj_history.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;history&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Permite acceder al historial de páginas visitadas y navegar por él:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.length&lt;/code&gt;: muestra el número de páginas almacenadas en el historial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.back()&lt;/code&gt;: vuelve a la página anterior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.forward()&lt;/code&gt;: va a la siguiente página&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.go(num)&lt;/code&gt;: se mueve &lt;em&gt;num&lt;/em&gt; páginas hacia adelante o hacia atrás (si &lt;em&gt;num&lt;/em&gt; es negativo) en el historial&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: desde la consola vuelve a la página anterior&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;objeto-navigator&quot; tabindex=&quot;-1&quot;&gt;Objeto navigator&lt;/h3&gt;
&lt;p&gt;Nos da información sobre el navegador y el sistema en que se ejecuta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.userAgent&lt;/code&gt;: muestra información sobre el navegador que usamos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.language&lt;/code&gt;: muestra el idioma del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.languages&lt;/code&gt;: muestra los idiomas instalados en el navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.appVersion&lt;/code&gt;: versión del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.appName&lt;/code&gt;: nombre del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.appCodeName&lt;/code&gt;: nombre en código del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.product&lt;/code&gt;: producto del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.platform&lt;/code&gt;: sistema en el que se ejecuta el navegador&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También incluye objetos con sus propias API para poder interactuar con el sistema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.geolocation&lt;/code&gt;: devuelve un objeto con la localización del dispositivo (sólo funciona en https)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.storage&lt;/code&gt;: permite acceder a los datos almacenados en el navegador (los veremos en detalle más adelante)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.clipboard&lt;/code&gt;: permite copiar texto al portapapeles del usuario con &lt;code&gt;.writeText()&lt;/code&gt; (sólo funciona en https)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.mediaDevices&lt;/code&gt;: permite acceder a los dispositivos multimedia del usuario&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.serviceWorker&lt;/code&gt;: permite trabajar con &lt;em&gt;service workers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: desde la consola muestra la información del navegador, su lenguaje y del sistema en que se ejecuta&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;otros-objetos&quot; tabindex=&quot;-1&quot;&gt;Otros objetos&lt;/h3&gt;
&lt;p&gt;Otros objetos que incluye BOM son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/jsref/obj_screen.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;screen&lt;/a&gt;: nos da información sobre la pantalla
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.width&lt;/code&gt;/&lt;code&gt;.height&lt;/code&gt;: ancho/alto total de la pantalla (resolución)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.availWidth&lt;/code&gt;/&lt;code&gt;.availHeight&lt;/code&gt;: igual pero excluyendo la barra del S.O.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: obtén desde la consola todas las propiedades width/height y availWidth/availHeight del objeto &lt;em&gt;scrren&lt;/em&gt;. Compáralas con las propiedades innerWidth/innerHeight y outerWidth/outerHeight de &lt;em&gt;window&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/05-bom/" >
        </entry>
        <entry>
            <title>
                04.1-MVC
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/04-1-mvc/</id>
            <content type="html">
                &lt;h1 id=&quot;el-patron-modelo-vista-controlador&quot; tabindex=&quot;-1&quot;&gt;El patrón Modelo-Vista-Controlador&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Modelo-vista-controlador (MVC)&lt;/strong&gt; es un patrón de arquitectura de software muy utilizado en la actualidad en desarrollo web (y también en muchas aplicaciones de escritorio). Este patrón propone separar la aplicación en &lt;strong&gt;componentes&lt;/strong&gt; distintos: el &lt;strong&gt;modelo&lt;/strong&gt;, la &lt;strong&gt;vista&lt;/strong&gt; y el &lt;strong&gt;controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;strong&gt;modelo&lt;/strong&gt; representa y gestiona los datos o información con la que trabaja la aplicación que normalmente serán variables extraidas de una base de datos. Normalmente el modelo no tiene conocimiento de las otras partes de la aplicación.&lt;/li&gt;
&lt;li&gt;La &lt;strong&gt;vista&lt;/strong&gt; muestra al usuario el modelo (información y lógica de negocio) en un formato adecuado para interactuar con él (usualmente la interfaz de usuario). Es la intermediaria entre la aplicación y el usuario&lt;/li&gt;
&lt;li&gt;El &lt;strong&gt;controlador&lt;/strong&gt; es el encargado de coordinar el funcionamiento de la aplicación. Responde a los eventos del usuario para lo que hace peticiones al modelo (para obtener o cambiar la información) y a la vista (para que muestre al usuario dicha información).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además de etos componentes usualmente tendremos otros como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los &lt;strong&gt;servicios&lt;/strong&gt; que controlan la comunicación con el servidor y otras fuentes externas de datos. Gestionan los accesos a la información, tanto consultas como actualizaciones, implementando también los privilegios de acceso que se hayan descrito en las especificaciones de la aplicación (lógica de negocio).&lt;/li&gt;
&lt;li&gt;Las &lt;strong&gt;rutas&lt;/strong&gt; gestionan la navegación y las rutas de la aplicación en SPA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este patrón de arquitectura de software se basa en las ideas de reutilización de código y la separación de conceptos, características que buscan facilitar la tarea de desarrollo de aplicaciones y su posterior mantenimiento.&lt;/p&gt;
&lt;h2 id=&quot;una-aplicacion-sin-mvc&quot; tabindex=&quot;-1&quot;&gt;Una aplicación sin MVC&lt;/h2&gt;
&lt;p&gt;Si una aplicación no utiliza este modelo la función que modifique los datos debe además reflejar dicha modificación en la página para que la vea el usuario. Por ejemplo vamos a hacer una aplicación para gestionar un almacén. Entre otras muchas cosas tendrá una función (podemos llamarle &lt;em&gt;addProduct&lt;/em&gt;) que se encargue de añadir un nuevo producto al almacén y dicha función deberá realizar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;añadir el nuevo producto al almacén (por ejemplo añadiéndolo a un array de productos)&lt;/li&gt;
&lt;li&gt;pintar en la página ese nuevo producto (por ejemplo añadiendo una nueva línea a una tabla donde se muestran los productos)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// La función que se ejecuta cuando el usuario envía el
// formulario para añadir un producto debería hacer:
document.getElementById(&#39;product-form&#39;).addEventListener(&#39;submit&#39;, async (event) =&amp;gt; {
    event.preventDefault()
    // Coge los datos del formlario
    const name = document.getElementById(&#39;product-form-name&#39;).value
    const price = document.getElementById(&#39;product-form-name&#39;).price
    ...
    // Valida cada dato
    if (!name || name.length &amp;lt; 5 || ...)
    ...
    // Añade el producto a la BBDD
    const prod = await addProductToDatabase(payload)
    let newProd = new Product(prod.id, prod.name, prod.price, prod.units)
    this.products.push(newProd)
    ...
    // Pinta en la página el nuevo producto
    const DOMproduct = document.createElement(&#39;tr&#39;)
    DOMproduct.innerHTML = `
        &amp;lt;td&amp;gt;${newProd.id}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;${newProd.name}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;${newProd.price}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;${newProd.units}&amp;lt;/td&amp;gt;`
    document.getElementById(&#39;products-table&#39;).apendChild(DOMproduct)
    // Gestiona los posibles errores producidos en todo este proceso
    ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vemos, se va a convertir en una función muy grande y que se encarga de muchas cosas distintas por lo que va a ser difícil mantener ese código. Además toda la función es muy dependiente del HTML (en muchas partes se buscan elementos por su id).&lt;/p&gt;
&lt;h2 id=&quot;nuestro-patron-mvc&quot; tabindex=&quot;-1&quot;&gt;Nuestro patrón MVC&lt;/h2&gt;
&lt;p&gt;En una aplicación muy sencilla podemos no seguir este modelo pero en cuanto la misma se complica un poco es imprescindible programar siguiendo buenas prácticas ya que si no lo hacemos nuestro código se volverá rápidamente muy difícil de mantener.&lt;/p&gt;
&lt;p&gt;Hay muchas formas de implementar este modelo. Si estamos haciendo un proyecto con &lt;em&gt;OOP&lt;/em&gt; podemos seguir el patrón MVC usando clases. Si sólo usamos programación estructurada será igual pero en vez de clases y métodos tendremos funciones.&lt;/p&gt;
&lt;p&gt;Para organizar el código crearemos subcarpetas dentro de la carpeta &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;: aquí incluiremos las clases que constituyen el modelo de nuestra aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;view&lt;/code&gt;: aquí crearemos un fichero JS que será el encargado de la GUI de nuestra aplicación, el único dependiente del HTML. Nuestro fichero será una clase que representa toda la vista aunque en aplicaciones mayores lo normal es tener clases para cada página, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controller&lt;/code&gt;: aquí crearemos el fichero JS que contendrá el controlador de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;services&lt;/code&gt;: aquí crearemos el fichero JS que se encargará de comunicarse con el servidor y proporcionar los datos al modelo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De este forma, si quiero cambiar la forma en que se muestra algo voy directamente a la vista y modifico la función que se ocupa de ello.&lt;/p&gt;
&lt;p&gt;La vista será una clase cuyas propiedades serán elementos de la página HTML a los que accedamos frecuentemente, para no tener que buscarlos cada vez y para que estén disponibles para el controlador. Contendrá métodos para renderizar los distintos elementos de la vista.&lt;/p&gt;
&lt;p&gt;El controlador será una clase cuyas propedades serán el modelo y la vista, de forma que pueda acceder a ambos elementos. Tendrá métodos para las distintas acciones que pueda hacer el usuario (y que se ejecutarán como respuesta a dichas acciones, como veremos en el tema de &lt;em&gt;eventos&lt;/em&gt;). Cada uno de esos métodos llamará a métodos del modelo (para obtener o cambiar la información necesaria) y posteriormente de la vista (para reflejar esos cambios en lo que ve el usuario).&lt;/p&gt;
&lt;p&gt;Por su parte el modelo gestionará los datos de la aplicación llamando a los servicios para obtener datos del servidor o guardar en él las modificaciones pertinentes.&lt;/p&gt;
&lt;p&gt;El fichero principal de la aplicación instanciará un controlador y lo inicializará.&lt;/p&gt;
&lt;p&gt;Por ejemplo, siguiendo con la aplicación para gestionar un almacén. El modelo constará de la clase &lt;em&gt;Store&lt;/em&gt; que es nuestro almacén de productos (con métodos para añadir o eliminar productos, etc) y la clase &lt;em&gt;Product&lt;/em&gt; que gestiona cada producto del almacén (con métodos para crear un nuevo producto, etc).&lt;/p&gt;
&lt;p&gt;El fichero principal sería algo como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const storeApp = new Controller()		// crea el controlador
storeApp.init()				// lo inicializa

// En desarrollo podemos añadir algunas líneas que luego quitaremos para
// imitar acciones del usuario y así ver el funcionamiento de la aplicación:
storeApp.addProductToStore({ name: &#39;Portátil Acer Travelmate E2100&#39;, price: 523.12 })
storeApp.changeProduct({ id: 1, price: 515.95 })
storeApp.deleteProduct(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;controller/index.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Controller {
    constructor() {
        this.store = new Store(1)		// crea el modelo, un Store con id 1
        this.view = new View()		// crea la vista
    }

    init() {
        // inicializa la vista y el modelo, si es necesario
        this.store.init()
        this.view.init()			

        // Le indica a la vista qué funciones callback se encargarán 
        // de responder a los eventos del usuario (siguiente tema)
        this.view.setSubmitHandler(this.handleSubmitProductForm.bind(this))
    }
	
    handleSubmitProductForm(payload) {
        // haría las comprobaciones necesarias sobre los datos
        if (!payload.name || payload.name.length &amp;lt; 5 || ...) {
            this.view.showErrorMessage(&#39;error&#39;, &#39;Datos incorrectos&#39;)
            return
        }
        ...
        // y luego dice al modelo que añada el producto
        try {
            const newProd = this.store.addProduct(prod)
            // si lo ha hecho le dice a la vista que lo pinte	
            this.view.renderNewProduct(newProd)	
        } catch(err) {
            this.view.showErrorMessage(&#39;error&#39;, &#39;Error al añadir el producto&#39;)
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;model/store.class.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Store {
    constructor (id) {
        this.id=Number(id)
        this.products=[]
    }

    addProduct(payload) {
        // llama a métodos de los servicios para que añada el producto
        const prod = await addProductToDatabase(payload)
        let newProd = new Product(prod.id, prod.name, prod.price, prod.units)
        this.products.push(newProd)
        return newProd
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;model/product.class.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Product {
    constructor (id, name, price, units) {
        this.id = id
        this.name = name
        this.price = price
        this.units = units
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;view/index.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class View {
    constructor {
        this.messageDiv = document.getElementById(&#39;messages&#39;)
        this.productForm = document.getElementById(&#39;product-form&#39;)
        this.productsList = document.getElementById(&#39;products-table&#39;)
    }

    init() {
        ...			// inicializa la vista, si es necesario
    }

    setSubmitHandler(callback) {
        // código para que el controlador llame a la función callback
        // cuando se envíe el formulario de añadir un producto
        this.productForm.addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
            event.preventDefault()
            const name = document.getElementById(&#39;product-form-name&#39;).value
            const price = document.getElementById(&#39;product-form-name&#39;).price
            ...
            callback({ name, price, ... })
        })
    }

    renderNewProduct(prod) {
        // código para añadir a la tabla el producto pasado añadiendo una nueva fila
        const DOMproduct = document.createElement(&#39;tr&#39;)
        DOMproduct.innerHTML = `
            &amp;lt;td&amp;gt;${newProd.id}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${newProd.name}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${newProd.price}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${newProd.units}&amp;lt;/td&amp;gt;`
        this.productsList.apendChild(DOMproduct)
    }
  
    showMessage(type, message) {
        // código para mostrar mensajes al usuario y no tener que usar los alert
        const DOMmessage = document.createElement(&#39;div&#39;)
        ...
        this.messageDiv.apendChild(DOMmessage)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis obtener más información y ver un ejemplo más completo en &lt;a href=&quot;https://www.natapuntes.es/patron-mvc-en-vanilla-javascript/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.natapuntes.es/patron-mvc-en-vanilla-javascript/&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/04-1-mvc/" >
        </entry>
        <entry>
            <title>
                04-DOM
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/04-dom/</id>
            <content type="html">
                &lt;h1 id=&quot;document-object-model-dom&quot; tabindex=&quot;-1&quot;&gt;Document Object Model (DOM)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#document-object-model-dom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Document Object Model (DOM)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceso-a-los-nodos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceso a los nodos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceso-a-nodos-a-partir-de-otros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceso a nodos a partir de otros&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-de-un-nodo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades de un nodo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#manipular-el-%C3%A1rbol-dom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Manipular el árbol DOM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-nuevos-nodos-con-innerhtml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir nuevos nodos con &lt;em&gt;innerHTML&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#atributos-de-los-nodos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Atributos de los nodos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estilos-de-los-nodos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estilos de los nodos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#atributos-de-clase&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Atributos de clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#atributos-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Atributos de datos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;La mayoría de las veces que programamos con Javascript es para que se ejecute en una página web mostrada por el navegador. En este contexto tenemos acceso a ciertos objetos que nos permiten interactuar con la página (DOM) y con el navegador (Browser Object Model, BOM).&lt;/p&gt;
&lt;p&gt;El &lt;strong&gt;DOM&lt;/strong&gt; es una estructura en árbol que representa todos los elementos HTML de la página y sus atributos. Todo lo que contiene la página se representa como nodos del árbol y mediante el DOM podemos acceder a cada nodo, modificarlo, eliminarlo o añadir nuevos nodos de forma que cambiamos dinámicamente la página mostrada al usuario.&lt;/p&gt;
&lt;p&gt;La raíz del árbol DOM es &lt;strong&gt;document&lt;/strong&gt; y de este nodo cuelgan el resto de elementos HTML. Cada uno constituye su propio nodo y tiene subnodos con sus &lt;em&gt;atributos&lt;/em&gt;, &lt;em&gt;estilos&lt;/em&gt; y elementos HTML que contiene.&lt;/p&gt;
&lt;p&gt;Por ejemplo, la página HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Página simple&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Esta página es &amp;lt;strong&amp;gt;muy simple&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se convierte en el siguiente árbol DOM:&lt;/p&gt;
&lt;p&gt;![Árbol DOM](/img/user/notas/Javascript Teoria Batoi/img/domSimple.png)&lt;/p&gt;
&lt;p&gt;Cada etiqueta HTML suele originar 2 nodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Element: correspondiente a la etiqueta&lt;/li&gt;
&lt;li&gt;Text: correspondiente a su contenido (lo que hay entre la etiqueta y su par de cierre)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada nodo es un objeto con sus propiedades y métodos.&lt;/p&gt;
&lt;p&gt;El ejemplo anterior está simplificado porque sólo aparecen los nodos de tipo &lt;em&gt;&lt;strong&gt;elemento&lt;/strong&gt;&lt;/em&gt; pero en realidad también generan nodos los saltos de línea, tabuladores, espacios, comentarios, etc. En el siguiente ejemplo podemos ver TODOS los nodos que realmente se generan. La página:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;My Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Header&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;
    Paragraph
  &amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se convierte en el siguiente árbol DOM:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;L. David Baron [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons&quot; href=&quot;https://commons.wikimedia.org/wiki/File:Dom_tree.png&quot;&gt;&lt;img width=&quot;512&quot; alt=&quot;Dom tree&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/5/58/Dom_tree.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;acceso-a-los-nodos&quot; tabindex=&quot;-1&quot;&gt;Acceso a los nodos&lt;/h2&gt;
&lt;p&gt;Los principales métodos para acceder a los diferentes nodos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementById(id)&lt;/strong&gt;: devuelve el nodo con la &lt;em&gt;id&lt;/em&gt; pasada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodo = document.getElementById(&#39;main&#39;);   // nodo contendrá el nodo cuya id es _main_
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementsByClassName(clase)&lt;/strong&gt;: devuelve una colección (similar a un array) con todos los nodos de la &lt;em&gt;clase&lt;/em&gt; indicada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodos = document.getElementsByClassName(&#39;error&#39;);   // nodos contendrá todos los nodos cuya clase es _error_
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: las colecciones son similares a arrays (se accede a sus elementos con &lt;em&gt;[indice]&lt;/em&gt;) pero no se les pueden aplicar sus métodos &lt;em&gt;filter&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, ... a menos que se conviertan a arrays con &lt;em&gt;Array.from()&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementsByTagName(etiqueta)&lt;/strong&gt;: devuelve una colección con todos los nodos de la &lt;em&gt;etiqueta&lt;/em&gt; HTML indicada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodos = document.getElementsByTagName(&#39;p&#39;);   // nodos contendrá todos los nodos de tipo  _&amp;lt;p&amp;gt;_
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementsByName(name)&lt;/strong&gt;: devuelve una colección con todos los nodos que contengan un atributo &lt;code&gt;name&lt;/code&gt; con el valor indicado. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let radiosSexo = document.getElementsByName(&#39;sexo&#39;);   // radiosSexo contendrá todos los nodos con ese atributo (seguramente radiobuttons con name=&amp;quot;sexo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.querySelector(selector)&lt;/strong&gt;: devuelve el primer nodo seleccionad por el &lt;em&gt;selector&lt;/em&gt; CSS indicado. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodo = document.querySelector(&#39;p.error&#39;);   // nodo contendrá el primer párrafo de clase _error_
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.querySelectorAll(selector)&lt;/strong&gt;: devuelve una colección con todos los nodos seleccionados por el &lt;em&gt;selector&lt;/em&gt; CSS indicado. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodos = document.querySelectorAll(&#39;p.error&#39;);   // nodos contendrá todos los párrafos de clase _error_
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: al aplicar estos métodos sobre &lt;em&gt;document&lt;/em&gt; se seleccionará sobre la página pero podrían también aplicarse a cualquier nodo y en ese caso la búsqueda se realizaría sólo entre los descendientes de dicho nodo.&lt;/p&gt;
&lt;p&gt;También tenemos &#39;atajos&#39; para obtener algunos elementos comunes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.documentElement&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;html&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.head&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;head&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.body&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.title&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;title&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.link&lt;/code&gt;: devuelve una colección con todos los hiperenlaces del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.anchor&lt;/code&gt;: devuelve una colección con todas las anclas del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.forms&lt;/code&gt;: devuelve una colección con todos los formularios del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.images&lt;/code&gt;: devuelve una colección con todas las imágenes del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.scripts&lt;/code&gt;: devuelve una colección con todos los scripts del documento&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Para hacer los ejercicios de este tema descárgate &lt;a href=&quot;https://pedroporo.github.io/ejemploDOM.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;esta página de ejemplo&lt;/a&gt; y ábrela en tu navegador. Obtén por consola, al menos de 2 formas diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El elemento con id &#39;input2&#39;
&lt;ul&gt;
&lt;li&gt;document.getElementById(&#39;input2&#39;) o document.querySelector(&#39;#input2&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;La colección de párrafos
&lt;ul&gt;
&lt;li&gt;document.getElementsByTagName(&#39;p&#39;) o document.querySelectorAll(&#39;p&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&quot;lo-mismo-pero-solo-de-los-parrafos-que-hay-dentro-del-div-lipsum&quot; tabindex=&quot;-1&quot;&gt;Lo mismo pero sólo de los párrafos que hay dentro del div &#39;lipsum&#39;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;El formulario (ojo, no la colección con el formulario sino sólo el formulario)&lt;/li&gt;
&lt;li&gt;Todos los inputs&lt;/li&gt;
&lt;li&gt;Sólo los inputs con nombre &#39;sexo&#39;&lt;/li&gt;
&lt;li&gt;Los items de lista de la clase &#39;important&#39; (sólo los LI)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;acceso-a-nodos-a-partir-de-otros&quot; tabindex=&quot;-1&quot;&gt;Acceso a nodos a partir de otros&lt;/h2&gt;
&lt;p&gt;En muchas ocasiones queremos acceder a cierto nodo a partir de uno dado. Para ello tenemos los siguientes métodos que se aplican sobre un elemento del árbol DOM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.parentElement&lt;/code&gt;: devuelve el elemento padre de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.children&lt;/code&gt;: devuelve la colección con todos los elementos hijo de &lt;em&gt;elemento&lt;/em&gt; (sólo elementos HTML, no comentarios ni nodos de tipo texto)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.childNodes&lt;/code&gt;: devuelve la colección con todos los hijos de &lt;em&gt;elemento&lt;/em&gt;, incluyendo comentarios y nodos de tipo texto por lo que no suele utilizarse&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.firstElementChild&lt;/code&gt;: devuelve el elemento HTML que es el primer hijo de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.firstChild&lt;/code&gt;: devuelve el nodo que es el primer hijo de &lt;em&gt;elemento&lt;/em&gt; (incluyendo nodos de tipo texto o comentarios)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.lastElementChild&lt;/code&gt;, &lt;code&gt;elemento.lastChild&lt;/code&gt;: igual pero con el último hijo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.nextElementSibling&lt;/code&gt;: devuelve el elemento HTML que es el siguiente hermano de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.nextSibling&lt;/code&gt;: devuelve el nodo que es el siguiente hermano de &lt;em&gt;elemento&lt;/em&gt; (incluyendo nodos de tipo texto o comentarios)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.previousElementSibling&lt;/code&gt;, &lt;code&gt;elemento.previousSibling&lt;/code&gt;: igual pero con el hermano anterior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.hasChildNodes&lt;/code&gt;: indica si &lt;em&gt;elemento&lt;/em&gt; tiene o no nodos hijos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.childElementCount&lt;/code&gt;: devuelve el nº de nodos hijo de  &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.closest(selector)&lt;/code&gt;: devuelve el ancestro más cercano que coincide con el selector. Por ejemplo si el elemento es un &amp;lt;td&amp;gt; de una tabla entonces &lt;code&gt;elemento.closest(&#39;table&#39;)&lt;/code&gt; devolverá la tabla a la que pertenece&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: a menos que me interesen comentarios, saltos de página, etc &lt;strong&gt;siempre&lt;/strong&gt; debo usar los métodos que sólo devuelven elementos HTML, no todos los nodos.&lt;/p&gt;
&lt;p&gt;![Recorrer el árbol DOM](/img/user/notas/Javascript Teoria Batoi/img/domRelaciones.png)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Siguiento con la &lt;a href=&quot;https://pedroporo.github.io/ejemploDOM.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de ejemplo&lt;/a&gt; obtén desde la consola, al menos de 2 formas diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El primér párrafo que hay dentro del div &#39;lipsum&#39;&lt;/li&gt;
&lt;li&gt;El segundo párrafo de &#39;lipsum&#39;&lt;/li&gt;
&lt;li&gt;El último item de la lista&lt;/li&gt;
&lt;li&gt;La label de &#39;Escoge sexo&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;propiedades-de-un-nodo&quot; tabindex=&quot;-1&quot;&gt;Propiedades de un nodo&lt;/h3&gt;
&lt;p&gt;Las principales propiedades de un nodo son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.innerHTML&lt;/code&gt;: todo lo que hay entre la etiqueta que abre &lt;em&gt;elemento&lt;/em&gt; y la que lo cierra, incluyendo otras etiquetas HTML. Por ejemplo si &lt;em&gt;elemento&lt;/em&gt; es el nodo &lt;code&gt;&amp;lt;p&amp;gt;Esta página es &amp;lt;strong&amp;gt;muy simple&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let contenido = elemento.innerHTML;   // contenido=&#39;Esta página es &amp;lt;strong&amp;gt;muy simple&amp;lt;/strong&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.textContent&lt;/code&gt;: todo lo que hay entre la etiqueta que abre &lt;em&gt;elemento&lt;/em&gt; y la que lo cierra, pero ignorando otras etiquetas HTML. Siguiendo con el ejemplo anterior:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let contenido = elemento.textContent;   // contenido=&#39;Esta página es muy simple&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.value&lt;/code&gt;: devuelve la propiedad &#39;value&#39; de un &amp;lt;input&amp;gt; (en el caso de un &amp;lt;input&amp;gt; de tipo text devuelve lo que hay escrito en él). Como los &amp;lt;inputs&amp;gt; no tienen etiqueta de cierre (&amp;lt;/input&amp;gt;) no podemos usar &lt;em&gt;.innerHTML&lt;/em&gt; ni &lt;em&gt;.textContent&lt;/em&gt;.  Por ejemplo si &lt;em&gt;elem1&lt;/em&gt; es el nodo &lt;code&gt;&amp;lt;input name=&amp;quot;nombre&amp;quot;&amp;gt;&lt;/code&gt; y &lt;em&gt;elem2&lt;/em&gt; es el nodo &lt;code&gt;&amp;lt;input tipe=&amp;quot;radio&amp;quot; value=&amp;quot;H&amp;quot;&amp;gt;Hombre&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cont1 = elem1.value;   // cont1 valdría lo que haya escrito en el &amp;lt;input&amp;gt; en ese momento
let cont2 = elem2.value;   // cont2=&amp;quot;H&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otras propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.innerText&lt;/code&gt;: igual que &lt;em&gt;textContent&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.focus&lt;/code&gt;: da el foco a &lt;em&gt;elemento&lt;/em&gt; (para inputs, etc). Para quitarle el foco &lt;code&gt;elemento.blur&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.clientHeight&lt;/code&gt; / &lt;code&gt;elemento.clientWidth&lt;/code&gt;: devuelve el alto / ancho visible del &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.offsetHeight&lt;/code&gt; / &lt;code&gt;elemento.offsetWidth&lt;/code&gt;: devuelve el alto / ancho total del &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.clientLeft&lt;/code&gt; / &lt;code&gt;elemento.clientTop&lt;/code&gt;: devuelve la distancia de &lt;em&gt;elemento&lt;/em&gt; al borde izquierdo / superior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.offsetLeft&lt;/code&gt; / &lt;code&gt;elemento.offsetTop&lt;/code&gt;: devuelve los píxels que hemos desplazado &lt;em&gt;elemento&lt;/em&gt; a la izquierda / abajo&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Obtén desde la consola, al menos de 2 formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El innerHTML de la etiqueta de &#39;Escoge sexo&#39;&lt;/li&gt;
&lt;li&gt;El textContent de esa etiqueta&lt;/li&gt;
&lt;li&gt;El valor del primer input de sexo&lt;/li&gt;
&lt;li&gt;El valor del sexo que esté seleccionado (difícil, búscalo por Internet)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;manipular-el-arbol-dom&quot; tabindex=&quot;-1&quot;&gt;Manipular el árbol DOM&lt;/h2&gt;
&lt;p&gt;Vamos a ver qué métodos nos permiten cambiar el árbol DOM, y por tanto modificar la página:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createElement(&#39;etiqueta&#39;)&lt;/code&gt;: crea un nuevo elemento HTML con la etiqueta indicada, pero aún no se añade a la página. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nuevoLi = document.createElement(&#39;li&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.append(elementos o texto)&lt;/code&gt;: añade al DOM los parámetros pasados como últimos hijos de &lt;em&gt;elemento&lt;/em&gt;. Se le puede pasar tanto un nodo DOM como una cadena de texto (para la que se creará su nodo de texto correspondiente) y que se le pueden pasar varios parámetros para crear varios nodos. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;nuevoLi.append(&#39;Nuevo elemento de lista&#39;);     // añade el texto pasado al elemento LI creado
let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
miPrimeraLista.append(nuevoLi);    // añade LI como último hijo de UL, es decir al final de la lista
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.prepend(elementos o texto)&lt;/code&gt;: como el anterior pero en lugar de añadirlos como últimos hijos los añade antes del primer hijo.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const primerLi = document.createElement(&#39;li&#39;);
primerLi.append(&#39;Primer elemento de lista&#39;); 
let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0]; 
miPrimeraLista.prepend(nuevoLi);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.after(elementos o texto)&lt;/code&gt;: como &lt;em&gt;append&lt;/em&gt; pero en lugar de añadirlos como últimos hijos los añade como los siguientes hermanos de &lt;em&gt;elemento&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const otroLi = document.createElement(&#39;li&#39;);
otroLi.append(&#39;Segundo elemento de lista&#39;); 
primerLi.after(otroLi);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.before(elementos o texto)&lt;/code&gt;: como el anterior pero los añade como los anteriores hermanos de &lt;em&gt;elemento&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.remove()&lt;/code&gt;: borra el nodo &lt;em&gt;elemento&lt;/em&gt; del documento.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.replaceWith(nuevoNodo)&lt;/code&gt;: reemplaza el nodo &lt;em&gt;elemento&lt;/em&gt; con el &lt;em&gt;nuevoNodo&lt;/em&gt; pasado&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let primerElementoDeLista = document.getElementsByTagName(&#39;ul&#39;)[0].firstChild;  // selecciona el 1º LI de miPrimeraLista
primerElementoDeLista.replaceChild(nuevoLi);    // reemplaza el 1º elemento de la lista con nuevoLi
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elementoAClonar.cloneNode(boolean)&lt;/code&gt;: devuelve un clon de &lt;em&gt;elementoAClonar&lt;/em&gt; o de &lt;em&gt;elementoAClonar&lt;/em&gt; con todos sus descendientes según le pasemos como parámetro &lt;em&gt;false&lt;/em&gt; o &lt;em&gt;true&lt;/em&gt;. Luego podremos insertarlo donde queramos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otros métodos menos usados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createTextNode(&#39;texto&#39;)&lt;/code&gt;: crea un nuevo nodo de texto con el texto indicado, que luego tendremos que añadir a un nodo HTML. Normalmente no se usa porque &lt;em&gt;append&lt;/em&gt; y el resto de métodos anteriores ya lo crean automáticamente. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let textoLi = document.createTextNode(&#39;Nuevo elemento de lista&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.appendChild(nuevoNodo)&lt;/code&gt;: añade &lt;em&gt;nuevoNodo&lt;/em&gt; como último hijo de &lt;em&gt;elemento&lt;/em&gt; y lo devuelve. Se diferencia con &lt;em&gt;append&lt;/em&gt; en que sólo permite un parámetro y éste debe ser un nodo, no puede ser texto. Por eso no suele usarse. Ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;nuevoLi.appendChild(textoLi);     // añade el texto creado al elemento LI creado
let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
miPrimeraLista.appendChild(nuevoLi);    // añade LI como último hijo de UL, es decir al final de la lista
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.insertBefore(nuevoNodo, nodo)&lt;/code&gt;: añade &lt;em&gt;nuevoNodo&lt;/em&gt; como hijo de &lt;em&gt;elemento&lt;/em&gt; antes del hijo &lt;em&gt;nodo&lt;/em&gt;. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];                // selecciona el 1º UL de la página
let primerElementoDeLista = miPrimeraLista.getElementsByTagName(&#39;li&#39;)[0];   // selecciona el 1º LI de miPrimeraLista
miPrimeraLista.insertBefore(nuevoLi, primerElementoDeLista);                // añade LI al principio de la lista
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.removeChild(nodo)&lt;/code&gt;: borra &lt;em&gt;nodo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt; y por tanto se elimina de la página. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
let primerElementoDeLista = miPrimeraLista.getElementsByTagName(&#39;li&#39;)[0];  // selecciona el 1º LI de miPrimeraLista
miPrimeraLista.removeChild(primerElementoDeLista);    // borra el primer elemento de la lista
// También podríamos haberlo borrado sin tener el padre con:
primerElementoDeLista.parentElement.removeChild(primerElementoDeLista);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.replaceChild(nuevoNodo, viejoNodo)&lt;/code&gt;: reemplaza &lt;em&gt;viejoNodo&lt;/em&gt; con &lt;em&gt;nuevoNodo&lt;/em&gt; como hijo de &lt;em&gt;elemento&lt;/em&gt;. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
let primerElementoDeLista = miPrimeraLista.getElementsByTagName(&#39;li&#39;)[0];  // selecciona el 1º LI de miPrimeraLista
miPrimeraLista.replaceChild(nuevoLi, primerElementoDeLista);    // reemplaza el 1º elemento de la lista con nuevoLi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: Si añado con el método &lt;code&gt;append&lt;/code&gt; o &lt;code&gt;appendChild&lt;/code&gt; un nodo que estaba en otro sitio &lt;strong&gt;se elimina de donde estaba&lt;/strong&gt; para añadirse a su nueva posición. Si quiero que esté en los 2 sitios deberé clonar el nodo y luego añadir el clon y no el nodo original.&lt;/p&gt;
&lt;h3 id=&quot;anadir-nuevos-nodos-con-em-inner-html-em&quot; tabindex=&quot;-1&quot;&gt;Añadir nuevos nodos con &lt;em&gt;innerHTML&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Supongamos que tenemos un DIV cuya &lt;em&gt;id&lt;/em&gt; es &lt;em&gt;myDiv&lt;/em&gt; al que queremos añadir al final dos párrafos, el último de ellos con un texto en negrita. El código podría ser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miDiv = document.getElementById(&#39;myDiv&#39;);
let nuevoParrafo = document.createElement(&#39;p&#39;);
nuevoParrafo.textContent = &#39;Párrafo añadido al final&#39;;
let ultimoParrafo = document.createElement(&#39;p&#39;);
const textoNegrita = document.createElement(&#39;strong&#39;);
textoNegrita.textContent = &#39;con texto en negrita&#39;;
ultimoParrafo.append(&#39;Último párrafo &#39;, textoNegrita);
miDiv.append(nuevoParrafo, ultimoParrafo);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si utilizamos la propiedad &lt;strong&gt;innerHTML&lt;/strong&gt; el código a usar es mucho más simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miDiv = document.getElementById(&#39;myDiv&#39;);
miDiv.innerHTML += &#39;&amp;lt;p&amp;gt;Párrafo añadido al final&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Último párrafo &amp;lt;strong&amp;gt;con texto en negrita&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: La forma de añadir el último párrafo (línea &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#3&quot;&gt;#3&lt;/a&gt;: &lt;code&gt;miDiv.innerHTML+=&#39;&amp;lt;p&amp;gt;Párrafo añadido al final&amp;lt;/p&amp;gt;&#39;;&lt;/code&gt;) aunque es válida no es muy eficiente ya que obliga al navegador a volver a pintar TODO el contenido de miDIV.&lt;/p&gt;
&lt;p&gt;Podemos ver más ejemplos de creación y eliminación de nodos en &lt;a href=&quot;http://www.w3schools.com/js/js_htmldom_nodes.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;W3Schools&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Añade a la página:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un nuevo párrafo al final del DIV &lt;em&gt;&#39;lipsum&#39;&lt;/em&gt; con el texto &amp;quot;Nuevo párrafo &lt;strong&gt;añadido&lt;/strong&gt; por javascript&amp;quot; (fíjate que una palabra está en negrita)&lt;/li&gt;
&lt;li&gt;Un nuevo elemento al formulario tras el &lt;em&gt;&#39;Dato 1&#39;&lt;/em&gt; con la etiqueta &lt;em&gt;&#39;Dato 1 bis&#39;&lt;/em&gt; y el INPUT con id &lt;em&gt;&#39;input1bis&#39;&lt;/em&gt; que al cargar la página tendrá escrito &amp;quot;Hola&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;atributos-de-los-nodos&quot; tabindex=&quot;-1&quot;&gt;Atributos de los nodos&lt;/h2&gt;
&lt;p&gt;Podemos ver y modificar los valores de los atributos de cada elemento HTML y también añadir o eliminar atributos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.attributes&lt;/code&gt;: devuelve un array con todos los atributos de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.hasAttribute(&#39;nombreAtributo&#39;)&lt;/code&gt;: indica si &lt;em&gt;elemento&lt;/em&gt; tiene o no definido el atributo &lt;em&gt;nombreAtributo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.getAttribute(&#39;nombreAtributo&#39;)&lt;/code&gt;: devuelve el valor del atributo &lt;em&gt;nombreAtributo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt;. Para muchos elementos este valor puede directamente con &lt;code&gt;elemento.atributo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.setAttribute(&#39;nombreAtributo&#39;, &#39;valor&#39;)&lt;/code&gt;: establece &lt;em&gt;valor&lt;/em&gt; como nuevo valor del atributo &lt;em&gt;nombreAtributo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt;. También puede cambiarse el valor directamente con &lt;code&gt;elemento.atributo=valor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.removeAttribute(&#39;nombreAtributo&#39;)&lt;/code&gt;: elimina el atributo &lt;em&gt;nombreAtributo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A algunos atributos comunes como &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; o &lt;code&gt;className&lt;/code&gt; (para el atributo &lt;strong&gt;class&lt;/strong&gt;) se puede acceder y cambiar como si fueran una propiedad del elemento (&lt;code&gt;elemento.atributo&lt;/code&gt;). Ejemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.id = &#39;primera-lista&#39;;
// es equivalente ha hacer:
elemento.setAttribute(&#39;id&#39;, &#39;primera-lista&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;estilos-de-los-nodos&quot; tabindex=&quot;-1&quot;&gt;Estilos de los nodos&lt;/h3&gt;
&lt;p&gt;Los estilos están accesibles como el atributo &lt;strong&gt;style&lt;/strong&gt;. Cualquier estilo es una propiedad de dicho atributo pero con la sintaxis &lt;em&gt;camelCase&lt;/em&gt; en vez de &lt;em&gt;kebab-case&lt;/em&gt;. Por ejemplo para cambiar el color de fondo (propiedad background-color) y ponerle el color &lt;em&gt;rojo&lt;/em&gt; al elemento &lt;em&gt;miPrimeraLista&lt;/em&gt; haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;miPrimeraLista.style.backgroundColor = &#39;red&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De todas formas normalmente &lt;strong&gt;NO CAMBIAREMOS ESTILOS&lt;/strong&gt; a los elementos sino que les pondremos o quitaremos clases que harán que se le apliquen o no los estilos definidos para ellas en el CSS.&lt;/p&gt;
&lt;h3 id=&quot;atributos-de-clase&quot; tabindex=&quot;-1&quot;&gt;Atributos de clase&lt;/h3&gt;
&lt;p&gt;Ya sabemos que el aspecto de la página debe configurarse en el CSS por lo que no debemos aplicar atributos &lt;em&gt;style&lt;/em&gt; al HTML. En lugar de ello les ponemos clases a los elementos que harán que se les aplique el estilo definido para dicha clase.&lt;/p&gt;
&lt;p&gt;Como es algo muy común en lugar de utilizar las instrucciones de &lt;code&gt;elemento.setAttribute(&#39;className&#39;, &#39;destacado&#39;)&lt;/code&gt; o directamente &lt;code&gt;elemento.className=&#39;destacado&#39;&lt;/code&gt; podemos usar la propiedad &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Element/classList&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;classList&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; que devuelve la colección de todas las clases que tiene el elemento. Por ejemplo si &lt;em&gt;elemento&lt;/em&gt; es &lt;code&gt;&amp;lt;p class=&amp;quot;destacado direccion&amp;quot;&amp;gt;...&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let clases=elemento.classList;   // clases=[&#39;destacado&#39;, &#39;direccion&#39;], OJO es una colección, no un Array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además dispone de los métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.add(clase)&lt;/strong&gt;: añade al elemento la clase pasada (si ya la tiene no hace nada). Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.add(&#39;primero&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;destacado direccion primero&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.remove(clase)&lt;/strong&gt;: elimina del elemento la clase pasada (si no la tiene no hace nada). Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.remove(&#39;direccion&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;destacado primero&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.toogle(clase)&lt;/strong&gt;: añade la clase pasada si no la tiene o la elimina si la tiene ya. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.toogle(&#39;destacado&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;primero&amp;quot;&amp;gt;...
elemento.classList.toogle(&#39;direccion&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;primero direccion&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.contains(clase)&lt;/strong&gt;: dice si el elemento tiene o no la clase pasada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.contains(&#39;direccion&#39;);   // devuelve true
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.replace(oldClase, newClase)&lt;/strong&gt;: reemplaza del elemento una clase existente por una nueva. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.replace(&#39;primero&#39;, &#39;ultimo&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;ultimo direccion&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tened en cuenta que NO todos los navegadores soportan &lt;em&gt;classList&lt;/em&gt; por lo que si queremos añadir o quitar clases en navegadores que no lo soportan debemos hacerlo con los métodos estándar, por ejemplo para añadir la clase &#39;rojo&#39;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let clases = elemento.className.split(&amp;quot; &amp;quot;);
if (clases.indexOf(&#39;rojo&#39;) == -1) {
  elemento.className += &#39; &#39; + &#39;rojo&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;atributos-de-datos&quot; tabindex=&quot;-1&quot;&gt;Atributos de datos&lt;/h3&gt;
&lt;p&gt;HTML5 permite agregar atributos personalizados no visuales a las etiquetas utilizando &lt;code&gt;data-*&lt;/code&gt;. Estos atributos pueden ser accesibles a través de JavaScript usando &lt;code&gt;dataset&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;article
    id=&amp;quot;electriccars&amp;quot;
    data-columns=&amp;quot;3&amp;quot;
    data-index-number=&amp;quot;12314&amp;quot;
    data-parent=&amp;quot;cars&amp;quot;&amp;gt;
    ...
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let article = document.getElementById(&#39;electriccars&#39;);
console.log(article.dataset.columns); // 3
console.log(article.dataset.indexNumber); // 12314
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/dom.html#atributos-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de José Castillo&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/04-dom/" >
        </entry>
        <entry>
            <title>
                03.1-webpack
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/03-1-webpack/</id>
            <content type="html">
                &lt;h1 id=&quot;webpack&quot; tabindex=&quot;-1&quot;&gt;Webpack&lt;/h1&gt;
&lt;p&gt;Cuando trabajamos con clases la mejor forma de organizar el código es poniendo cada clase un su propio fichero javascript. Esto reduce el acoplamiento de nuestro código y nos permite reutilizar una clase en cualquier proyecto en que la necesitemos.&lt;/p&gt;
&lt;p&gt;Sin embargo tener muchos ficheros hace que tengamos que importarlos todos, y en el orden adecuado, en nuestro &lt;em&gt;index.html&lt;/em&gt; (mediante etiquetas &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;) lo que empieza a ser engorroso.&lt;/p&gt;
&lt;p&gt;Para evitar este problema se utilizan los &lt;em&gt;module bundlers&lt;/em&gt; o empaquetadores de código que unen todo el código de los distintos ficheros javascript en un único fichero que es el que se importa en el &lt;em&gt;index.html&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Además proporciona otras ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;transpila&lt;/strong&gt; el código, de forma que podemos usar sentencias javascript que aún no soportan muchos navegadores ya que se convertirán a sentencias que hacen lo mismo pero con código &lt;em&gt;legacy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minimiza&lt;/strong&gt; y &lt;strong&gt;optimiza&lt;/strong&gt; el código para que ocupe menos y su carga sea más rápida&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ofusca&lt;/strong&gt; el código al minimizarlo lo que dificulta que el usuario pueda ver en la consola lo que hace el programa y manipularlo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros usaremos el &lt;em&gt;bundler&lt;/em&gt; *&lt;em&gt;webpack&lt;/em&gt; que es el más usado en entorno &lt;em&gt;frontend&lt;/em&gt;. Junto a &lt;em&gt;npm&lt;/em&gt; tendremos una forma fácil y práctica de empaquetar el código.&lt;/p&gt;
&lt;h2 id=&quot;trabajar-con-distintos-ficheros&quot; tabindex=&quot;-1&quot;&gt;Trabajar con distintos ficheros&lt;/h2&gt;
&lt;p&gt;Para que un fichero pueda tener acceso a código de otro fichero hay que hacer 2 cosas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El fichero al que queremos acceder debe &lt;strong&gt;exportar&lt;/strong&gt; el código que desea que sea accesible desde otros ficheros&lt;/li&gt;
&lt;li&gt;El fichero que quiere acceder a ese código debe &lt;strong&gt;importarlo&lt;/strong&gt; a una variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto es lo que hacíamos en el ejercicio de la frase para poder pasar los tests y lo que haremos con los ficheros donde declaramos clases.&lt;/p&gt;
&lt;h3 id=&quot;exportamos-el-codigo&quot; tabindex=&quot;-1&quot;&gt;Exportamos el código&lt;/h3&gt;
&lt;p&gt;En el caso de un fichero con una función a exportar será lo que exportaremos. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero cuadrado.js
const cuadrado = (value) =&amp;gt; value * value
module.exports = cuadrado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso de querer exportar muchas funciones lo más sencillo es exportarlas juntas en un objeto como en el fichero &lt;em&gt;functions.js&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
	letras,
	palabras,
	maysc,
	titulo,
	letrasReves,
	palabrasReves,
	palindromo
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí estamos exportando un objeto que contiene una serie de funciones&lt;/p&gt;
&lt;p&gt;Si es un fichero que define una clase la exportamos tal cual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Product {
    constructor() {

    }
    ...
}
module.exports = Product
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;lo-importamos-donde-queramos-usarlo&quot; tabindex=&quot;-1&quot;&gt;Lo importamos donde queramos usarlo&lt;/h3&gt;
&lt;p&gt;En el fichero donde vayamos a usar dicho código lo importamos a una variable. Si se trata de una única función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cuadrado = require(&#39;./cuadrado.js&#39;)
console.log(&#39;El cuadrado de 2 es &#39; + cuadrado(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si es un fichero con muchas funciones exportadas a un objeto podemos importar sólo las que queramos o todas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const functions = require(&#39;./functions.js&#39;)
console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + functions.letras(&amp;quot;Hola&amp;quot;) + &#39; y al revés es &#39; + functions.letrasReves(&#39;Hola&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o bien&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { letras, letrasReves } = require(&#39;./functions.js&#39;)
console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + letras(&amp;quot;Hola&amp;quot;) + &#39; y al revés es &#39; + letrasReves(&#39;Hola&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para usar una clase la importamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Product = require(&#39;./product.class&#39;)
const myProd = new Product()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;usar-em-webpack-em&quot; tabindex=&quot;-1&quot;&gt;Usar &lt;em&gt;webpack&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Una vez que tenemos nuestro código correctamente exportado e importado vamos a usar &lt;em&gt;webpack&lt;/em&gt; para empaquetarlo.&lt;/p&gt;
&lt;p&gt;Lo primero que habría que hacer es crear nuestro proyecto si no lo hemos hecho ya mediante &lt;code&gt;npm init&lt;/code&gt;. Esto inicializa el proyecto y crea el fichero &lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt;. Recuerda escribir &lt;em&gt;jest&lt;/em&gt; cuando nos pregunte por los tests.&lt;/p&gt;
&lt;p&gt;Para usar &lt;em&gt;webpack&lt;/em&gt; simplemente lo incluímos mediante &lt;em&gt;npm&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;code&gt;-D&lt;/code&gt; instala webpack como dependencia de desarrollo, lo que significa que en la versión de producción del código no se incluirá.&lt;/p&gt;
&lt;p&gt;Para instalar todas nuestras dependencias y que se cree la carpeta &lt;em&gt;node_modules&lt;/em&gt; ejecutamos &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ahora ya estamos listos para usar &lt;em&gt;webpack&lt;/em&gt;. Como hemos dicho es un &lt;em&gt;module bundler&lt;/em&gt;, es decir, un empaquetador de código. Toma el fichero que le indiquemos como fichero principal (por defecto el &lt;strong&gt;&lt;em&gt;./src/index.js&lt;/em&gt;&lt;/strong&gt;), lo junta con todas sus dependencias (sus &lt;em&gt;require&lt;/em&gt; y los de sus dependencias) y los transpila a un único fichero (por defecto &lt;strong&gt;&lt;em&gt;./dist/main.js&lt;/em&gt;&lt;/strong&gt;) que es el que se enlaza en el &lt;em&gt;index.html&lt;/em&gt;. Además minimiza y optimiza dicho código al generarlo.&lt;/p&gt;
&lt;p&gt;Para generar el código empaquetado ejecutamos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este código hay que ejecutarlo cada vez que se hagan cambios en el código. Si no quieres tener que ejecutarlo cada vez se puede lanzar con la opción &lt;code&gt;--watch&lt;/code&gt; que deja la consola abierta y ejecuta el comando automáticamente cuando guardamos cualquiera de los ficheros del proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode=development --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si nuestro fichero principal no es &lt;code&gt;src/index.js&lt;/code&gt; lo indicaremos con la opción &lt;code&gt;--entry&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --entry=scripts/main.js --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando usamos webpack le tenemos que indicar que tipo de código de salida queremos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;development&lt;/strong&gt;: &lt;em&gt;webpack&lt;/em&gt; permite &amp;quot;seguir&amp;quot; la ejecución del código desde la consola ya que &amp;quot;mapea&amp;quot; el código generado al original de forma que en la consola vemos como si se ejecutara nuestro código (los distintos ficheros) en vez del código generado por &lt;em&gt;webpack&lt;/em&gt; que es el que realmente se está ejecutando&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;production&lt;/strong&gt;: minimiza y optimiza el código para producción y ya no es posible desde la consola acceder al código original. Es lo que haremos para generar el código que subiremos al servidor de producción (NUNCA subimos el código de desarrollo).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis obtener más información en infinidad de páginas de internet y en la &lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;web oficial de webpack&lt;/a&gt;. Las diferentes opciones que podemos pasarle a este comando las podemos consultar en la página del &lt;a href=&quot;https://webpack.js.org/api/cli/#flags&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CLI de webpack&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/03-1-webpack/" >
        </entry>
        <entry>
            <title>
                03.1-vite
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/03-1-vite/</id>
            <content type="html">
                &lt;h1 id=&quot;vite&quot; tabindex=&quot;-1&quot;&gt;Vite&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vite&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vite&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-nuevo-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un nuevo proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desarrollar-nuestro-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desarrollar nuestro proyecto&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#trabajar-con-distintos-ficheros-de-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Trabajar con distintos ficheros de código&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#named-export&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Named export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#default-export&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Default export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#im%C3%A1genes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Imágenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-a-producci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso a producción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testear-el-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testear el proyecto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Cuando crece el tamaño de un proyecto y tenemos más ficheros de código (cómo al trabajar con clases) es necesario organizarlos de forma que sea fácil encontrarlos y que no haya problemas de dependencias.&lt;/p&gt;
&lt;p&gt;Sin embargo tener muchos ficheros hace que tengamos que importarlos todos, y en el orden adecuado, en nuestro &lt;em&gt;index.html&lt;/em&gt; (mediante etiquetas &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;) lo que empieza a ser engorroso y reduce el rendimiento al tener el navegador que hacer muchas peticiones HTTP.&lt;/p&gt;
&lt;p&gt;Además muchas veces incluimos en el código características del lenguaje que aún no están soportadas por todos los navegadores y cuantos más código usemos más se reduce el número de nevegadores que soportan nuestro código.&lt;/p&gt;
&lt;p&gt;Para evitar este problema se utilizan las herramientas de construcción de proyectos o &lt;em&gt;module bundlers&lt;/em&gt; que unen todo el código de los distintos ficheros javascript en un único fichero que es el que se importa en el &lt;em&gt;index.html&lt;/em&gt; y hacen los mismo con los ficheros CSS.&lt;/p&gt;
&lt;p&gt;Además proporcionan otras ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;transpilan&lt;/strong&gt; el código, de forma que podemos usar sentencias javascript que aún no soportan muchos navegadores ya que se convertirán a sentencias que hacen lo mismo pero con código &lt;em&gt;legacy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minimizan&lt;/strong&gt; y &lt;strong&gt;optimizan&lt;/strong&gt; el código para que ocupe menos y su carga sea más rápida, reduciendo el nombre de variables y funciones, eliminando espacios en blanco y comentarios, ...&lt;/li&gt;
&lt;li&gt;dicha minimización &lt;strong&gt;ofusca&lt;/strong&gt; el código lo que dificulta que el usuario pueda ver en la consola lo que hace el programa y manipularlo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros usaremos el &lt;em&gt;bundler&lt;/em&gt; &lt;strong&gt;Vite&lt;/strong&gt; que, junto con &lt;strong&gt;webpack&lt;/strong&gt;, son los más usados en entorno &lt;em&gt;frontend&lt;/em&gt;. Junto a &lt;em&gt;npm&lt;/em&gt; tendremos una forma fácil y práctica de empaquetar el código.&lt;/p&gt;
&lt;p&gt;Además &lt;em&gt;Vite&lt;/em&gt; incorpora un servidor de desarrollo para hacer más cómoda la creación y prueba de nuestros proyectos.&lt;/p&gt;
&lt;p&gt;Para poder usar &lt;em&gt;Vite&lt;/em&gt; debemos instalarlo. Como lo usaremos en muchos proyectos lo podemos instalarlo global con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g vite
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;crear-un-nuevo-proyecto&quot; tabindex=&quot;-1&quot;&gt;Crear un nuevo proyecto&lt;/h2&gt;
&lt;p&gt;Vite necesita &lt;em&gt;Node.js&lt;/em&gt; versión 16 o superior aunque lo mejor es tenerlo actualizado para poder utilitzar todas sus plantillas. Para crear un nuevo proyecto haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm create vite@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(si no tenemos instalado el paquete &lt;em&gt;create-vite&lt;/em&gt; nos preguntará si lo instala)&lt;/p&gt;
&lt;p&gt;Al crear el proyecto nos pregunta qué framework vamos a utilizar (le diremos que &lt;em&gt;Vanilla&lt;/em&gt;, es decir, Javascript sin framework) y si como lenguaje usaremos Javascript o Typescript.&lt;/p&gt;
&lt;p&gt;Esto crea el &lt;em&gt;scaffolding&lt;/em&gt; de nuestro proyecto que consiste en una carpeta con el mismo nombre que el proyecto y una serie de ficheros en su interior:&lt;br /&gt;
Nos preguntará el nombre del proyecto, la plantilla (&lt;em&gt;Vanilla&lt;/em&gt; para Javascript sin framework) y el lenguaje que queremos usar (&lt;em&gt;Javascript/Typescript&lt;/em&gt;) y se crea una carpeta con el nombre de nuestro proyecto que contiene:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;: html con un div con &lt;em&gt;id&lt;/em&gt; &lt;strong&gt;app&lt;/strong&gt; que es donde se cargará la app y una etiqueta &lt;strong&gt;script&lt;/strong&gt; que carga un módulo llamado &lt;code&gt;main.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.js&lt;/code&gt;: es el punto de entrada a la aplicación .Importa los ficheros CSS, imágenes y ficheros JS con funciones o clases y establece el contenido de la página principal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counter.js&lt;/code&gt;: módulo JS que exporta una función como ejemplo que es usada en el &lt;em&gt;main.js&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style.css&lt;/code&gt;: fichero donde poner nuestros estilos, con CSS de ejemplo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;: carpeta donde dejar elementos estáticos que no pasarán por &lt;em&gt;vite&lt;/em&gt; (como imágenes, ficheros CSS, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;: librerías de las dependencias (si usamos alguna)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: fichero de configuración del proyecto. Además del nombre y la versión incluye apartados importantes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devDependences&lt;/code&gt;: dependencias que se usan en desarrollo pero que no se incorporarán al código final&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependences&lt;/code&gt;: dependencias que sí se incluirán en el código final (librerías que estemos usando)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: para ejecutar el servidor de desarrollo (&lt;code&gt;npm run dev&lt;/code&gt;), generar el código final de producción (&lt;code&gt;npm run build&lt;/code&gt;) y previsualizarlo en modo producción  (&lt;code&gt;npm run preview&lt;/code&gt;). Podemos añadir más para tests, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si nuestra aplicación no va a ser muy pequeña como la del ejemplo sino que tendrá diferentes ficheros Javascript, acceso a datos, interfaz de usuario, etc deberíamos organizar en código en carpetas para mejorar su legibilidad. Lo adecuando es dejar en el raíz de nuestro proyecto los ficheros &lt;code&gt;index.html&lt;/code&gt; y &lt;code&gt;main.js&lt;/code&gt; y crear una carpeta &lt;code&gt;src&lt;/code&gt; donde poner el resto de código. En función del tamaño de la aplicación podríamos crear dentro subcarpetas (os propongo un nombre para ellas aunque podéis llamarlas como queráis) para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;: el modelo de datos, es decir, las clases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pages&lt;/code&gt; o &lt;code&gt;views&lt;/code&gt;: las páginas que tendrá nuestra SPA a las que se navega desde el router (aunque en realidad sólo hay una)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api&lt;/code&gt;: acceso a la API que usemos. Sólo deben conectarse al servidor y transmitir los datos recibidos al resto de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt;: web components que usemos para cosntruir las páginas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;services&lt;/code&gt;: métodos síncronos que proporcionan funcionalidad&lt;/li&gt;
&lt;li&gt;si nuestra aplicación es grande con muchos casos de uso convendría crear una carpeta &lt;code&gt;usecases&lt;/code&gt; donde guardarlos. Cada uno debería tener un único método llamado &lt;code&gt;run&lt;/code&gt; o &lt;code&gt;execute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: carpeta donde guardar los ficheros de test&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: todos los ficheros javascript de un proyecto con &lt;em&gt;Vite&lt;/em&gt; son módulos y en ellos, igual que en las clases, no es necesario poner &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; porque por defecto los módulos ya funcionan así.&lt;/p&gt;
&lt;h2 id=&quot;desarrollar-nuestro-proyecto&quot; tabindex=&quot;-1&quot;&gt;Desarrollar nuestro proyecto&lt;/h2&gt;
&lt;p&gt;Para empezar a trabajar ejecutamos desde la terminal el script&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto hace que &lt;em&gt;Vite&lt;/em&gt; lance un servidor web en el puerto 5173 donde podemos ver la ejecución de nuestro proyecto.&lt;/p&gt;
&lt;h3 id=&quot;trabajar-con-distintos-ficheros-de-codigo&quot; tabindex=&quot;-1&quot;&gt;Trabajar con distintos ficheros de código&lt;/h3&gt;
&lt;p&gt;Una de las razones de usar un &lt;em&gt;bundler&lt;/em&gt; es que podemos repartir el código entre varios ficheros de forma que quede más organizado.&lt;/p&gt;
&lt;p&gt;Para que un fichero pueda tener acceso a código de otro fichero hay que hacer 2 cosas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El fichero al que queremos acceder debe &lt;strong&gt;exportar&lt;/strong&gt; el código que desea que sea accesible desde otros ficheros&lt;/li&gt;
&lt;li&gt;El fichero que quiere acceder a ese código debe &lt;strong&gt;importarlo&lt;/strong&gt; a una variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto es lo que hacíamos en el ejercicio de la frase para poder pasar los tests y lo que haremos con los ficheros donde declaremos clases.&lt;/p&gt;
&lt;p&gt;ES6 nos proporciona 2 formas de exportar/importar código:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exportar con nombre (&lt;em&gt;named export&lt;/em&gt;): &lt;code&gt;export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;exportar por defecto (&lt;em&gt;default export&lt;/em&gt;): &lt;code&gt;export default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;named-export&quot; tabindex=&quot;-1&quot;&gt;Named export&lt;/h4&gt;
&lt;p&gt;De esta manera puedo exportar tantos elementos (funciones, variables, clases, ...) de un fichero como quiera. Por ejemplo, si es un fichero con una única función a exportar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero cuadrado.js
export function cuadrado (value) {
  return value * value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso de querer exportar muchas funciones lo más sencillo es exportarlas juntas en un objeto como en el fichero &lt;em&gt;functions.js&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function letras () {
  ...
}

function palabras () {
  ...
}

function maysc () {
  ...
}
...
export {
	letras,
	palabras,
	maysc
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si es un fichero que define una clase la exportamos tal cual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export class Product {
    constructor() {

    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para importarlo lo hacemos poniendo lo que queremos importar entre &lt;code&gt;{ }&lt;/code&gt;. Si se trata de una única función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { cuadrado } from &#39;./cuadrado.js&#39;

console.log(&#39;El cuadrado de 2 es &#39; + cuadrado(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podríamos usar un nombre diferente para lo que importamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { cuadrado as cuad} from &#39;./cuadrado.js&#39;

console.log(&#39;El cuadrado de 2 es &#39; + cuad(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si es un fichero con muchas funciones exportadas a un objeto podemos importar sólo las que queramos o todas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { letras, maysc } from &#39;./functions.js&#39;

console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + letras(&amp;quot;Hola&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos importarlas todas a un objeto sin indicar sus nombres, con &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as MyFunctions from &#39;./functions.js&#39;

console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + MyFunctions.letras(&amp;quot;Hola&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para importar una clase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Product } from &#39;./product.class&#39;

const myProd = new Product()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;default-export&quot; tabindex=&quot;-1&quot;&gt;Default export&lt;/h4&gt;
&lt;p&gt;De esta manera sólo puedo exportar un elemento por fichero, y a la hora de importarlo le doy el nombre que quiera. Por ejemplo, si es un fichero con una única función a exportar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero cuadrado.js
export default function cuadrado (value) {
  return value * value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde vaya a usarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import myCuadrado from &#39;./cuadrado.js&#39;

console.log(&#39;El cuadrado de 2 es &#39; + myCuadrado(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso de una clase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Product {
    constructor() {

    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y para importarla:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Product from &#39;./product.class&#39;

const myProd = new Product()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En resumen, si exporto con &lt;code&gt;export&lt;/code&gt; importo con &lt;code&gt;{ }&lt;/code&gt; y si exporto con &lt;code&gt;export default&lt;/code&gt; importo sin &lt;code&gt;{ }&lt;/code&gt; pero sólo puedo exportar 1 elemento.&lt;/p&gt;
&lt;h2 id=&quot;imagenes&quot; tabindex=&quot;-1&quot;&gt;Imágenes&lt;/h2&gt;
&lt;p&gt;Si se trata de imágenes estáticas lo más sencillo es ponerlas dentro de la carpeta &lt;code&gt;public&lt;/code&gt; y hacer referencia a ellas usando &lt;strong&gt;ruta absoluta&lt;/strong&gt;. Todo lo que está en &lt;em&gt;public&lt;/em&gt; se referencia como si estuviera en la raíz de nuestra aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=&amp;quot;/vite.png&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;Logo de Vite&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos poner las imágenes en la carpeta &lt;code&gt;assets&lt;/code&gt;, pero antes de usarlas deberemos imnportarlas. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import viteLogo from &#39;./assets/vite.png&#39;
...
const logoHtml = `&amp;lt;img src=&amp;quot;${viteLogo}&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;Vite logo&amp;quot;&amp;gt;`
document.body.prepend(logoHtml)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;em&gt;Vite&lt;/em&gt; también podemos importarlas usando &lt;code&gt;import.meta.url&lt;/code&gt;, lo que es útil si no conocemos previamente el nombre del fichero con la imagen (más información en la &lt;a href=&quot;https://vitejs.dev/guide/assets.html#new-url-url-import-meta-url&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vite&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getImage(fileName, height, alt) {
  imgUrl = new URL(fileName, import.meta.url).href
  const imgHtml = `&amp;lt;img src=&amp;quot;${viteLogo}&amp;quot; height=&amp;quot;${height}&amp;quot; alt=&amp;quot;${alt}&amp;quot;&amp;gt;`
  
  return logoHtml
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;paso-a-produccion&quot; tabindex=&quot;-1&quot;&gt;Paso a producción&lt;/h2&gt;
&lt;p&gt;Cuando lo hayamos acabado y queramos subirlo a producción ejecutaremos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;que crea la carpeta &lt;code&gt;/dist&lt;/code&gt; con los ficheros que debemos subir al servidor web de producción:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cualquier fichero que tengamos en &lt;em&gt;/public&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;carpeta &lt;code&gt;assets&lt;/code&gt; con
&lt;ul&gt;
&lt;li&gt;fichero JS con todo el código que necesita el proyecto&lt;/li&gt;
&lt;li&gt;fichero CSS con todos los estilos del proyecto&lt;/li&gt;
&lt;li&gt;otros ficheros importados en el JS como imágenes, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;testear-el-proyecto&quot; tabindex=&quot;-1&quot;&gt;Testear el proyecto&lt;/h2&gt;
&lt;p&gt;Si queremos testear el proyecto deberemos usar una herramienta de testing y crear los tests adecuados. Lo más sencillo es usar &lt;strong&gt;&lt;em&gt;Vitest&lt;/em&gt;&lt;/strong&gt; que es muy similar a &lt;em&gt;Jest&lt;/em&gt; pero preparado para interacutar fácilmente con &lt;em&gt;Vite&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lo primero es importarlo como dependencia de producción (no lo usaremos en producción)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save-dev vitest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o abreviado&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D vitest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Debemos añadir un nuevo script en el &lt;code&gt;package.json&lt;/code&gt; que le indique a vite que queremos usarlo para testear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  &amp;quot;scripts&amp;quot;: {
		...
    &amp;quot;test&amp;quot;: &amp;quot;vitest&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crearemos los tests en una carpeta en la raíz de nuestro proyecto llamada &lt;code&gt;/test&lt;/code&gt; y en ella crearemos los diferentes fichero cuya extensión será &lt;code&gt;.spec.js&lt;/code&gt; o &lt;code&gt;.test.js&lt;/code&gt;. Cada vez que queramos pasar los tests ejecutaremos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis obtener más información en infinidad de páginas de internet, como el &lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/tests.html#instalacion-de-vitest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;, y en la &lt;a href=&quot;https://es.vitejs.dev/guide/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;web oficial de vite&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/03-1-vite/" >
        </entry>
        <entry>
            <title>
                03-oop
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/03-oop/</id>
            <content type="html">
                &lt;h1 id=&quot;programacion-orientada-a-objetos-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Programación orientada a Objetos en Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#programaci%C3%B3n-orientada-a-objetos-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Programación orientada a Objetos en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#herencia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Herencia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos-y-propiedades-est%C3%A1ticas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos y propiedades estáticas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-y-m%C3%A9todos-privados-y-protegidos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades y métodos privados y protegidos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todo-tostring&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Método &lt;em&gt;toString()&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todo-valueof&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Método &lt;em&gt;valueOf()&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-el-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar el código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-contexto-de-this&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El contexto de &lt;em&gt;this&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mixins&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mixins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#programaci%C3%B3n-orientada-a-objetos-en-js5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Programación orientada a objetos en JS5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bibliograf%C3%ADa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bibliografía&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Desde ES2015 la POO en Javascript es similar a como se hace en otros lenguajes, con clases, herencia, ...:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    constructor(nombre, apellidos, edad) {
        this.nombre = nombre
        this.apellidos = apellidos
        this.edad = edad
    }
    getInfo() {
        return &#39;El alumno &#39; + this.nombre + &#39; &#39; + this.apellidos + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
}

let alumno1 = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19)
console.log(alumno1.getInfo())     // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: en las clases no es necesario poner &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; porque por defecto todas las clases ya lo tienen.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea una clase Productos con las propiedades &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;category&lt;/em&gt;, &lt;em&gt;units&lt;/em&gt; y &lt;em&gt;price&lt;/em&gt; y los métodos &lt;em&gt;total&lt;/em&gt; que devuelve el importe del producto y &lt;em&gt;getInfo&lt;/em&gt; que devolverá: &#39;&lt;em&gt;Name&lt;/em&gt; (&lt;em&gt;category&lt;/em&gt;): &lt;em&gt;units&lt;/em&gt; uds x &lt;em&gt;price&lt;/em&gt; € = &lt;em&gt;total&lt;/em&gt; €&#39;. Crea 3 productos diferentes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;herencia&quot; tabindex=&quot;-1&quot;&gt;Herencia&lt;/h2&gt;
&lt;p&gt;Una clase puede heredar de otra utilizando la palabra reservada &lt;strong&gt;extends&lt;/strong&gt; y heredará todas sus propiedades y métodos. Podemos sobrescribirlos en la clase hija (seguimos pudiendo llamar a los métodos de la clase padre utilizando la palabra reservada &lt;strong&gt;super&lt;/strong&gt; -es lo que haremos si creamos un constructor en la clase hija-).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AlumnInf extends Alumno{
  constructor(nombre, apellidos, edad, ciclo) {
    super(nombre, apellidos, edad)
    this.ciclo = ciclo
  }
  getInfo() {
    return super.getInfo() + &#39; y estudia el Grado &#39; + (this.getGradoMedio ? &#39;Medio&#39; : &#39;Superior&#39;) + &#39; de &#39; + this.ciclo
  }
  getGradoMedio() {
    if (this.ciclo.toUpperCase === &#39;SMX&#39;)
      return true
    return false
  }
}

let cpo = new AlumnInf(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19, &#39;DAW&#39;)
console.log(cpo.getInfo())     // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años y estudia el Grado Superior de DAW&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: crea una clase Televisores que hereda de Productos y que tiene una nueva propiedad llamada tamaño. El método getInfo mostrará el tamaño junto al nombre&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;metodos-y-propiedades-estaticas&quot; tabindex=&quot;-1&quot;&gt;Métodos y propiedades estáticas&lt;/h2&gt;
&lt;p&gt;Desde ES2015 podemos declarar métodos estáticos. Estos métodos se llaman directamente utilizando el nombre de la clase y no tienen acceso al objeto &lt;em&gt;this&lt;/em&gt; (ya que no hay objeto instanciado).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class User {
    ...
    static getRoles() {
        return [&amp;quot;user&amp;quot;, &amp;quot;guest&amp;quot;, &amp;quot;admin&amp;quot;]
    }
}

console.log(User.getRoles()) // [&amp;quot;user&amp;quot;, &amp;quot;guest&amp;quot;, &amp;quot;admin&amp;quot;]
let user = new User(&amp;quot;john&amp;quot;)
console.log(user.getRoles()) // Uncaught TypeError: user.getRoles is not a function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suelen usarse para crear funciones de la aplicación.&lt;/p&gt;
&lt;p&gt;Recientemente se han introducido también propiedades estáticas, que funcionan directamente desde la clase no desde un objeto, igual que los métodos estáticos. Al ser una adición reciente pueden no funcionar en algunos navegadores.&lt;/p&gt;
&lt;h2 id=&quot;propiedades-y-metodos-privados-y-protegidos&quot; tabindex=&quot;-1&quot;&gt;Propiedades y métodos privados y protegidos&lt;/h2&gt;
&lt;p&gt;A la hora de encapsular el código de las clases es importante el uso de este tipo de elementos pero Javascript sólo los incluye desde ES2019 donde introdujo la sintaxis &lt;strong&gt;&lt;code&gt;#&lt;/code&gt;&lt;/strong&gt; para declaralos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Position {
    &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#x&quot;&gt;#x&lt;/a&gt; = 0;
    &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#y&quot;&gt;#y&lt;/a&gt; = 0;

    constructor(x, y) {
        this.#x = x
        this.#y = y
    }
    getPosition() {
        return { x: this.#x, y: this.#y };
    }
    increaseX() {
        this.#x++;
    }
    increaseY() {
        this.#y++;
    }
}

const myPosition = new Position(20, 10);
console.log(Position.getPosition()); // { x: 20, y: 10 }
console.log(Position.x); // undefined
console.log(Position.y); // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anteriormente existía una convención de que cualquier propiedad o método que comience por el carácter &lt;code&gt;_&lt;/code&gt; se trata de una propiedad o método &lt;strong&gt;protegido&lt;/strong&gt; y no debería accederse al mismo desde el exterior (aunque en realidad el lenguaje permite hacerlo).&lt;/p&gt;
&lt;p&gt;Estas propiedades y métodos protegidos se heredan como cualquier otro.&lt;/p&gt;
&lt;h2 id=&quot;metodo-em-to-string-em&quot; tabindex=&quot;-1&quot;&gt;Método &lt;em&gt;toString()&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Al convertir un objeto a string (por ejemplo al concatenarlo con un String) se llama al método &lt;strong&gt;&lt;em&gt;.toString()&lt;/em&gt;&lt;/strong&gt; del mismo, que por defecto devuelve la cadena &lt;code&gt;[object Object]&lt;/code&gt;. Podemos sobrecargar este método para que devuelva lo que queramos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    toString() {
        return this.apellidos + &#39;, &#39; + this.nombre
    }
}

let carPerOrt = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19);
console.log(&#39;Alumno:&#39; + carPerOrt)     // imprime &#39;Alumno: Pérez Ortíz, Carlos&#39;
                                // en vez de &#39;Alumno: [object Object]&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método también es el que se usará si queremos ordenar una array de objetos (recordad que &lt;em&gt;.sort()&lt;/em&gt; ordena alfabéticamente para lo que llama al método &lt;em&gt;.toString()&lt;/em&gt; del objeto a ordenar). Por ejemplo, tenemos el array de alumnos &lt;em&gt;misAlumnos&lt;/em&gt; que queremos ordenar alfabéticamente. Si la clase &lt;em&gt;Alumno&lt;/em&gt; no tiene un método &lt;em&gt;toString&lt;/em&gt; habría que hacer como vimos en el tema de &lt;a href=&quot;https://pedroporo.github.io/02.2-arrays.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;misAlumnos.sort((alum1, alum2) =&amp;gt; (alum1.apellidos+alum1.nombre).localeCompare(alum2.apellidos+alum2.nombre));   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero con el método &lt;em&gt;toString&lt;/em&gt; que hemos definido antes podemos hacer directamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;misAlumnos.sort() 
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: modifica las clases Productos y Televisores para que el método que muestra los datos del producto se llame de la manera más adecuada&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea 5 productos y guárdalos en un array. Crea las siguientes funciones (todas reciben ese array como parámetro):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prodsSortByName: devuelve un array con los productos ordenados alfabéticamente&lt;/li&gt;
&lt;li&gt;prodsSortByPrice: devuelve un array con los productos ordenados por importe&lt;/li&gt;
&lt;li&gt;prodsTotalPrice: devuelve el importe total del los productos del array, con 2 decimales&lt;/li&gt;
&lt;li&gt;prodsWithLowUnits: además del array recibe como segundo parámetro un nº y devuelve un array con todos los productos de los que quedan menos de los unidades indicadas&lt;/li&gt;
&lt;li&gt;prodsList: devuelve una cadena que dice &#39;Listado de productos:&#39; y en cada línea un guión y la información de un producto del array&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;metodo-em-value-of-em&quot; tabindex=&quot;-1&quot;&gt;Método &lt;em&gt;valueOf()&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Al comparar objetos (con &amp;gt;, &amp;lt;, ...) se usa el valor devuelto por el método &lt;strong&gt;&lt;em&gt;.valueOf()&lt;/em&gt;&lt;/strong&gt; para realizar la comparación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    valueOf() {
        return this.edad
    }
}

let cpo = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19)
let aat = new Alumno(&#39;Ana&#39;, &#39;Abad Tudela&#39;, 23)
console.log(cpo &amp;lt; aat)     // imprime true ya que 19&amp;lt;23
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si este método no existiera será &lt;em&gt;.toString()&lt;/em&gt; el que se usaría.&lt;/p&gt;
&lt;h2 id=&quot;organizar-el-codigo&quot; tabindex=&quot;-1&quot;&gt;Organizar el código&lt;/h2&gt;
&lt;p&gt;Lo más conveniente es guardar cada clase en su propio fichero, que llamaremos como la clase con la extensión &lt;code&gt;.class.js&lt;/code&gt;. Por ejemplo el fichero de la clase &lt;em&gt;Users&lt;/em&gt; seria &lt;code&gt;users.class.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En dicho fichero exportamos la clase (con &lt;code&gt;export&lt;/code&gt; o mejor &lt;code&gt;export default&lt;/code&gt; porque sólo hay una) y donde queramos usarla la importamos (&lt;code&gt;import { Users } from &#39;users.class&#39;&lt;/code&gt; o &lt;code&gt;import Users from &#39;users.class&#39;&lt;/code&gt;, según cómo la hayamos exportado).&lt;/p&gt;
&lt;h2 id=&quot;el-contexto-de-em-this-em&quot; tabindex=&quot;-1&quot;&gt;El contexto de &lt;em&gt;this&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;El valor de la variable &lt;em&gt;this&lt;/em&gt; depende del contexto e que se ejecuta el código. Al crear una instancia de una calse con &lt;code&gt;new&lt;/code&gt; &lt;em&gt;this&lt;/em&gt; hace referencia a la instancia creada. Pero dentro de una función se crea un nuevo contexto y la variable &lt;em&gt;this&lt;/em&gt; pasa a hacer referencia a dicho contexto. Si en el ejemplo anterior hiciéramos algo como esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    getInfo() {
        function nomAlum() {
            return this.nombre + &#39; &#39; + this.apellidos      // Aquí this no es la instancia del objeto Alumno
        }

        return &#39;El alumno &#39; + nomAlum() + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este código fallaría porque dentro de la función &lt;em&gt;nomAlum&lt;/em&gt; la variable &lt;em&gt;this&lt;/em&gt; ya no hace referencia a a instancia del objeto &lt;em&gt;Alumno&lt;/em&gt; sino al contexto de la función. Este ejemplo no tiene mucho sentido pero a veces nos pasará en manejadores de eventos.&lt;/p&gt;
&lt;p&gt;Si debemos llamar a una función dentro de un método (o de un manejador de eventos) tenemos varias formas de pasarle el valor de &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Usando una &lt;em&gt;arrow function&lt;/em&gt; que no crea un nuevo contexto por lo que &lt;em&gt;this&lt;/em&gt; conserva su valor&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    getInfo() {
        const nomAlum = () =&amp;gt; this.nombre + &#39; &#39; + this.apellidos

        return &#39;El alumno &#39; + nomAlum() + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Pasándole &lt;em&gt;this&lt;/em&gt; como parámetro a la función&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    getInfo() {
        function nomAlum(alumno) {
            return alumno.nombre + &#39; &#39; + alumno.apellidos
        }

        return &#39;El alumno &#39; + nomAlum(this) +&#39; tiene &#39; + this.edad + &#39; años&#39;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Guardando el valor en otra variable (como &lt;em&gt;that&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    getInfo() {
        function nomAlum() {
            return that.nombre + &#39; &#39; + that.apellidos      // Aquí this no es el objeto Alumno
        }

        let that = this;
        return &#39;El alumno &#39; + nomAlum() +&#39; tiene &#39; + this.edad + &#39; años&#39;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Haciendo un &lt;em&gt;bind&lt;/em&gt; de &lt;em&gt;this&lt;/em&gt; (lo veremos de nuevo al hablar de eventos)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    getInfo() {
        function nomAlum() {
            return this.nombre + &#39; &#39; + this.apellidos      // Aquí this no es el objeto Alumno
        }

        return &#39;El alumno &#39; + nomAlum.bind(this) + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al llamar a la función &lt;code&gt;nomAlumn&lt;/code&gt; le &lt;em&gt;enlazamos&lt;/em&gt; (&lt;code&gt;.bind&lt;/code&gt;) el valor que queremos que tenga &lt;em&gt;this&lt;/em&gt; dentro de ella, en nuestro caso el &lt;em&gt;this&lt;/em&gt; de donde hacemos la llamada.&lt;/p&gt;
&lt;h2 id=&quot;mixins&quot; tabindex=&quot;-1&quot;&gt;Mixins&lt;/h2&gt;
&lt;p&gt;Wikipedia define un mixin como una clase que contiene métodos que pueden ser utilizados por otras clases sin necesidad de heredar de ella.&lt;/p&gt;
&lt;p&gt;En Javascript se trata de un objeto que contiene métodos que podemos aplicar a una clase para datarla de ciertos comportamientos. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// mixin
let saludaMixin = {
  saluda() {
    alert(`Hola, soy ${this.nombre}`)
  }
}

class Alumno {
  constructor(nombre, apellidos, edad) {
    ...
  }
  ...
}

// asignamos el mixin a la clase
Object.assign(Alumno.prototype, saludaMixin);

// Ahora el Alumno puede decir hola
const alumno = new User(&#39;Carlos&#39;, &#39;Pérez&#39;, 25)
alumno.saluda(); // Hola, soy Carlos
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;programacion-orientada-a-objetos-en-js-5&quot; tabindex=&quot;-1&quot;&gt;Programación orientada a objetos en JS5&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: este apartado está sólo para que comprendamos este código si lo vemos en algún programa pero nosotros programaremos como hemos visto antes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;En Javascript un objeto se crea a partir de otro (al que se llama &lt;em&gt;prototipo&lt;/em&gt;). Así se crea una cadena de prototipos, el primero de los cuales es el objeto &lt;em&gt;null&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Las versiones de Javascript anteriores a ES2015 no soportan clases ni herencia. Si queremos emular en ellas el comportamiento de las clases lo que se hace es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;para crear el constructor se crea una función con el nombre del objeto&lt;/li&gt;
&lt;li&gt;para crear los métodos se aconseja hacerlo en el &lt;em&gt;prototipo&lt;/em&gt; del objeto para que no se cree una copia del mismo por cada instancia que creemos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Alumno(nombre, apellidos, edad) {
    this.nombre = nombre
    this.apellidos = apellidos
    this.edad = edad
}
Alumno.prototype.getInfo = function() {
    return `El alumno ${this.nombre} ${this.apellidos} tiene ${this.edad} años`
}

let cpo = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19)
console.log(cpo.getInfo())     // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada objeto tiene un prototipo del que hereda sus propiedades y métodos (es el equivalente a su clase, pero en realidad es un objeto que está instanciado). Si añadimos una propiedad o método al prototipo se añade a todos los objetos creados a partir de él lo que ahorra mucha memoria.&lt;/p&gt;
&lt;h2 id=&quot;bibliografia&quot; tabindex=&quot;-1&quot;&gt;Bibliografía&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Curso &#39;Programación con JavaScript&#39;. CEFIRE Xest. Arturo Bernal Mayordomo&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/03-oop/" >
        </entry>
        <entry>
            <title>
                02.2-arrays
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/02-2-arrays/</id>
            <content type="html">
                &lt;h1 id=&quot;arrays&quot; tabindex=&quot;-1&quot;&gt;Arrays&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrays-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays de objetos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#operaciones-con-arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Operaciones con Arrays&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#length&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-elementos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eliminar-elementos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eliminar elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#splice&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;splice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slice&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrays-y-strings&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays y Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sort&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otros-m%C3%A9todos-comunes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otros métodos comunes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#functional-programming&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Functional Programming&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#filter&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#find&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;find&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#findindex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;findIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#every--some&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;every / some&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#map&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#reduce&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;reduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#foreach&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;forEach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#includes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;includes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrayfrom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Array.from&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#rest-y-spread&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Rest y Spread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desestructuraci%C3%B3n-de-arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desestructuración de arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#copia-de-arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Copia de arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#map-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#set&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Son un tipo de objeto y no tienen tamaño fijo sino que podemos añadirle elementos en cualquier momento.&lt;/p&gt;
&lt;p&gt;Se recomienda crearlos usando notación JSON:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = []
const b = [2,4,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;aunque también podemos crearlos como instancias del objeto Array (NO recomendado):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = new Array()        // a = []
const b = new Array(2,4,6)   // b = [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sus elementos pueden ser de cualquier tipo, incluso podemos tener elementos de tipos distintos en un mismo array. Si no está definido un elemento su valor será &lt;em&gt;undefined&lt;/em&gt;. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
console.log(a[0])  // imprime &#39;Lunes&#39;
console.log(a[4])  // imprime 6
a[7] = &#39;Juan&#39;        // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6, , , &#39;Juan&#39;]
console.log(a[7])  // imprime &#39;Juan&#39;
console.log(a[6])  // imprime undefined
console.log(a[10])  // imprime undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acceder a un elemento de un array que no existe no provoca un error (devuelve &lt;em&gt;undefined&lt;/em&gt;) pero sí lo provoca acceder a un elemento de algo que no es un array. Con ES2020 (ES11) se ha incluido el operador &lt;strong&gt;?.&lt;/strong&gt; para evitar tener que comprobar nosotros que sea un array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumnos?.[0])
// si alumnos es un array muestra el valor de su primer
// elemento y si no muestra undefined pero no lanza un error
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;arrays-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Arrays de objetos&lt;/h3&gt;
&lt;p&gt;Es habitual almacenar datos en arrays en forma de objetos, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumnos = [
  {
    id: 1,
    name: &#39;Marc Peris&#39;,
    course: &#39;2nDAW&#39;,
    age: 21
  },
  {
    id: 2,
    name: &#39;Júlia Tortosa&#39;,
    course: &#39;2nDAW&#39;,
    age: 23
  },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;operaciones-con-arrays&quot; tabindex=&quot;-1&quot;&gt;Operaciones con Arrays&lt;/h2&gt;
&lt;p&gt;Vamos a ver los principales métodos y propiedades de los arrays.&lt;/p&gt;
&lt;h3 id=&quot;length&quot; tabindex=&quot;-1&quot;&gt;length&lt;/h3&gt;
&lt;p&gt;Esta propiedad devuelve la longitud de un array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
console.log(a.length)  // imprime 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos reducir el tamaño de un array cambiando esta propiedad, aunque es una forma poco clara de hacerlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;a.length = 3  // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;anadir-elementos&quot; tabindex=&quot;-1&quot;&gt;Añadir elementos&lt;/h3&gt;
&lt;p&gt;Podemos añadir elementos al final de un array con &lt;code&gt;push&lt;/code&gt; o al principio con &lt;code&gt;unshift&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
a.push(&#39;Juan&#39;)   // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6, &#39;Juan&#39;]
a.unshift(7)     // ahora a = [7, &#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6, &#39;Juan&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;eliminar-elementos&quot; tabindex=&quot;-1&quot;&gt;Eliminar elementos&lt;/h3&gt;
&lt;p&gt;Podemos borrar el elemento del final de un array con &lt;code&gt;pop&lt;/code&gt; o el del principio con &lt;code&gt;shift&lt;/code&gt;. Ambos métodos devuelven el elemento que hemos borrado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
const ultimo = a.pop()         // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4] y ultimo = 6
const primero = a.shift()      // ahora a = [&#39;Martes&#39;, 2, 4] y primero = &#39;Lunes&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;a-href-https-developer-mozilla-org-es-docs-web-java-script-referencia-objetos-globales-array-splice-target-blank-class-external-link-splice-a&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/splice&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;splice&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Permite eliminar elementos de cualquier posición del array y/o insertar otros en su lugar. Devuelve un array con los elementos eliminados. Sintaxis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.splice(posicion, num. de elementos a eliminar, 1º elemento a insertar, 2º elemento a insertar, 3º...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
let borrado = a.splice(1, 3)       // ahora a = [&#39;Lunes&#39;, 6] y borrado = [&#39;Martes&#39;, 2, 4]
a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
borrado = a.splice(1, 0, 45, 56)   // ahora a = [&#39;Lunes&#39;, 45, 56, &#39;Martes&#39;, 2, 4, 6] y borrado = []
a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
borrado = a.splice(1, 3, 45, 56)   // ahora a = [&#39;Lunes&#39;, 45, 56, 6] y borrado = [&#39;Martes&#39;, 2, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Guarda en un array la lista de la compra con Peras, Manzanas, Kiwis, Plátanos y Mandarinas. Haz los siguiente con splice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elimina las manzanas (debe quedar Peras, Kiwis, Plátanos y Mandarinas)&lt;/li&gt;
&lt;li&gt;Añade detrás de los Plátanos Naranjas y Sandía (debe quedar Peras, Kiwis, Plátanos, Naranjas, Sandía y Mandarinas)&lt;/li&gt;
&lt;li&gt;Quita los Kiwis y pon en su lugar Cerezas y Nísperos (debe quedar Peras, Cerezas, Nísperos, Plátanos, Naranjas, Sandía y Mandarinas)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;slice&quot; tabindex=&quot;-1&quot;&gt;slice&lt;/h3&gt;
&lt;p&gt;Devuelve un subarray con los elementos indicados pero sin modificar el array original (sería como hacer un &lt;code&gt;substr&lt;/code&gt; pero de un array en vez de una cadena). Sintaxis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.slice(posicion, num. de elementos a devolver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
const subArray = a.slice(1, 3)       // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6] y subArray = [&#39;Martes&#39;, 2, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es muy útil para hacer una copia de un array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [2, 4, 6]
const copiaDeA = a.slice()       // ahora ambos arrays contienen lo mismo pero son diferentes arrays
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;arrays-y-strings&quot; tabindex=&quot;-1&quot;&gt;Arrays y Strings&lt;/h3&gt;
&lt;p&gt;Cada objeto (y los arrays son un tipo de objeto) tienen definido el método &lt;code&gt;.toString()&lt;/code&gt; que lo convierte en una cadena. Este método es llamado automáticamente cuando, por ejemplo, queremos mostrar un array por la consola. En realidad &lt;code&gt;console.log(a)&lt;/code&gt; ejecuta &lt;code&gt;console.log(a.toString())&lt;/code&gt;. En el caso de los arrays esta función devuelve una cadena con los elementos del array dentro de corchetes y separados por coma.&lt;/p&gt;
&lt;p&gt;Además podemos convertir los elementos de un array a una cadena con &lt;code&gt;.join()&lt;/code&gt; especificando el carácter separador de los elementos. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
const cadena = a.join(&#39;-&#39;)       // cadena = &#39;Lunes-Martes-2-4-6&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método es el contrario del m &lt;code&gt;.split()&lt;/code&gt; que convierte una cadena en un array. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const notas = &#39;5-3.9-6-9.75-7.5-3&#39;
const arrayNotas = notas.split(&#39;-&#39;)        // arrayNotas = [5, 3.9, 6, 9.75, 7.5, 3]
const cadena = &#39;Que tal estás&#39;
const arrayPalabras = cadena.split(&#39; &#39;)    // arrayPalabras = [&#39;Que`, &#39;tal&#39;, &#39;estás&#39;]
const arrayLetras = cadena.split(&#39;&#39;)       // arrayLetras = [&#39;Q&#39;,&#39;u&#39;,&#39;e`,&#39; &#39;,&#39;t&#39;,a&#39;,l&#39;,&#39; &#39;,&#39;e&#39;,s&#39;,t&#39;,á&#39;,s&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sort&quot; tabindex=&quot;-1&quot;&gt;sort&lt;/h3&gt;
&lt;p&gt;Ordena &lt;strong&gt;alfabéticamente&lt;/strong&gt; los elementos del array. Cambia el array además de devolverlo. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [&#39;hola&#39;,&#39;adios&#39;,&#39;Bien&#39;,&#39;Mal&#39;,2,5,13,45]
let b = a.sort()       // b = [13, 2, 45, 5, &amp;quot;Bien&amp;quot;, &amp;quot;Mal&amp;quot;, &amp;quot;adios&amp;quot;, &amp;quot;hola&amp;quot;], pero a también queda ordenado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos pasarle una función que le indique cómo ordenar, que devolverá un valor negativo si el primer elemento es mayor, positivo si es mayor el segundo o 0 si son iguales. Ejemplo: ordenar un array de cadenas sin tener en cuenta si son mayúsculas o minúsculas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [&#39;hola&#39;,&#39;adios&#39;,&#39;Bien&#39;,&#39;Mal&#39;]
let b = a.sort(function(elem1, elem2) {
  if (elem1.toLocaleLowerCase &amp;gt; elem2.toLocaleLowerCase)
    return -1
  if (elem1.toLocaleLowerCase &amp;lt; elem2.toLocaleLowerCase)
    return 1
  return 0
})       // b = [&amp;quot;adios&amp;quot;, &amp;quot;Bien&amp;quot;, &amp;quot;hola&amp;quot;, &amp;quot;Mal&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como más se utiliza esta función es para ordenar arrays de objetos. Por ejemplo si tenemos un objeto &lt;em&gt;alumno&lt;/em&gt; con los campos &lt;em&gt;name&lt;/em&gt; y &lt;em&gt;age&lt;/em&gt;, para ordenar un array de objetos &lt;em&gt;alumno&lt;/em&gt; por su edad haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnosOrdenado = alumnos.sort(function(alumno1, alumno2) {
  return alumno1.age - alumno2.age
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando &lt;em&gt;arrow functions&lt;/em&gt; quedaría más sencillo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnosOrdenado = alumnos.sort((alumno1, alumno2)  =&amp;gt; alumno1.age - alumno2.age)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si que queremos ordenar por un campo de texto en vez de numérico debemos usar la función &lt;em&gt;toLocaleCompare&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnosOrdenado = alumnos.sort((alumno1, alumno2)  =&amp;gt; alumno1.name.localeCompare(alumno2.name))
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz una función que ordene las notas de un array pasado como parámetro. Si le pasamos [4,8,3,10,5] debe devolver [3,4,5,8,10]. Pruébalo en la consola&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;otros-metodos-comunes&quot; tabindex=&quot;-1&quot;&gt;Otros métodos comunes&lt;/h3&gt;
&lt;p&gt;Otros métodos que se usan a menudo con arrays son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.concat()&lt;/code&gt;: concatena arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [2, 4, 6]
let b = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
let c = a.concat(b)       // c = [2, 4, 6, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.reverse()&lt;/code&gt;: invierte el orden de los elementos del array&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [2, 4, 6]
let b = a.reverse()       // b = [6, 4, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.indexOf()&lt;/code&gt;: devuelve la primera posición del elemento pasado como parámetro o -1 si no se encuentra en el array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.lastIndexOf()&lt;/code&gt;: devuelve la última posición del elemento pasado como parámetro o -1 si no se encuentra en el array&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;functional-programming&quot; tabindex=&quot;-1&quot;&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;Se trata de un paradigma de programación (una forma de programar) donde se intenta que el código se centre más en qué debe hacer una función que en cómo debe hacerlo. El ejemplo más claro es que intenta evitar los bucles &lt;em&gt;for&lt;/em&gt; y &lt;em&gt;while&lt;/em&gt; sobre arrays o  listas de elementos. Normalmente cuando hacemos un bucle es para recorrer la lista y realizar alguna acción con cada uno de sus elementos. Lo que hace &lt;em&gt;functional programing&lt;/em&gt; es que a la función que debe hacer eso se le pasa como parámetro la función que debe aplicarse a cada elemento de la lista.&lt;/p&gt;
&lt;p&gt;Desde la versión 5.1 javascript incorpora métodos de &lt;em&gt;functional programing&lt;/em&gt; en el lenguaje, especialmente para trabajar con arrays:&lt;/p&gt;
&lt;h3 id=&quot;filter&quot; tabindex=&quot;-1&quot;&gt;filter&lt;/h3&gt;
&lt;p&gt;Devuelve un nuevo array con los elementos que cumplen determinada condición del array al que se aplica. Su parámetro es una función, habitualmente anónima, que va interactuando con los elementos del array. Esta función recibe como primer parámetro el elemento actual del array (sobre el que debe actuar). Opcionalmente puede tener como segundo parámetro su índice y como tercer parámetro el array completo. La función debe devolver &lt;strong&gt;true&lt;/strong&gt; para los elementos que se incluirán en el array a devolver como resultado y &lt;strong&gt;false&lt;/strong&gt; para el resto.&lt;/p&gt;
&lt;p&gt;Ejemplo: dado un array con notas devolver un array con las notas de los aprobados. Esto usando programación &lt;em&gt;imperativa&lt;/em&gt; (la que se centra en &lt;em&gt;cómo se deben hacer las cosas&lt;/em&gt;) sería algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = []
for (let i = 0 i++ i &amp;lt; arrayNotas.length) {
  let nota = arrayNotas[i]
  if (nota &amp;gt; =  5) {
    aprobados.push(nota)
  } 
}       // aprobados = [5.2, 6, 9.75, 7.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando &lt;em&gt;functional programming&lt;/em&gt; (la que se centra en &lt;em&gt;qué resultado queremos obtener&lt;/em&gt;) sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = arrayNotas.filter(function(nota) {
  if (nota &amp;gt; =  5) {
    return true
  } else {
    return false
  } 
})       // aprobados = [5.2, 6, 9.75, 7.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos refactorizar esta función para que sea más compacta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = arrayNotas.filter(function(nota) {
  return nota &amp;gt; =  5     // nota &amp;gt; =  5 se evalúa a &#39;true&#39; si es cierto o &#39;false&#39; si no lo es
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y usando funciones lambda la sintaxis queda mucho más simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = arrayNotas.filter(nota  =&amp;gt; nota &amp;gt; =  5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las 7 líneas del código usando programación &lt;em&gt;imperativa&lt;/em&gt; quedan reducidas a sólo una.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana obtén todos los días que empiezan por &#39;M&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;find&quot; tabindex=&quot;-1&quot;&gt;find&lt;/h3&gt;
&lt;p&gt;Como &lt;em&gt;filter&lt;/em&gt; pero NO devuelve un &lt;strong&gt;array&lt;/strong&gt; sino el primer &lt;strong&gt;elemento&lt;/strong&gt; que cumpla la condición (o &lt;em&gt;undefined&lt;/em&gt; si no la cumple nadie). Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const primerAprobado = arrayNotas.find(nota  =&amp;gt; nota &amp;gt; =  5)    // primerAprobado = 5.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método tiene más sentido con objetos. Por ejemplo, si queremos encontrar la persona con DNI &#39;21345678Z&#39; dentro de un array llamado personas cuyos elementos son objetos con un campo &#39;dni&#39; haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const personaBuscada = personas.find(persona  =&amp;gt; persona.dni = = = &#39;21345678Z&#39;)    // devolverá el objeto completo
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana obtén el primer día que empieza por &#39;M&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;find-index&quot; tabindex=&quot;-1&quot;&gt;findIndex&lt;/h3&gt;
&lt;p&gt;Como &lt;em&gt;find&lt;/em&gt; pero en vez de devolver el elemento devuelve su posición (o -1 si nadie cumple la condición). En el ejemplo anterior el valor devuelto sería 0 (ya que el primer elemento cumple la condición). Al igual que el anterior tiene más sentido con arrays de objetos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana obtén la posición en el array del primer día que empieza por &#39;M&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;every-some&quot; tabindex=&quot;-1&quot;&gt;every / some&lt;/h3&gt;
&lt;p&gt;La primera devuelve &lt;strong&gt;true&lt;/strong&gt; si &lt;strong&gt;TODOS&lt;/strong&gt; los elementos del array cumplen la condición y &lt;strong&gt;false&lt;/strong&gt; en caso contrario. La segunda devuelve &lt;strong&gt;true&lt;/strong&gt; si &lt;strong&gt;ALGÚN&lt;/strong&gt; elemento del array cumple la condición. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const todosAprobados = arrayNotas.every(nota  =&amp;gt; nota &amp;gt; =  5)   // false
const algunAprobado = arrayNotas.some(nota  =&amp;gt; nota &amp;gt; =  5)     // true
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana indica si algún día empieza por &#39;S&#39;. Dado un array con los días de la semana indica si todos los días acaban por &#39;s&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;map&quot; tabindex=&quot;-1&quot;&gt;map&lt;/h3&gt;
&lt;p&gt;Permite modificar cada elemento de un array y devuelve un nuevo array con los elementos del original modificados. Ejemplo: queremos subir un 10% cada nota:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const arrayNotasSubidas = arrayNotas.map(nota  =&amp;gt; nota + nota * 10%)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana devuelve otro array con los días en mayúsculas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;reduce&quot; tabindex=&quot;-1&quot;&gt;reduce&lt;/h3&gt;
&lt;p&gt;Devuelve un valor calculado a partir de los elementos del array. En este caso la función recibe como primer parámetro el valor calculado hasta ahora y el método tiene como 1º parámetro la función y como 2º parámetro al valor calculado inicial (si no se indica será el primer elemento del array).&lt;/p&gt;
&lt;p&gt;Ejemplo: queremos obtener la suma de las notas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const sumaNotas = arrayNotas.reduce((total,nota)  =&amp;gt; total + =  nota, 0)    // total = 35.35
// podríamos haber omitido el valor inicial 0 para total
const sumaNotas = arrayNotas.reduce((total,nota)  =&amp;gt; total + =  nota)    // total = 35.35
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo: queremos obtener la nota más alta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const maxNota = arrayNotas.reduce((max,nota)  =&amp;gt; nota &amp;gt; max ? nota : max)    // max = 9.75
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el siguiente ejemplo gráfico tenemos un &amp;quot;array&amp;quot; de verduras al que le aplicamos una función &lt;em&gt;map&lt;/em&gt; para que las corte y al resultado le aplicamos un &lt;em&gt;reduce&lt;/em&gt; para que obtenga un valor (el sandwich) con todas ellas:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1268/1*re1sGlEEm1C95_Luq3cJbw.png&quot; alt=&quot;Functional Programming Sandwich&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado el array de notas anterior devuelve la nota media&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;for-each&quot; tabindex=&quot;-1&quot;&gt;forEach&lt;/h3&gt;
&lt;p&gt;Es el método más general de los que hemos visto. No devuelve nada sino que permite realizar algo con cada elemento del array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
arrayNotas.forEach((nota, indice)  =&amp;gt; {
  console.log(&#39;El elemento de la posición &#39; + indice + &#39; es: &#39; + nota)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;includes&quot; tabindex=&quot;-1&quot;&gt;includes&lt;/h3&gt;
&lt;p&gt;Devuelve &lt;strong&gt;true&lt;/strong&gt; si el array incluye el elemento pasado como parámetro. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
arrayNotas.includes(7.5)     // true
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana indica si algún día es el &#39;Martes&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;array-from&quot; tabindex=&quot;-1&quot;&gt;Array.from&lt;/h3&gt;
&lt;p&gt;Devuelve un array a partir de otro al que se puede aplicar una función de transformación (es similar a &lt;em&gt;map&lt;/em&gt;). Ejemplo: queremos subir un 10% cada nota:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const arrayNotasSubidas = Array.from(arrayNotas, nota  =&amp;gt; nota + nota * 10%)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puede usarse para hacer una copia de un array, igual que &lt;em&gt;slice&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayA = [5.2, 3.9, 6, 9.75, 7.5, 3]
const arrayB = Array.from(arrayA)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se utiliza mucho para convertir colecciones en arrays y así poder usar los métodos de arrays que hemos visto. Por ejemplo si queremos mostrar por consola cada párrafo de la página que comience por la palabra &#39;If&#39; en primer lugar obtenemos todos los párrafos con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const parrafos = document.getElementsByTagName(&#39;p&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos devuelve una colección con todos los párrafos de la página (lo veremos más adelante al ver DOM). Podríamos hacer un &lt;strong&gt;for&lt;/strong&gt; para recorrer la colección y mirar los que empiecen por lo indicado pero no podemos aplicarle los métodos vistos aquí porque son sólo para arrays así que hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayParrafos = Array.from(parrafos)
// y ya podemos usar los métodos que queramos:
arrayParrafos.filter(parrafo  =&amp;gt; parrafo.textContent.startsWith(&#39;If&#39;))
.forEach(parrafo  =&amp;gt; alert(parrafo.textContent))
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: desde este momento se han acabado los bucles &lt;em&gt;for&lt;/em&gt; en nuestro código para trabajar con arrays. Usaremos siempre estas funciones!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rest-y-spread&quot; tabindex=&quot;-1&quot;&gt;Rest y Spread&lt;/h2&gt;
&lt;p&gt;Permiten extraer a parámetros los elementos de un array o string (&lt;em&gt;spread&lt;/em&gt;) o convertir en un array un grupo de parámetros (&lt;em&gt;rest&lt;/em&gt;). El operador de ambos es &lt;strong&gt;...&lt;/strong&gt; (3 puntos).&lt;/p&gt;
&lt;p&gt;Para usar &lt;em&gt;rest&lt;/em&gt; como parámetro de una función debe ser siempre el último parámetro.&lt;/p&gt;
&lt;p&gt;Ejemplo: queremos hacer una función que calcule la media de las notas que se le pasen como parámetro y que no sabemos cuántas són. Para llamar a la función haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(notaMedia(3.6, 6.8)) 
console.log(notaMedia(5.2, 3.9, 6, 9.75, 7.5, 3)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función convertirá los parámetros recibidos en un array usando &lt;em&gt;rest&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function notaMedia(...notas) {
  let total = notas.reduce((total,nota)  =&amp;gt; total + =  nota)
  return total/notas.length
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si lo que queremos es convertir un array en un grupo de elementos haremos &lt;em&gt;spread&lt;/em&gt;. Por ejemplo el objeto &lt;em&gt;Math&lt;/em&gt; proporciona métodos para trabajar con números como &lt;em&gt;.max&lt;/em&gt; que devuelve el máximo de los números pasados como parámetro. Para saber la nota máxima en vez de &lt;em&gt;.reduce&lt;/em&gt; como hicimos en el ejemplo anterior podemos hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]

let maxNota = Math.max(...arrayNotas)    // maxNota = 9.75
// si hacemos Math.max(arrayNotas) devuelve NaN porque arrayNotas es un array y no un número
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;desestructuracion-de-arrays&quot; tabindex=&quot;-1&quot;&gt;Desestructuración de arrays&lt;/h2&gt;
&lt;p&gt;Igual que vimos con las propiedades de los objetos podemos extraer los elementos del array directamente a variables y viceversa. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const [primera, segunda, tercera] = arrayNotas   // primera = 5.2, segunda = 3.9, tercera = 6
const [primera, , , cuarta] = arrayNotas         // primera = 5.2, cuarta = 9.75
const [primera, ...resto] = arrayNotas           // primera = 5.2, resto = [3.9, 6, 9.75, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se pueden asignar valores por defecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const preferencias = [&#39;Javascript&#39;, &#39;NodeJS&#39;]
const [lenguaje, backend = &#39;Laravel&#39;, frontend = &#39;VueJS&#39;] = preferencias  // lenguaje = &#39;Javascript&#39;, backend = &#39;NodeJS&#39;, frontend = &#39;VueJS&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;copia-de-arrays&quot; tabindex=&quot;-1&quot;&gt;Copia de arrays&lt;/h2&gt;
&lt;p&gt;Como vimos al hablar de objetos (y un array es un tipo particular de objeto) por defecto al asignarlos o pasarlos como parámetro a una función se pasan por referencia, NO se copian por lo que los datos de ambas son los mismos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [54, 23, 12]
const b = a      // a = [54, 23, 12] b = [54, 23, 12]
b[0] = 3       // a = [3, 23, 12] b = [3, 23, 12]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos obtener una copia de un array que sea independiente del original podemos usar &lt;code&gt;...&lt;/code&gt;o &lt;code&gt;Object.assign&lt;/code&gt; como vimos con los objetos, pero también podemos obtener una copia con &lt;code&gt;slice&lt;/code&gt; o con &lt;code&gt;Array.from&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [2, 4, 6]
const copiaDeA = [...a]       
const copiaDeA = a.slice()
const otraCopiaDeA = Array.fom(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En todos los casos los arrays contienen lo mismo pero son diferentes y al modificar uno no afectará al resto.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado el array arr1 con los días de la semana haz un array arr2 que sea igual al arr1. Elimina de arr2 el último día y comprueba quá ha pasado con arr1. Repita la operación con un array llamado arr3 pero que crearás haciendo una copia de arr1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;map-1&quot; tabindex=&quot;-1&quot;&gt;Map&lt;/h2&gt;
&lt;p&gt;Es una colección de parejas de [clave,valor]. Un objeto en Javascript es un tipo particular de &lt;em&gt;Map&lt;/em&gt; en que las claves sólo pueden ser texto o números. Se puede acceder a una propiedad con &lt;strong&gt;.&lt;/strong&gt; o &lt;strong&gt;[propiedad]&lt;/strong&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const persona = {
  nombre: &#39;John&#39;,
  apellido: &#39;Doe&#39;,
  edad: 39
}
console.log(persona.nombre)      // John
console.log(persona[&#39;nombre&#39;])   // John
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un &lt;em&gt;Map&lt;/em&gt; permite que la clave sea cualquier cosa (array, objeto, ...). No vamos a ver en profundidad estos objetos pero podéis saber más en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN&lt;/a&gt; o cualquier otra página.&lt;/p&gt;
&lt;h2 id=&quot;set&quot; tabindex=&quot;-1&quot;&gt;Set&lt;/h2&gt;
&lt;p&gt;Es como un &lt;em&gt;Map&lt;/em&gt; pero que no almacena los valores sino sólo la clave. Podemos verlo como una colección que no permite duplicados. Tiene la propiedad &lt;strong&gt;size&lt;/strong&gt; que devuelve su tamaño y los métodos &lt;strong&gt;.add&lt;/strong&gt; (añade un elemento), &lt;strong&gt;.delete&lt;/strong&gt; (lo elimina) o &lt;strong&gt;.has&lt;/strong&gt; (indica si el elemento pasado se encuentra o no en la colección) y también podemos recorrerlo con &lt;strong&gt;.forEach&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una forma sencilla de eliminar los duplicados de un array es crear con él un &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const ganadores = [&#39;Márquez&#39;, &#39;Rossi&#39;, &#39;Márquez&#39;, &#39;Lorenzo&#39;, &#39;Rossi&#39;, &#39;Márquez&#39;, &#39;Márquez&#39;]
const ganadoresNoDuplicados = new Set(ganadores)    // {&#39;Márquez, &#39;Rossi&#39;, &#39;Lorenzo&#39;}
// o si lo queremos en un array:
const ganadoresNoDuplicados = Array.from(new Set(ganadores))    // [&#39;Márquez, &#39;Rossi&#39;, &#39;Lorenzo&#39;]
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/02-2-arrays/" >
        </entry>
        <entry>
            <title>
                02.1-objetos
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/02-1-objetos/</id>
            <content type="html">
                &lt;h1 id=&quot;objetos-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Objetos en Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objetos-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objetos en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-de-un-objeto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades de un objeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos-de-un-objeto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos de un objeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propagaci%C3%B3n-de-propiedades&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propagación de propiedades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desestructuraci%C3%B3n-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desestructuración de objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#comparaci%C3%B3n-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comparación de objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#copia-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Copia de objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bibliograf%C3%ADa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bibliografía&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En Javascript podemos definir cualquier variable como un objeto declarándola con &lt;strong&gt;new&lt;/strong&gt; (NO se recomienda) o creando un &lt;em&gt;literal object&lt;/em&gt; (usando notación &lt;strong&gt;JSON&lt;/strong&gt;). Ejemplo con &lt;em&gt;new&lt;/em&gt; (no recomendado):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumno = new Object()
alumno.nombre = &#39;Carlos&#39;     // se crea la propiedad &#39;nombre&#39; y se le asigna un valor
alumno[&#39;apellidos&#39;] = &#39;Pérez Ortiz&#39;    // se crea la propiedad &#39;apellidos&#39;
alumno.edad = 19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creando un &lt;em&gt;literal object&lt;/em&gt; (es la forma &lt;strong&gt;recomendada&lt;/strong&gt;) el ejemplo anterior sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumno = {
    nombre: &#39;Carlos&#39;,
    apellidos: &#39;Pérez Ortiz&#39;,
    edad: 19,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;propiedades-de-un-objeto&quot; tabindex=&quot;-1&quot;&gt;Propiedades de un objeto&lt;/h2&gt;
&lt;p&gt;Podemos acceder a las propiedades con &lt;code&gt;.&lt;/code&gt; (punto) o &lt;code&gt;[ ]&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.nombre)       // imprime &#39;Carlos&#39;
console.log(alumno[&#39;nombre&#39;])    // imprime &#39;Carlos&#39;
let prop = &#39;nombre&#39;
console.log(alumno[prop])        // imprime &#39;Carlos&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si intentamos acceder a propiedades que no existen no se produce un error, se devuelve &lt;em&gt;undefined&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo)      // muestra undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo se genera un error si intentamos acceder a propiedades de algo que no es un objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo)           // muestra undefined
console.log(alumno.ciclo.descrip)      // se genera un ERROR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para evitar ese error antes había que comprobar que existan las propiedades previas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo &amp;amp;&amp;amp; alumno.ciclo.descrip)
// si alumno.ciclo es un objeto muestra el valor de 
// alumno.ciclo.descrip y si no muestra undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con ES2020 (ES11) se ha incluido el operador de encadenamiento opcional &lt;strong&gt;?.&lt;/strong&gt; para evitar tener que comprobar esto nosotros:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo?.descrip)
// si alumno.ciclo es un objeto muestra el valor de 
// alumno.ciclo.descrip y si no muestra undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podremos recorrer las propiedades de un objecto con &lt;code&gt;for..in&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let prop in alumno) {
    console.log(prop + &#39;: &#39; + alumno[prop])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el valor de una propiedad es el valor de una variable que se llama como la propiedad no es necesario ponerlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nombre = &#39;Carlos&#39;

const alumno = {
    nombre,            // es equivalente a nombre: nombre
    apellidos: &#39;Pérez Ortiz&#39;,
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;metodos-de-un-objeto&quot; tabindex=&quot;-1&quot;&gt;Métodos de un objeto&lt;/h2&gt;
&lt;p&gt;Una propiedad de un objeto puede ser una función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;alumno.getInfo = function() {
    return &#39;El alumno &#39; + this.nombre + &#39; &#39; + this.apellidos + &#39; tiene &#39; + this.edad + &#39; años&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: No podemos ponerlo con sintaxis &lt;em&gt;arrow function&lt;/em&gt; porque no se podría acceder a las propiedades del objeto con &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Y para llamarlo se hace como con cualquier otra propiedad:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.getInfo())    // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea un objeto llamado tvSamsung con las propiedades nombre (&amp;quot;TV Samsung 42&amp;quot;), categoria (&amp;quot;Televisores&amp;quot;), unidades (4), precio (345.95) y con un método llamado importe que devuelve el valor total de las unidades (nº de unidades * precio)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;propagacion-de-propiedades&quot; tabindex=&quot;-1&quot;&gt;Propagación de propiedades&lt;/h2&gt;
&lt;p&gt;El operador de propagación, &lt;strong&gt;&lt;code&gt;...&lt;/code&gt;&lt;/strong&gt; (3 puntos), permite extraer las propiedades de un objeto. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const personaCarlos = {
    nombre: &#39;Carlos&#39;,
    apellidos: &#39;Pérez Ortiz&#39;,
    edad: 19,
};
const alumnoCarlos = {
    ...personaCarlos,
    ciclo: &#39;DAW&#39;,
    curso: 2,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El objeto &lt;em&gt;alumnoCarlos&lt;/em&gt; tendrá las propiedades de &lt;em&gt;personaCarlos&lt;/em&gt; y las que se le añadan. Si se repiten las propiedades se sobreescriben:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumnoCarlos = {
    ...personaCarlos,
    ciclo: &#39;DAW&#39;,
    curso: 2,
    edad: 20,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;desestructuracion-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Desestructuración de objetos&lt;/h2&gt;
&lt;p&gt;Similar al anterior, permite extraer directamente a variables sólo las propiedades que necesitemos de un objeto. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const personaCarlos = {
    nombre: &#39;Carlos&#39;,
    apellidos: &#39;Pérez Ortiz&#39;,
    edad: 19,
};

function muestraNombre({nombre, apellidos}) {
    console.log(&#39;El nombre es &#39; + nombre + &#39; &#39; + apellidos)
}

muestraNombre(personaCarlos)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aunque a la función se le pasa un objeto esta toma como parámetros sólo 2 de sus propiedades y las asigna a las variables &lt;em&gt;nombre&lt;/em&gt; y &lt;em&gt;apellidos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;También podemos asignar valores por defecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function miProducto({nombre, apellidos = &#39;Desconocidos&#39;}) {
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;comparacion-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Comparación de objetos&lt;/h2&gt;
&lt;p&gt;En Javascript los objetos se comparan por referencia, no por valor. Por lo que dos objetos con los mismos valores no son iguales:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = {id:2, name: &#39;object 2&#39;}
console.log(a === b)    // muestra false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;copia-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Copia de objetos&lt;/h2&gt;
&lt;p&gt;Cuando copiamos una variable de tipo &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt; o &lt;em&gt;number&lt;/em&gt; o se pasa como parámetro a una función se hace una copia de la misma y si se modifica la variable original no es alterada. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = 54
let b = a      // a = 54 b = 54
b = 86         // a = 54 b = 86
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo al copiar objetos (y arrays, que son un tipo de objeto) la nueva variable apunta a la misma posición de memoria que la antigua por lo que los datos de ambas son los mismos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = a
b.name = &#39;object 3&#39;      // a = {id:2, name: &#39;object 3&#39;} b = {id:2, name: &#39;object 3&#39;}

const a = [54, 23, 12]
const b = a      // a = [54, 23, 12] b = [54, 23, 12]
b[0] = 3       // a = [3, 23, 12] b = [3, 23, 12]

const fecha1 = new Date(&#39;2018-09-23&#39;)
const fecha2 = fecha1          // fecha1 = &#39;2018-09-23&#39;   fecha2 = &#39;2018-09-23&#39;
fecha2.setFullYear(1999)   // fecha1 = &#39;1999-09-23&#39;   fecha2 = &#39;1999-09-23&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obtener una copia independiente de un array o un objeto podemos usar el operador de propagación &lt;code&gt;...&lt;/code&gt; o el método &lt;code&gt;Object.assign&lt;/code&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = {...a}      // ahora ambos objetos contienen lo mismo pero son diferentes
b.name = &#39;object 3&#39;      // a = {id:2, name: &#39;object 2&#39;} b = {id:2, name: &#39;object 3&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = Object.assign({}, a)       // ahora ambos objetos contienen lo mismo pero son diferentes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo si el objeto tiene como propiedades otros objetos estos se continúan pasando por referencia. Es ese caso lo más sencillo sería hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id: 2, name: &#39;object 2&#39;, address: {street: &#39;Rue del Percebe&#39;, num: 13} }
const copiaDeA =  JSON.parse(JSON.stringify(a))       // ahora ambos objetos contienen lo mismo pero son diferentes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o bien usar la función &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;structuredClone&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id: 2, name: &#39;object 2&#39;, address: {street: &#39;Rue del Percebe&#39;, num: 13} }
const b =  structuredClone(a)       // ahora ambos objetos contienen lo mismo pero son diferentes
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado el objeto &lt;em&gt;a&lt;/em&gt; del último ejemplo copialo a un nuevo objeto b con &lt;code&gt;...&lt;/code&gt; y prueba a cambiar las pripiedades &lt;em&gt;id&lt;/em&gt; y &lt;em&gt;street&lt;/em&gt; de &lt;em&gt;b&lt;/em&gt;. ¿Qué pasa con sus valores en &lt;em&gt;a&lt;/em&gt;?.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;bibliografia&quot; tabindex=&quot;-1&quot;&gt;Bibliografía&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Curso &#39;Programación con JavaScript&#39;. CEFIRE Xest. Arturo Bernal Mayordomo&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/02-1-objetos/" >
        </entry>
        <entry>
            <title>
                01-sintaxis
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/javascript-teoria-batoi/01-sintaxis/</id>
            <content type="html">
                &lt;h1 id=&quot;sintaxis&quot; tabindex=&quot;-1&quot;&gt;Sintaxis&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sintaxis&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sintaxis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#funciones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Funciones&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#par%C3%A1metros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Parámetros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#funciones-an%C3%B3nimas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Funciones anónimas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrow-functions-funciones-flecha&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrow functions (funciones flecha)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estructuras-y-bucles&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estructuras y bucles&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estructura-condicional-if&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estructura condicional: if&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estructura-condicional-switch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estructura condicional: switch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucle-while&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucle &lt;em&gt;while&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucle-for&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucle: for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucle-for-con-contador&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucle: for con contador&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucle-forin&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucle: for...in&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucle-forof&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucle: for...of&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-de-datos-b%C3%A1sicos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos de datos básicos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#casting-de-variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Casting&lt;/em&gt; de variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#number&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Number&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#string&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;String&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#template-literals&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Template literals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#boolean&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Boolean&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#manejo-de-errores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Manejo de errores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#buenas-pr%C3%A1cticas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Buenas prácticas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#use-strict&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&#39;use strict&#39;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#variables-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otras&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otras&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#clean-code&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clean Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;variables&quot; tabindex=&quot;-1&quot;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Javascript es un lenguaje dinámicamente tipado. Esto significa que no se indica de qué tipo es una variable al declararla e incluso puede cambiar su tipo a lo largo de la ejecución del programa. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miVariable;         // declaro miVariable y como no se asigno un valor valdrá undefined
miVariable=&#39;Hola&#39;;      // ahora su valor es &#39;Hola&#39;, por tanto contiene una cadena de texto
miVariable=34;          // pero ahora contiene un número
miVariable=[3, 45, 2];  // y ahora un array
miVariable=undefined;   // para volver a valer el valor especial undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además es débilmente tipado, lo que significa que permite operaciones entre tipos de datos diferentes. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;miVariable=&#39;23&#39;;
console.log(miVariable * 2);  // mostrará 46 ya que convierte la cadena &#39;23&#39; a número
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta en la consola del navegador las instrucciones anteriores y comprueba el valor de miVariable tras cada instrucción (para ver el valor de una variable simplemente ponemos en la consola su nombre: &lt;code&gt;miVariable&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ni siquiera estamos obligados a declarar una variable antes de usarla, aunque es recomendable para evitar errores que nos costará depurar. Podemos hacer que se produzca un error si no declaramos una variable incluyendo al principio de nuestro código la instrucción&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&#39;use strict&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las variables de declaran con &lt;strong&gt;let&lt;/strong&gt; (lo recomendado desde ES2015), aunque también pueden declararse con &lt;strong&gt;var&lt;/strong&gt; (nosotros NUNCA lo haremos). La diferencia es que con &lt;em&gt;let&lt;/em&gt; el ámbito de la variable es sólo el bloque en que se declara mientras que con &lt;em&gt;var&lt;/em&gt; su ámbito es global (o global a la función en que se declara):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (edad &amp;lt; 18) {
  let textoLet = &#39;Eres mayor de edad&#39;;
  var textoVar = &#39;Eres mayor de edad&#39;;
} else {
  let textoLet = &#39;Eres menor de edad&#39;;
  var textoVar = &#39;Eres menor de edad&#39;;
}
console.log(textoLet);  // mostrará undefined porque fuera del if no existe la variable
console.log(textoVar);  // mostrará la cadena
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cualquier variable que no se declara dentro de una función (o si se usa sin declarar) es &lt;em&gt;global&lt;/em&gt;. Debemos siempre intentar NO usar variables globales.&lt;/p&gt;
&lt;p&gt;Se recomienda que Los nombres de las variables sigan la sintaxis &lt;em&gt;camelCase&lt;/em&gt; (ej.: &lt;em&gt;miPrimeraVariable&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Desde ES2015 también podemos declarar constantes con &lt;strong&gt;const&lt;/strong&gt;. Se les debe dar un valor al declararlas y si intentamos modificarlo posteriorment se produce un error. Sin embargo si la variable es un objeto o array sí podemos modificar su contenido, aunque no vlarla a asignar. Se recomienda usarla siempre que sea posible. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const PI=3.1416;
PI=3.14;    // dará un error

const miArray=[3, 4, 5];
miArray[0]=6;   // esto sí se puede hacer
miArray=[6, 4, 5];  // esto dará un error
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: en la página de &lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Babel&lt;/a&gt; podemos teclear código en ES2015 y ver cómo quedaría una vez transpilado a ES5.&lt;/p&gt;
&lt;h2 id=&quot;funciones&quot; tabindex=&quot;-1&quot;&gt;Funciones&lt;/h2&gt;
&lt;p&gt;Se declaran con &lt;strong&gt;function&lt;/strong&gt; y se les pasan los parámetros entre paréntesis. La función puede devolver un valor usando &lt;strong&gt;return&lt;/strong&gt; (si no tiene &lt;em&gt;return&lt;/em&gt; es como si devolviera &lt;em&gt;undefined&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Puede usarse una función antes de haberla declarado por el comportamiento de Javascript llamado &lt;em&gt;hoisting&lt;/em&gt;: el navegador primero carga todas las funciones y mueve las declaraciones de las variables al principio y luego ejecuta el código.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz una función que te pida que escribas algo y muestre un alert diciendo &#39;Has escrito...&#39; y el valor introducido. Pruébala en la consola (pegas allí la función y luego la llamas desde la consola)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;parametros&quot; tabindex=&quot;-1&quot;&gt;Parámetros&lt;/h3&gt;
&lt;p&gt;Si se llama una función con menos parámetros de los declarados el valor de los parámetros no pasados será &lt;em&gt;undefined&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function potencia(base, exponente) {
    console.log(base);            // muestra 4
    console.log(exponente);       // muestra undefined
    let valor=1;
    for (let i=1; i&amp;lt;=exponente; i++) {
      valor=valor*base;
    }
    return valor;
}

potencia(4);    // devolverá 1 ya que no se ejecuta el for
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos dar un &lt;strong&gt;valor por defecto&lt;/strong&gt; a los parámetros por si no los pasan asignándoles el valor al definirlos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function potencia(base, exponente=2) {
    console.log(base);            // muestra 4
    console.log(exponente);       // muestra 2 la primera vez y 5 la segunda
    let valor=1;
    for (let i=1; i&amp;lt;=exponente; i++) {
      valor=valor*base;
    }
    return valor;
}

console.log(potencia(4));         // mostrará 16 (4^2)
console.log(potencia(4,5));       // mostrará 1024 (4^5)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTA: Hasta ES6 para dar un valor por defecto a una variable se hacía&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function potencia(base, exponente) {
    exponente = exponente || 2;       // si exponente vale undefined se la asigna el valor 2
...
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;También es posible acceder a los parámetros desde el array &lt;strong&gt;arguments[]&lt;/strong&gt; si no sabemos cuántos recibiremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function suma () {
    var result = 0;
    for (var i=0; i&amp;lt;arguments.length; i++)
        result += arguments[i];
    return result;
}

console.log(suma(4, 2));                    // mostrará 6
console.log(suma(4, 2, 5, 3, 2, 1, 3));     // mostrará 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En Javascript las funciones son un tipo de datos más por lo que podemos hacer cosas como pasarlas por argumento o asignarlas a una variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cuadrado = function(value) {
  return value * value
}
function aplica_fn(dato, funcion_a_aplicar) {
    return funcion_a_aplicar(dato);
}

aplica_fn(3, cuadrado);     // devolverá 9 (3^2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al usar paréntesis &lt;code&gt;()&lt;/code&gt; se llama a la función. Sin paréntesis sólo se hace referencia al objeto que representa la función. La capacidad de Javascript de tratar las funciones como objetos le permite el uso de funciones de &lt;em&gt;Callback&lt;/em&gt; y la programación funcional, que veremos más adelante.&lt;/p&gt;
&lt;h3 id=&quot;funciones-anonimas&quot; tabindex=&quot;-1&quot;&gt;Funciones anónimas&lt;/h3&gt;
&lt;p&gt;Como acabamos de ver podemos definir una función sin darle un nombre. Dicha función puede asignarse a una variable, autoejecutarse o asignasrse a un manejador de eventos. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let holaMundo = function() {
    alert(&#39;Hola mundo!&#39;);
}

holaMundo();        // se ejecuta la función
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vemos asignamos una función a una variable de forma que podamos &amp;quot;ejecutar&amp;quot; dicha variable.&lt;/p&gt;
&lt;h3 id=&quot;arrow-functions-funciones-flecha&quot; tabindex=&quot;-1&quot;&gt;Arrow functions (funciones flecha)&lt;/h3&gt;
&lt;p&gt;ES2015 permite declarar una función anónima de forma más corta. Ejemplo sin &lt;em&gt;arrow function&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let potencia = function(base, exponente) {
    let valor=1;
    for (let i=1; i&amp;lt;=exponente; i++) {
      valor=valor*base;
    }
    return valor;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al escribirla con la sintaxis de una &lt;em&gt;arrow function&lt;/em&gt; lo que hacemos es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eliminamos la palabra &lt;em&gt;function&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Si sólo tiene 1 parámetro podemos eliminar los paréntesis de los parámetros&lt;/li&gt;
&lt;li&gt;Ponemos el símbolo &lt;em&gt;=&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Si la función sólo tiene 1 línea podemos eliminamr las { } y la palabra &lt;em&gt;return&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El ejemplo con &lt;em&gt;arrow function&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let potencia = (base, exponente) =&amp;gt; {
    let valor=1;
    for (let i=1; i&amp;lt;=exponente; i++) {
      valor=valor*base;
    }
    return valor;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otro ejemplo, sin &lt;em&gt;arrow function&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cuadrado = function(base) {
    return base * base;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;conn &lt;em&gt;arrow function&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cuadrado = base =&amp;gt; base * base;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz una &lt;em&gt;arrow function&lt;/em&gt; que devuelva el cubo del número pasado como parámetro y pruébala desde la consola. Escríbela primero en la forma habitual y luego la &amp;quot;traduces&amp;quot; a &lt;em&gt;arrow function&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Las &lt;em&gt;arrow function&lt;/em&gt; son muy útiles cuando se usan como parámetros de otras funciones (como veremos en &lt;em&gt;programación funcional&lt;/em&gt;) pero no tienen su propio contexto &lt;em&gt;this&lt;/em&gt; por lo que no las podremos usar como métodos de una clase u objeto).&lt;/p&gt;
&lt;h2 id=&quot;estructuras-y-bucles&quot; tabindex=&quot;-1&quot;&gt;Estructuras y bucles&lt;/h2&gt;
&lt;h3 id=&quot;estructura-condicional-if&quot; tabindex=&quot;-1&quot;&gt;Estructura condicional: if&lt;/h3&gt;
&lt;p&gt;El &lt;strong&gt;if&lt;/strong&gt; es como en la mayoría de lenguajes. Puede tener asociado un &lt;strong&gt;else&lt;/strong&gt; y pueden anidarse varios con &lt;strong&gt;else if&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (condicion) {
    ...
} else if (condicion2) {
    ...
} else if (condicion3) {
    ...
} else {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (edad &amp;lt; 18) {
    console.log(&#39;Es menor de edad&#39;);
} else if (edad &amp;gt; 65) {
    console.log(&#39;Está jubilado&#39;);
} else {
    console.log(&#39;Edad correcta&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se puede usar el operador &lt;strong&gt;? :&lt;/strong&gt; que es como un &lt;em&gt;if&lt;/em&gt; que devuelve un valor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let esMayorDeEdad = (edad &amp;gt; 18) ? true : false;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;estructura-condicional-switch&quot; tabindex=&quot;-1&quot;&gt;Estructura condicional: switch&lt;/h3&gt;
&lt;p&gt;El &lt;strong&gt;switch&lt;/strong&gt; también es como en la mayoría de lenguajes. Hay que poner &lt;em&gt;break&lt;/em&gt; al final de cada bloque para que no continúe evaluando:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;switch(color) {
    case &#39;blanco&#39;:
    case &#39;amarillo&#39;:    // Ambos colores entran aquí
        colorFondo=&#39;azul&#39;;
        break;
    case &#39;azul&#39;:
        color_lambda_Fondo=&#39;amarillo&#39;;
        break;
    default:            // Para cualquier otro valor
        colorFondo=&#39;negro&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Javascript permite que el &lt;em&gt;switch&lt;/em&gt; en vez de evaluar valores pueda evaluar expresiones. En este caso se pone como condición &lt;em&gt;true&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;switch(true) {
    case age &amp;lt; 18:
        console.log(&#39;Eres muy joven para entrar&#39;);
        break;
    case age &amp;lt; 65:
        console.log(&#39;Puedes entrar&#39;);
        break;
    default:
        console.log(&#39;Eres muy mayor para entrar&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;bucle-em-while-em&quot; tabindex=&quot;-1&quot;&gt;Bucle &lt;em&gt;while&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Podemos usar el bucle &lt;em&gt;while...do&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;while (condicion) {
    // sentencias
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;que se ejecutará 0 o más veces. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nota=prompt(&#39;Introduce una nota (o cancela para finalizar)&#39;);
while (nota) {
    console.log(&#39;La nota introducida es: &#39;+nota);
    nota=prompt(&#39;Introduce una nota (o cancela para finalizar)&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O el bucle &lt;em&gt;do...while&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;do {
    // sentencias
} while (condicion)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;que al menos se ejecutará 1 vez. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nota;
do {
    nota=prompt(&#39;Introduce una nota (o cancela para finalizar)&#39;);
    console.log(&#39;La nota introducida es: &#39;+nota);
} while (nota)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz un programa para que el usuario juegue a adivinar un número. Obtén un número al azar (busca por internet cómo se hace o simplemente guarda el número que quieras en una variable) y ve pidiendo al usuario que introduzca un número. Si es el que busca le dices que lo ha encontrado y si no le mostrarás si el número que busca el mayor o menor que el introducido. El juego acaba cuando el usuario encuentra el número o cuando pulsa en &#39;Cancelar&#39; (en ese caso le mostraremos un mensaje de que ha cancelado el juego).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;bucle-for&quot; tabindex=&quot;-1&quot;&gt;Bucle: for&lt;/h3&gt;
&lt;p&gt;Tenemos muchos &lt;em&gt;for&lt;/em&gt; que podemos usar.&lt;/p&gt;
&lt;h3 id=&quot;bucle-for-con-contador&quot; tabindex=&quot;-1&quot;&gt;Bucle: for con contador&lt;/h3&gt;
&lt;p&gt;Creamos una variable contador que controla las veces que se ejecuta el for:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let datos=[5, 23, 12, 85]
let sumaDatos=0;

for (let i=0; i&amp;lt;datos.length; i++) {
    sumaDatos += datos[i];
}  
// El valor de sumaDatos será 125
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: El factorial de un número entero n es una operación matemática que consiste en multiplicar ese número por todos los enteros menores que él: &lt;strong&gt;n x (n-1) x (n-2) x ... x 1&lt;/strong&gt;. Así, el factorial de 5 (se escribe 5!) vale &lt;strong&gt;5! = 5 x 4 x 3 x 2 x 1 = 120&lt;/strong&gt;. Haz un script que calcule el factorial de un número entero.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;bucle-for-in&quot; tabindex=&quot;-1&quot;&gt;Bucle: for...in&lt;/h4&gt;
&lt;p&gt;El bucle se ejecuta una vez para cada elemento del array (o propiedad del objeto) y se crea una variable contador que toma como valores la posición del elemento en el array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let datos=[5, 23, 12, 85]
let sumaDatos=0;

for (let indice in datos) {
    sumaDatos += datos[indice];     // los valores que toma indice son 0, 1, 2, 3
}  
// El valor de sumaDatos será 125
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También sirve para recorrer las propiedades de un objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let profe={
    nom:&#39;Juan&#39;, 
    ape1=&#39;Pla&#39;, 
    ape2=&#39;Pla&#39;
}
let nombre=&#39;&#39;;

for (var campo in profe) {
   nombre += profe.campo + &#39; &#39;; // o profe[campo];
}  
// El valor de nombre será &#39;Juan Pla Pla &#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;bucle-for-of&quot; tabindex=&quot;-1&quot;&gt;Bucle: for...of&lt;/h4&gt;
&lt;p&gt;Es similar al &lt;em&gt;for...in&lt;/em&gt; pero la variable contador en vez de tomar como valor cada índice toma cada elemento. Es nuevo en ES2015:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let datos = [5, 23, 12, 85]
let sumaDatos = 0;

for (let valor of datos) {
    sumaDatos += valor;       // los valores que toma valor son 5, 23, 12, 85
}  
// El valor de sumaDatos será 125
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También sirve para recorrer los caracteres de una cadena de texto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cadena = &#39;Hola&#39;;

for (let letra of cadena) {
    console.log(letra);     // los valores de letra son &#39;H&#39;, &#39;o&#39;, &#39;l&#39;, &#39;a&#39;
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz 3 funciones a las que se le pasa como parámetro un array de notas y devuelve la nota media. Cada una usará un for de una de las 3 formas vistas. Pruébalas en la consola&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;tipos-de-datos-basicos&quot; tabindex=&quot;-1&quot;&gt;Tipos de datos básicos&lt;/h2&gt;
&lt;p&gt;Para saber de qué tipo es el valor de una variable tenemos el operador &lt;strong&gt;typeof&lt;/strong&gt;. Ej.:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeof 3&lt;/code&gt; devuelve &lt;em&gt;number&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeof &#39;Hola&#39;&lt;/code&gt; devuelve &lt;em&gt;string&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En Javascript hay 2 valores especiales:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;undefined&lt;/strong&gt;: es lo que vale una variable a la que no se ha asignado ningún valor&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;null&lt;/strong&gt;: es un tipo de valor especial que podemos asignar a una variable. Es como un objeto vacío (&lt;code&gt;typeof null&lt;/code&gt; devuelve &lt;em&gt;object&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También hay otros valores especiales relacionados con operaciones con números:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NaN&lt;/strong&gt; (&lt;em&gt;Not a Number&lt;/em&gt;): indica que el resultado de la operación no puede ser convertido a un número (ej. &lt;code&gt;&#39;Hola&#39;*2&lt;/code&gt;, aunque &lt;code&gt;&#39;2&#39;*2&lt;/code&gt; daría 4 ya que se convierte la cadena &#39;2&#39; al número 2)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Infinity&lt;/strong&gt; y &lt;strong&gt;-Infinity&lt;/strong&gt;: indica que el resultado es demasiado grande o demasiado pequeño (ej. &lt;code&gt;1/0&lt;/code&gt; o &lt;code&gt;-1/0&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;em-casting-em-de-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Casting&lt;/em&gt; de variables&lt;/h3&gt;
&lt;p&gt;Como hemos dicho las variables pueden contener cualquier tipo de valor y, en las operaciones, Javascript realiza &lt;strong&gt;automáticamente&lt;/strong&gt; las conversiones necesarias para, si es posible, realizar la operación. Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;4&#39; / 2&lt;/code&gt; devuelve 2 (convierte &#39;4&#39; en 4 y realiza la operación)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;23&#39; - null&lt;/code&gt; devuelve 0 (hace 23 - 0)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;23&#39; - undefined&lt;/code&gt; devuelve &lt;em&gt;NaN&lt;/em&gt; (no puede convertir undefined a nada así que no puede hacer la operación)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;23&#39; * true&lt;/code&gt; devuelve 23 (23 * 1)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;23&#39; * &#39;Hello&#39;&lt;/code&gt; devuelve &lt;em&gt;NaN&lt;/em&gt; (no puede convertir &#39;Hello&#39;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;23 + &#39;Hello&#39;&lt;/code&gt; devuelve &#39;23Hello&#39; (+ es el operador de concatenación así que convierte 23 a &#39;23&#39; y los concatena)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;23 + &#39;23&#39;&lt;/code&gt; devuelve 2323 (OJO, convierte 23 a &#39;23&#39;, no al revés)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además comentar que en Javascript todo son ojetos por lo que todo tiene métodos y propiedades. Veamos brevemente los tipos de datos básicos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Prueba en la consola las operaciones anteriores y alguna más con la que tengas dudas de qué devolverá&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;number&quot; tabindex=&quot;-1&quot;&gt;Number&lt;/h3&gt;
&lt;p&gt;Sólo hay 1 tipo de números, no existen enteros y decimales. El tipo de dato para cualquier número es &lt;strong&gt;number&lt;/strong&gt;. El carácter para la coma decimal es el &lt;strong&gt;.&lt;/strong&gt; (como en inglés, así que 23,12 debemos escribirlo como 23.12).&lt;/p&gt;
&lt;p&gt;Tenemos los operadores aritméticos &lt;strong&gt;+&lt;/strong&gt;, &lt;strong&gt;-&lt;/strong&gt;, &lt;strong&gt;*&lt;/strong&gt;, &lt;strong&gt;/&lt;/strong&gt; y &lt;strong&gt;%&lt;/strong&gt; y los unarios &lt;strong&gt;++&lt;/strong&gt; y &lt;strong&gt;--&lt;/strong&gt; y existen los valores especiales &lt;strong&gt;Infinity&lt;/strong&gt; y &lt;strong&gt;-Infinity&lt;/strong&gt; (&lt;code&gt;23 / 0&lt;/code&gt; no produce un error sino que devuelve &lt;em&gt;Infinity&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Podemos usar los operadores artméticos junto al operador de asignación &lt;strong&gt;=&lt;/strong&gt; (+=, -=, *=, /= y %=).&lt;/p&gt;
&lt;p&gt;Algunos métodos útiles de los números son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.toFixed(num)&lt;/strong&gt;: redondea el número a los decimales indicados. Ej. &lt;code&gt;23.2376.toFixed(2)&lt;/code&gt; devuelve 23.24&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toLocaleString()&lt;/strong&gt;: devuelve el número convertido al formato local. Ej. &lt;code&gt;23.76.toLocaleString()&lt;/code&gt; devuelve &#39;23,76&#39; (convierte el punto decimal en coma)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos forzar la conversión a número con la función &lt;strong&gt;Number(valor)&lt;/strong&gt;. Ejemplo &lt;code&gt;Number(&#39;23.12&#39;)&lt;/code&gt;devuelve 23.12&lt;/p&gt;
&lt;p&gt;Otras funciones útiles son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;isNaN(valor)&lt;/strong&gt;: nos dice si el valor pasado es un número (false) o no (true)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;isFinite(valor)&lt;/strong&gt;: devuelve &lt;em&gt;true&lt;/em&gt; si el valor es finito (no es &lt;em&gt;Infinity&lt;/em&gt; ni &lt;em&gt;-Infinity&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;parseInt(valor)&lt;/strong&gt;: convierte el valor pasado a un número entero. Siempre que compience por un número la conversión se podrá hacer. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;parseInt(3.65)      // Devuelve 3
parseInt(&#39;3.65&#39;)    // Devuelve 3
parseInt(&#39;3 manzanas&#39;)    // Devuelve 3, Number devolvería NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;parseFloat(valor)&lt;/strong&gt;: como la anterior pero conserva los decimales&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: al sumar floats podemos tener problemas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(0.1 + 0.2)    // imprime 0.30000000000000004
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para evitarlo redondead los resultados (o &lt;code&gt;(0.1*10 + 0.2*10) / 10&lt;/code&gt;).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Modifica la funciónque quieras de calcular la nota media para que devuelva la media con 1 decimal&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Modifica la función que devuelve el cubo de un número para que compruebe si el parámetro pasado es un número entero. Si no es un entero o no es un número mostrará un alert indicando cuál es el problema yndevolverá false.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;string&quot; tabindex=&quot;-1&quot;&gt;String&lt;/h3&gt;
&lt;p&gt;Las cadenas de texto van entre comillas simples o dobles, es indiferente. Podemos escapar un caràcter con &#92; (ej. &lt;code&gt;&#39;Hola &#92;&#39;Mundo&#92;&#39;&#39;&lt;/code&gt; devuelve &lt;em&gt;Hola &#39;Mundo&#39;&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Para forzar la conversión a cadena se usa la función &lt;strong&gt;String(valor)&lt;/strong&gt; (ej. &lt;code&gt;String(23)&lt;/code&gt; devuelve &#39;23&#39;)&lt;/p&gt;
&lt;p&gt;El operador de concatenación de cadenas es &lt;strong&gt;+&lt;/strong&gt;. Ojo porque si pedimos un dato con &lt;em&gt;prompt&lt;/em&gt; siempre devuelve una cadena así que si le pedimos la edad al usuario (por ejemplo 20) y se sumamos 10 tendremos 2010 (&#39;20&#39;+10).&lt;/p&gt;
&lt;p&gt;Algunos métodos y propiedades de las cadenas son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.length&lt;/strong&gt;: devuelve la longitud de una cadena. Ej.: &lt;code&gt;&#39;Hola mundo&#39;.length&lt;/code&gt; devuelve 10&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.charAt(posición)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.charAt(0)&lt;/code&gt; devuelve &#39;H&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.indexOf(carácter)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.indexOf(&#39;o&#39;)&lt;/code&gt; devuelve 1. Si no se encuentra devuelve -1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.lastIndexOf(carácter)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.lastIndexOf(&#39;o&#39;)&lt;/code&gt; devuelve 9&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.substring(desde, hasta)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.substring(2,4)&lt;/code&gt; devuelve &#39;la&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.substr(desde, num caracteres)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.substr(2,4)&lt;/code&gt; devuelve &#39;la m&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.replace(busco, reemplaza)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.replace(&#39;Hola&#39;, &#39;Adiós&#39;)&lt;/code&gt; devuelve &#39;Adiós mundo&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toLocaleLowerCase()&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.toLocaleLowerCase()&lt;/code&gt; devuelve &#39;hola mundo&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.toLocaleUpperCase()&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.toLocaleUpperCase()&lt;/code&gt; devuelve &#39;HOLA MUNDO&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.localeCompare(cadena)&lt;/strong&gt;: devuelve -1 si la cadena a que se aplica el método es anterior alfabéticamente a &#39;cadena&#39;, 1 si es posterior y 0 si ambas son iguales. Tiene en cuenta caracteres locales como acentos ñ, ç, etc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.trim(cadena)&lt;/strong&gt;: &lt;code&gt;&#39;   Hola mundo   &#39;.trim()&lt;/code&gt; devuelve &#39;Hola mundo&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.startsWith(cadena)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.startsWith(&#39;Hol&#39;)&lt;/code&gt; devuelve &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.endsWith(cadena)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.endsWith(&#39;Hol&#39;)&lt;/code&gt; devuelve &lt;em&gt;false&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.includes(cadena)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.includes(&#39;mun&#39;)&lt;/code&gt; devuelve &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.repeat(veces)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.repeat(3)&lt;/code&gt; devuelve &#39;Hola mundoHola mundoHola mundo&#39;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.split(sepadaror)&lt;/strong&gt;: &lt;code&gt;&#39;Hola mundo&#39;.split(&#39; &#39;)&lt;/code&gt; devuelve el array [&#39;Hola&#39;, &#39;mundo&#39;]. &lt;code&gt;&#39;Hola mundo&#39;.split(&#39;&#39;)&lt;/code&gt; devuelve el array [&#39;H&#39;, &#39;o&#39;, &#39;l&#39;, &#39;a&#39;, &#39; &#39;, &#39;m&#39;, &#39;u&#39;, &#39;n&#39;, &#39;d&#39;, &#39;o&#39;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos probar los diferentes métodos en la página de &lt;a href=&quot;https://www.w3schools.com/jsref/jsref_obj_string.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz una función a la que se le pasa un DNI (ej. 12345678w o 87654321T) y devolverá si es correcto o no. La letra que debe corresponder a un DNI correcto se obtiene dividiendo la parte numérica entre 23 y cogiendo de la cadena &#39;TRWAGMYFPDXBNJZSQVHLCKE&#39; la letra correspondiente al resto de la divisón. Por ejemplo, si el resto es 0 la letra será la T y si es 4 será la G. Prueba la función en la consola con tu DNI&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;template-literals&quot; tabindex=&quot;-1&quot;&gt;Template literals&lt;/h4&gt;
&lt;p&gt;Desde ES2015 también podemos poner una cadena entre ` (acento grave) y en ese caso podemos poner dentro variables y expresiones que serán evaluadas al ponerlas dentro de &lt;strong&gt;${}&lt;/strong&gt;. También se respetan los saltos de línea, tabuladores, etc que haya dentro. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let edad=25;

console.log(&#92;`El usuario tiene:
${edad} años&#92;`) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mostrará en la consola:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;El usuario tiene:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;25 años&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;boolean&quot; tabindex=&quot;-1&quot;&gt;Boolean&lt;/h3&gt;
&lt;p&gt;Los valores booleanos son &lt;strong&gt;true&lt;/strong&gt; y &lt;strong&gt;false&lt;/strong&gt;. Para convertir algo a booleano se usar &lt;strong&gt;Boolean(valor)&lt;/strong&gt; aunque también puede hacerse con la doble negación (&lt;strong&gt;!!&lt;/strong&gt;). Cualquier valor se evaluará a &lt;em&gt;true&lt;/em&gt; excepto 0, NaN, null, undefined o una cadena vacía (&#39;&#39;) que se evaluarán a &lt;em&gt;false&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Los operadores lógicos son ! (negación), &amp;amp;&amp;amp; (and), || (or).&lt;/p&gt;
&lt;p&gt;Para comparar valores tenemos &lt;strong&gt;==&lt;/strong&gt; y &lt;strong&gt;===&lt;/strong&gt;. La triple igualdad devuelve &lt;em&gt;true&lt;/em&gt; si son igual valor y del mismo tipo. Como Javascript hace conversiones de tipos automáticas conviene usar la &lt;strong&gt;===&lt;/strong&gt; para evitar cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#39;3&#39; == 3&lt;/code&gt; true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 == 3.0&lt;/code&gt; true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0 == false&lt;/code&gt; true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39;&#39; == false&lt;/code&gt; true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#39; &#39; == false&lt;/code&gt; true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[] == false&lt;/code&gt; true&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null == false&lt;/code&gt; false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined == false&lt;/code&gt; false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined == null&lt;/code&gt; true&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También tenemos 2 operadores de &lt;em&gt;diferente&lt;/em&gt;: &lt;strong&gt;!=&lt;/strong&gt; y &lt;strong&gt;!==&lt;/strong&gt; que se comportan como hemos dicho antes.&lt;/p&gt;
&lt;p&gt;Los operadores relacionales son &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=. Cuando se compara un número y una cadena ésta se convierte a número y no al revés (&lt;code&gt;23 &amp;gt; &#39;5&#39;&lt;/code&gt; devuelve &lt;em&gt;true&lt;/em&gt;, aunque &lt;code&gt;&#39;23&#39; &amp;gt; &#39;5&#39;&lt;/code&gt; devuelve &lt;em&gt;false&lt;/em&gt;)&lt;/p&gt;
&lt;h2 id=&quot;manejo-de-errores&quot; tabindex=&quot;-1&quot;&gt;Manejo de errores&lt;/h2&gt;
&lt;p&gt;Si sucede un error en nuestro código el programa dejará de ejecutarse por lo que el usuario tendrá la sensación de que no hace nada (el error sólo se muestra en la consola y el usuario no suele abrirla nunca). Para evitarlo es crucial capturar los posibles errores de nuestro código antes de que se produzcan.&lt;/p&gt;
&lt;p&gt;En javascript (como en muchos otros lenguajes) el manejo de errores se realiza con sentencias&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
    ...
} 
catch(error) {
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dentro del bloque &lt;em&gt;try&lt;/em&gt; ponemos el código que queremos proteger y cualquier error producido en él será pasado al bloque &lt;em&gt;catch&lt;/em&gt; donde es tratado. Opcionalmente podemos tener al final un bloque &lt;em&gt;finally&lt;/em&gt; que se ejecuta tanto si se produce un error como si no. El parámetro que recibe &lt;em&gt;catch&lt;/em&gt; es un objeto de tipo &lt;code&gt;Error&lt;/code&gt; con propiedades como &lt;em&gt;name&lt;/em&gt;, que indica el tipo de error (&lt;em&gt;SyntaxError&lt;/em&gt;, &lt;em&gt;RangeError&lt;/em&gt;, ... o el genérico &lt;em&gt;Error&lt;/em&gt;), o &lt;em&gt;message&lt;/em&gt;, que indica el texto del error producido.&lt;/p&gt;
&lt;p&gt;En ocasiones podemos querer que nuestro código genere un error. Esto evita que tengamos que comprobar si el valor devuelto por una función es el adecuado o es un código de error. Por ejemplo tenemos una función para retirar dinero de una cuenta que recibe el saldo de la misma y la cantdad de dinero a retirar y devuelve el nuevo saldo, pero si no hay suficiente saldo no debería restar nada sino mostrar un mensaje al usuario. Sin gestión de errores haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function retirar(saldo, cantidad) {
  if (saldo &amp;lt; cantidad) {
    return false
  }
  return saldo - cantidad
} 

// Y donde se llama a la función_
...
resultado = retirar(saldo, importe)
if (resultado === false
  alert(&#39;Saldo insuficiente&#39;)
} else {
  saldo = resultado
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se trata de un código poco claro que podemos mejorar lanzando un error en la función. Para ello se utiliza la instrucción &lt;code&gt;throw&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  if (saldo &amp;lt; cantidad) {
    throw &#39;Saldo insuficiente&#39;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por defecto al lanzar un error este será de clase &lt;em&gt;Error&lt;/em&gt; (el código anterior es equivalente a &lt;code&gt;throw new Error(&#39;Saldo insuficiente&#39;)&lt;/code&gt;) aunque podemos lanzarlo de cualquier otra clase (&lt;code&gt;throw new RangeError(&#39;Saldo insuficiente&#39;)&lt;/code&gt;) o personalizarlo.&lt;/p&gt;
&lt;p&gt;Siempre que vayamos a ejecutar código que pueda generar un error debemos ponerlo dentro de un bloque &lt;em&gt;try&lt;/em&gt; por lo que la llamada a la función que contiene el código anterior debería estar dentro de un &lt;em&gt;try&lt;/em&gt;. El código del ejemplo anterior quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function retirar(saldo, cantidad) {
  if (saldo &amp;lt; cantidad) {
    throw &amp;quot;Saldo insuficiente&amp;quot;
  }
  return saldo - cantidad
} 

// Siempre debemos llamar a esa función desde un bloque _try_
...
try {
  saldo = retirar(saldo, importe)
} catch(err) {
  alert(err)
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver en detalle cómo funcionan en la página de &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/try...catch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; de Mozilla.&lt;/p&gt;
&lt;h2 id=&quot;buenas-practicas&quot; tabindex=&quot;-1&quot;&gt;Buenas prácticas&lt;/h2&gt;
&lt;p&gt;Javascript nos permite hacer muchas cosas que otros lenguajes no nos dejan por lo que debemos ser cuidadosos para no cometer errores de los que no se nos va a avisar.&lt;/p&gt;
&lt;h3 id=&quot;use-strict&quot; tabindex=&quot;-1&quot;&gt;&#39;use strict&#39;&lt;/h3&gt;
&lt;p&gt;Si ponemos siempre esta sentencia al principio de nuestro código el intérprete nos avisará si usamos una variale sin declarar (muchas veces por equivocarnos al escrbir su nombre). En concreto fuerza al navegador a no permitir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Usar una variable sin declarar&lt;/li&gt;
&lt;li&gt;Definir más de 1 vez una propiedad de un objeto&lt;/li&gt;
&lt;li&gt;Duplicar un parámetro en una función&lt;/li&gt;
&lt;li&gt;Usar números en octal&lt;/li&gt;
&lt;li&gt;Modificar una propiedad de sólo lectura&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;variables-1&quot; tabindex=&quot;-1&quot;&gt;Variables&lt;/h3&gt;
&lt;p&gt;Algunas de las prácticas que deberíamos seguir respecto a las variables son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elegir un buen nombre es fundamental. Evitar abreviaturas o nombres sin significado (a, b, c, ...)&lt;/li&gt;
&lt;li&gt;Evitar en lo posible variables globales&lt;/li&gt;
&lt;li&gt;Usar &lt;em&gt;let&lt;/em&gt; para declararlas&lt;/li&gt;
&lt;li&gt;Usar &lt;em&gt;const&lt;/em&gt; siempre que una variable no deba cambiar su valor&lt;/li&gt;
&lt;li&gt;Declarar todas las variables al principio&lt;/li&gt;
&lt;li&gt;Inicializar las variables al declararlas&lt;/li&gt;
&lt;li&gt;Evitar conversiones de tipo automáticas&lt;/li&gt;
&lt;li&gt;Usar para nombrarlas la notación &lt;em&gt;camelCase&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También es conveniente, por motivos de eficiencia no usar objetos Number, String o Boolean sino los tipos primitivos (no usar &lt;code&gt;let numero = new Number(5)&lt;/code&gt; sino &lt;code&gt;let numero = 5&lt;/code&gt;) y lo mismo al crear arrays, objetos o expresiones regulares (no usar &lt;code&gt;let miArray = new Array()&lt;/code&gt; sino &lt;code&gt;let miArray = []&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;otras&quot; tabindex=&quot;-1&quot;&gt;Otras&lt;/h3&gt;
&lt;p&gt;Algunas reglas más que deberíamos seguir son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debemos ser coherentes a la hora de escribir código: por ejemplo podemos poner (recomendado) o no espacios antes y después del &lt;code&gt;=&lt;/code&gt; en una asignación pero debemos hacerlo siempre igual. Existen muchas guías de estilo y muy buenas: &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Airbnb&lt;/a&gt;, &lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google&lt;/a&gt;, &lt;a href=&quot;https://github.com/rwaldron/idiomatic.js&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Idiomatic&lt;/a&gt;, etc. Para obligarnos a seguir las reglas podemos usar alguna herramienta &lt;a href=&quot;https://www.codereadability.com/what-are-javascript-linters/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;linter&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;También es conveniente para mejorar la legibilidad de nuestro código separar las líneas de más de 80 caracteres.&lt;/li&gt;
&lt;li&gt;Usar &lt;code&gt;===&lt;/code&gt; en las comparaciones&lt;/li&gt;
&lt;li&gt;Si un parámetro puede faltar al llamar a una función darle un valor por defecto&lt;/li&gt;
&lt;li&gt;Y para acabar &lt;strong&gt;comentar el código&lt;/strong&gt; cuando sea necesario, pero mejor que sea lo suficientemente claro como para no necesitar comentarios&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;clean-code&quot; tabindex=&quot;-1&quot;&gt;Clean Code&lt;/h2&gt;
&lt;p&gt;Estas y otras muchas recomendaciones se recogen el el libro &lt;a href=&quot;https://books.google.es/books?id=hjEFCAAAQBAJ&amp;amp;dq=isbn:9780132350884&amp;amp;hl=es&amp;amp;sa=X&amp;amp;ved=0ahUKEwik8cfJwdLpAhURkhQKHcWBAxgQ6AEIJjAA&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clean Code&lt;/a&gt; de &lt;em&gt;Robert C. Martin&lt;/em&gt; y en muchos otros libros y articulos. Aquí tenéis un pequeño resumen traducido al castellano:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/devictoribero/clean-code-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/devictoribero/clean-code-javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/javascript-teoria-batoi/01-sintaxis/" >
        </entry>
        <entry>
            <title>
                Ingles
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/ingles/ingles/</id>
            <content type="html">
                &lt;p&gt;Profesor:&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/ingles/ingles/" >
        </entry>
        <entry>
            <title>
                Indice
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/</id>
            <content type="html">
                &lt;p&gt;Asignaturas&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/ingles/ingles/&quot;&gt;Ingles&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Horario:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Hora&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Lunes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Martes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Miercoles&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Jueves&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Viernes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14:55 - 15:50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Empresa&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Empresa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15:50 - 16:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Empresa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16:45 - 17:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Tutoria&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/ingles/ingles/&quot;&gt;Ingles&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;17:40 - 18:00&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18:00 - 18:55&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/ingles/ingles/&quot;&gt;Ingles&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18:55 - 19:50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19:50 - 20:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20:45 - 21:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

            </content>
            <link href="https://pedroporo.github.io/" >
        </entry>
        <entry>
            <title>
                Diseño de interfaces WEB
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/</id>
            <content type="html">
                &lt;p&gt;Hola Diseño&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/diseno-de-interfaces-web/diseno-de-interfaces-web/" >
        </entry>
        <entry>
            <title>
                Despliegue de aplicaciones WEB
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/</id>
            <content type="html">
                &lt;p&gt;Hola despliege&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/" >
        </entry>
        <entry>
            <title>
                Desarollo Web en entorno servidor
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://github.com/cipfpbatoi/dwes2324&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pagina de github de los apuntes&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/" >
        </entry>
        <entry>
            <title>
                Desarollo Web en entorno cliente
                
            </title>
            <updated>2024-10-15T18:18:20Z</updated>
            <id>https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/</id>
            <content type="html">
                &lt;pre&gt;&lt;code class=&quot;language-button&quot;&gt;type note(function(){return this.inputEl.value}) template
action Sin título
templater true
```{ &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#button-km7s&quot;&gt;#button-km7s&lt;/a&gt;}


[Pagina de github de los apuntes](https://github.com/cipfpbatoi/materials)
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/notas/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/" >
        </entry>
</feed>
