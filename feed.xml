<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://pedroporo.github.io">
    <title>Notas de pedro</title>
    <link href="https://pedroporo.github.io/feed.xml" rel="self" >
    <link href="https://pedroporo.github.io" >
    <updated>2025-09-15T16:35:46Z</updated>
    <id>https://pedroporo.github.io</id>
        <entry>
            <title>
                90-tdd
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/90-tdd/</id>
            <content type="html">
                &lt;h1 id=&quot;desarrollo-guiado-por-pruebas-tdd&quot; tabindex=&quot;-1&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/h1&gt;
&lt;p&gt;Es una forma de programar que consiste en escribir primero las pruebas que deba pasar el código (Test Dirve Development) y después refactorizarlo (&lt;a href=&quot;https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Refactoring&lt;/a&gt;). Para escribir las pruebas generalmente se utilizan las &lt;a href=&quot;https://es.wikipedia.org/wiki/Prueba_unitaria&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pruebas unitarias&lt;/a&gt; (unit test en inglés).&lt;/p&gt;
&lt;p&gt;El ciclo de programación usando TDD tiene tres fases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fase &lt;em&gt;roja&lt;/em&gt;: escribimos el test que cumpla los requerimientos y lo pasamos. Fallará ya que nuestro código no pasa el est (de hecho la primera vez no tenemos ni código)&lt;/li&gt;
&lt;li&gt;Fase &lt;em&gt;verde&lt;/em&gt;: conseguimos que nuestro código pase el test. Ya funciona aunque seguramente no estará muy bien escrito&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactorización&lt;/em&gt;: mejoramos nuestro código&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente y seguidamente se refactoriza el código escrito. El propósito del desarrollo guiado por pruebas es lograr un código limpio que funcione. La idea es que los requisitos sean traducidos a pruebas, de este modo, cuando las pruebas pasen se garantizará que el software cumple con los requisitos que se han establecido.&lt;/p&gt;
&lt;p&gt;Para ello debemos en primer lugar se debe definir una lista de requisitos y después se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elegir un requisito: Se elige de una lista el requisito que se cree que nos dará mayor conocimiento del problema y que a la vez sea fácilmente implementable.&lt;/li&gt;
&lt;li&gt;Escribir una prueba: Se comienza escribiendo una prueba para el requisito. Para ello el programador debe entender claramente las especificaciones y los requisitos de la funcionalidad que está por implementar. Este paso fuerza al programador a tomar la perspectiva de un cliente considerando el código a través de sus interfaces.&lt;/li&gt;
&lt;li&gt;Verificar que la prueba falla: Si la prueba no falla es porque el requisito ya estaba implementado o porque la prueba es errónea.&lt;/li&gt;
&lt;li&gt;Escribir la implementación: Escribir el código más sencillo que haga que la prueba funcione. Se usa la expresión &amp;quot;Déjelo simple&amp;quot; (&amp;quot;Keep It Simple, Stupid!&amp;quot;), conocida como principio KISS.&lt;/li&gt;
&lt;li&gt;Ejecutar las pruebas automatizadas: Verificar si todo el conjunto de pruebas funciona correctamente.&lt;/li&gt;
&lt;li&gt;Eliminación de duplicación: El paso final es la refactorización, que se utilizará principalmente para eliminar código duplicado. Se hace un pequeño cambio cada vez y luego se corren las pruebas hasta que funcionen.&lt;/li&gt;
&lt;li&gt;Actualización de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado. Asimismo se agregan requisitos que se hayan visto como necesarios durante este ciclo y se agregan requisitos de diseño (P. ej que una funcionalidad esté desacoplada de otra).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tener un único repositorio universal de pruebas facilita complementar TDD con otra práctica recomendada por los procesos ágiles de desarrollo, la &amp;quot;Integración Continua&amp;quot;. Integrar continuamente nuestro trabajo con el del resto del equipo de desarrollo permite ejecutar toda batería de pruebas y así descubrir si nuestra última versión es compatible con el resto del sistema. Es recomendable y menos costoso corregir pequeños problemas cada pocas horas que enfrentarse a problemas enormes cerca de la fecha de entrega fijada.&lt;/p&gt;
&lt;p&gt;(Fuente &lt;a href=&quot;https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;usar-tdd-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Usar TDD en Javascript&lt;/h2&gt;
&lt;p&gt;Lo más sencillo es usar alguna librería como &lt;strong&gt;Mocha&lt;/strong&gt;. Se trata de un gramework que se ejecuta sobre &lt;em&gt;Node.js&lt;/em&gt; y permite crear tests tanto síncronos como asíncronos. Para usarlo necesitaremos tener &lt;strong&gt;npm&lt;/strong&gt; instalado. Luego creamos una carpeta para nuestro proyecto y dentro ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g mocha    # lo instalamos globalmente para que esté disponible para todos los proyectos
npm init                # crea en el directorio el package.json
npm install chai     # en vez de chai podríamos usar assert, should, etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La librería &lt;em&gt;Chai&lt;/em&gt; permite 3 tipos de sentencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts&lt;/li&gt;
&lt;li&gt;expects&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros vamos a usar &lt;em&gt;asserts&lt;/em&gt; por lo que es lo que deberemos importar en los ficheros de tests.&lt;/p&gt;
&lt;p&gt;Dentro de nuestro proyecto crearemos una carpeta donde guardaremos los ficheros JS de los tests (podemos llamarla &#39;&lt;em&gt;tests&lt;/em&gt;&#39;) y en cada fichero importaremos &lt;em&gt;chai&lt;/em&gt; y los ficheros necesarios. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;tests/store.specs.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const Store = require(&#39;../store.class.js&#39;);

describe(&#39;Store&#39;, () =&amp;gt; {

	it(&#39;should had an integer id&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.id, &#39;integer&#39;, &#39;La id no es un entero&#39;)
	});

	it(&#39;should had an empty array of products&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.products, &#39;array&#39;, &#39;Products no es un array&#39;)
		assert.lengthOf(foo.products, 0, &#39;Products no es un array vacío&#39;)
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder importar un módulo con &lt;em&gt;require&lt;/em&gt; debemos haberlo exprtado previamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;store.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Store {
    constructor (id) {
        this.id=id;
        this.products=[];
    }
    ...
}
 module.exports = Store;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ejecutar todos los tests de nuestro proyecto ejecutaremos desde la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si sólo queremos pasar uno lo indicamos en el comando: &lt;code&gt;mocha tests/store.specs.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos hacer que &lt;em&gt;mocha&lt;/em&gt; escuche en segundo plano y se ejecute automáticamente cada vez que hacemos algún cambio en un fichero con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;el-fichero-de-tests&quot; tabindex=&quot;-1&quot;&gt;El fichero de tests&lt;/h2&gt;
&lt;p&gt;Debemos importar le librería &lt;em&gt;Chai&lt;/em&gt; y el fichero con el código a testear como hemov visto antes. El fichero con el código que debe exportar la clase o función que contiene con &lt;code&gt;module.exports&lt;/code&gt;. Si queremos exportar varias funciones exportaremos un objeto con todas ellas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;module.exports = {
    addItem,
    removeItem
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras importar los ficheros pondremos el &lt;em&gt;describe&lt;/em&gt; y los bloques &lt;em&gt;it&lt;/em&gt; que queramos y dentro de cada uno los &lt;em&gt;aasert&lt;/em&gt; necesarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const index = require(&#39;../index.js&#39;);

describe(&#39;manage items&#39;, () =&amp;gt; {
	it(&#39;add a new item&#39;, function() {
		let myItem = ...;
		assert.typeOf(item, &#39;object&#39;, &#39;No crea un objeto sino &#39;+typeof(item) );
		assert.equal(item.units, 0);
	});
	
	if (&#39;change an item () =&amp;gt; {
	...
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;algunas-sentecias-em-assert-em&quot; tabindex=&quot;-1&quot;&gt;Algunas sentecias &lt;em&gt;assert&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Estas&lt;br /&gt;
Aquí tenéis un pequeño resumen de algunas de las sentencias que podemos usar. Recordad que todas pueden tener un último parámetro opcional que es un mensaje a mostrar en caso de que falle esta comprobación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.equal(actual, esperado): comprueba que sea el mismo valor, pero sin comprobar los tupos (usa ==, no ===)&lt;/li&gt;
&lt;li&gt;.notEqual(actual, esperado)&lt;/li&gt;
&lt;li&gt;.strictEqual, .notStrictEqual: igual pero hace la compribaciónestricta (===)&lt;/li&gt;
&lt;li&gt;.deepEqual, notDeepEqual: hace una comprobación de cada propiedad del objeto pasado&lt;/li&gt;
&lt;li&gt;.match(valor, regexp), .notMatch: comprueba si el valor cumple o no la expresión regular pasada&lt;/li&gt;
&lt;li&gt;.isAbove(actual, esperado): comprueba que actual &amp;gt; esperado&lt;/li&gt;
&lt;li&gt;.isAtLeast(actual, esperado): comprueba que actual &amp;gt;= esperado&lt;/li&gt;
&lt;li&gt;.isBelow, .isAtMost: comprueba que sea &amp;lt; o &amp;lt;= respectivamente&lt;/li&gt;
&lt;li&gt;.isTrue, .isNotTrue, .isFalse, .isNotFalse, .isNull, .isNotNull, .isUndefined, .isDefined, .isNaN, .isNotNaN, .isFunction, .isNotFunction, .isObject, .isNotObject, .isArray, .isNotArray, .isString, .isNotString, .isNumber, .isNotNumber, .isBoolean, .isNotBoolean, .isFinite&lt;/li&gt;
&lt;li&gt;.exists(valor), .notExists: comprueba que valor no sea (o sea) &lt;em&gt;null&lt;/em&gt; o &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;.typeOf(valor, tipo), .notTypeOf: indica si valor es o no del tipo indicado, que puede ser &#39;string&#39;, &#39;number&#39;, boolean&#39;, &#39;array&#39;, &#39;object&#39;, &#39;null&#39;, &#39;undefined&#39;, &#39;regexp&#39;, ...&lt;/li&gt;
&lt;li&gt;.instanceOf(objeto, Clase), .notInstanceOf: indica si un objeto es o no una instancia de la clase indicada&lt;/li&gt;
&lt;li&gt;.include(string/array/objeto, substring/elemento/propiedad:valor): comprueba si la subcadena existe en el string o el elemento se encuentra en el array (usa =&lt;mark&gt;) o si existe la propiedad o propiedades pasadas y su valor es estrictamente (&lt;/mark&gt;=) igual al indicado.&lt;/li&gt;
&lt;li&gt;.notInclude&lt;/li&gt;
&lt;li&gt;.property(objeto, propiedad), .notProperty: comprueba si el objeto posee o no la propiedad pasada&lt;/li&gt;
&lt;li&gt;.lengthOf(string/array, num): comprueba que la longitud de la cadena o el array sea la indicada&lt;/li&gt;
&lt;li&gt;.isEmpty(string/array/object), .isNotEmpty: comprueba que la cadena sea &#39;&#39;, el array [] o el objeto {}, o no.&lt;/li&gt;
&lt;li&gt;.throws(funcion, [errorLike/string], [string]): para comprobar que la función lanza un error del tipo indicado (TypeError, RangeError, ...) e incluso con el mensaje indicado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la [página de &lt;em&gt;Chai&lt;/em&gt;])&lt;a href=&quot;https://www.chaijs.com/api/assert/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.chaijs.com/api/assert/&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tests-de-funciones-asincronas-con-promesas&quot; tabindex=&quot;-1&quot;&gt;Tests de funciones asíncronas con promesas&lt;/h2&gt;
&lt;p&gt;Si hacemos llamadas asíncronas Mocha permite testearlas tras el .then o el .catch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;API de artículos&#39;, () =&amp;gt; {
	it(&#39;should return the article 3&#39;, function() {
		return getArticulo(3)
			.then(art =&amp;gt; {
				assert.instanceOf(art, Articulos);
				assert.equal(art.id, 3);
			})
	});
	it(&#39;should return an error&#39;, function() {
		return getArticulo(undefined)
			.catch(err =&amp;gt; {
				...
			})
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-hooks-em-de-mocha&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Hooks&lt;/em&gt; de Mocha&lt;/h2&gt;
&lt;p&gt;Nos permiten ejecutar código en momentos puntuales. Reciben como parámetro la función a ejecutar. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before(): el código se ejecutará una vez antes del primer test del bloque &lt;em&gt;describe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;beforeEach(): se ejecutará antes de cada test&lt;/li&gt;
&lt;li&gt;after(), afterEach(): lo mismo pero tras ejecutar los tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tests-para-la-ui&quot; tabindex=&quot;-1&quot;&gt;Tests para la UI&lt;/h2&gt;
&lt;p&gt;Necesitaremos alguna librería que nos permita contruir escenarios de navegación como &lt;em&gt;CasperJS&lt;/em&gt; y otra que imite al navegador como &lt;em&gt;PhantomJS&lt;/em&gt; (para WebKit) o &lt;em&gt;SlimerJS&lt;/em&gt; (para Gecko).&lt;/p&gt;
&lt;p&gt;Hay muchas páginas que nos enseñan a usar Mocha para testear la UI como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/ykyuen/web-ui-testing-in-nodejs--kda&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web UI Testing in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/nilayshah/2018/01/21/ui-test-automation-with-node-js-typescript-mocha-and-selenium/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UI Test Automation with Node.js, TypeScript, Mocha and Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itnext.io/automated-ui-testing-with-selenium-and-javascript-90bbe7ca13a3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI Testing with Selenium and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tariqul.islam.rony/automated-ui-ux-testing-with-puppeteer-mocha-and-chai-800cfb028ab9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI/UX Testing with Puppeteer Mocha and Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/90-tdd/" >
        </entry>
        <entry>
            <title>
                21-typescript
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/21-typescript/</id>
            <content type="html">
                &lt;h1 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;Typescript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript en Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos de datos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#definir-variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Definir variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-custom-types&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear &lt;em&gt;custom types&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#interfaces&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creaci%C3%B3n-autom%C3%A1tica-de-interfaces&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creación automática de interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-gen%C3%A9ricos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos genéricos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#clases&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#decoradores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Decoradores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Es un lenguaje basado el Javascript al que le ha añadido definiciones de tipos estáticas y alguna característica más.&lt;/p&gt;
&lt;p&gt;El hecho de que Javascript permite cambiar dinámicamente el tipo de datos de una variable da lugar a veces a resultados inesperados y dificulta la localización de errores derivados de un uso no adecuado de esto.&lt;/p&gt;
&lt;p&gt;Typescript obliga a definir el tipo de datos de una variable e impide cambiarlo (como sucede en la mayoría de lenguajes de programación) lo que nos obliga a escribir un código más consistente. Esto es especialmente importante en proyectos grandes o en los que colaboran muchos programadores.&lt;/p&gt;
&lt;h2 id=&quot;typescript-en-vue&quot; tabindex=&quot;-1&quot;&gt;Typescript en Vue&lt;/h2&gt;
&lt;p&gt;El soporte de Typescript en Vue 3 es total ya que este framework ha sido totalmente reescrito en este lenguaje. Cuando creamos un nuevo proyecto una de las opciones que podemos marcar es &lt;em&gt;Typescript&lt;/em&gt; con lo que ya tendremos todo preparado para utilizar este lenguaje en nuestro proyecto. Veremos que al crearse el proyecto el fichero &lt;code&gt;main.js&lt;/code&gt; ahora se llama &lt;strong&gt;&lt;code&gt;main.ts&lt;/code&gt;&lt;/strong&gt;. Además se crea un nuevo fichero llamado &lt;code&gt;tsconfig.json&lt;/code&gt; con configuraciones por defecto para Typescript.&lt;/p&gt;
&lt;p&gt;Si queremos añadir Typescript a un proyecto ya existente lo añadiremos como &lt;em&gt;plugin&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vue add typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al hacerlo nos pregunta, entre otras cosas, si queremos convertir todos nuestros ficheros &lt;em&gt;.js&lt;/em&gt; a &lt;em&gt;.ts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para usar TS en un componente tenemos que indicarlo en la etiqueta &amp;lt;script&amp;gt; e importar &lt;em&gt;defineComponent&lt;/em&gt; para transformar el objeto que exportamos. Con Javascript definimos un SFC con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
  name: ...,
  ...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto con Typescript se haría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script lang=&amp;quot;ts&amp;quot;&amp;gt;
import { defineComponent } from &#39;vue&#39;

export default defineComponent({
  name: ...,
  ...
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No es necesario que todos los componentes estén en Typescript(o Javascript) sino que cada uno puede ser diferente.&lt;/p&gt;
&lt;h2 id=&quot;tipos-de-datos&quot; tabindex=&quot;-1&quot;&gt;Tipos de datos&lt;/h2&gt;
&lt;p&gt;Los tipos de datos que podemos encontrar en Javascript son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Tuple (como un array con un número fijo de elementos)&lt;/li&gt;
&lt;li&gt;Enum (permite asignar nombres &lt;em&gt;amigables&lt;/em&gt; a conjuntos de números)&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Any (puede ser de cualquier tipo)&lt;/li&gt;
&lt;li&gt;Void (se aplica a funciones que no devuelven nada)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;definir-variables&quot; tabindex=&quot;-1&quot;&gt;Definir variables&lt;/h2&gt;
&lt;p&gt;El tipo de datos de una variable lo indicamos al definirla con el caràcter &lt;code&gt;:&lt;/code&gt; (dos puntos):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let title: string = &#39;Aprende Typescript&#39;
let numPages: number = 100
let isFree: boolean = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En los arrays debemos indicar el tipo de datos de los elementos del array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let lenguajes: string[] = [&#39;Typescript&#39;, &#39;Javascript&#39;, &#39;PHP&#39;]
let notes: number[] = [3, 4.5, 7, 4, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Respecto a los objetos hay que definir el tipo de cada propiedad y a continuación asignarles su valor&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let Student: {
  name: string;
  age: number;
  modules: string[];
} = {
  name: &#39;Peter Parker&#39;,
  age: 20,
  modules: [&#39;DWEC&#39;, &#39;DWES&#39;, &#39;DAW&#39;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en las funciones debemos indicar el tipo de datos de sus parámetros y de la propia función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let getFullName = (firstName: string, lastName: string): string =&amp;gt; {
  return firstName + &#39; &#39; + lastName
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crear-em-custom-types-em&quot; tabindex=&quot;-1&quot;&gt;Crear &lt;em&gt;custom types&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Podemos definir nuestros propios tipos de datos. Por ejemplo crearemos un tipo para los valores permitidos para la clase de un botón:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type buttonType = &#39;primary&#39; | &#39;secondary&#39; | &#39;success&#39; | &#39;danger&#39;

let myBtnStyle: buttonType = &#39;danger&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si le asigno un valor que no es uno de los definidos en su tipo se producirá un error.&lt;/p&gt;
&lt;h3 id=&quot;interfaces&quot; tabindex=&quot;-1&quot;&gt;interfaces&lt;/h3&gt;
&lt;p&gt;Una interface es la definición de los tipos de datos de un objeto, para evitar definirlo como hemos visto antes que es demasiado &lt;em&gt;verbose&lt;/em&gt;. Por tanto es como definir nu nuevo tipo de datos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type Modules = &#39;DWEC&#39; | &#39;DWES&#39; |&#39;DIW&#39; |&#39;DAW&#39; | &#39;EIE&#39; | &#39;Inglés&#39;

interface Student {
  name: string;
  age: number;
  modules: Modules[];   // o también modules: Array&amp;lt;Modules&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos centralizar todas las &lt;em&gt;interfaces&lt;/em&gt; que se usan en más de un componente en un fichero al que podemos llamar &lt;code&gt;src/types.ts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type Modules = &#39;DWEC&#39; | &#39;DWES&#39; |&#39;DIW&#39; |&#39;DAW&#39; | &#39;EIE&#39; | &#39;Inglés&#39;

export interface Student {
  name: string;
  age: number;
  modules: Modules[];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A veces definimos un objeto vacío pero que cuando tenga datos será de cierto tipo. Para que Typescript no piense que se trata de un objeto sin propiedades lo definiremos con &lt;code&gt;as&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let futureStudent = {} as Student
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos permitirá hacer cosas como &lt;code&gt;futureStudent.name = &#39;Peter Parker&#39;&lt;/code&gt; sin que se produzcan errores de tipo. A esto se llama &lt;strong&gt;&lt;em&gt;type assertions&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Si se quiere aplicar un tipo propio a una variable pasada por &lt;em&gt;props&lt;/em&gt; debemos importar el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;&lt;em&gt;PropType&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import { defineComponent, PropType } from &#39;vue&#39;

export default defineComponent({
  props: {
    Student: {
      type: Object as PropType&amp;lt;Student&amp;gt;,
      required: true
    }
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para centralizar la definición de tipos se suelen incluir todos los tipos e interfaces en un fichero que llamaremos &lt;code&gt;src/types.ts&lt;/code&gt;. Deberemos exportar los tipos y/o interfaces.&lt;/p&gt;
&lt;p&gt;Visual Studio Code incluye la extensión &lt;strong&gt;VueDX&lt;/strong&gt; que nos informa al escribir código si un objeto tiene o no la propiedad que estamos escribiendo. Es muy recomendable instalarla cuando trabajamos con Typescript.&lt;/p&gt;
&lt;h3 id=&quot;creacion-automatica-de-interfaces&quot; tabindex=&quot;-1&quot;&gt;Creación automática de interfaces&lt;/h3&gt;
&lt;p&gt;Tenemos utilidades que nos permiten generar automáticamente las interfaces de nuestra aplicación a partir de la documentación de la API o incluso a partir del fichero JSON de los datos.&lt;/p&gt;
&lt;p&gt;Un ejemplo es &lt;a href=&quot;https://quicktype.io/typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Quicktype&lt;/a&gt; donde pegamos nuestros datos en formato JSON y genera automáticamente las interfaces y &lt;em&gt;types&lt;/em&gt; necesarios en &lt;em&gt;typescript&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;tipos-genericos&quot; tabindex=&quot;-1&quot;&gt;Tipos genéricos&lt;/h2&gt;
&lt;p&gt;A veces nos gustaría que una función pudiera trabajar con distintos tipos de datos. Por ejemplo, una función para añadir un item a una lista podría ser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;function addItemToNumberList(item: number, list: number[]): number[] {
    list.push(item)
  
    return list
}

const numberList = addItemToNumberList(123, [])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos  algo similar para listas de cadenas habría que crear otra función pero de tipo &lt;em&gt;string&lt;/em&gt;. En lugar de eso podemos decir que el tipo de los parámetros y de la función sea genérico:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;function addItemToList&amp;lt;T&amp;gt;(item: T, list: T[]): T[] {
    list.push(item)
  
    return list
}

const numberList = addItemList&amp;lt;number&amp;gt;(123, [])
const stringList = addItemList&amp;lt;string&amp;gt;(&#39;manzanas&#39;, [])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;clases&quot; tabindex=&quot;-1&quot;&gt;Clases&lt;/h2&gt;
&lt;p&gt;Son muy similares a las de otros lenguajes. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class Student {
    public name : string;     // atributo accesible desde fuera de la clase
    protected age: number;    // accesible desde clases que hereden de Student
    private nia : string;  // accesible sólo desde la clase Student

    constructor(name:string ,age:number, nia:string){
        this.name = name;
        this.age = age;
        this.nia = nia;
    }
    getName(){
       return this.name;
    }

    setName(name:string){
       this.name = name;
    }
    getAge(){
       return this.age;
    }

    setAge(age:number){
       this.age = age;
    }

    getNia(nia:string){
       this.nia = nia;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los &lt;em&gt;getters&lt;/em&gt; y &lt;em&gt;setters&lt;/em&gt; también pueden definirse como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;    ...
    get name(){
       return this.name;
    }

    set name(name:string){
       this.name = name;
    }
    ...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sería conveniente definir una interfaz para el objeto Student:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface IStudent {
  name: string;
  age: number;
  nia: string

  greeting: () =&amp;gt; void
}

class Student implements IStudent {
    constructor(name:string ,age:number, nia:string){
        this.name = name;
        this.age = age;
        this.nia = nia;
    }
    ...
    function greetings () {
      console.log(&#39;Hi &#39; + this.name)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La interfaz obliga a las clases que la implementen a definir, al menos, todas las propiedades y todos los métodos de la interfaz.&lt;/p&gt;
&lt;h2 id=&quot;decoradores&quot; tabindex=&quot;-1&quot;&gt;Decoradores&lt;/h2&gt;
&lt;p&gt;Otra utilidad importante de Typescript son los decoradores que permiten &amp;quot;decorar&amp;quot; un constructor o método, es decir, personalizarlo para que haga algo ligeramente diferente a lo que hace el genérico.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/21-typescript/" >
        </entry>
        <entry>
            <title>
                10-vue3_composition_api
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/10-vue3-composition-api/</id>
            <content type="html">
                &lt;h1 id=&quot;la-em-composition-api-em-de-vue3&quot; tabindex=&quot;-1&quot;&gt;La &lt;em&gt;Composition API&lt;/em&gt; de Vue3&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#la-composition-api-de-vue3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;La &lt;em&gt;Composition API&lt;/em&gt; de Vue3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-b%C3%A1sico&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo básico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#setup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;setup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#script-setup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;script setup&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#reactividad-en-vue3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Reactividad en Vue3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#configuraciones-b%C3%A1sicas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Configuraciones básicas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#props&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Props&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#components&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#computed&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Computed&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#hooks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#watcheffect-y-watch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;watchEffect y watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pinia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#reusabilidad-composables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Reusabilidad: &lt;em&gt;composables&lt;/em&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#valores-devueltos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Valores devueltos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-de-par%C3%A1metros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso de parámetros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-el-c%C3%B3digo-con-composables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar el código con &lt;em&gt;composables&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Vue3 incluye una importante novedad, la &lt;em&gt;Composition API&lt;/em&gt;, aunque podemos seguir usando la &lt;em&gt;Options API&lt;/em&gt; clásica de Vue2 donde cada elemento (data, computed, methods, ...) es una opción del componente.&lt;/p&gt;
&lt;p&gt;La forma de trabajar hasta Vue 2 es mediante la &lt;em&gt;Options API&lt;/em&gt; donde definíamos un componente mediante una serie de opciones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  name: &amp;quot;ComponentName&amp;quot;,
  props: { ... },
  data() { return {...} },
  computed: { ... },
  methods: { ... },
  mounted() { ... },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto es ideal para pequeñas aplicaciones porque mantiene el código ordenado según su funcionalidad: variables en &lt;em&gt;data&lt;/em&gt;, funciones en &lt;em&gt;methods&lt;/em&gt;, .... Pero en grandes aplicaciones donde un componente necesita hacer varias cosas (como mostrar datos en una tabla pero que esté paginada y con posibilidad de filtrar, ...) el código crece y esta forma de organizarlo se vuelve algo confusa.&lt;/p&gt;
&lt;p&gt;Vue3 permite seguir trabajando así pero incorpora una nueva forma de trabajar con nuestros componentes, la &lt;em&gt;Composition API&lt;/em&gt;. En ella se define un &lt;em&gt;hook&lt;/em&gt; llamado &lt;code&gt;setup()&lt;/code&gt; donde escribimos el código que inicializa el componente y devuelve un objeto con las variables y métodos que podrá usar el resto del componente (por ejemplo el &lt;em&gt;template&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
import { defineProps } from &amp;quot;vue&amp;quot;;

export default {
  name: &amp;quot;ComponentName&amp;quot;,
  props: defineProps({ ... }),     // Props
  setup(props, context) {
    // Init logic, lifecycle hooks, etc...

    return {
      // Data, methods, computed, etc...
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La &lt;em&gt;composition API&lt;/em&gt; es especialmente útil en aplicaciones grandes ya que va a permitir que nuestros componentes sean mucho más reutilizables. Además nos va a permitir organizar el código por funcionalidades y no por &lt;em&gt;opciones&lt;/em&gt;. Por ejemplo si un componente muestra una serie de datos y tiene filtrado de datos y paginación de los mismos en el &lt;code&gt;data()&lt;/code&gt; definiré variables para los datos, variables para el filtrado y variables para la paginación. En &lt;code&gt;computed&lt;/code&gt; puede que también tenga métodos para las 3 cosas y el &lt;code&gt;methods&lt;/code&gt; tendré varios métodos para cada una de las 3 funcionalidades. La &lt;em&gt;composition API&lt;/em&gt; me va a permitir que todo el código (&lt;em&gt;data&lt;/em&gt;, &lt;em&gt;computed&lt;/em&gt;, &lt;em&gt;methods&lt;/em&gt;, ...) referente a la funcionalidad de mostrar los datos esté junto y lo mismo para las funcionalidades de filtrar y de paginar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/composition-api-after.e3f2c350.png&quot; alt=&quot;composition api vs options api&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Cuándo es recomendable usarla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si queremos soporte total de Typescript&lt;/li&gt;
&lt;li&gt;si nuestro componente es demasiado largo y queremos organizarlo por características (&lt;em&gt;features&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;para mejorar la reutilización de código entre componentes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ejemplo-basico&quot; tabindex=&quot;-1&quot;&gt;Ejemplo básico&lt;/h2&gt;
&lt;p&gt;Por ejemplo, un componente que muestra un contador y un botón para incrementarlo, con la &lt;em&gt;Options API&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  // Properties returned from data() becomes reactive state
  // and will be exposed on `this`.
  props: [&#39;title&#39;],
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  },
  mounted() {
    console.log(`The initial count is ${this.count}.`)
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este ejemplo con la &lt;em&gt;Composition API&lt;/em&gt; quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
import { ref, onMounted } from &amp;quot;vue&amp;quot;;

export default {
  name: &amp;quot;ComponentName&amp;quot;,
  props: [&#39;title&#39;],
  
  setup(props, context) {
    const count = ref(0)

    function increment() {
      count.value++
    }

    onMounted(() =&amp;gt; {
      console.log(`${props.title}: the initial count is ${count.value}.`)
    })

    return {
      count,
      increment,
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que para hacer reactiva una variable hemos de declararla con &lt;code&gt;ref&lt;/code&gt; y su valor lo obtenemos dentro de la propiedad &lt;code&gt;.value&lt;/code&gt;, aunque en el &lt;em&gt;&amp;lt;template&amp;gt;&lt;/em&gt; no es necesario poner el &lt;em&gt;.value&lt;/em&gt;. En el caso de objetos (incluidos arrays) se hacen reactivos con &lt;code&gt;reactive&lt;/code&gt; como veremos al hablar de la &lt;a href=&quot;https://pedroporo.github.io/#reactividad-en-vue3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;reactividad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Las funciones podemos ponerlas como &lt;em&gt;arrow functions&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    const increment = () =&amp;gt; {
      count.value++
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;setup&lt;/h2&gt;
&lt;p&gt;Lo primero que hace un componente que usa esta API es ejecutar su método &lt;em&gt;setup&lt;/em&gt;, antes de evaluar ninguna otra característica (&lt;em&gt;data&lt;/em&gt;, &lt;em&gt;computed&lt;/em&gt;, &lt;em&gt;hooks&lt;/em&gt;, ...). Por tanto este método no tiene acceso a &lt;em&gt;this&lt;/em&gt; como el resto. Para que pueda acceder a datos que pueda necesitar recibe 2 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt;: aquí recibe los parámetros pasados al componente. Todos ellos son reactivos y se pueden observar con un &lt;em&gt;watch&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context&lt;/strong&gt;: es un objeto con las propiedades &lt;em&gt;attrs&lt;/em&gt;, &lt;em&gt;slots&lt;/em&gt;, &lt;em&gt;parent&lt;/em&gt; y &lt;em&gt;emit&lt;/em&gt;. Nos permite acceder a lo que antes accedíamos desde &lt;em&gt;this&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El &lt;em&gt;hook&lt;/em&gt; &lt;strong&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/strong&gt; se encarga de:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tareas de inicialización del componente: todo lo que antes se hacía en &lt;em&gt;created()&lt;/em&gt; o &lt;em&gt;mounted()&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;tareas de definición: aquí se definen las variables (que antes estaban en &lt;em&gt;data&lt;/em&gt;), variables calculadas (antes &lt;em&gt;computed&lt;/em&gt;), funciones (antes &lt;em&gt;methods&lt;/em&gt;) o los &lt;em&gt;watchers&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;devolver los elementos que se puedan usar en el &lt;em&gt;&amp;lt;template&amp;gt;&lt;/em&gt; (variables y funciones)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;and-lt-script-setup-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;script setup&amp;gt;&lt;/h3&gt;
&lt;p&gt;Además de la sintaxis que hemos visto arriba existe una forma &#39;reducida&#39; de escribir la parte de &amp;lt;script&amp;gt; que es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { ref, defineProps, onMounted } from &amp;quot;vue&amp;quot;;

const props = defineProps([&#39;title&#39;])
const count = ref(0)

const increment = () =&amp;gt; {
  count.value++
}

onMounted(() =&amp;gt; {
  console.log(`${props.title}: the initial count is ${count.value}.`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso no es necesario exportar nada (por defecto se exportan las variables y funciones definidas).&lt;/p&gt;
&lt;p&gt;Esta es la &lt;strong&gt;sintaxis recomendada&lt;/strong&gt; cuando usamos SFC por simplicidad y rendimiento tal y como se indica en la &lt;a href=&quot;https://vuejs.org/api/sfc-script-setup.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;reactividad-en-vue3&quot; tabindex=&quot;-1&quot;&gt;Reactividad en Vue3&lt;/h2&gt;
&lt;p&gt;En la &lt;em&gt;composition API&lt;/em&gt; de Vue3 sólo las variables recogidas en &lt;em&gt;props&lt;/em&gt; son reactivas. Cualquier otra declarada en el &lt;em&gt;setup&lt;/em&gt; que queramos que lo sea debemos declararla con &lt;code&gt;ref&lt;/code&gt; si es un tipo primitivo o &lt;code&gt;reactive&lt;/code&gt; si es un objeto.&lt;/p&gt;
&lt;p&gt;La función &lt;code&gt;ref&lt;/code&gt; envuelve la variable en un Proxy reactivo. El valor de la variable estará en su propiedad &lt;code&gt;.value&lt;/code&gt;, aunque desde el template podemos usarla directamente como hemos visto en el código anterior.&lt;/p&gt;
&lt;p&gt;En el caso de variables de tipos no primitivos (objetos, arrays, ...) se declaran con &lt;em&gt;reactive&lt;/em&gt; pero en este caso no es necesario usar la propiedad &lt;code&gt;.value&lt;/code&gt; (es lo mismo que hace el método &lt;code&gt;data()&lt;/code&gt; en la &lt;em&gt;options API&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { reactive, defineProps, onMounted } from &amp;quot;vue&amp;quot;;

const props = defineProps([&#39;title&#39;])
const counter = reactive({ count: 0})

const increment = () =&amp;gt; {
  counter.count++
}

onMounted(() =&amp;gt; {
  console.log(`${props.title}: the initial count is ${counter.count}.`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { counter.count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo si cambiamos la referencia del objeto (por ejemplo si lo desestructuramos) pierde su reactividad.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &amp;quot;vue&amp;quot;;

const counter = reactive({ count: 0})
let { count } = counter   // count no es reactivo
count++   // no afecta a counter.count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para hacerlo reactivo deberíamos usar el método &lt;code&gt;toRef()&lt;/code&gt; o &lt;code&gt;toRefs()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &amp;quot;vue&amp;quot;;

const counter = reactive({ count: 0})
let { count } = toRefs(counter)   // count SÍ es reactivo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O bien, si queremos trabajar con las propiedades de un objeto podemos declararlas con &lt;code&gt;ref&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ref } from &amp;quot;vue&amp;quot;;

const counter = { count: ref(0) }
let { count } = counter   // count SÍ es reactivo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También hay métodos para ver si una variable es reactiva:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isRef(variable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isReactive(variable)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis ver esto con más detalle en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://escuelavue.es/tips/ref-vs-reactive-vue-3/?utm_source=newsletter&amp;amp;utm_medium=email&amp;amp;utm_campaign=cuando_usar_ref_vs_reactive_en_vue_3&amp;amp;utm_term=2022-05-29&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Escuela VUE&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vuejs.org/api/reactivity-core.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentación de Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;configuraciones-basicas&quot; tabindex=&quot;-1&quot;&gt;Configuraciones básicas&lt;/h2&gt;
&lt;h3 id=&quot;em-props-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Props&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Para tener acceso a las &lt;em&gt;props&lt;/em&gt; hay que hacerlas accesibles con &lt;code&gt;defineProps&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { defineProps } from &amp;quot;vue&amp;quot;;

defineProps([&#39;title&#39;])
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si necesitamos acceder a ellas desde el código las asignamos a una variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { onMounted, defineProps } from &amp;quot;vue&amp;quot;;

const props = defineProps([&#39;title&#39;])

onMounted(() =&amp;gt; {
  console.log(`El parámetro pasado en &#39;title&#39; es ${props.title}`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;em-components-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;No necesitamos registrarlos, basta con importarlos y ya se pueden usar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import ErrorMessages from &amp;quot;./components/ErrorMessages.vue&amp;quot;;
import AppNav from &amp;quot;./components/AppNav.vue&amp;quot;;
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;app-nav&amp;gt;&amp;lt;/app-nav&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;error-messages&amp;gt;&amp;lt;/error-messages&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;em-computed-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Computed&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El uso de &lt;em&gt;computed&lt;/em&gt; cambia ya que ahora es una función en lugar de un objeto.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;# Options API
data(): {
  return {
    productPrice: 100
  }
},
computed: {
  offerPrice() {
    return this.productPrice * 50%
  },
  originalPrice() {
    return this.productPrice
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Composition API
import { ref, computed } from &amp;quot;vue&amp;quot;;

const productPrice = ref(100)

const offerPrice = computed(() =&amp;gt; productPrice.value * 50%)
const originalPrice = computed(() =&amp;gt; productPrice.value)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Todas las variables definidas como &lt;em&gt;computed&lt;/em&gt; son automáticamente reactivas.&lt;/p&gt;
&lt;h3 id=&quot;hooks&quot; tabindex=&quot;-1&quot;&gt;hooks&lt;/h3&gt;
&lt;p&gt;Se les antepone &lt;em&gt;on&lt;/em&gt; (ej, &lt;code&gt;onMounted&lt;/code&gt;). Ya no son necesarios ni &lt;em&gt;beforeCreated&lt;/em&gt; ni &lt;em&gt;created&lt;/em&gt; que son sustituidas por el &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podéis ver esto con más detalle en la &lt;a href=&quot;https://vuejs.org/api/composition-api-lifecycle.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;router&quot; tabindex=&quot;-1&quot;&gt;router&lt;/h3&gt;
&lt;p&gt;Para acceder al &lt;em&gt;router&lt;/em&gt; y a la variable &lt;em&gt;route&lt;/em&gt; en &lt;em&gt;composition API&lt;/em&gt; tenemos que importarlas de &lt;em&gt;vue-router&lt;/em&gt; e instanciarlas, ya que no tenemos acceso a &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { useRouter, useRoute } from &#39;vue-router&#39;

const router = useRouter()
const route = useRoute()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;watch-effect-y-watch&quot; tabindex=&quot;-1&quot;&gt;watchEffect y watch&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;watch&lt;/em&gt; funciona como en &lt;em&gt;Vue2&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;# Vue 3
import { ref, watch } from &amp;quot;vue&amp;quot;;
setup(props) {
  const productPrice = ref(props.price);
  watch(productPrice, (current, prev) =&amp;gt; {
    console.log(&#39;productPrice current: &#39; + current + &#39;, prev: &#39; + prev)
  })
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;watchEffect&lt;/em&gt; es una función que se ejecuta inmediatamente y cada vez que cambie alguna de sus dependencias reactivas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ref, watchEffect } from &amp;quot;vue&amp;quot;;
setup(props) {
  const productPrice = ref(props.price);
  watchEffect(() =&amp;gt; {
    console.log(&#39;productPrice current: &#39; + productPrice.value)
  })
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos obtener más información sobre cuándo usar un u otro método en &lt;a href=&quot;https://escuelavue.es/tips/vue-3-watch-vs-watcheffect/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Escuela VUE&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pinia&quot; tabindex=&quot;-1&quot;&gt;Pinia&lt;/h3&gt;
&lt;p&gt;Los ficheros de &lt;em&gt;store&lt;/em&gt; no cambian pero sí la forma de usarlos en el componente. Allí se importa el &lt;em&gt;store&lt;/em&gt; y cada variable, &lt;em&gt;getter&lt;/em&gt; o &lt;em&gt;action&lt;/em&gt; que queramos usar en el componente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { useCounterStore } from &#39;../stores/counterStore&#39;;
import { computed } from &#39;vue&#39;;

   // store
   const counterStore = useCounterStore();

   //state &amp;amp; getters
   const count = computed(() =&amp;gt; counterStore.count);  // state
   const lastOperation = computed(() =&amp;gt; counterStore.lastOperation);  // getter

   //actions
   const increment = () =&amp;gt; counterStore.increment();
   const decrement = () =&amp;gt; counterStore.decrement();
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;Counter: { { count }}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Last: { { lastOperation }}&amp;lt;/p&amp;gt;
        &amp;lt;button @click=&amp;quot;increment()&amp;quot;&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;button @click=&amp;quot;decrement()&amp;quot;&amp;gt;Subtract&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;reusabilidad-em-composables-em&quot; tabindex=&quot;-1&quot;&gt;Reusabilidad: &lt;em&gt;composables&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;La principal razón de ser de la &lt;em&gt;composition API&lt;/em&gt; es que permite usar funciones &lt;strong&gt;&lt;em&gt;composables&lt;/em&gt;&lt;/strong&gt;, que son funciones donde podemos poner código &lt;em&gt;con estado&lt;/em&gt; (es decir, que usa variables reactivas). El nombre de las funciones &lt;em&gt;composables&lt;/em&gt; por convenio comienza por &lt;em&gt;use&lt;/em&gt; y se usan para encapsular código que podrá usar cualquier componente.&lt;/p&gt;
&lt;p&gt;Por ejemplo podemos hacer una &lt;em&gt;composable&lt;/em&gt; que nos proporcione la posición actual del ratón:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// mouse.js

import { ref, onMounted, onUnmounted } from &#39;vue&#39;

export function useMouse() {
  const x = ref(0)
  const y = ref(0)

  function update(event) {
    x.value = event.pageX
    y.value = event.pageY
  }

  onMounted(() =&amp;gt; window.addEventListener(&#39;mousemove&#39;, update))
  onUnmounted(() =&amp;gt; window.removeEventListener(&#39;mousemove&#39;, update))

  return { x, y }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función &lt;em&gt;useMouse&lt;/em&gt; proporciona a quien la importe 2 variables reactivas (&lt;em&gt;x&lt;/em&gt; e &lt;em&gt;y&lt;/em&gt;) donde se encuentra la posición actual del ratón, actualizada por la función &lt;em&gt;update&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En cualquier componente donde necesitemos conocer la posición del ratón sólo necesitamos importar esta función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
  import { useMouse } from &#39;./useMouse&#39;;
  const { x, y } = useMouse();
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  X: { { x }} Y: { { y }}
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Siempre que pongamos un escuchador en una &lt;em&gt;composable&lt;/em&gt; (como hemos hecho en el &lt;code&gt;onMounted&lt;/code&gt;) debemos quitarlo cuando ya no se utilice (en el &lt;code&gt;unMounted&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;valores-devueltos&quot; tabindex=&quot;-1&quot;&gt;Valores devueltos&lt;/h3&gt;
&lt;p&gt;Como se ve la &lt;em&gt;composable&lt;/em&gt; devuelve un objeto formado por variables reactivas (&lt;em&gt;refs&lt;/em&gt;) en lugar de un objeto reactivo. Se hace así por convención, lo que permite desestructurar las variables en el componente que las vaya a usar sin perder su reactividad (al desestructurar un &lt;em&gt;reactive&lt;/em&gt; deja de serlo).&lt;/p&gt;
&lt;p&gt;Si lo hubiéramos hecho con un &lt;em&gt;reactive&lt;/em&gt; NO funcionaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// mouse.js MAL

import { reactive, onMounted, onUnmounted } from &#39;vue&#39;

export function useMouse() {
  const x = 0
  const y = 0

  ...
  return reactive({ x, y })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;porque entonces al hacer en el componente&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  const { x, y } = useMouse();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;las variables &lt;em&gt;x&lt;/em&gt; e &lt;em&gt;y&lt;/em&gt; dejarían de ser reactivas.&lt;/p&gt;
&lt;p&gt;Podría hacerse no desestructurando el objeto, pero se prefiere así por claridad, para tener claras qué variables nos proporciona la función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
  import { useMouse } from &#39;./useMouse&#39;;
  const position = useMouse();
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  X: { { position.x }} Y: { { position.y }}
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto sí funcionaría pero se recomienda la otra forma: una &lt;em&gt;composable&lt;/em&gt; devuelve un array de variables reactivas que se importan (desestructurando el objeto) en el componente que las vaya a usar.&lt;/p&gt;
&lt;h3 id=&quot;paso-de-parametros&quot; tabindex=&quot;-1&quot;&gt;Paso de parámetros&lt;/h3&gt;
&lt;p&gt;Podemos pasar parámetros a las funciones &lt;em&gt;composables&lt;/em&gt; en el momento de usarlas y dichos parámetros los recibirá directamente la &lt;em&gt;composable&lt;/em&gt; como cualquier otra función.&lt;/p&gt;
&lt;p&gt;Por ejemplo podemos crear &lt;em&gt;useFetch&lt;/em&gt; a la que le pasamos una &lt;em&gt;url&lt;/em&gt; y hace un &lt;em&gt;fetch&lt;/em&gt; para hacer la llamada a esa url y devolver los datos o el error devueltos por el servidor.&lt;br /&gt;
El componente que quiera usarla haría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
  import { useFetch } from &#39;./useFetch&#39;;
  const { data, error } = useFetch(&#39;https://jsonplaceholder.typicode.com/users/3&#39;)
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div v-if=&amp;quot;error&amp;quot;&amp;gt;{{ error }}&amp;lt;/div&amp;gt;
  &amp;lt;div v-else&amp;gt;
    // Aquí mostramos los datos recibidos en la variable &#39;data&#39;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y nuestra función haría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// useFetch.js
import { ref } from &#39;vue&#39;

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  fetch(url)
    .then((res) =&amp;gt; res.json())
    .then((json) =&amp;gt; (data.value = json))
    .catch((err) =&amp;gt; (error.value = err))

  return { data, error }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el parámetro recibido es reactivo podemos hacer que la función se ejecute cada vez que cambie observándolo con &lt;em&gt;watch&lt;/em&gt; o &lt;em&gt;watchEffect&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fetch.js
import { ref, watch } from &#39;vue&#39;

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  function doFetch() {
    fetch(url.value)
      .then((res) =&amp;gt; res.json())
      .then((json) =&amp;gt; (data.value = json))
      .catch((err) =&amp;gt; (error.value = err))
  }

  watch(url, () =&amp;gt; doFetch())
  
  return { data, error }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si nuestras &lt;em&gt;composables&lt;/em&gt; pueden recibir parámetros reactivos siempre es una buena práctica que puedan recibir también parámetros primitivos (en el caso anterior daría un error al hacer &lt;code&gt;fetch(url.value)&lt;/code&gt; porque url es un &lt;em&gt;string&lt;/em&gt;). La forma más correcta de hacerlo sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fetch.js
import { ref, isRef, unref, watchEffect } from &#39;vue&#39;

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  function doFetch() {
    // reset state before fetching..
    data.value = null
    error.value = null
    // unref() unwraps potential refs
    fetch(unref(url))
      .then((res) =&amp;gt; res.json())
      .then((json) =&amp;gt; (data.value = json))
      .catch((err) =&amp;gt; (error.value = err))
  }

  if (isRef(url)) {
    // setup reactive re-fetch if input URL is a ref
    watchEffect(doFetch)
  } else {
    // otherwise, just fetch once
    // and avoid the overhead of a watcher
    doFetch()
  }

  return { data, error }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso se ha hecho una función que va a funcionar tanto si se le pasa un url estática como si se le pasa una reactiva. Lo que ha cambiado es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isRef&lt;/code&gt;: nos dice si el parámetro pasado es o no reactivo. Si no lo es llama directamente a la función. Si lo es hace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watchEffect&lt;/code&gt;: cada vez que cambie el valor de &lt;em&gt;url&lt;/em&gt; llamará a la función&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unref&lt;/code&gt;: devuelve el &lt;code&gt;.value&lt;/code&gt; de una variable si es reactiva o la variable si no lo es. Si &lt;em&gt;url&lt;/em&gt; es reactiva devuelve &lt;code&gt;url.value&lt;/code&gt; y si no devuelve &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;organizar-el-codigo-con-em-composables-em&quot; tabindex=&quot;-1&quot;&gt;Organizar el código con &lt;em&gt;composables&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Además de para que el código sea fácilmente reutilizable, las &lt;em&gt;composables&lt;/em&gt; se usan para sacar código de un componente cuando este es demasiado grande o se encarga de varias funcionalidades. Una vez creadas las funciones se usan en el componente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script setup&amp;gt;
import { useFeatureA } from &#39;./featureA.js&#39;
import { useFeatureB } from &#39;./featureB.js&#39;
import { useFeatureC } from &#39;./featureC.js&#39;

const { foo, bar } = useFeatureA()
const { baz } = useFeatureB(foo)
const { qux } = useFeatureC(baz)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tenemos que usar una función &lt;em&gt;composable&lt;/em&gt; en un componente escrito en modo &lt;em&gt;Options API&lt;/em&gt; simplemente añadimos el &lt;em&gt;hook&lt;/em&gt; &lt;code&gt;setup&lt;/code&gt; y allí la llamamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { useMouse } from &#39;./mouse.js&#39;
import { useFetch } from &#39;./fetch.js&#39;

export default {
  setup() {
    const { x, y } = useMouse()
    const { data, error } = useFetch(&#39;...&#39;)
    return { x, y, data, error }
  },
  mounted() {
    // setup() exposed properties can be accessed on `this`
    console.log(this.x)
  }
  // ...other options
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algunos enlaces útiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/vue-composition-api-reusable-components/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to Create Reusable Components with the Vue 3 Composition API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mokkapps.de/blog/why-i-love-vue-3-s-composition-api/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Why I Love Vue 3&#39;s Composition API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos encontrar infinidad de &lt;em&gt;composables&lt;/em&gt; que podemos usar en nuestro código en la página &lt;a href=&quot;https://vueuse.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VueUse&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/10-vue3-composition-api/" >
        </entry>
        <entry>
            <title>
                0x-testing
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/0x-testing/</id>
            <content type="html">
                &lt;h1 id=&quot;testear-nuestros-componentes&quot; tabindex=&quot;-1&quot;&gt;Testear nuestros componentes&lt;/h1&gt;
&lt;p&gt;La librería que incluye Vue para testear las aplicaciones el &lt;strong&gt;vue-test_utils&lt;/strong&gt; que proporciona herramientas para montar e interactuar con componentes. Para los tests unitarios usaremos &lt;a href=&quot;https://jestjs.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Jest&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tras instalar la librería con npm (será una dependencia de desarrollo) indicaremos al &lt;em&gt;linter&lt;/em&gt; que vamos a usar jest para que no genere advertencias al usar sus comandos para lo que modificaremos el fichero &lt;em&gt;.eslintrc.js&lt;/em&gt; y añadiremos al apartado &lt;em&gt;env&lt;/em&gt; una línea indicando que vamos a usar jest. Dicho apartado quedará:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  env: {
    node: true,
    jest: true,
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si usamos librerías como Vue-Material o Vuetify y debemos importar ficheros .css de las mismas en nuestros componentes es posible que falle Jest a la hora de pasar los test y nos dará un error de que no puede procesar el fichero porque no es Javascript. Podemos solucionarlo instalando para desarrollo el paquete &lt;em&gt;identuty-obj-proxy&lt;/em&gt; y añadiendo una entrada para &lt;em&gt;moduleNameMapper&lt;/em&gt; al fichero de configuración de Jest &lt;strong&gt;jest.config.js&lt;/strong&gt; que quedará:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
  preset: &#39;@vue/cli-plugin-unit-jest&#39;,
  moduleNameMapper: {
    &amp;quot;&#92;&#92;.(css|less|scss|sass)$&amp;quot;: &amp;quot;identity-obj-proxy&amp;quot;
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(fuente: &lt;a href=&quot;https://stackoverflow.com/questions/46177148/how-to-exclude-css-module-files-from-jest-test-suites&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/46177148/how-to-exclude-css-module-files-from-jest-test-suites&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;tests-unitarios&quot; tabindex=&quot;-1&quot;&gt;Tests unitarios&lt;/h2&gt;
&lt;p&gt;A la hora de crear el proyecto no escogeremos &lt;em&gt;preset&lt;/em&gt; sino que seleccionaremos manualmente las características a instalar y marcaremos la de tests unitarios con &lt;em&gt;Jest&lt;/em&gt; que es la librería que usamos en el bloque de Javascript.&lt;/p&gt;
&lt;p&gt;Para ejecutar los tests ejecutaremos en la terminal&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run test:unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El projecto está configurado para ejecutar los ficheros de pruebas cuyo nombre acabe por &lt;strong&gt;.spec.js&lt;/strong&gt;. Por defecto se guardan en la carpeta &lt;strong&gt;/tests&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;primer-test-hello-world-vue&quot; tabindex=&quot;-1&quot;&gt;Primer test: HelloWorld.vue&lt;/h3&gt;
&lt;p&gt;En primer lugar vamos a analizar el test que hay hecho en &lt;strong&gt;@/tests/exemple.spec.js&lt;/strong&gt; para testear el componente HelloWorld.vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;
import HelloWorld from &#39;@/components/HelloWorld.vue&#39;

describe(&#39;HelloWorld.vue&#39;, () =&amp;gt; {
  it(&#39;renders props.msg when passed&#39;, () =&amp;gt; {
    const msg = &#39;new message&#39;
    const wrapper = shallowMount(HelloWorld, {
      propsData: { msg }
    })
    expect(wrapper.text()).toMatch(msg)
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo primero que hay que hacer es importar el plugin de tests de vue y el componente a testear. Dentro de la prueba se monta el componente (&lt;code&gt;shallowMount&lt;/code&gt;) y se le pasan las props que necesite (msg). A esta función se le pasa un componente y devuelve la instancia de Vue creada para él y su nodo del DOM.&lt;/p&gt;
&lt;p&gt;Como segundo parámetro se le puede pasar un objeto con opciones a montar en el componente (por ejemplo un &lt;em&gt;data&lt;/em&gt; que sustituirá al del componente) o, como en el ejemplo anterior, los parámetros que se le pasan al componente (en &lt;em&gt;propsData&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Además de &lt;code&gt;shallowMount&lt;/code&gt; podemos usar (si lo importamos) el método &lt;code&gt;mount&lt;/code&gt; que hace lo mismo pero también renderiza los subcomponentes que tenga el componente.&lt;/p&gt;
&lt;p&gt;Por último se comprueba que el texto renderizado por el &lt;em&gt;template&lt;/em&gt; del componente incluye el mensaje pasado. La variable &lt;em&gt;wrapper&lt;/em&gt; es el nodo DOM raíz del componente y podemos obtener su &lt;em&gt;textContent&lt;/em&gt; (&lt;code&gt;.text()&lt;/code&gt;), su &lt;em&gt;innerHTML&lt;/em&gt; (&lt;code&gt;.html()&lt;/code&gt;), sus atributos (&lt;code&gt;.attributes()&lt;/code&gt;, y para acceder a uno, por ejemplo la id haríamos &lt;code&gt;.attributes().id&lt;/code&gt; ), sus clases (&lt;code&gt;.classes()&lt;/code&gt;), etc.Podemos ver todos sus métodos en la &lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue test utils&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También podríamos haber hecho la siguiente comprobación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    expect(wrapper.html()).toMatch(&#39;&amp;lt;h1&amp;gt;&#39;+msg+&#39;&amp;lt;/h1&amp;gt;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o bien comprobar directamente el valor de &lt;em&gt;prop&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    expect(wrapper.props().msg).toBe(msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-atributos-clases-y-estilos-en-linea&quot; tabindex=&quot;-1&quot;&gt;Comprobar atributos, clases y estilos en línea&lt;/h3&gt;
&lt;p&gt;El componente que vamos a probar es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;Testing dom attributes&amp;lt;/h1&amp;gt;
    &amp;lt;a href=&amp;quot;https://google.com&amp;quot; class=&amp;quot;link&amp;quot; style=&amp;quot;color:green&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt;  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el test es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import App from &#39;../src/App.vue&#39;
import { shallowMount } from &#39;@vue/test-utils&#39;;

describe(&#39;Testing dom attributes&#39;, () =&amp;gt; {
    it(&#39;checks href to google &#39;, () =&amp;gt; {
        const wrapper = shallowMount(App);
        const a = wrapper.find(&#39;a&#39;); //finds an `a` element
        expect(a.attributes().href).toBe(&#39;https://google.com&#39;)
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si lo que queremos comprobar son las clases, estas tienen su propio método:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;Testing class&#39;, () =&amp;gt; {
    it(&#39;checks the class to be link&#39;, () =&amp;gt; {
        const wrapper = shallowMount(App);
        const a = wrapper.find(&#39;a&#39;); //finds an `a` element
        expect(a.classes()).toContain(&#39;link&#39;)
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y lo mismo ocurre para comprobar un estilo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;Testing style&#39;, () =&amp;gt; {
    it(&#39;checks the inline style color to be green&#39;, () =&amp;gt; {
        const wrapper = shallowMount(App);
        const a = wrapper.find(&#39;a&#39;); //finds an `a` element
        expect(a.style.color).toBe(&#39;green&#39;)
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-un-metodo-de-un-componente&quot; tabindex=&quot;-1&quot;&gt;Comprobar un método de un componente&lt;/h3&gt;
&lt;p&gt;El componente que vamos a probar es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;    &amp;lt;button @click=&amp;quot;changeTitle&amp;quot;&amp;gt;Change title&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data: function() {
    return {
      title: &amp;quot;Hello&amp;quot;    };
  },
  methods: {
    changeTitle() {
      this.title = &amp;quot;Hi&amp;quot;;    }
  }
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el test es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;;
import Post from &#39;../src/components/Welcome.vue&#39;
describe(&#39;Testing Component Methods&#39;, () =&amp;gt; {
    const wrapper = shallowMount(Post);

    it(&#39;correctly updates the title when changeTitle is called&#39;, () =&amp;gt; {
        expect(wrapper.vm.title).toBe(&#39;Hello&#39;); //initial title Hello
        wrapper.vm.changeTitle();  // calling component method
        expect(wrapper.vm.title).toBe(&#39;Hi&#39;); // title updates to Hi
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-que-un-metodo-es-llamado-al-producirse-un-evento&quot; tabindex=&quot;-1&quot;&gt;Comprobar que un método es llamado al producirse un evento&lt;/h3&gt;
&lt;p&gt;El componente que vamos a probar es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{count}}&amp;lt;/h1&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data: function() {
    return {
      count:0
    };
  },
  methods: {
    increment() {
      this.count++;
    }
  }
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el test es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;;
import Post from &#39;../src/components/Counter.vue&#39;

describe(&#39;Testing native dom events&#39;, () =&amp;gt; {
    const wrapper = shallowMount(Post);

    it(&#39;calls increment method when button is clicked&#39;, () =&amp;gt; {
        const increment = jest.fn(); // mock function
        // updating method with mock function
        wrapper.setMethods({ increment });
        //find the button and trigger click event
        wrapper.find(&#39;button&#39;).trigger(&#39;click&#39;);
        expect(increment).toBeCalled();
    })

})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://reactgo.com/vue-test-dom-events/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Dom events in Vue.js using Jest and vue-test-utils. Sai gowtham&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;comprobar-que-el-dom-reacciona-a-cambios-en-una-variable-reactiva&quot; tabindex=&quot;-1&quot;&gt;Comprobar que el DOM reacciona a cambios en una variable reactiva&lt;/h3&gt;
&lt;p&gt;Dado que Vue realiza las actualizaciones de DOM de forma asíncrona, las comprobaciones sobre las actualizaciones de DOM resultantes del cambio de estado, deberán realizarse en un callback &lt;code&gt;Vue.nextTick&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&#39;button click should increment the count text&#39;, async () =&amp;gt; {
  expect(wrapper.text()).toContain(&#39;0&#39;)
  const button = wrapper.find(&#39;button&#39;)
  button.trigger(&#39;click&#39;)
  await Vue.nextTick()
  expect(wrapper.text()).toContain(&#39;1&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-peticiones-asincronas-a-servicios-ajenos-a-vue&quot; tabindex=&quot;-1&quot;&gt;Comprobar peticiones asíncronas a servicios ajenos a Vue&lt;/h3&gt;
&lt;p&gt;En muchos casos hacemos peticiones asíncronas, como peticiones a una API. Podéis obtener información en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vue-test-utils.vuejs.org/guides/testing-async-components.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Doc Vue test utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jestjs.io/docs/es-ES/mock-functions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Jest: Mock Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nuestro-primer-test-todo-item-vue&quot; tabindex=&quot;-1&quot;&gt;Nuestro primer test: TodoItem.vue&lt;/h3&gt;
&lt;p&gt;En primer lugar vamos a testear que la propiedad &#39;done&#39; tiene el valor que se le pasa y que cambia al llamar a la función &#39;toogleDone&#39;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;
import Usuario from &#39;@/components/Usuario.vue&#39;

describe(&#39;componente Usuario.vue&#39;, () =&amp;gt; {
 it(&#39;debe cambiar el valor a true&#39;, () =&amp;gt; {
  /// Crea una instancia del componente
  const wrapper = shallowMount(Usuario);

  /// Evalúa que el valor por defecto sea &amp;quot;false&amp;quot;
  expect(wrapper.vm.usuarioActivo).toBe(false);

  /// Ejecuta el metodo que cambia el valor de la variable a &amp;quot;true&amp;quot;
  wrapper.vm.activarUsuario();

  /// Evalúa que el nuevo valor usuarioActivo sea &amp;quot;true&amp;quot;
  expect(wrapper.vm.usuarioActivo).toBe(true);
 })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;testear-vuex&quot; tabindex=&quot;-1&quot;&gt;Testear Vuex&lt;/h3&gt;
&lt;p&gt;Normalmente nuestros componentes usaran Vuex para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hacer un &lt;em&gt;commit&lt;/em&gt; a una &lt;em&gt;mutation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;hacer un &lt;em&gt;dispatch&lt;/em&gt; a una &lt;em&gt;action&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;acceder a los datos mediante &lt;em&gt;state&lt;/em&gt; o &lt;em&gt;getters&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;testear-mutations&quot; tabindex=&quot;-1&quot;&gt;Testear mutations&lt;/h4&gt;
&lt;p&gt;Es sencillo porque sólo son llamadas Javascript. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// store.js
...
mutations: {
      addPost(state, post) {
        state.posts.push(post);
      },
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// store.spec.js
import { mutations } from &amp;quot;@/store/index.js&amp;quot;

describe(&amp;quot;addPost&amp;quot;, () =&amp;gt; {
  it(&amp;quot;adds a post to the state&amp;quot;, () =&amp;gt; {
    const post = { id: 1, title: &amp;quot;Primer post&amp;quot; }
    const state = {
      posts: [],
    }

    mutations.addPost(state, post)

    expect(state).toEqual({
      posts: [ { id: 1, title: &#39;Primer post&#39; } ]
    })
  })
})

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;testear-actions&quot; tabindex=&quot;-1&quot;&gt;Testear actions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejemplo&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;Podéis encontrar un completo ejemplo de cómo testear una aplicación &lt;em&gt;ToDo&lt;/em&gt; en &lt;a href=&quot;https://www.adictosaltrabajo.com/2018/10/25/testing-en-componentes-de-vue-js/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Adictos al trabajo - Testing en componentes de Vue.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podéis encontrar ejemplos más completos en muchas páginas, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Testing Vue]&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lmiller1990.github.io/vue-testing-handbook/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Testing Handbook&lt;/a&gt;: completo tutorial de cómo testear todo en nuestros componentes Vue (props, computed, Vuex, router, ...)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lmiller1990.github.io/vue-testing-handbook/testing-vuex.html#testing-vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://livebook.manning.com/book/testing-vue-js-applications/about-this-book/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Vue.js Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fuentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue test utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es.vuejs.org/v2/guide/unit-testing.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentación oficial de Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactgo.com/vue-test-dom-events/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ReactGo: Vue tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://carlossolis.mobi/pruebas-unitarias-en-vue-js-setup-y-primeros-pasos-7255788f3e3b&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pruebas unitarias en Vue.js: Setup y primeros pasos. Carlos Solis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-e2e&quot; tabindex=&quot;-1&quot;&gt;Test e2e&lt;/h2&gt;
&lt;p&gt;No comprueban un componente sino un &lt;em&gt;workflow&lt;/em&gt; completo, por ejemplo, que el usuario introduce algo como nombre de nueva tarea, pulsa enviar y se añade la tarea a la lista.&lt;/p&gt;
&lt;p&gt;Al pasar los tests arranca un servidor de tests (&lt;em&gt;selenium&lt;/em&gt;) y un navegador donde hace las pruebas y luego los cierra.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/0x-testing/" >
        </entry>
        <entry>
            <title>
                0x-quasar
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/0x-quasar/</id>
            <content type="html">
                &lt;h1 id=&quot;quasar&quot; tabindex=&quot;-1&quot;&gt;Quasar&lt;/h1&gt;
&lt;p&gt;Es un framwork basado en Vue que permite crear aplicaciones multiplataforma (web/desktop/mobile) con un sólo código fuente. Para usarlo podemos integrarlo desde n CDN, añadirlo como un plugin a Vue-cli o utilizar su propio entorno, &lt;em&gt;Quasar CLI&lt;/em&gt;, lo que nos permitirá obtener las máximas prestaciones de este framework. Tenéis una comparativa sobre los 3 métodos en la &lt;a href=&quot;https://quasar.dev/start/pick-quasar-flavour&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Quasar&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;instalar-quasar-cli&quot; tabindex=&quot;-1&quot;&gt;Instalar Quasar cli&lt;/h2&gt;
&lt;p&gt;Necesitamos tener NodeJs instalado y haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install -S @quasar/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;code&gt;-g&lt;/code&gt; es para que se instale globalmente y así poder tenerlo disponible para cualquier proyecto.&lt;/p&gt;
&lt;h2 id=&quot;crear-un-proyecto&quot; tabindex=&quot;-1&quot;&gt;Crear un proyecto&lt;/h2&gt;
&lt;p&gt;Se crea mendiante&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;quasar createnombre-proyecto
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;deteccion-de-plataforma&quot; tabindex=&quot;-1&quot;&gt;Detección de plataforma&lt;/h3&gt;
&lt;p&gt;Quasar nos permite saber en qué plataforma se está mostrando mediante &lt;code&gt;$q.plataform&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div v-if=&amp;quot;$q.plataform.is.desktop&amp;quot;&amp;gt;
  Esto se muestra en un escritorio
&amp;lt;/div&amp;gt;
&amp;lt;div v-if=&amp;quot;$q.plataform.is.mobile&amp;quot;&amp;gt;
  Esto se muestra en un móvil
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otros posibles valores de plataforma son &lt;em&gt;electron&lt;/em&gt;, &lt;em&gt;cordova&lt;/em&gt;, ... Para usarlo debemos importar esta característica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Plataform } from &#39;quasar&#39;
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/0x-quasar/" >
        </entry>
        <entry>
            <title>
                09-cosas
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/09-cosas/</id>
            <content type="html">
                &lt;h1 id=&quot;siguientes-cosas-a-aprender-en-vue&quot; tabindex=&quot;-1&quot;&gt;Siguientes cosas a aprender en Vue&lt;/h1&gt;
&lt;p&gt;Algunas cosas interesantes que nos pueden ser útiles en nuestros proyectos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#siguientes-cosas-a-aprender-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Siguientes cosas a aprender en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#autenticaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Autenticación&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#store&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#loginvue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Login.vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-a-producci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso a producción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vuetify&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuetify&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-el-layout&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear el layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saber-m%C3%A1s&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saber más&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ssr-server-side-rendering&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;SSR (Server Side Rendering)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-aplicaciones-m%C3%B3viles-con-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear aplicaciones móviles con Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#quasar&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Quasar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-native&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ionic-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ionic Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#nuxt&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nuxt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#conclusi%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Conclusión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#angular&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-con-laravel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue con Laravel&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creaci%C3%B3n-del-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creación del proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#configuramos-el-proyecto-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Configuramos el proyecto en Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#configuramos-laravel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Configuramos Laravel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#compilamos-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Compilamos Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creamos-la-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creamos la API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saber-m%C3%A1s-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saber más&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;autenticacion&quot; tabindex=&quot;-1&quot;&gt;Autenticación&lt;/h2&gt;
&lt;p&gt;Una parte importante de cualquier aplicación es la autenticación de usuarios. Una de las formas más usadas y sencillas de autenticarnos frente a una API es el uso de &lt;em&gt;tokens&lt;/em&gt;: cuando nos logueamos la API nos pasa un token y en cada petición que le hagamos debemos adjuntar dicho token en las cabeceras de la petición, tal y como vimos al final del tema de &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/04-axios.html#a%C3%B1adir-cabeceras-a-la-petici%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;axios&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aparte de eso, que es lo básico, hay muchas más cosas que podemos incluir en nuestras aplicaciones. Por ejemplo vamos a hacer una aplicación que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;al loguearnos la API nos pasa un token que guardaremos en el &lt;em&gt;store&lt;/em&gt; y también en el &lt;em&gt;localStorage&lt;/em&gt; para poder continuar logueados si se recarga la página (recuerda que al recargar se borran todas las variables de nuestro código)&lt;/li&gt;
&lt;li&gt;interceptaremos todas las peticiones a la API para incluir en las cabeceras el token, si tenemos&lt;/li&gt;
&lt;li&gt;interceptaremos todas las respuestas a la API y si en alguna el servidor responde con un error 401 (Unauthenticated) reenviaremos al usuario a la página de login para que se loguee pero pasándole como parámetro la página a la que quería ir para que una vez logueado vaya automáticamente a dicha página&lt;/li&gt;
&lt;li&gt;el login hará varias cosas
&lt;ul&gt;
&lt;li&gt;si hay token en el &lt;em&gt;localStorage&lt;/em&gt; es que ya está logueado (posiblemente se haya recargado la página y al interceptar la respuesta era un 401 porque iba sin token y se ha redireccionado aquí). En este caso simplemente se guarda el token en el &lt;em&gt;store&lt;/em&gt; y se vuelve a la página de donde venía la petición. OJO: si el token caduca (que es lo más normal) deberemos mirar si ya ha expirado y en ese caso no se guarda en el &lt;em&gt;store&lt;/em&gt; sino que se elimina del &lt;em&gt;localStorage&lt;/em&gt; y se hace un login normal&lt;/li&gt;
&lt;li&gt;si no hay token es que debemos loguearnos así que se muestra el formulario para que el usuario introduzca sus credenciales y se le envían al servidor. Este contestará con un token que deberemos guardar en el &lt;em&gt;store&lt;/em&gt; y en el &lt;em&gt;localStorage&lt;/em&gt; antes de redireccionar a la página de la que venía la petición o a la página de inicio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;en el &lt;em&gt;router&lt;/em&gt; indicaremos para qué rutas hay que estar autentificado y antes de cargar cualquiera de ellas (usaremos el &lt;em&gt;hook&lt;/em&gt; &lt;em&gt;beforeEach&lt;/em&gt;) comprobamos si estamos autenticados y en caso de no estarlo redireccionamos al login, pero pasándole como parámetro la ruta a la que queríamos ir para que se cargue tras loguearse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos el código para hacer todo esto:&lt;/p&gt;
&lt;h3 id=&quot;store&quot; tabindex=&quot;-1&quot;&gt;Store&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero &#39;@/store/index.js&#39;
...
mutations: {
    loginUser(state, token) {
        state.token = token
        localStorage.token = token
    },
    logoutUser(state) {
        state.token = null
        localStorage.removeItem(&#39;token&#39;)
    },
},
actions: {
    login(context, user) {
        return new Promise ((resolve, reject) =&amp;gt; {
            API.users.login(user)
            .then((response) =&amp;gt; {
                context.commit(&#39;login&#39;, response.data)
                resolve(response.data)
            })
            .catch((err) =&amp;gt; reject(err))
        })
    },
    ...
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La acción que envía las credenciales del usuario al servidor es una promesa porque el componente &lt;em&gt;Login.vue&lt;/em&gt; tiene que saber cuándo se obtiene el token para redireccionar a la página correspondiente.&lt;/p&gt;
&lt;p&gt;Las &lt;em&gt;mutaciones&lt;/em&gt; almacenan el &lt;em&gt;token&lt;/em&gt; en el &lt;em&gt;store&lt;/em&gt; y también en el &lt;em&gt;localStorage&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;api&quot; tabindex=&quot;-1&quot;&gt;API&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero &#39;@/services/API.js&#39;
import axios from &#39;axios&#39;
import store from &#39;@/store&#39;
import router from &#39;@/router&#39;

const API_URL = process.env.VUE_APP_API

const users = {
    login: (item) =&amp;gt; axios.post(`${API_URL}/auth/login`, item),
    register: (user) =&amp;gt; axios.post(`${API_URL}/auth/signup`, user),
}
...

axios.interceptors.request.use((config) =&amp;gt; {
    const token = store.state.user.access_token
    if (token) {
        config.headers[&#39;Authorization&#39;] = &#39;Bearer &#39; + token
    }
    return config;
}, (error) =&amp;gt; {
    return Promise.reject(error)
})

axios.interceptors.response.use((response) =&amp;gt; {
    return response
}, (error) =&amp;gt; {
    if (error.response) {
        switch (error.response.status) {
            case 401:
                store.commit(&#39;logout&#39;)
                if (router.currentRoute.path !== &#39;login&#39;) {
                    router.replace({
                        path: &#39;login&#39;,
                        query: { redirect: router.currentRoute.path },
                    })
                }
        }
    }
    return Promise.reject(error)
})

export default {
    users,
    ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interceptamos las peticiones para incluir el &lt;em&gt;token&lt;/em&gt; si lo tenemos.Y también las respuestas porque si es un error 401 hay que loguearse por lo que se cambia el router al &lt;em&gt;login&lt;/em&gt; pero se le pasa la dirección de la página en la que se estaba para que tras loguearse se cargue esa página y no la de inicio.&lt;/p&gt;
&lt;h3 id=&quot;login-vue&quot; tabindex=&quot;-1&quot;&gt;Login.vue&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;// script de la vista &#39;Login.vue&#39;
...
  mounted() {
    if (localStorage.token) {
      // Si el token caduca debemos comprobar que no haya expirado
      this.$store.commit(&amp;quot;login&amp;quot;, localStorage.token)
      this.loadPage()
    }
  },
  methods: {
    submit() {
      this.$store.dispatch(&amp;quot;login&amp;quot;, this.user)
        .then(() =&amp;gt; this.loadPage())
        .catch((err) =&amp;gt; alert(err))
    },
    loadPage() {
      const redirect = decodeURIComponent(this.$route.query.redirect || &#39;/&#39;)
      this.$router.push({ path: redirect })
    }
  },
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;router&quot; tabindex=&quot;-1&quot;&gt;Router&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;
import VueRouter from &#39;vue-router&#39;
import store from &#39;../store&#39;

import Datos from &#39;../views/Datos.vue&#39;
...

Vue.use(VueRouter)

router.beforeEach((to, from, next) =&amp;gt; {
  if (to.meta.requireAuth) {
    if (store.token) {
      next();
    }
    else {
      next({
        path: &#39;/login&#39;,
        query: { redirect: to.fullPath }
      })
    }
  }
  else {
    next();
  }
})

const routes = [
  {
    path: &#39;/datos&#39;,
    name: &#39;Datos&#39;,
    component: Datos,
    meta: {
      requireAuth: true,
    },
  },
  ...
]

export default router = new VueRouter({
  mode: &#39;history&#39;,
  base: process.env.BASE_URL,
  routes
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ver algunos ejemplos de cómo gestionar la autenticación en nuestros proyectos Vue podemos consultar cualquiera de estos enlaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sqreen.io/authentication-best-practices-vue/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Authentication Best Practices for Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/vue-authentication-and-route-handling-using-vue-router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Authentication And Route Handling Using Vue-router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;paso-a-produccion&quot; tabindex=&quot;-1&quot;&gt;Paso a producción&lt;/h2&gt;
&lt;p&gt;Una vez acabada nuestra aplicación debemos general el &lt;em&gt;build&lt;/em&gt; que pasaremos a producción. El &lt;em&gt;build&lt;/em&gt; es el conjunto de ficheros compilados, minificados, etc que subiremos al servidor de producción. Para ello tenemos un script en el &lt;em&gt;package.json&lt;/em&gt; que se encarga de todo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crea un directorio &lt;strong&gt;&lt;em&gt;dist&lt;/em&gt;&lt;/strong&gt; con lo qie hay que subir a producción:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;: HTML&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ficheros que hay en &lt;code&gt;/public&lt;/code&gt;&lt;/strong&gt;: imágenes, CSS y cualquier otro fichero estático que hubiera en la carpeta &lt;code&gt;/public&lt;/code&gt;, como &lt;em&gt;favicon.ico&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assets&lt;/strong&gt;: todo lo que ha compilado &lt;em&gt;Vite&lt;/em&gt; optimizado y minimizado:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index-xxxx.js&lt;/strong&gt;: fichero con todo nuestro código Javascript más el de las librerías usadas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index-xxxx-css&lt;/strong&gt;:  fichero con todo nuestro CSS&lt;/li&gt;
&lt;li&gt;imágenes y otros archivos que hubiera en &lt;em&gt;assets&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vuetify&quot; tabindex=&quot;-1&quot;&gt;Vuetify&lt;/h2&gt;
&lt;p&gt;Son varias las librerías para Vue que nos facilitan enormemente la creación de nuestros componentes ya que nos dan un código para los mismos (tanto el &lt;em&gt;template&lt;/em&gt; como el Javascript) de manera que simplemente personalizando ese código con nuestros datos ya tenemos un componente totalmente funcional. Entre ellas están &lt;a href=&quot;https://material.io/design&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Material Design&lt;/a&gt;, &lt;a href=&quot;https://element.eleme.io/#/es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ElementUI&lt;/a&gt;, &lt;a href=&quot;https://vuetifyjs.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuetify&lt;/a&gt; y muchas otras.&lt;/p&gt;
&lt;p&gt;Podemos ver la utilidad de estas librerías consultando, por ejemplo, como crear una &lt;a href=&quot;https://vuetifyjs.com/en/components/data-tables/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Datatable&lt;/em&gt;&lt;/a&gt; con Vuetify. Vuetify sigue el diseño de &lt;em&gt;Material Design&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Podemos obtener toda la información sobre esta librería en &lt;a href=&quot;https://vuetifyjs.com/en/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;su página web&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;instalacion&quot; tabindex=&quot;-1&quot;&gt;Instalación&lt;/h3&gt;
&lt;p&gt;Vue se instala como cualquier otro plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vue add vuetify
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crear-el-layout&quot; tabindex=&quot;-1&quot;&gt;Crear el layout&lt;/h3&gt;
&lt;p&gt;En &lt;strong&gt;App.vue&lt;/strong&gt; borramos todo su contenido y lo sustituimos por el código de &lt;a href=&quot;https://vuetifyjs.com/en/getting-started/wireframes/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;layout&lt;/a&gt; que deseemos de Vuetify. Para ver el código pinchamos en la imagen del layout deseada y lo copiamos.&lt;/p&gt;
&lt;p&gt;A continuación ponemos el &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; donde corresponda.&lt;/p&gt;
&lt;p&gt;Cada elemento del menú es una etiqueta &lt;code&gt;&amp;lt;v-list-tile&amp;gt;&lt;/code&gt; dentro del &lt;code&gt;&amp;lt;v-navigation-drawer&amp;gt;&lt;/code&gt;. Para modificar el menú vamos a &lt;em&gt;Vuetify -&amp;gt; UI components -&amp;gt; Navigation drawers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para cada elemento que queramos añadir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Su icono está dentro de &lt;code&gt;&amp;lt;v-icon&amp;gt;&lt;/code&gt; y para elegirlo vamos a &lt;a href=&quot;https://material.io/tools/icons/?style=baseline&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Material Design&lt;/a&gt; y elegimos el que queramos. Para modificar su aspecto vamos a &lt;em&gt;Vuetify -&amp;gt; UI components -&amp;gt; Icons&lt;/em&gt; y copiamos el código que queramos&lt;/li&gt;
&lt;li&gt;Para que enlace a la ruta que queramos añadimos a la etiqueta &lt;code&gt;&amp;lt;v-list-tile-title&amp;gt;&lt;/code&gt; una etiqueta &lt;code&gt;&amp;lt;router-link :to=&amp;quot;{ name: nombre_de_la_ruta }&amp;gt;&lt;/code&gt;, ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;v-list-tile-title&amp;gt;
  &amp;lt;routerlink :to=&amp;quot;{ name: &#39;perfil&#39; }&amp;quot;&amp;gt;Perfil&amp;lt;/router-link&amp;gt;
&amp;lt;/v-list-tile-title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si no nos gusta Material Dessign tenemos alternativas como &lt;em&gt;&lt;strong&gt;Buefy&lt;/strong&gt;&lt;/em&gt; (que proporciona componentes Vue basados en &lt;em&gt;Bulma&lt;/em&gt;) y muchas otras.&lt;/p&gt;
&lt;h3 id=&quot;saber-mas&quot; tabindex=&quot;-1&quot;&gt;Saber más&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vuetifyjs.com/es-MX/getting-started/quick-start&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VuetifyJS.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GeUhmMJUFZQ&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuetify Material Framework in 60 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5GfpGaHKfyo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Intro and Overview of Vuetify.js (Build a CRUD client with Vue.js)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;Typescript&lt;/h2&gt;
&lt;p&gt;Es Javascript al que se le ha incorporado tipado de datos y otras utilidades. En los &lt;a href=&quot;https://pedroporo.github.io/21-typescript.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;apuntes&lt;/a&gt; puedes ver una introducción a cómo usarlo en Vue y en Internet tienes infinidad de recursos para aprender más.&lt;/p&gt;
&lt;h2 id=&quot;ssr-server-side-rendering&quot; tabindex=&quot;-1&quot;&gt;SSR (Server Side Rendering)&lt;/h2&gt;
&lt;p&gt;Esta tecnología permite que al obtener la página un robot (haciendo &lt;code&gt;curl miURL&lt;/code&gt;) no devuelva sólo la &amp;lt;app&amp;gt; sino el HTML para que los robots la puedan indexar correctamente.&lt;/p&gt;
&lt;p&gt;El problema que tiene una SPA es que las rutas no existen realmente sino sólo en el front y se generan asíncronamente, lo que dificulta a los robots obtener las páginas de las distintas rutas.&lt;/p&gt;
&lt;p&gt;SSR hace que la primera vez que un usuario accede a la web se sirve entera desde el servidor y el resto de veces ya se sirve desde el front. Eso permite que a un robot se le sirva toda desde el servidor y la puede indexar. Esto no es algo que nos interese en todos los proyectos, sólo en aquellos en que sea importante que estén bien posicionados en los buscadores.&lt;/p&gt;
&lt;p&gt;Más info: &lt;a href=&quot;https://vuejs.org/v2/guide/ssr.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Server-Side Rendering&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Explicación de qué es y cómo funciona en Angular: &lt;a href=&quot;http://app.getresponse.com/click.html?x=a62b&amp;amp;lc=BmvXkb&amp;amp;mc=CL&amp;amp;s=mh7Vjl&amp;amp;u=B71jy&amp;amp;y=T&amp;amp;&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Angular &amp;amp; SEO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;crear-aplicaciones-moviles-con-vue&quot; tabindex=&quot;-1&quot;&gt;Crear aplicaciones móviles con Vue&lt;/h2&gt;
&lt;p&gt;Diferentes librerías nos permiten que nuestras aplicaciones puedan ejecutarse en móviles tanto Android como iOS. La mayoría utilizan la librería &lt;strong&gt;&lt;em&gt;Cordova&lt;/em&gt;&lt;/strong&gt; de Apache2 para tener acceso a los elementos del móvil como notificaciones, cámara, geolocalización, ...&lt;/p&gt;
&lt;p&gt;Existen muchos pero las más utilizadas hoy en día son &lt;em&gt;Quasar&lt;/em&gt;, &lt;em&gt;Vue native&lt;/em&gt; e &lt;em&gt;Ionic&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;quasar&quot; tabindex=&quot;-1&quot;&gt;Quasar&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://quasar.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Quasar&lt;/a&gt; es un framework basado en VueJS que te permite generar la aplicación de escritorio y la aplicación móvil tanto para Android como para iOS.&lt;/p&gt;
&lt;p&gt;Tiene licencia MIT y su UI sigue las guías de Material. Su ventaja sobre los otros es que está creado en Vue y pensado para este framework.&lt;/p&gt;
&lt;h3 id=&quot;vue-native&quot; tabindex=&quot;-1&quot;&gt;Vue Native&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vue-native.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue native&lt;/a&gt; es otro framework que permite generar aplicaciones móviles nativas usando Vue. En realidad es una capa sobre &lt;strong&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;/strong&gt; que permite a Vue usar su API.&lt;/p&gt;
&lt;p&gt;Con ella podemos acceder a los diferentes &lt;a href=&quot;https://vue-native.io/docs/device-apis.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;dispositivos&lt;/a&gt; del móvil como la cámara, la geolocalización, el acelerómetro, ... Podemos encontrar en Internet muchos ejemplos de cómo hacer nuestra App con este framework, como &lt;a href=&quot;https://scotch.io/tutorials/how-to-setup-build-and-deploy-native-apps-with-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este&lt;/a&gt; de &lt;a href=&quot;http://scotch.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;scotch.io&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ionic-vue&quot; tabindex=&quot;-1&quot;&gt;Ionic Vue&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ionicframework.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ionic&lt;/a&gt; es posiblemente el Framework más utilizado para crear aplicaciones móviles nativas a partir de nuestra aplicación web. Está basado en Angular pero desde diciembre de 2020 puede usarse directamente en Vue, y es compatible con Vue3 y su &lt;em&gt;Composition API&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;nuxt&quot; tabindex=&quot;-1&quot;&gt;Nuxt&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nuxtjs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nuxt&lt;/a&gt; es un framework basado en Vue que crea un &lt;em&gt;scaffolding&lt;/em&gt; de Vue con todo lo necesario para una aplicación media-grande (incluye rutas, &lt;em&gt;Vuex&lt;/em&gt;,...) lo que nos facilita el desarrollo de nuestros proyectos.&lt;/p&gt;
&lt;p&gt;También hay otras librerías que nos pueden ser de utilidad como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://framework7.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Framework7&lt;/a&gt;&lt;/em&gt; para crear una aplicación web que use&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://weex.apache.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Weex&lt;/a&gt;&lt;/em&gt; para crear aplicaciones nativas para iOS y Android&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Como vés existen infinidad de librerías alrededor de Vue para ofrecernos nuevas funcionalidades. Son tantas que el equipo de Vue ha creado &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;AwesomeVue&lt;/a&gt; donde se registran parte de estas librerías y a donde podemos acceder en busca de cualquier cosa que necesitemos.&lt;/p&gt;
&lt;h2 id=&quot;angular&quot; tabindex=&quot;-1&quot;&gt;Angular&lt;/h2&gt;
&lt;p&gt;Aunque el crecimiento de Vue es muy importante, Angular sigue siendo aún el framework Javascript más demandado por las empresas. Si quieres aprender aquí tienes algunos enlaces de utilidad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentación oficial de Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.djamware.com/post/5e435e84a8d0ef4300ffc5f6/angular-9-tutorial-learn-to-build-a-crud-angular-app-quickly&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo de CRUD con Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vue-con-laravel&quot; tabindex=&quot;-1&quot;&gt;Vue con Laravel&lt;/h2&gt;
&lt;p&gt;Es sencillo crear una SPA completa usando Vue en el Front-end y Laravel para crear el Back-end que sirva la API. Podemos hacerlo como dos proyectos independientes o integrando Vue en Laravel.&lt;/p&gt;
&lt;p&gt;Como proyectos independientes es la forma más sencilla. Simplemente nuestro proyecto Vue hará peticiones a la API desarrollada en Laravel.&lt;/p&gt;
&lt;p&gt;Si queremos integrar Vue dentro del proyecto Laravel el funcionamiento es el siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La primera petición le llega al router de Laravel que renderiza el diseño de la SPA&lt;/li&gt;
&lt;li&gt;Las demás peticiones usan la API &lt;em&gt;history.pushState&lt;/em&gt; para navegar sin recargar la página y las gestiona el enrutador Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a ver en detalle cómo gestionarlo.&lt;/p&gt;
&lt;h3 id=&quot;creacion-del-proyecto&quot; tabindex=&quot;-1&quot;&gt;Creación del proyecto&lt;/h3&gt;
&lt;p&gt;Creamos el proyecto Laravel. Dentro del mismo instalamos los paquetes que necesitemos para Vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;laravel new laravue
cd laravue
npm install
npm i -S vue-router
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configuramos-el-proyecto-en-vue&quot; tabindex=&quot;-1&quot;&gt;Configuramos el proyecto en Vue&lt;/h3&gt;
&lt;p&gt;Configuramos el router de Vue en un nuevo fichero JS (por ejemplo &lt;strong&gt;/resources/js/router.js&lt;/strong&gt;) y lo importamos en el fichero principal, &lt;strong&gt;/resources/js/app.js&lt;/strong&gt; (el equivalente al &lt;strong&gt;main.js&lt;/strong&gt; de un proyecto con &lt;em&gt;vue-cli&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero app.js
...
import App from &#39;./views/App&#39;
import router from &#39;./router&#39;

const app = new Vue({
    el: &#39;#app&#39;,
    components: {
        App
    },
    router,
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creamos el fichero &lt;strong&gt;/resources/js/App.vue&lt;/strong&gt; que será el equivalente al &lt;strong&gt;App.vue&lt;/strong&gt; de los proyectos &lt;em&gt;vue-cli&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Vue Router Demo App&amp;lt;/h1&amp;gt;

        &amp;lt;p&amp;gt;
            &amp;lt;router-link to=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
            ...
            &amp;lt;router-link to=&amp;quot;/about&amp;quot;&amp;gt;Sobre nosotros...&amp;lt;/router-link&amp;gt;
        &amp;lt;/p&amp;gt;

        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configuramos-laravel&quot; tabindex=&quot;-1&quot;&gt;Configuramos Laravel&lt;/h3&gt;
&lt;p&gt;Creamos la vista principal en &lt;strong&gt;/resources/views/spa.blade.php&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ str_replace(&#39;_&#39;,&#39;-&#39;, app()-&amp;gt;getLocale()) }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;csrf-token&amp;quot; content=&amp;quot;{{ csrf_token() }}&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Vue SPA Demo&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
        &amp;lt;app&amp;gt;&amp;lt;/app&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src=&amp;quot;{{ mix(&#39;js/app.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: la línea del &lt;em&gt;&amp;lt;meta CSRF-TOKEN&amp;gt;&lt;/em&gt; es para evitar los errores de la consola por no pasar el token csrf.&lt;/p&gt;
&lt;p&gt;Configuramos &lt;strong&gt;/routes/web.php&lt;/strong&gt; para que sirva siempre esa página:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::get(&#39;/{any}&#39;, &#39;SpaController@index&#39;)-&amp;gt;where(&#39;any&#39;, &#39;.*&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;para lo que creamos el controlador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:controller SpaController
https://vuex.vuejs.org/guide/forms.html```
y lo editamos:
```php
&amp;lt;?php
namespace App&#92;Http&#92;Controllers;
use Illuminate&#92;Http&#92;Request;

class SpaController extends Controller
{
    public function index()
    {
        return view(&#39;spa&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;compilamos-vue&quot; tabindex=&quot;-1&quot;&gt;Compilamos Vue&lt;/h3&gt;
&lt;p&gt;Ahora simplemente ejecutamos en la terminal&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y ya tenemos la aplicación en marcha. Si aparece un error de &lt;em&gt;&amp;quot;The Mix manifest does not exist&amp;quot;&lt;/em&gt; ejecutaremos &lt;code&gt;npm run prod&lt;/code&gt;  que crea el fichero &lt;em&gt;mix-manifest.json&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para que se compilen automáticamente los cambios que vayamos haciendo en Vue mientras desarrollamos el proyecto ejecutamos &lt;code&gt;npm run watch-poll&lt;/code&gt; en una terminal.&lt;/p&gt;
&lt;h3 id=&quot;creamos-la-api&quot; tabindex=&quot;-1&quot;&gt;Creamos la API&lt;/h3&gt;
&lt;p&gt;Para obtener datos de una API debemos en primer lugar crear la ruta en &lt;strong&gt;/routes/api.php&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::namespace(&#39;Api&#39;)-&amp;gt;group(function () {
    Route::get(&#39;/alumnos&#39;, &#39;AlumnosController@index&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos crea sólo la ruta para el verbo GET. Una opción mejor es crear todas las rutas del recurso con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::resource(&#39;alumnos&#39;,’AlumnosController’,[&#39;only&#39;=&amp;gt;[&#39;index&#39;,&#39;store&#39;,&#39;show&#39;,&#39;update&#39;,&#39;destroy&#39; ]]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;em&gt;only&lt;/em&gt; es opcional y permite restringir las rutas que se crearán para que no se muestren las que no utilizaremos (podemos comprobarlo con un &lt;code&gt;php artisan route:list&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Otra opción es usar &lt;code&gt;apiResources&lt;/code&gt; que crea sólo funciones para los métodos API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::apiResource(&#39;alumnos&#39;,’AlumnosController’);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos crear las rutas para varios controladores a la vez con &lt;code&gt;resources&lt;/code&gt; en vez de &lt;code&gt;resource&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::resources(
  [
    &#39;alumnos&#39; =&amp;gt; &#39;Api&#92;AlumnosController&#39;,
    &#39;profes&#39; =&amp;gt; &#39;Api&#92;ProfesoresController&#39;,
  ],
  [&#39;only&#39;=&amp;gt;[&#39;index&#39;,&#39;store&#39;,&#39;show&#39;,&#39;update&#39;,&#39;destroy&#39; ]]
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luego creamos el controlador y el recurso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;php artisan make:controller Api/AlumnosController --api
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;code&gt;--resource&lt;/code&gt; (o &lt;code&gt;-r&lt;/code&gt;) crea automáticamente los puntos de entrada para los métodos indicados. La opción &lt;code&gt;--api&lt;/code&gt; es igual pero no crea funciones para los métodos &lt;em&gt;create&lt;/em&gt; ni &lt;em&gt;edit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;y el recurso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;php artisan make:resource AlumnoResource
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un recurso es un modelo que se debe transformar a un objeto JSON (lo que necesitamos en una API).&lt;/p&gt;
&lt;p&gt;y editamos el controlador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace App&#92;Http&#92;Controllers&#92;Api;

use App&#92;Alumno;
use Illuminate&#92;Http&#92;Request;
use App&#92;Http&#92;Controllers&#92;Controller;
use App&#92;Http&#92;Resources&#92;AlumnoResource;

class AlumnosController extends Controller {
    public function index()  {
        return AlumnoResource::collectionpaginate(10);
        // Esto devuelve, además del data información para paginar la salida

        // lo anterior equivaldría, sin usar el recurso, a
        $alumnos=Alumno::all()-&amp;gt;toArray();
        return response()-&amp;gt;json($alumnos);        
    }

    public function show($id)  {
       return new AlumnoResourcefind($id);
    }
    
    public function store(Request $request)  {
    
        $alumno = Alumno::create([
            &#39;alumno_id&#39; =&amp;gt; $request-&amp;gt;alumno()-&amp;gt;id,
            &#39;nombre&#39; =&amp;gt; $request-&amp;gt;nombre,
            &#39;apellidos&#39; =&amp;gt; $request-&amp;gt;apellidos,
            ...
        ]);

      return new AlumnoResource($alumno);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;saber-mas-1&quot; tabindex=&quot;-1&quot;&gt;Saber más&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://laravel-news.com/using-vue-router-laravel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Building a Vue SPA with Laravel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@weehong/laravel-5-7-vue-vue-router-spa-5e07fd591981&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Laravel 5.7 + Vue + Vue Router = SPA&lt;/a&gt;. Igual pero usando la librería Vuetify&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/09-cosas/" >
        </entry>
        <entry>
            <title>
                08-forms
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/08-forms/</id>
            <content type="html">
                &lt;h1 id=&quot;formularios-en-vue&quot; tabindex=&quot;-1&quot;&gt;Formularios en Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#formularios-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Formularios en Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#utilizar-diferentes-tipos-de-inputs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Utilizar diferentes tipos de inputs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#input-normal&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;input normal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#radio-button&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;radio button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#checkbox&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;checkbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#checkbox-m%C3%BAltiple&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;checkbox múltiple&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#generar-los-checkbox-autom%C3%A1ticamente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Generar los checkbox automáticamente&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#select&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar formularios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-con-veevalidate&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar con VeeValidate&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-otros-inputs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar otros inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-un-schema&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar un &lt;em&gt;schema&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-con-vee-validate-y-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar con vee-validate y yup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#personalizar-los-mensajes-de-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Personalizar los mensajes de yup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-personalizada-con-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación personalizada con yup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#inputs-en-subcomponentes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Inputs en subcomponentes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#v-model-en-subcomponente-input&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;v-model en subcomponente input&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-con-vee-validate&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación con Vee Validate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slots&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Slots&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Para poder tener sincronizado el formulario con nuestros datos utilizamos la directiva &lt;strong&gt;v-model&lt;/strong&gt; en cada campo. Algunos modificadores útiles de &lt;em&gt;v-model&lt;/em&gt; son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.lazy&lt;/strong&gt;: hace que &lt;em&gt;v-model&lt;/em&gt; sincronice al producirse el evento &lt;em&gt;change&lt;/em&gt; en vez del &lt;em&gt;input&lt;/em&gt;, es decir, que no sincroniza con cada tecla que pulsemos sino cuando acabamos de escribir y salimos del input.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.number&lt;/strong&gt;: convierte automáticamente el valor introducido (que se considera siempre String) a Number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.trim&lt;/strong&gt;: realiza un trim() sobre el texto introducido&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a ver cómo usar los diferentes tipos de campos con Vue.&lt;/p&gt;
&lt;h2 id=&quot;utilizar-diferentes-tipos-de-inputs&quot; tabindex=&quot;-1&quot;&gt;Utilizar diferentes tipos de inputs&lt;/h2&gt;
&lt;p&gt;Podemos probar el resultado en la &lt;a href=&quot;https://v3.vuejs.org/guide/forms.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;input-normal&quot; tabindex=&quot;-1&quot;&gt;input normal&lt;/h3&gt;
&lt;p&gt;En este caso simplemente añadimos la directiva &lt;strong&gt;v-model&lt;/strong&gt; al input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;Nombre:&amp;lt;/label&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; v-model=&amp;quot;user.nombre&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;radio-button&quot; tabindex=&quot;-1&quot;&gt;radio button&lt;/h3&gt;
&lt;p&gt;Ponemos en todos los radiobuttons el &lt;strong&gt;v-model&lt;/strong&gt; y a cada uno el &lt;strong&gt;value&lt;/strong&gt; que se guardará al escoger dicha opción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;Sexo:&amp;lt;/label&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;H&amp;quot; name=&amp;quot;sexo&amp;quot; v-model=&amp;quot;user.sexo&amp;quot;&amp;gt;Hombre
&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;M&amp;quot; name=&amp;quot;sexo&amp;quot; v-model=&amp;quot;user.sexo&amp;quot;&amp;gt;Mujer
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;checkbox&quot; tabindex=&quot;-1&quot;&gt;checkbox&lt;/h3&gt;
&lt;p&gt;Igual que cualquier input, le ponemos el &lt;strong&gt;v-model&lt;/strong&gt;. Si no ponemos un &lt;em&gt;value&lt;/em&gt; los valores que se guardarán serán &lt;em&gt;true&lt;/em&gt; si está marcado y &lt;em&gt;false&lt;/em&gt; si no lo está:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.acepto&amp;quot;&amp;gt;Acepto las condiciones
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;checkbox-multiple&quot; tabindex=&quot;-1&quot;&gt;checkbox múltiple&lt;/h3&gt;
&lt;p&gt;Se trata de varios checkbox pero cuyos valores se guardan en el mismo campo, que debe ser un &lt;strong&gt;array&lt;/strong&gt;. Le ponemos el &lt;strong&gt;v-model&lt;/strong&gt; y el &lt;strong&gt;value&lt;/strong&gt; que queramos que se guarde. La variable (en este ejemplo &lt;em&gt;user.ciclos&lt;/em&gt; será un array y guardará el value de cada checkbox marcado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;smx&amp;quot;&amp;gt;Sistemas Microinformáticos y Redes&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;asix&amp;quot;&amp;gt;Administración de Sistemas Informáticos y Redes&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;dam&amp;quot;&amp;gt;Desarrollo de Aplicaciones Multiplataforma&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;daw&amp;quot;&amp;gt;Desarrollo de Aplicaciones Web&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tenemos marcadas las casillas 1 y 3 el valor de &lt;em&gt;user.ciclos&lt;/em&gt; será [&#39;smx&#39;, &#39;dam&#39;].&lt;/p&gt;
&lt;h4 id=&quot;generar-los-checkbox-automaticamente&quot; tabindex=&quot;-1&quot;&gt;Generar los checkbox automáticamente&lt;/h4&gt;
&lt;p&gt;Muchas veces las opciones a mostrar las tendremos en algún objeto (una tabla de la BBDD, ...). En ese caso podemos generar automáticamente un checkbox para cada elemento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ciclos: [
  {cod: &#39;smx&#39;, desc: &#39;Sist. Microinformáticos y Redes&#39;},
  {cod: &#39;asix&#39;, desc: &#39;Adm. de Sistemas Informáticos y Redes&#39;},
  {cod: &#39;dam&#39;, desc: &#39;Desar. de Aplicaciones Multiplataforma&#39;},
  {cod: &#39;daw&#39;, desc: &#39;Desar. de Aplicaciones Web&#39;},
]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div v-for=&amp;quot;ciclo in ciclos&amp;quot; :key=&amp;quot;ciclo.cod&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; :value=&amp;quot;ciclo.cod&amp;quot;&amp;gt;{ { ciclo.desc }}&amp;lt;br&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;select&quot; tabindex=&quot;-1&quot;&gt;select&lt;/h3&gt;
&lt;p&gt;Lo único que hay que hacer es poner al select la directiva &lt;strong&gt;v-model&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;select v-model=&amp;quot;user.tutor&amp;quot;&amp;gt;
  &amp;lt;option value=&#39;&#39;&amp;gt;No es tutor&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;smx&amp;quot;&amp;gt;Sistemas Microinformáticos y Redes&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;asix&amp;quot;&amp;gt;Administración de Sistemas Informáticos y Redes&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;dam&amp;quot;&amp;gt;Desarrollo de Aplicaciones Multiplataforma&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;daw&amp;quot;&amp;gt;Desarrollo de Aplicaciones Web&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos generar las opciones automáticamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;select v-model=&amp;quot;user.tutor&amp;quot;&amp;gt;
  &amp;lt;option value=&#39;&#39;&amp;gt;No es tutor&amp;lt;/option&amp;gt;
  &amp;lt;option  v-for=&amp;quot;ciclo in ciclos&amp;quot; :key=&amp;quot;ciclo.cod&amp;quot; :value=&amp;quot;ciclo.cod&amp;quot;&amp;gt;
    { { ciclo.desc }}
  &amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos que sea un select múltiple sólo tenemos que ponerle el atributo &lt;em&gt;multiple&lt;/em&gt; a la etiqueta &lt;em&gt;&amp;lt;select&amp;gt;&lt;/em&gt; y hacer que la variable &lt;em&gt;user.tutor&lt;/em&gt; sea un array, que se comportará como en los checkbox múltiples.&lt;/p&gt;
&lt;h3 id=&quot;ejemplo&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/09f59xqe/embed/&quot;&gt;&lt;/script&gt;
&lt;h1 id=&quot;validar-formularios&quot; tabindex=&quot;-1&quot;&gt;Validar formularios&lt;/h1&gt;
&lt;p&gt;Podemos validar el formulario &amp;quot;a mano&amp;quot; como hemos visto en JS:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/qmg5btx2/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Además deberíamos poner clase de error a los inputs con errores para destacarlos, poner el cursor en el primer input erróneo, etc.&lt;/p&gt;
&lt;p&gt;Todo esto es incómodo y poco productivo. Para mejorarlo podemos usar una de las muchísimas librerías para validación de formularios como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://logaretm.github.io/vee-validate/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VeeValidate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vuelidate.js.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;vuelidate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vue-generators/vue-form-generator&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VueFormGenerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;validar-con-vee-validate&quot; tabindex=&quot;-1&quot;&gt;Validar con VeeValidate&lt;/h2&gt;
&lt;p&gt;Tenéis toda la información así como un tutorial de cómo usar este librería en la &lt;a href=&quot;https://vee-validate.logaretm.com/v4/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de VeeValidate&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;La forma de instalarla es&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-[bash]&quot;&gt;npm install vee-validate -S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y para usarla simplemente cambiaremos la etiqueta &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; por el componente &lt;code&gt;&amp;lt;Field&amp;gt;&lt;/code&gt; y la etiqueta &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; por el componente &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; pero quitándole el modificador &lt;code&gt;.prevent&lt;/code&gt; del escuchador &lt;code&gt;@submit&lt;/code&gt; y haciendo que la función manejadora reciba un parámetro llamado &lt;em&gt;values&lt;/em&gt; que es un objeto con los valores de los &lt;em&gt;inputs&lt;/em&gt; del formulario.&lt;/p&gt;
&lt;p&gt;Cada componente &lt;em&gt;Field&lt;/em&gt; necesitará un atributo &lt;code&gt;name&lt;/code&gt; que es el nombre del campo con el valor de ese &lt;em&gt;input&lt;/em&gt; dentro del objeto &lt;em&gt;values&lt;/em&gt;. Si el formulario es sólo para recoger datos, no para modificar datos existentes no necesitamos la directiva &lt;code&gt;v-model&lt;/code&gt; porque sus valores se guardarán en el objeto &lt;em&gt;values&lt;/em&gt; que recibe la función manejadora del &lt;code&gt;@submit&lt;/code&gt;. Sin embargo si debe mostrar datos que pueden cambiar tras la carga del componente mantendremos el atributo &lt;code&gt;v-model&lt;/code&gt; (como en la práctica que estamos haciendo, que si nos pasan una &lt;em&gt;id&lt;/em&gt; cargamos el libro con dicha id y lo mostramos en el formlario para editarlo).&lt;/p&gt;
&lt;p&gt;Para validar un campo se le añade al componente un atributo &lt;code&gt;:rules&lt;/code&gt; con la función a ejecutar, que devolverá el mensaje a mostrar en caso de error o &lt;em&gt;true&lt;/em&gt; si es correcto. El mensaje se mostrará en un componente llamado &lt;code&gt;ErrorMessage&lt;/code&gt; (que deberemos importar y registrar) cuyo atributo &lt;code&gt;name&lt;/code&gt; debe ser igual al del campo a validar. Si alguna de las funciones de validación no devuelve &lt;em&gt;true&lt;/em&gt; no se ejecuta la función manejadora del &lt;em&gt;submit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Habrá que importar los componentes de&lt;code&gt;&#39;vee-validate&#39;&lt;/code&gt; que se usen (&lt;em&gt;Form&lt;/em&gt;, &lt;em&gt;Field&lt;/em&gt;, &lt;em&gt;ErrorMessage&lt;/em&gt;) y registrarlos.&lt;/p&gt;
&lt;p&gt;Si no usamos &lt;code&gt;v-model&lt;/code&gt; podemos darle un valor por defecto a los inputs (por ejemplo, si estamos editando un objeto que ya tiene valores) pasándole el objeto con los valores al componente &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; en un atributo llamado &lt;code&gt;initial-values&lt;/code&gt;. Pero si cambien esos valores tras cargar el componente no se reflejarán los cambios (para ello debemos usar &lt;code&gt;v-model&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Por ejemplo si estamos editando el objeto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;product = {
  name: &#39;Ratón óptico&#39;,
  price: &#39;8.95&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;el formulario sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;Form :initial-values=&amp;quot;product&amp;quot; @submit=&amp;quot;onSubmit&amp;quot;&amp;gt;
    &amp;lt;Field name=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
    &amp;lt;ErrorMessage name=&amp;quot;name&amp;quot; /&amp;gt;

    &amp;lt;Field name=&amp;quot;price&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
    &amp;lt;ErrorMessage name=&amp;quot;price&amp;quot; /&amp;gt;
    
    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Guardar&amp;lt;/button&amp;gt;
  &amp;lt;/Form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el objeto &lt;em&gt;product&lt;/em&gt; está vacío el formulario aparecerá en blanco pero si contiene datos se mostrarán en el formulario. Sin embargo si modificamos los datos de &lt;em&gt;product&lt;/em&gt; esos cambios no se reflejan en el formlario a menos que usemos &lt;code&gt;v-model&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuación tenéis un ejemplo completo de un formulario para validar un email y una contraseña (Fuente &lt;a href=&quot;https://codesandbox.io/s/vee-validate-basic-example-nc7eh?from-embed=&amp;amp;file=/src/App.vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://codesandbox.io/s/vee-validate-basic-example-nc7eh?from-embed=&amp;amp;file=/src/App.vue&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;Form @submit=&amp;quot;onSubmit&amp;quot;&amp;gt;
      &amp;lt;Field name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; :rules=&amp;quot;validateEmail&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;email&amp;quot; /&amp;gt;

      &amp;lt;Field name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; :rules=&amp;quot;validatePassword&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;password&amp;quot; /&amp;gt;

      &amp;lt;button&amp;gt;Sign up&amp;lt;/button&amp;gt;
    &amp;lt;/Form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Form, Field, ErrorMessage } from &amp;quot;vee-validate&amp;quot;;

export default {
  components: {
    Form,
    Field,
    ErrorMessage,
  },
  methods: {
    onSubmit(values) {
      console.log(values);
    },
    validateEmail(value) {
      // if the field is empty
      if (!value) {
        return &amp;quot;This field is required&amp;quot;;
      }

      // if the field is not a valid email
      const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+&#92;.[A-Z]{2,4}$/i;
      if (!regex.test(value)) {
        return &amp;quot;This field must be a valid email&amp;quot;;
      }

      // All is good
      return true;
    },
    validatePassword(value) {
      // if the field is empty
      if (!value) {
        return &amp;quot;This field is required&amp;quot;;
      }

      // if the length is less than 8 characters
      if (value.length &amp;lt; 8) {
        return &amp;quot;The length of this field must be at least 8 characters&amp;quot;;
      }

      // All is good
      return true;
    }
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos encontrar más información sobre vee-validate en su &lt;a href=&quot;https://vee-validate.logaretm.com/v4/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;validar-otros-inputs&quot; tabindex=&quot;-1&quot;&gt;Validar otros inputs&lt;/h3&gt;
&lt;p&gt;Para validar un &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; simplemente lo cambiamos por un &lt;code&gt;&amp;lt;Field as=&amp;quot;select&amp;quot;&amp;gt;&lt;/code&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;Field as=&amp;quot;select&amp;quot; name=&amp;quot;autor&amp;quot; class=&amp;quot;form-control&amp;quot; required&amp;gt;
  &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;--- Selecciona autor ---&amp;lt;/option&amp;gt;
  &amp;lt;option v-for=&amp;quot;autor in autores&amp;quot; :key=&amp;quot;autor.id&amp;quot;
  :value=&amp;quot;autor.id&amp;quot;&amp;gt;
    {{ autor.nombre + &#39; &#39; + autor.apellidos }}
  &amp;lt;/option&amp;gt;
&amp;lt;/Field&amp;gt;
&amp;lt;ErrorMessage name=&amp;quot;autor&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para un &lt;em&gt;textarea&lt;/em&gt; pondremos un &lt;code&gt;&amp;lt;Field as=&amp;quot;textarea&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el caso de un &lt;em&gt;checkbox&lt;/em&gt; o un &lt;em&gt;radiobutton&lt;/em&gt; simplemente añadimos al &lt;code&gt;Field&lt;/code&gt; un atributo &lt;code&gt;type&lt;/code&gt; indicando su tipo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;Field name=&amp;quot;drink&amp;quot; type=&amp;quot;radio&amp;quot; value=&amp;quot;Water&amp;quot; /&amp;gt; Water
&amp;lt;Field name=&amp;quot;drink&amp;quot; type=&amp;quot;radio&amp;quot; value=&amp;quot;Tea&amp;quot; /&amp;gt; Tea
&amp;lt;Field name=&amp;quot;drink&amp;quot; type=&amp;quot;radio&amp;quot; value=&amp;quot;Coffee&amp;quot; /&amp;gt; Coffee
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si se trata de varios &lt;em&gt;checkbox&lt;/em&gt; con el mismo atributo &lt;em&gt;name&lt;/em&gt; en &lt;em&gt;values&lt;/em&gt; se recibirá un array con los &lt;em&gt;values&lt;/em&gt; de los elementos marcados.&lt;/p&gt;
&lt;h3 id=&quot;usar-un-em-schema-em&quot; tabindex=&quot;-1&quot;&gt;Usar un &lt;em&gt;schema&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El problema de validar los datos así es que tenemos varias funciones independientes que validan los distintos &lt;em&gt;inputs&lt;/em&gt; lo que dispersa el código de la vaidación.&lt;/p&gt;
&lt;p&gt;Podemos ponerlas todas como propiedades de un objeto que le pasamos como atributo al &lt;code&gt;Form&lt;/code&gt;, evitando además tener que poner los atributos &lt;code&gt;rules&lt;/code&gt; en cada &lt;code&gt;Field&lt;/code&gt; a validar.&lt;/p&gt;
&lt;p&gt;El ejemplo anterior quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;Form :validation-schema=&amp;quot;mySchema&amp;quot; @submit=&amp;quot;onSubmit&amp;quot;&amp;gt;
      &amp;lt;Field name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;email&amp;quot; /&amp;gt;

      &amp;lt;Field name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;password&amp;quot; /&amp;gt;

      &amp;lt;button&amp;gt;Sign up&amp;lt;/button&amp;gt;
    &amp;lt;/Form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Form, Field, ErrorMessage } from &amp;quot;vee-validate&amp;quot;;

export default {
  components: {
    Form,
    Field,
    ErrorMessage,
  },
  data() {
    return {
      mySchema = {
        email: (value) =&amp;gt; {
          if (!value) return &amp;quot;This field is required&amp;quot;;
          const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+&#92;.[A-Z]{2,4}$/i;
          if (!regex.test(value)) return &amp;quot;This field must be a valid email&amp;quot;;
          return true;
        },
        password: (value) =&amp;gt; {
          if (!value) return &amp;quot;This field is required&amp;quot;;
          if (value.length &amp;lt; 8) return &amp;quot;The length of this field must be at least 8 characters&amp;quot;;
          return true;
        }
      }
    }
  },
  methods: {
    onSubmit(values) {
      console.log(values);
    },
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;validar-con-vee-validate-y-yup&quot; tabindex=&quot;-1&quot;&gt;Validar con vee-validate y yup&lt;/h3&gt;
&lt;p&gt;Vee-validate 4 también permite usar librerías como &lt;a href=&quot;https://www.npmjs.com/package/yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;yup&lt;/strong&gt;&lt;/a&gt;. En este caso la validación es casi automática como se muestra en la documentación de &lt;a href=&quot;https://vee-validate.logaretm.com/v4/guide/components/validation#validating-fields-with-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;vee-validate&lt;/a&gt;. El ejemplo anterior quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;Form @submit=&amp;quot;onSubmit&amp;quot; :validation-schema=&amp;quot;mySchema&amp;quot;&amp;gt;
      &amp;lt;Field name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;email&amp;quot; /&amp;gt;

      &amp;lt;Field name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;password&amp;quot; /&amp;gt;

      &amp;lt;button&amp;gt;Sign up&amp;lt;/button&amp;gt;
    &amp;lt;/Form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Form, Field, ErrorMessage } from &amp;quot;vee-validate&amp;quot;;
import * as yup from &#39;yup&#39;;

export default {
  components: {
    Form,
    Field,
    ErrorMessage,
  },
  data() {
    const mySchema = yup.object({
      email: yup.string().required().email(),
      password: yup.string().required().min(8),
    })
    return {
      mySchema
    }
  },
  methods: {
    onSubmit(values) {
      console.log(values);
    },
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;personalizar-los-mensajes-de-yup&quot; tabindex=&quot;-1&quot;&gt;Personalizar los mensajes de yup&lt;/h3&gt;
&lt;p&gt;Para personalizar un mensaje de error de un campo sólo tenemos que indicar el mensaje al definir la regla del campo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mySchema = yup.object({
  email: yup.string().required(&#39;El email es obligatorio&#39;).email(),
  password: yup.string().required().min(8, &#39;La contraseña debe tener al menos 8 caracteres&#39;),
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso hemos personalizado el mensaje del &lt;em&gt;email&lt;/em&gt; si no contiene nada y del &lt;em&gt;password&lt;/em&gt; si no cumple el &lt;em&gt;min&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos personalizar todos los mensajes de error debemos definir un objeto con los nuevos mensajes. Las validaciones no incluidas mantendrán el mensaje original. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as yup from &#39;yup&#39;;
import { setLocale } from &#39;yup&#39;;
setLocale({
  mixed: {
    default: &#39;Campo no válido&#39;,
    required: &#39;El campo ${path} no puede estar vacío&#39;
  },
  string: { // sólo las reglas &#39;min&#39; de campos &#39;string&#39;
    min: &#39;El campo ${path} debe tener al menos ${max} caracteres&#39;
  },
  number: { // sólo las reglas &#39;min&#39; de campos &#39;number&#39;
    min: &#39;El valor del campo debe ser mayor que ${min}&#39;,
  },
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;validacion-personalizada-con-yup&quot; tabindex=&quot;-1&quot;&gt;Validación personalizada con yup&lt;/h3&gt;
&lt;p&gt;Si lo que queremos validar no lo hace ningún validador de &lt;em&gt;yup&lt;/em&gt; podemos crear nuestra propia regla usando el validador &lt;code&gt;test()&lt;/code&gt; que como 1º parámetro recibe el nombre de la regla, como 2º el mensaje de error a mostrar y como 3º una función que recibe el valor del campo y devolverá &lt;em&gt;true/false&lt;/em&gt; indicando si es válido o no. Por ejemplo el campo &lt;em&gt;seed&lt;/em&gt; debe ser múltiplo de 7:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascipt&quot;&gt;const mySchema = yup.object({
  seed: yup.number().required().test(&#39;seven-multiplo&#39;, &#39;El valor debe ser múltiplo de 7&#39;, (value) =&amp;gt; {
    return !(value % 7)
  },
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;inputs-en-subcomponentes&quot; tabindex=&quot;-1&quot;&gt;Inputs en subcomponentes&lt;/h1&gt;
&lt;p&gt;La forma enlazar cada input con su variable correspondiente es mediante la directiva &lt;em&gt;v-model&lt;/em&gt; que hace un enlace bidireccional: al cambiar la variable Vue cambia el valor del input y si el usuario cambia el input Vue actualiza la variable automáticamente.&lt;/p&gt;
&lt;p&gt;El problema lo tenemos si hacemos que los inputs estén en subcomponentes. Si ponemos allí el &lt;em&gt;v-model&lt;/em&gt; al escribir en el &lt;em&gt;input&lt;/em&gt; se modifica el valor de la variable en el subcomponente (que es donde está el &lt;em&gt;v-model&lt;/em&gt;) pero no en el padre.&lt;/p&gt;
&lt;p&gt;Para solucionar este problema tenemos 2 opciones: imitar nosotros en el subcomponente lo que hace &lt;em&gt;v-model&lt;/em&gt; o utilizar &lt;em&gt;slots&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v-model-en-subcomponente-input&quot; tabindex=&quot;-1&quot;&gt;v-model en subcomponente input&lt;/h2&gt;
&lt;p&gt;Como los cambios en el subcomponente no se transmiten al componente padre hay que emitir un evento desde el subcomponente que escuche el padre y que proceda a hacer el cambio en la variable.&lt;/p&gt;
&lt;p&gt;La solución es imitar lo que hace un &lt;em&gt;v-model&lt;/em&gt; que en realidad está formado por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un &lt;em&gt;v-bind&lt;/em&gt; para mostrar el valor inicial en el input&lt;/li&gt;
&lt;li&gt;un _v-on:input que se encarga de avisar para que se modifique la variable al cambiar el valor del &lt;em&gt;input&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así que lo que haremos es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;en el componente del formulario ponemos un &lt;em&gt;v-model&lt;/em&gt; que se encargue de actualizar la variable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form-input v-model=&amp;quot;campo&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;en el subcomponente del inpit ponemos
&lt;ul&gt;
&lt;li&gt;un &lt;em&gt;v-bind&lt;/em&gt; que muestre el valor inicial&lt;/li&gt;
&lt;li&gt;un &lt;em&gt;v-on:input&lt;/em&gt; que emita un evento &lt;em&gt;input&lt;/em&gt; al padre pasándole el valor actual&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;control-group&amp;quot;&amp;gt;
    &amp;lt;!-- id --&amp;gt;
    &amp;lt;label class=&amp;quot;control-label&amp;quot; :for=&amp;quot;nombre&amp;quot;&amp;gt;{ { titulo }}&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
      &amp;lt;input :value=&amp;quot;value&amp;quot; @input=&amp;quot;$emit(&#39;input&#39;, $event.target.value)&amp;quot; type=&amp;quot;text&amp;quot; :id=&amp;quot;nombre&amp;quot; :name=&amp;quot;nombre&amp;quot; placeholder=&amp;quot;Escribe el nombre&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;	
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: [&#39;value&#39;],
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejemplo-1&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Componente padre: formulario&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;form class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
	&amp;lt;form-input v-model=&amp;quot;user.id&amp;quot; titulo=&amp;quot;Id&amp;quot; nombre=&amp;quot;id&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
	&amp;lt;form-input v-model=&amp;quot;user.name&amp;quot; titulo=&amp;quot;Nombre&amp;quot; nombre=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.username&amp;quot; titulo=&amp;quot;Username&amp;quot; nombre=&amp;quot;username&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.email&amp;quot; titulo=&amp;quot;E-mail&amp;quot; nombre=&amp;quot;email&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.phone&amp;quot; titulo=&amp;quot;Teléfono&amp;quot; nombre=&amp;quot;phone&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.website&amp;quot; titulo=&amp;quot;URL&amp;quot; nombre=&amp;quot;website&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.companyName&amp;quot; titulo=&amp;quot;Nombre de la empresa&amp;quot; nombre=&amp;quot;nomEmpresa&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
    &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Subcomponente: form-input&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;control-group&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;control-label&amp;quot; :for=&amp;quot;nombre&amp;quot;&amp;gt;{ { titulo }}&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
      &amp;lt;input :value=&amp;quot;value&amp;quot; @input=&amp;quot;updateValue($event.target.value)&amp;quot; type=&amp;quot;text&amp;quot; :id=&amp;quot;nombre&amp;quot; :name=&amp;quot;nombre&amp;quot; placeholder=&amp;quot;&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;	
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;user-form-input&#39;,
  props: [&#39;value&#39;, &#39;titulo&#39;, &#39;nombre&#39;],
  methods: {
    updateValue(value) {
	this.$emit(&#39;input&#39;, value)
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;validacion-con-vee-validate&quot; tabindex=&quot;-1&quot;&gt;Validación con Vee Validate&lt;/h3&gt;
&lt;p&gt;Esto mismo podemos hacer si estamos usando &lt;em&gt;VeeValidate&lt;/em&gt; para validar nuestro formulario. Tenemos toda la información en la &lt;a href=&quot;https://vee-validate.logaretm.com/v3/advanced/refactoring-forms.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;slots&quot; tabindex=&quot;-1&quot;&gt;Slots&lt;/h2&gt;
&lt;p&gt;Ya vimos al hablar de la &lt;a href=&quot;https://pedroporo.github.io/03_1-comunicar_componentes.html#slots&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;comunicación entre componentes&lt;/a&gt; que un &lt;em&gt;slot&lt;/em&gt; es una ranura en un subcomponente que, al renderizarse, se rellena con lo que le pasa el padre.&lt;/p&gt;
&lt;p&gt;Esto podemos usarlo en los formularios de forma que el &amp;lt;input&amp;gt; con el v-model lo pongamos en un &lt;em&gt;slot&lt;/em&gt; de forma que está enlazado correctamente en el padre.&lt;/p&gt;
&lt;h3 id=&quot;ejemplo-2&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Componente padre: formulario&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;form class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
	&amp;lt;form-input titulo=&amp;quot;Id&amp;quot;&amp;gt;
            &amp;lt;input v-model=&amp;quot;user.id&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot; class=&amp;quot;form-control&amp;quot; disabled&amp;gt;
	&amp;lt;/form-input&amp;gt;
	&amp;lt;form-input titulo=&amp;quot;Nombre&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.name&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;Username&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.username&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;username&amp;quot; name=&amp;quot;username&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;E-mail&amp;quot;&amp;gt;
            &amp;lt;input v-model=&amp;quot;user.email&amp;quot; type=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;Teléfono&amp;quot;&amp;gt;
            &amp;lt;input v-model=&amp;quot;user.phone&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;phone&amp;quot; name=&amp;quot;phone&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;URL&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.website&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;website&amp;quot; name=&amp;quot;website&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;Nombre de la empresa&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.companyName&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;nomEmpresa&amp;quot; name=&amp;quot;nomEmpresa&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
    &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Subcomponente: form-input&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;control-group&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;control-label&amp;quot;&amp;gt;{ { titulo }}&amp;lt;/label&amp;gt;
        &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
	    &amp;lt;slot&amp;gt;Aquí va un INPUT&amp;lt;/slot&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;	
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;user-form-input&#39;,
  props: [&#39;value&#39;, &#39;titulo&#39;, &#39;nombre&#39;],
  methods: {
    updateValue(value) {
      this.$emit(&#39;input&#39;, value)
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/08-forms/" >
        </entry>
        <entry>
            <title>
                07-vuex
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/07-vuex/</id>
            <content type="html">
                &lt;h1 id=&quot;vuex&quot; tabindex=&quot;-1&quot;&gt;Vuex&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuex&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-y-configurar-vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar y configurar Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Vuex&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceder-al-state-desde-un-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceder al State desde un componente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#getters&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Getters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mutations&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#actions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#state-en-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;state en formularios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saber-m%C3%A1s&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saber más&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Es un &#39;&lt;em&gt;State Management Pattern&lt;/em&gt;&#39; basado en el patrón &lt;strong&gt;Flux&lt;/strong&gt; que sirve para controlar el flujo de datos en una aplicación.&lt;/p&gt;
&lt;p&gt;En Vue la comunicación entre componentes se hace hacia abajo mediante &lt;em&gt;props&lt;/em&gt; y hacia arriba emitiendo eventos. Ya vimos que cuando distintos componentes que no son padre-hijo tenían que compartir un mismo estado (acceder a los mismos datos) surgían problemas e intentamos solucionarlos con &lt;em&gt;event Bus&lt;/em&gt; o &lt;em&gt;store pattern&lt;/em&gt;. Estas soluciones pueden servir para pequeñas aplicaciones pero cuando crecen se hace difícil seguir los cambios con estos patrones. Para esos casos debemos usar &lt;em&gt;Vuex&lt;/em&gt;, que proporciona un almacén de datos centralizado para todos los componentes de la aplicación y asegura que los datos sólo puedan cambiarse de forma controlada.&lt;/p&gt;
&lt;p&gt;El uso de Vuex implica mayor complejidad en nuestra aplicación por lo que es recomendable su uso en aplicaciones de tamaño medio o grande (para aplicaciones pequeñas basta con un &lt;em&gt;eventBus&lt;/em&gt; o un &lt;em&gt;store  pattern&lt;/em&gt; hecho por nosotros). Como dijo &lt;em&gt;Dan Abramov&lt;/em&gt;, el creador de &lt;em&gt;Redux&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Las librerías &lt;em&gt;Flux&lt;/em&gt; son como las gafas: lo sabrás cuando las necesites&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vuex se integra con las &lt;em&gt;DevTools&lt;/em&gt; por lo que es muy sencillo depurar los datos del almacén y los cambios que se producen en ellos. Sin embargo no debemos almacenar todos los datos en Vuex, sólo los que necesitan varios componentes (los datos privados de un componente deben permanecer en él).&lt;/p&gt;
&lt;p&gt;El flujo de datos de una aplicación podemos verlo (de manera muy simplificada) en el siguiente esquema:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuex.vuejs.org/flow.png&quot; alt=&quot;one-way data flow&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;strong&gt;estado&lt;/strong&gt; es el conjunto de datos de nuestra aplicación&lt;/li&gt;
&lt;li&gt;La &lt;strong&gt;vista&lt;/strong&gt; representa el estado al usuario&lt;/li&gt;
&lt;li&gt;Las &lt;strong&gt;acciones&lt;/strong&gt; son las formas en que podemos cambiar el estado, normalmente en respuesta a entradas del usuario desde la vista&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El &lt;strong&gt;estado&lt;/strong&gt; de los datos se representa en la &lt;strong&gt;vista&lt;/strong&gt;, donde el usuario tiene herramientas que provocan &lt;strong&gt;acciones&lt;/strong&gt; que modifican el &lt;strong&gt;estado&lt;/strong&gt;. Este esquema funciona perfectamente cuando cada componente tiene su propio estado, pero empieza a dar problemas cuando el estado debe compartirse entre varios componentes. Para ese caso ya vimos soluciones como el &lt;em&gt;Event Bus&lt;/em&gt; o el &lt;em&gt;state management pattern&lt;/em&gt; pero son soluciones difícilmente mantenibles cuando nuestra aplicación crece. En aplicaciones medias o grandes es conveniente usar &lt;em&gt;Vuex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vuex centraliza la forma en que nuestros componentes se comunican entre ellos. Con Vuex el flujo de datos podemos verlo de la siguiente manera:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuex.vuejs.org/vuex.png&quot; alt=&quot;Vuex data flow&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Los componentes de Vue pueden renderizar datos de Vuex y es reactivo frente a ellos (si se modifican se volverá a renderizar el componente). Si el componente quiere modificar estos datos debe enviar (&lt;strong&gt;dispatch&lt;/strong&gt;) acciones que ejecutan un proceso (que puede ser asíncrono, por ejemplo una petición a una API). Cuando se resuelve la acción realiza una confirmación (&lt;strong&gt;commit&lt;/strong&gt;) que &lt;strong&gt;muta&lt;/strong&gt; el &lt;em&gt;estado&lt;/em&gt; de la aplicación (aquí podemos depurar con las &lt;em&gt;DevTools&lt;/em&gt;) por lo que se renderiza de nuevo el componente para mostrar el nuevo estado. En &lt;em&gt;Vuex&lt;/em&gt; almacenaremos tanto datos (accesibles desde cualquier componente) como métodos que se utilicen en más de un componente.&lt;/p&gt;
&lt;h2 id=&quot;instalar-y-configurar-vuex&quot; tabindex=&quot;-1&quot;&gt;Instalar y configurar Vuex&lt;/h2&gt;
&lt;p&gt;Si al crear nuestro proyecto Vue marcamos en las opciones que incluya Vuex la instalación y configuración de la herramienta se hará automáticamente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;se instala el paquete &lt;strong&gt;vuex&lt;/strong&gt;. Si no marcamos &lt;em&gt;vuex&lt;/em&gt; al crear el proyecto debemos instalarlo nosotros&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -S vuex
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;se crea el fichero de vuex en &lt;strong&gt;/src/store/index.js&lt;/strong&gt;. Es nuestro almacén donde se guardan todas las variables que vaya a usar más de un componente y los métodos para acceder a ellas y modificarlas. Su contenido en Vue2 es&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
  },
  mutations: {
  },
  actions: {
  },
  modules: {
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en Vue3&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createStore } from &#39;vuex&#39;

export default createStore({
  state: {
  },
  mutations: {
  },
  actions: {
  },
  modules: {
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;se importa dicho fichero en el &lt;strong&gt;main.js&lt;/strong&gt; para que el almacén esté disponible para todos los componentes en la variable &lt;code&gt;this.$store&lt;/code&gt;. Es igual que pasaba con &lt;em&gt;vue-router&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
import router from &#39;./router&#39;
import store from &#39;./store&#39;

new Vue({
  router,	
  store,
  render: h =&amp;gt; h(App)
}).$mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si no hemos seleccionado &lt;em&gt;vuex&lt;/em&gt; al crear el proyecto deberemos hacer estos 3 pasos nosotros manualmente. También tenemos la opción de no importar el &lt;em&gt;store&lt;/em&gt; en el fichero &lt;em&gt;main.js&lt;/em&gt; sino importarlo únicamente en cada componente que vaya a utilizarlo.&lt;/p&gt;
&lt;h2 id=&quot;usar-vuex&quot; tabindex=&quot;-1&quot;&gt;Usar Vuex&lt;/h2&gt;
&lt;p&gt;El corazón de Vuex es el &lt;strong&gt;&lt;em&gt;store&lt;/em&gt;&lt;/strong&gt; que es un objeto donde almacenar &lt;strong&gt;&lt;em&gt;states&lt;/em&gt;&lt;/strong&gt; (datos globales) de la aplicación pero se diferencia de un objeto normal en que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es reactivo&lt;/li&gt;
&lt;li&gt;sólo se puede modificar haciendo &lt;em&gt;commits&lt;/em&gt; de mutaciones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Desde la consola del navegador podemos usar las &lt;em&gt;DevTools&lt;/em&gt; para ver nuestro almacén. Para ello vamos a Vue y elegimos la segunda opción (Vuex):&lt;/p&gt;
&lt;p&gt;![DevTools - Vuex](/img/user/01 Apuntes/Vue Teoria Batoi/img/DevTools-Vuex.png)&lt;/p&gt;
&lt;p&gt;Al crear el almacén (normalmente en el fichero &lt;strong&gt;src/store/index.js&lt;/strong&gt;) pondremos en &lt;em&gt;state&lt;/em&gt; nuestras variables globales y en &lt;em&gt;mutations&lt;/em&gt; los métodos que se pueden usar para cambiarlas, ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment (state) {
      state.count++
    },
    decrement (state) {
      state.count--
    },
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada mutación recibe como primer parámetro el &lt;em&gt;state&lt;/em&gt; del almacén para que pueda modificarlo y el componente lo llama mediante el método &lt;code&gt;commit&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.commit(&#39;increment&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo hemos creado un almacén que tiene un dato (&lt;em&gt;count&lt;/em&gt;) y dos mutaciones para cambiar su valor (&lt;em&gt;increment&lt;/em&gt; y &lt;em&gt;decrement&lt;/em&gt;). Lo usa un componente que muestra el valor del contador e incluye un botón para incrementar su valor y otro para decrementarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Valor del contador: { { contador }}&amp;lt;/p&amp;gt;
    &amp;lt;button @click=&amp;quot;incrementa&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
    &amp;lt;button @click=&amp;quot;decrementa&amp;quot;&amp;gt;Decrementar&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  computed: {
    contador() {
      return this.$store.state.count
    }
  },
  methods: {
    incrementa() {
      this.$store.commit(&#39;increment&#39;)
    },
    decrementa() {
      this.$store.commit(&#39;decrement&#39;)
    },
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si no hemos importado el almacén en el &lt;code&gt;main.js&lt;/code&gt; lo tendremos que importar en cada componente que lo necesite (no es lo habitua):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import store from &#39;@/store&#39;

export default {
  computed: {
    contador() {
      return store.state.count
    }
  },
  methods: {
    incrementa() {
      store.commit(&#39;increment&#39;)
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;acceder-al-state-desde-un-componente&quot; tabindex=&quot;-1&quot;&gt;Acceder al State desde un componente&lt;/h3&gt;
&lt;p&gt;La mejor forma de acceder a propiedades del almacén es creando métodos &lt;em&gt;computed&lt;/em&gt; que cambiarán al cambiar el estado del mismo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  computed: {
    count () {
      return this.$store.state.count
    },
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos usar varias propiedades del &lt;em&gt;store&lt;/em&gt; en un componente en vez de hacer un método &lt;em&gt;computed&lt;/em&gt; para cada una podemos usar el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;mapState&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { mapState } from &#39;vuex&#39;

  computed: mapState([
    &#39;count&#39;	    // map this.count to store.state.count
  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;getters&quot; tabindex=&quot;-1&quot;&gt;Getters&lt;/h3&gt;
&lt;p&gt;En ocasiones no necesitamos una variable del &lt;em&gt;state&lt;/em&gt; sino cierta información sobre ella (por ejemplo no todas las tareas del array &lt;em&gt;todos&lt;/em&gt; sino sólo las tareas pendientes). En ese caso podemos filtrarlas en cada componente que las necesite o podemos hacer un &lt;em&gt;getter&lt;/em&gt; en el almacén que nos devuelva directamente las tareas filtradas. Estos &lt;em&gt;getters&lt;/em&gt; funcionan como las variables  &lt;em&gt;computed&lt;/em&gt; (sólo se ejecutan de nuevo si cambian los datos de que dependen):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default new Vuex.Store({
  state: {
    todos: [
      { id: 1, text: &#39;...&#39;, done: true },
      { id: 2, text: &#39;...&#39;, done: false }
    ]
  },
  getters: {
    pendingTodos: state =&amp;gt; {
      return state.todos.filter(todo =&amp;gt; !todo.done)
    },
    doneTodos: state =&amp;gt; {
      return state.todos.filter(todo =&amp;gt; todo.done)
    },
    pendingTodosCount: (state, getters) =&amp;gt; {
      return getters.pendingTodos.length
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada &lt;em&gt;getter&lt;/em&gt; recibe como primer parámetro el &lt;em&gt;state&lt;/em&gt; del almacén.&lt;/p&gt;
&lt;p&gt;Dentro de los componentes se usan como cualquier variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;computed: {
  pendingTodos () {
    return this.$store.getters.pendingTodos
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y también podemos usar varios con el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;mapGetters&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { mapGetters } from &#39;vuex&#39;

export default {
  // ...
  computed: {
    // mix the getters into computed with object spread operator
    ...mapGetters([
      &#39;pendingTodos&#39;,
      &#39;pendingTodosCount&#39;,
      // ...
    ])
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos podemos hacer getters también para los states y así no necesitamos mapState sino que accedemos a todo con mapGetters.&lt;/p&gt;
&lt;p&gt;Los getters pueden recibir parámetros, por ejemplo, para hacer búsquedas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getters: {
  // ...
  getTodoById: (state) =&amp;gt; (id) =&amp;gt; {
    return state.todos.find((todo) =&amp;gt; todo.id === id)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y lo llamaremos con &lt;code&gt;this.$store.getters.getTodoById(2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;mutations&quot; tabindex=&quot;-1&quot;&gt;Mutations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Una mutación no puede hacer una llamada asíncrona (por ejemplo llamar a &lt;em&gt;axios&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;La única manera de cambiar los datos del almacén es llamando a las mutaciones que hayamos definido, pero no se llaman como si fueran métodos sino que se lanzan (como si fueran eventos) con &lt;strong&gt;commit&lt;/strong&gt;: &lt;code&gt;this.$store.commit(&#39;increment&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Las mutaciones reciben como primer parámetro el &lt;em&gt;store&lt;/em&gt; pero pueden recibir otro parámetro adicional, llamado &lt;strong&gt;&lt;em&gt;payload&lt;/em&gt;&lt;/strong&gt;, donde incluyamos los datos a pasarle a la mutación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;mutations: {
  addTodo (state, toDo) {
    state.todos.push(toDo)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al llamar a la mutación le pasamos el valor esperado: &lt;code&gt;this.$store.commit(&#39;addTodo&#39;, this.newTodo)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cada vez que se llama a una mutación se registra en las &lt;em&gt;DevTools&lt;/em&gt; y podemos ver la mutación llamada y los datos que se le han pasado:&lt;/p&gt;
&lt;p&gt;![DevTools - Mutations](/img/user/01 Apuntes/Vue Teoria Batoi/img/DevTools-Vuex-mutations.png)&lt;/p&gt;
&lt;p&gt;Si queremos pasar varios parámetros el &lt;em&gt;payload&lt;/em&gt; deberá ser un objeto. En ese caso podemos pasar el nombre de la mutación como propiedad &lt;em&gt;type&lt;/em&gt; del objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.commit({
  type: &#39;incrementBy&#39;,
  amount: 10
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos llamar a las mutaciones desde un componente, aunque lo habitual es llamar a acciones que ejecuten esas mutaciones. Recuerda que el código de las mutaciones &lt;strong&gt;NO puede ser asíncrono&lt;/strong&gt;, por lo que no pueden, por ejemplo, hacer una llamada a &lt;em&gt;axios&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para llamar a la mutación desde un componente haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.commit(&#39;increment&#39;):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al igual con con el estado o los &lt;em&gt;getters&lt;/em&gt; podemos &lt;em&gt;mapear&lt;/em&gt; las mutaciones a métodos locales para poder hacer &lt;code&gt;this.increment()&lt;/code&gt; en lugar de &lt;code&gt;this.$store.commit(&#39;increment&#39;)&lt;/code&gt; con el &lt;em&gt;helper&lt;/em&gt; &lt;em&gt;mapMutatios&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { mapMutations } from &#39;vuex&#39;

export default {
  // ...
  methods: {
    ...mapMutations([
      &#39;increment&#39;, // map `this.increment()` to `this.$store.commit(&#39;increment&#39;)`
      &#39;incrementBy&#39; // map `this.incrementBy(amount)` 
                    // to `this.$store.commit(&#39;incrementBy&#39;, amount)`
    ]),
    // Y podemos hacer &#39;alias&#39; de las mutaciones
    ...mapMutations({
      add: &#39;increment&#39; // map `this.add()` to `this.$store.commit(&#39;increment&#39;)`
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;actions&quot; tabindex=&quot;-1&quot;&gt;Actions&lt;/h3&gt;
&lt;p&gt;Son métodos del almacén como las mutaciones pero que &lt;strong&gt;SÍ pueden hacer llamadas asíncronas&lt;/strong&gt;. Por tanto es aquí donde haremos las llamadas a la BBDD y cuando el servidor responda modificaremos los datos del &lt;em&gt;store&lt;/em&gt;. Lo mejor es no cambiarlos directamente en la &lt;em&gt;action&lt;/em&gt; (aunque podría hacerse) sino que la &lt;em&gt;action&lt;/em&gt; debería llamar a una &lt;em&gt;mutation&lt;/em&gt; que la cambie y así se registra en las &lt;em&gt;DevTools&lt;/em&gt;. Las acciones reciben como parámetro un objeto &lt;em&gt;context&lt;/em&gt; con las mismas propiedades y métodos que el almacén, lo que permite:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lanzar una mutación con &lt;code&gt;context.commit(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;acceder a los datos con &lt;code&gt;context.state.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;acceder a los getters con &lt;code&gt;context.getters.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;llamar a otras acciones con &lt;code&gt;context.dispatch(&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
import axios from &#39;axios&#39;

export default new Vuex.Store({
  state: {
    todos: []
  },
  mutations: {
    addTodo(state, todo) {
      state.todos.push(todo);
    },
  },
  actions: {
    addTodo(context, item) {
      axios.post(`${baseURL}/todos`, item)
      .then((response) =&amp;gt; context.commit(&#39;addTodo&#39;, response.data))
      .catch((error) =&amp;gt; alert(error))
    },
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para llamarla desde un componente hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.dispatch(&#39;addTodo&#39;, this.newTodo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos usar la desestructuración de objetos de ES2015 para obtener sólo la parte del contexto que nos interesa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  actions: {
    addTodo({ commit }, item) {
      axios.post(`${baseURL}/todos`, item)
      .then((response) =&amp;gt; commit(&#39;addTodo&#39;, response.data))
      .catch((error) =&amp;gt; alert(error))
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Igual que antes podemos usar el &lt;em&gt;helper&lt;/em&gt; &lt;em&gt;mapActions&lt;/em&gt; para mapear acciones y no tener que llamarlas en el componente con &lt;code&gt;this.$store.dispatch(&#39;...&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si la acción realiza una llamada asíncrona y el componente que la llama tiene que enterarse de cuándo finaliza debe devolver una promesa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  actions: {
    addTodo(context, item) {
      return new Promise((resolve, reject) =&amp;gt; {
        addTodo(context, item) {
          axios.post(`${baseURL}/todos`, item)
          .then((response) =&amp;gt; {
            context.commit(&#39;addTodo&#39;, response.data)
            resolve(response.data)
          })
          .catch((error) =&amp;gt; reject(error))
        }
    },
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso en el componente tenemos los métodos &lt;em&gt;then&lt;/em&gt; y &lt;em&gt;catch&lt;/em&gt; para saber cuándo ha acabado la acción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.dispatch(&#39;addTodo&#39;, this.newTodo)
.then((todo) =&amp;gt; {   	      // se ejecutará si la acción ha hecho un resolve()
  alert(&#39;Añadida la tarea &#39; + todo.id)
  this.$router.push(&#39;/todos&#39;)
})
.catch((error) =&amp;gt; alert(error))	// se ejecutará si la acción ha hecho un reject()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: si quien llama a una acción no necesita saber cuándo termina la acción ni su resultado la acción no es necesario que devuelva una promesa&lt;/p&gt;
&lt;h2 id=&quot;state-en-formularios&quot; tabindex=&quot;-1&quot;&gt;state en formularios&lt;/h2&gt;
&lt;p&gt;Si queremos usar un formulario para modificar un state del store no podemos asociarlo al input con la directiva &lt;strong&gt;v-model&lt;/strong&gt; porque cuando el usuario cambie el valor del input estaría escribiendo directamente sobre un state, lo que no puede hacerse más que por medio de una mutación.&lt;/p&gt;
&lt;p&gt;Tenemos 2 soluciones al problema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;podemos no usar el v-model sino descomponerlo en un &lt;em&gt;:value&lt;/em&gt; y un &lt;em&gt;@input&lt;/em&gt; como vimos al hablar de poner un input en un subcomponente&lt;/li&gt;
&lt;li&gt;podemos ponerle al computed de ese state un setter y un getter como vimos en el capítulo de &lt;a href=&quot;https://pedroporo.github.io/06-profundizando.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Profundizando en Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la &lt;a href=&quot;https://vuex.vuejs.org/guide/forms.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt; de Vuex.&lt;/p&gt;
&lt;h2 id=&quot;saber-mas&quot; tabindex=&quot;-1&quot;&gt;Saber más&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vuex.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.tutsplus.com/es/tutorials/how-to-build-complex-large-scale-vuejs-applications-with-vuex--cms-30952&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cómo Construir Aplicaciones Complejas y a Gran Escala Vue.js con Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vueschool.io/courses/vuex-for-everyone&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuex for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://elabismodenull.wordpress.com/2017/05/29/vuejs-introduccion-a-vuex/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VueJS: Introducción a vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/fullstackio/managing-state-in-vue-js-23a0352b1c87&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Managing State in Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/07-vuex/" >
        </entry>
        <entry>
            <title>
                07-pinia
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/07-pinia/</id>
            <content type="html">
                &lt;h1 id=&quot;pinia&quot; tabindex=&quot;-1&quot;&gt;Pinia&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pinia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-y-configurar-pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar y configurar Pinia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-store&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Pinia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#getters&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Getters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#actions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#state-en-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;state en formularios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Es un &#39;&lt;em&gt;State Management Pattern&lt;/em&gt;&#39; basado en el patrón &lt;strong&gt;Flux&lt;/strong&gt; que sirve para controlar el flujo de datos en una aplicación. Sustituye a la anterior librería usada en &lt;em&gt;Vue 2&lt;/em&gt; llamada &lt;em&gt;Vuex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Según la filosofía de &lt;em&gt;Vue&lt;/em&gt; cada componente es una unidad funcional que contiene 3 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;estado&lt;/strong&gt;: los datos o &lt;em&gt;source of truth&lt;/em&gt; que maneja en componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vista&lt;/strong&gt;: la representación del &lt;em&gt;estado&lt;/em&gt; que se ve en la aplicación&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;acciones&lt;/strong&gt;: la forma en que el &lt;em&gt;estado&lt;/em&gt; puede cambiar para reaccionar a entradas del usuario en  la &lt;em&gt;vista&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo, el componente &lt;em&gt;contador&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
  // state
  data() {
    return {
      count: 0
    }
  },
  // actions
  methods: {
    increment() {
      this.count++
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;!-- view --&amp;gt;
&amp;lt;template&amp;gt;
  {{ count }}
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto es lo que se llama &lt;strong&gt;&lt;em&gt;one-way data flow&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/state-flow.a8bc738e.png&quot; alt=&quot;one-way data flow&quot; /&gt;&lt;/p&gt;
&lt;p&gt;El problema lo tenemos cuando un componente necesita acceder a datos (&lt;em&gt;state&lt;/em&gt;) de otro componente.&lt;/p&gt;
&lt;p&gt;En Vue la comunicación entre componentes padre-hijo se hace hacia abajo mediante &lt;code&gt;props&lt;/code&gt; y hacia arriba emitiendo eventos. Y vimos que si distintos componentes que no son padre-hijo tenían que compartir un mismo estado (acceder a los mismos datos) surgían problemas e intentamos solucionarlos con el patrón &lt;em&gt;store pattern&lt;/em&gt;. Esto puede servir para pequeñas aplicaciones pero cuando crecen se hace difícil seguir los cambios. Para esos casos debemos usar &lt;em&gt;Pinia&lt;/em&gt;, que proporciona un almacén de datos centralizado para todos los componentes de la aplicación y asegura que los datos sólo puedan cambiarse de forma controlada.&lt;/p&gt;
&lt;p&gt;El uso de &lt;em&gt;Pinia&lt;/em&gt; es imprescindible en aplicaciones de tamaño medio o grande pero incluso para aplicaciones pequeñas nos ofrece ventajas frente a un &lt;em&gt;store pattern&lt;/em&gt; hecho por nosotros como soporte para las &lt;em&gt;DevTools&lt;/em&gt; y para &lt;em&gt;Server Side Rendering&lt;/em&gt; o uso de Typescript.&lt;/p&gt;
&lt;p&gt;Como ya dijimos, no debemos almacenar todos los datos en el &lt;em&gt;store centralizado&lt;/em&gt; sino sólo los que necesitan varios componentes (los datos privados de un componente deben permanecer en él).&lt;/p&gt;
&lt;h2 id=&quot;instalar-y-configurar-pinia&quot; tabindex=&quot;-1&quot;&gt;Instalar y configurar Pinia&lt;/h2&gt;
&lt;p&gt;La forma más sencilla de utilizar &lt;em&gt;Pinia&lt;/em&gt; es incluirla a la hora de crear nuestro proyecto cuando nos pregunta si queremos usarla. Esto hace que la instalación y configuración de la herramienta se haga automáticamente.&lt;/p&gt;
&lt;p&gt;Al entrar en nuestro nuevo proyecto vemos que dentro de &lt;code&gt;/src&lt;/code&gt; se ha creado una carpeta llamada &lt;code&gt;stores/&lt;/code&gt; donde crearemos los distintos almacenes de datos (podemos tener sólo uno o varios).&lt;/p&gt;
&lt;p&gt;Para poder usar &lt;em&gt;Pinia&lt;/em&gt; en los distintos componentes vemos que en el fichero &lt;code&gt;main.js&lt;/code&gt; se importa la función &lt;code&gt;createPinia()&lt;/code&gt; y se indica que se use en la instancia de Vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createApp } from &#39;vue&#39;
import { createPinia } from &#39;pinia&#39; // &amp;lt;---
import App from &#39;./App.vue&#39;
import router from &#39;./router&#39;

createApp(App).use(createPinia()).use(router).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos usar &lt;em&gt;Pinia&lt;/em&gt; en un proyecto existente donde no la seleccionamos al crear el proyecto deberemos instalar la librería como dependencia de producción y modificar el fichero &lt;code&gt;main.js&lt;/code&gt; para que pueda usarse, como hemos visto arriba. Luego crearemos la carpeta &lt;code&gt;/src/stores/&lt;/code&gt; y en ella los almacenes que queramos usar.&lt;/p&gt;
&lt;h2 id=&quot;crear-un-store&quot; tabindex=&quot;-1&quot;&gt;Crear un store&lt;/h2&gt;
&lt;p&gt;Ahora hay que crear el fichero del store. Podemos tener todos los datos en un único fichero o, si son muchos, hacer ficheros diferentes. Por ejemplo para la aplicación de &#39;ToDo&#39; podemos crear su store en &lt;strong&gt;/src/stores/toDo.js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Al crear un almacén pondremos en él todas las variables que vaya a usar más de un componente (dentro de &lt;strong&gt;&lt;code&gt;state&lt;/code&gt;&lt;/strong&gt;) y los métodos para acceder a ellas y modificarlas (dentro de &lt;strong&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/strong&gt;), por ejemplo, para compartir un contador haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { defineStore } from &#39;pinia&#39;

export const useCounterStore = defineStore(&#39;counter&#39;, {
  state() {
    return {
      count: 0
    }
  },
  // o usando arrow functions
  // state: () =&amp;gt; ({
  //  count: 0
  // }),

  actions: {
    increment () {
      this.count++
    },
    decrement () {
      this.count--
    },
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo hemos creado un almacén que tiene un dato (&lt;em&gt;count&lt;/em&gt;) y dos métodos para cambiar su valor (&lt;em&gt;increment&lt;/em&gt; y &lt;em&gt;decrement&lt;/em&gt;). El primer parámetro de &lt;code&gt;defineStore&lt;/code&gt; es el nombre con el que veremos el almacén desde las &lt;em&gt;DevTools&lt;/em&gt; (por si tenemos varios).&lt;/p&gt;
&lt;p&gt;Desde la consola del navegador podemos usar las &lt;em&gt;DevTools&lt;/em&gt; para ver nuestro almacén. Para ello vamos a la pestaña de Vue y desde el &lt;em&gt;Inspector&lt;/em&gt; buscamos &lt;em&gt;Pinia&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;![DevTools - Pinia](/img/user/01 Apuntes/Vue Teoria Batoi/img/DevTools-Pinia.png)&lt;/p&gt;
&lt;p&gt;Si al crear el proyecto hemos incorporado &lt;em&gt;Pinia&lt;/em&gt; nos ha creado un almacén de ejemplo como el anterior, pero escrito con la sintaxis de &lt;em&gt;Compositon API&lt;/em&gt; que sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ref } from &#39;vue&#39;
import { defineStore } from &#39;pinia&#39;

export const useCounterStore = defineStore(&#39;counter&#39;, () =&amp;gt; {
  const count = ref(0)
  function increment() {
    count.value++
  }
  function increment() {
    count.value--
  }

  return { count, increment, decrement }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;usar-pinia&quot; tabindex=&quot;-1&quot;&gt;Usar Pinia&lt;/h2&gt;
&lt;p&gt;En cada componente que lo necesitemos podemos usar el almacén de datos. Para ello lo importamos y luego definimos en &lt;em&gt;computed&lt;/em&gt; las variables del &lt;em&gt;state&lt;/em&gt; a que queramos acceder y en &lt;em&gt;methods&lt;/em&gt; las &lt;em&gt;actions&lt;/em&gt; que deseemos. Para ello debemos usar los &lt;em&gt;helpers&lt;/em&gt; &lt;code&gt;mapState&lt;/code&gt; y &lt;code&gt;mapActions&lt;/code&gt; en los que indicaremos las variables y métodos del &lt;em&gt;store&lt;/em&gt; que queremos usar en este componente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//MyComponent.vue
import { useCounterStore } from &#39;../stores/conterStore&#39;;
import { mapState, mapActions } from &#39;pinia&#39;;

export default {
  ...
  computed: {
    ...mapState(useCounterStore, {
      count: &#39;count&#39;,
    })
  },
  methods: {
    ...mapActions(useCounterStore, [&#39;increment&#39;, &#39;decrement&#39;])
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto se &lt;em&gt;mapean&lt;/em&gt; las variables, &lt;em&gt;getters&lt;/em&gt; y &lt;em&gt;actions&lt;/em&gt; a variables y métodos locales a los que podemos acceder desde &lt;strong&gt;&lt;code&gt;this.&lt;/code&gt;&lt;/strong&gt; (por ejemplo &lt;code&gt;this.count&lt;/code&gt; o &lt;code&gt;this.increment()&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;getters&quot; tabindex=&quot;-1&quot;&gt;Getters&lt;/h3&gt;
&lt;p&gt;En ocasiones no necesitamos una variable del &lt;em&gt;state&lt;/em&gt; sino cierta información sobre ella (por ejemplo no todas las tareas del array &lt;em&gt;todos&lt;/em&gt; sino sólo las tareas pendientes). En ese caso podemos filtrarlas en cada componente que las necesite o podemos hacer un método en el almacén (dentro de &lt;strong&gt;&lt;code&gt;getters&lt;/code&gt;&lt;/strong&gt;) que nos devuelva directamente las tareas filtradas. Estos &lt;em&gt;getters&lt;/em&gt; funcionan como las variables  &lt;em&gt;computed&lt;/em&gt; (sólo se ejecutan de nuevo si cambian los datos de que dependen):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { defineStore } from &#39;pinia&#39;

export const useToDoStore = defineStore(&#39;todo&#39;, {
  state: () =&amp;gt; ({
      /** @type { { title: string, id: number, done: boolean }[]} */
      todos: [
        { id: 1, title: &#39;...&#39;, done: true },
        { id: 2, title: &#39;...&#39;, done: false }
      ],
      nextId: 3,
  }),
  getters: {
    // reciben como primer parámetro el &#39;state&#39;
    finishedTodos: (state) =&amp;gt; state.todos.filter((todo) =&amp;gt; todo.done),
    unfinishedTodos: (state) =&amp;gt; state.todos.filter((todo) =&amp;gt; !todo.done),
    /**
     * @returns { { title: string, id: number, done: boolean }[]}
     */
  },
  actions: {
    // any amount of arguments, return a promise or not
    addTodo(title) {
        this.todos.push({
          title,
          id: this.nextId,
          done: false
        })
        this.nextId++
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada &lt;em&gt;getter&lt;/em&gt; recibe como primer parámetro el &lt;em&gt;state&lt;/em&gt; del almacén.&lt;/p&gt;
&lt;p&gt;Dentro de los componentes se usan como cualquier variable del &lt;em&gt;state&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  ...
  computed: {
    ...mapState(useToDoStore, {
      todos: &#39;todos&#39;,
      finishedTodos: &#39;finishedTodos&#39;,
    })
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los getters pueden recibir parámetros, por ejemplo, para hacer búsquedas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getters: {
  getTodoById: (state) =&amp;gt; (id) =&amp;gt; state.todos.find((todo) =&amp;gt; todo.id === id)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde el componente lo llamaremos con &lt;code&gt;this.getTodoById(2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;actions&quot; tabindex=&quot;-1&quot;&gt;Actions&lt;/h3&gt;
&lt;p&gt;La manera de cambiar los datos del almacén es llamando a las acciones que hayamos definido, y que hemos &lt;em&gt;mapeado&lt;/em&gt; al componente como métodos locales. Estas acciones pueden recibir tantos parámetros como se desee.&lt;/p&gt;
&lt;p&gt;Cada vez que se llama a una acción se registra en las &lt;em&gt;DevTools&lt;/em&gt; y podemos ver la acción llamada y los datos que se le han pasado:&lt;/p&gt;
&lt;p&gt;![DevTools - Actions](/img/user/01 Apuntes/Vue Teoria Batoi/img/DevTools-Pinia-actions.png)&lt;/p&gt;
&lt;p&gt;Las acciones pueden hacer llamadas asíncronas. Lo normal es llamar a la BBDD y cuando el servidor responda modificaremos los datos del &lt;em&gt;store&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { defineStore } from &#39;pinia&#39;
import TodoService from &#39;../services/TodoService.js&#39;

export const useToDoStore = defineStore(&#39;todo&#39;, {
  state: () =&amp;gt; {
    return {
      todos: [],
      nextId: 0,
    }
  },
  actions: {
    async addTodo(title) {
      try {
        const newToDo = await TodoService.addTodo({ 
          title, 
          id: this.nextId + 1, 
          isFinished: false 
        });
        this.nextId++
        this.todos.push(newToDo)
      } catch(error) {
        throw error;
      }
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si la acción realiza una llamada asíncrona y el componente que la llama tiene que enterarse de cuándo finaliza debe devolver una promesa (debe declararse con &lt;code&gt;async&lt;/code&gt; o &lt;em&gt;envolverse&lt;/em&gt; en un &lt;code&gt;return new Promise(...)&lt;/code&gt;). En el componente podemos usar &lt;code&gt;await&lt;/code&gt; o &lt;code&gt;then / catch&lt;/code&gt; para saber cuándo ha acabado la acción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  await this.addTodo(this.newTodo)
  alert(&#39;Añadida la tarea &#39; + this.newTodo.title)
  this.$router.push(&#39;/todos&#39;)
} catch(error) {
  alert(error)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: si quien llama a una acción no necesita saber cuándo termina la acción ni su resultado no es necesario llamarla con &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;state-en-formularios&quot; tabindex=&quot;-1&quot;&gt;state en formularios&lt;/h2&gt;
&lt;p&gt;Aunque no es lo habitual, si queremos usar un formulario para modificar un &lt;em&gt;state&lt;/em&gt; del &lt;em&gt;store&lt;/em&gt; no podemos asociarlo al input con la directiva &lt;strong&gt;v-model&lt;/strong&gt; porque cuando el usuario cambie el valor del input estaría escribiendo directamente sobre un &lt;em&gt;state&lt;/em&gt;, lo que debe hacerse por medio de una acción.&lt;/p&gt;
&lt;p&gt;Tenemos 2 soluciones al problema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;podemos no usar el v-model sino descomponerlo en un &lt;em&gt;:value&lt;/em&gt; y un &lt;em&gt;@input&lt;/em&gt; como vimos al hablar de poner un input en un subcomponente&lt;/li&gt;
&lt;li&gt;podemos ponerle al computed de ese state un setter y un getter como vimos en el capítulo de &lt;a href=&quot;https://pedroporo.github.io/06-profundizando.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Profundizando en Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la &lt;a href=&quot;https://pinia.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Pinia&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/07-pinia/" >
        </entry>
        <entry>
            <title>
                06-profundizando
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/06-profundizando/</id>
            <content type="html">
                &lt;h1 id=&quot;profundizando-en-vue&quot; tabindex=&quot;-1&quot;&gt;Profundizando en Vue&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#profundizando-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Profundizando en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#computed&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Computed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#watchers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Watchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceder-al-dom-ref&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceder al DOM: &#39;ref&#39;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#nexttick&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;nextTick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#clases-html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clases HTML&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sintaxis-de-objeto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sintaxis de objeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sintaxis-de-array&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sintaxis de array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#asignar-clases-a-un-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Asignar clases a un componente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#asignar-estilos-directamente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Asignar estilos directamente&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ciclo-de-vida-del-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ciclo de vida del componente&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-ciclo-de-vida-de-un-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El ciclo de vida de un componente&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#componentes-as%C3%ADncronos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Componentes asíncronos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#custom-directives&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Custom Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#im%C3%A1genes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Imágenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#transiciones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Transiciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#entornos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Entornos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#guards-del-router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Guards del router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;computed&quot; tabindex=&quot;-1&quot;&gt;Computed&lt;/h2&gt;
&lt;p&gt;Cuando se crea un componente de Vue (o el componente raíz) se le pasa como parámetro un objeto con las opciones con que se creará. Entre ellas tenemos &lt;em&gt;props&lt;/em&gt;, _ data_, &lt;em&gt;methods&lt;/em&gt;, y también otras como &lt;em&gt;computed&lt;/em&gt; y &lt;em&gt;watch&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hemos visto que en una interpolación o directiva podemos poner una expresión javascript. Pero si la expresión es demasiado compleja hace que nuestro HTML sea más difícil de leer. La solución es crear una expresión calculada que nos permite tener &amp;quot;limpio&amp;quot; el HTML. Por ejemplo un código con expresiones complejas como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Autor: { { author.name + &#39; &#39; + author.surname }}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Ha publicado libros: { { author.books.length &amp;gt; 0 ? &#39;Sí&#39; : &#39;No&#39; }}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;author-item&#39;,
  data() {
    return {
      author: {
        name: &#39;John&#39;,
        surname: &#39;Doe&#39;,
        books: [
          &#39;Vue 2 - Advanced Guide&#39;,
          &#39;Vue 3 - Basic Guide&#39;,
          &#39;Vue 4 - The Mystery&#39;
        ]
      }
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se puede simplificar creando propiedades calculadas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Autor: { { fullName }}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Ha publicado libros: { { hasPublished }}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;author-item&#39;,
  data() {
    return {
      author: {
        name: &#39;John&#39;,
        surname: &#39;Doe&#39;,
        books: [
          &#39;Vue 2 - Advanced Guide&#39;,
          &#39;Vue 3 - Basic Guide&#39;,
          &#39;Vue 4 - The Mystery&#39;
        ]
      }
    }
  },
  computed: {
    fullName() {
      return this.name + &#39; &#39; + this.surname;
    },
    hasPublished() {
      return this.author.books.length &amp;gt; 0 ? &#39;Sí&#39; : &#39;No&#39;
    }
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En lugar de definir &lt;em&gt;computed&lt;/em&gt; podríamos haber obtenido el mismo resultado usando métodos, pero la ventaja de las propiedades calculadas es que se cachean por lo que si se vuelven a tener que renderizar en el DOM no vuelven a evaluarse, a menos que cambie el valor de alguna de las variables reactivas que use.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por defecto las propiedades &lt;em&gt;computed&lt;/em&gt; sólo hacen un &lt;em&gt;getter&lt;/em&gt;, por lo que no se puede cambiar su valor. Pero podemos si queremos hacerlo definir métodos &lt;em&gt;getter&lt;/em&gt; y &lt;em&gt;setter&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  computed: {
    fullName:
      // getter
      get() {
        return this.name + &#39; &#39; + this.surname;
      },
      // setter
      set(newValue) {
        const names = newValue.split(&#39; &#39;);
        this.name = names[0];
        this.surname = names[names.length - 1];
      }
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si hacemos &lt;code&gt;this.fullName = &#39;John Doe&#39;&lt;/code&gt; estaremos asignando los valores adecuados a las variables &lt;em&gt;name&lt;/em&gt; y &lt;em&gt;surname&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;watchers&quot; tabindex=&quot;-1&quot;&gt;Watchers&lt;/h2&gt;
&lt;p&gt;Vue proporciona una forma genérica de controlar cuándo cambia el valor de una variable reactiva para poder ejecutar código en ese momento poniéndole un &lt;em&gt;watch&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  data() {
    return {
      name: &#39;John&#39;,
      surname: &#39;Doe&#39;,
      fullName: &#39;John Doe&#39;,
    }
  },
  watch: {
    name(newValue, oldValue) {
      this.fullName = newValue + &#39; &#39; + this.surname;
    },
    surname(newValue, oldValue) {
      this.fullName = this.name + &#39; &#39; + newValue;
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso no tiene mucho sentido y es más fácil (y más eficiente) usar una propiedad &lt;em&gt;computed&lt;/em&gt; como hemos visto antes, pero hay ocasiones en que necesitamos ejecutar código al cambiar una variable y es así donde se usan. Veremos su utilidad cuando trabajemos con &lt;em&gt;vue-router&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;NOTA: los &lt;em&gt;watcher&lt;/em&gt; son costosos por lo que no debemos abusar de ellos&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-10&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;acceder-al-dom-ref&quot; tabindex=&quot;-1&quot;&gt;Acceder al DOM: &#39;ref&#39;&lt;/h2&gt;
&lt;p&gt;Aunque Vue se encarga de la vista por nosotros en alguna ocasión podemos tener que acceder a un elemento del DOM. En ese caso no haremos un &lt;code&gt;document.getElement...&lt;/code&gt; sino que le ponemos una referencia al elemento con el atributo &lt;code&gt;ref&lt;/code&gt; para poder acceder al mismo desde nuestro script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;form ref=&amp;quot;myForm&amp;quot;&amp;gt;
    ...
  &amp;lt;/form&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  mounted() {
    this.$refs.myForm.setAttribute(&#39;novalidate&#39;, true)
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde el código tenemos acceso a todas las referencias desde &lt;code&gt;this.$refs&lt;/code&gt;. Hay que tener en cuenta que sólo se puede acceder a un elemento después de montarse el componente (en el &lt;em&gt;hook&lt;/em&gt; &lt;strong&gt;mounted()&lt;/strong&gt; o después).&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;next-tick&quot; tabindex=&quot;-1&quot;&gt;nextTick&lt;/h3&gt;
&lt;p&gt;Si modificamos una variable reactiva el cambio se refleja automáticamente en el DOM, pero no inmediatamente sino que se espera hasta el evento &lt;em&gt;nextTick&lt;/em&gt; en el ciclo de modificación para asegurarse de no cambiar algo que quizá va a volverse a cambiar en este ciclo.&lt;/p&gt;
&lt;p&gt;Si accedemos al DOM antes de que se produzca este evento el valor aún será el antiguo. Para obtener el nuevo valor hemos de esperar al &lt;em&gt;nextTick&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Contador: &amp;lt;span ref=&amp;quot;contador&amp;quot;&amp;gt;{ { count }}&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementa&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      count.value++
      console.log(&#39;Contador en el DOM: &#39; + this.$refs.contador.textContent)
      // Devolverá el valor sin actualizar aún
      nextTick(() =&amp;gt; {
        console.log(&#39;Contador en el DOM tras nextTick: &#39; + this.$refs.contador.textContent)
        // Devolverá el valor actualizado
      })
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Realmente es algo que seguramente nunca necesitemos pero así conocemos un poco más cómo funciona Vue internamente.&lt;/p&gt;
&lt;h2 id=&quot;clases-html&quot; tabindex=&quot;-1&quot;&gt;Clases HTML&lt;/h2&gt;
&lt;p&gt;Ya hemos visto que en Javascript usamos las clases con mucha frecuencia, normalmente para asignar a elementos estilos definidos en el CSS, pero también para identificar elementos sin usar una &lt;em&gt;id&lt;/em&gt; (como hacíamos poniendo a los botones de acciones de los productos las clases &lt;em&gt;subir&lt;/em&gt;, &lt;em&gt;bajar&lt;/em&gt;, &lt;em&gt;editar&lt;/em&gt; o &lt;em&gt;borrar&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;En Vue tenemos diferentes formas de asignar clases. La más simple sería &lt;em&gt;bindear&lt;/em&gt; el atributo &lt;em&gt;class&lt;/em&gt; y gestionarlas directamente en el código, pero no es lo más cómodo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :class=&amp;quot;clasesDelDiv&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso tendríamos que asignar a la variables &lt;em&gt;clasesDelDiv&lt;/em&gt; las diferentes clases separadas por espacio, lo que es engorroso de mantener.&lt;/p&gt;
&lt;h3 id=&quot;sintaxis-de-objeto&quot; tabindex=&quot;-1&quot;&gt;Sintaxis de objeto&lt;/h3&gt;
&lt;p&gt;Una forma más sencilla es &lt;em&gt;bindear&lt;/em&gt; un objeto donde cada propiedad es el nombre de una posible clase y su valor es un booleano que indica si tendrá o no dicha clase, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div 
    class=&amp;quot;static&amp;quot;
    :class=&amp;quot;{ active: isActive, &#39;text-danger&#39;: hasError }&amp;quot;
&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso el &amp;lt;DIV&amp;gt; tendrá las clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static: siemrpe tendrá esta clase. Como véis puede coexistir la directiva &lt;em&gt;:class&lt;/em&gt; con el atributo &lt;em&gt;class&lt;/em&gt; y se suman ambos&lt;/li&gt;
&lt;li&gt;active: tendrá esta clase si el valor de la variable &lt;em&gt;isActive&lt;/em&gt; es &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;text-danger: ídem para la variable &lt;em&gt;hasError&lt;/em&gt;. Si el nombre de una clase tiene más de una palabra hay que entrecomillarla&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para mejorar la legibilidad del HTML podemos poner el objeto de las clases en el Javascript&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div 
    class=&amp;quot;static&amp;quot;
    :class=&amp;quot;classObject&amp;quot;
&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    classObject: {
      active: true,
      &#39;text-danger&#39;: false
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sintaxis-de-array&quot; tabindex=&quot;-1&quot;&gt;Sintaxis de array&lt;/h3&gt;
&lt;p&gt;Podemos indicar las clases en forma de array de variables que contienen la clase a asignar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :class=&amp;quot;[activeClass, errorClass]&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    activeClass: &#39;active&#39;,
    errorClass: &#39;text-danger&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso el &amp;lt;DIV&amp;gt; tendrá las clases &lt;code&gt;active&lt;/code&gt; y &lt;code&gt;text-danger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Y es posible incluir sintaxis de objeto dentro de la sintaxis de array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :class=&amp;quot;[{ active: isActive}, errorClass]&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;asignar-clases-a-un-componente&quot; tabindex=&quot;-1&quot;&gt;Asignar clases a un componente&lt;/h3&gt;
&lt;p&gt;En la etiqueta de un componente podemos ponerle un atributo &lt;em&gt;class&lt;/em&gt; que le asignará las clases incluidas y que se sumaran a las que se le asignen dentro del propio componente. Por ejemplo, si el &amp;lt;DIV&amp;gt; del ejemplo anterior es el &lt;em&gt;template&lt;/em&gt; de un componente llamado MyComponent puedo poner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component class=&amp;quot;main highligth&amp;quot;&amp;gt;&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso el &amp;lt;DIV&amp;gt; tendrá las clases &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;highligth&lt;/code&gt;, &lt;code&gt;active&lt;/code&gt; si la variable &lt;em&gt;isActive&lt;/em&gt; vale &lt;em&gt;true&lt;/em&gt; y &lt;code&gt;text-danger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En Vue3 el &lt;em&gt;template&lt;/em&gt; de un componente puede tener varios elementos raíz. En ese caso para indicar a cuál se aplicarán las clases definidas en el padre se usa la propiedad &lt;code&gt;$attr.class&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;p :class=&amp;quot;$attrs.class&amp;quot;&amp;gt;Hi!&amp;lt;/p&amp;gt;
    &amp;lt;span&amp;gt;This is a child component&amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;asignar-estilos-directamente&quot; tabindex=&quot;-1&quot;&gt;Asignar estilos directamente&lt;/h3&gt;
&lt;p&gt;Aunque no es lo recomendable, podemos asignar directamente estilos CSS igual que asignamos clases y también podemos usar la sintaxis de objeto o la de array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :style=&amp;quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    activeColor: &#39;red&#39;,
    fontSize: 30&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ciclo-de-vida-del-componente&quot; tabindex=&quot;-1&quot;&gt;Ciclo de vida del componente&lt;/h2&gt;
&lt;h3 id=&quot;el-ciclo-de-vida-de-un-componente&quot; tabindex=&quot;-1&quot;&gt;El ciclo de vida de un componente&lt;/h3&gt;
&lt;p&gt;Al crearse la instancia de Vue o un componente la aplicación debe realizar unas tareas como configurar la observación de variables, compilar su plantilla (&lt;em&gt;template&lt;/em&gt;), montarla en el DOM o reaccionar ante cambios en las variables volviendo a renderizar las partes del DOM que han cambiado. Además ejecuta funciones definidas por el usuario cuando sucede alguno de estos eventos, llamadas &lt;em&gt;hooks&lt;/em&gt; del ciclo de vida.&lt;/p&gt;
&lt;p&gt;En la siguiente imagen podéis ver el ciclo de vida de la instancia Vue (y de cualquier componente) y los eventos que se generan y que podemos interceptar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/lifecycle.16e4c08e.png&quot; alt=&quot;Ciclo de vida de Vue&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En &lt;strong&gt;Vue2&lt;/strong&gt;: los métodos &lt;strong&gt;&lt;em&gt;beforeDestroyed&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;destroyed&lt;/em&gt;&lt;/strong&gt; se usan en lugar de &lt;em&gt;&lt;strong&gt;beforeUnmounted&lt;/strong&gt;&lt;/em&gt; y &lt;em&gt;&lt;strong&gt;unmounted&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: no debemos definir estas funciones como &lt;em&gt;arrow functions&lt;/em&gt; porque en estas funciones se enlaza en la variable &lt;em&gt;this&lt;/em&gt; el componente donde se definen y si hacemos una &lt;em&gt;arrow function&lt;/em&gt; no tendríamos &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MAL, NO HACER ASÍ
created: () =&amp;gt; {
    console.log(&#39;instancia creada&#39;); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// BIEN, HACER ASÍ
created() {
    console.log(&#39;instancia creada&#39;); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los principales &lt;em&gt;hooks&lt;/em&gt; son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;beforeCreate&lt;/strong&gt;: aún no se ha creado el componente (sí la instancia de Vue) por lo que no tenemos acceso a sus variables, etc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;created&lt;/strong&gt;: se usa por ejemplo para realizar peticiones a servicios externos lo antes posible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeMount&lt;/strong&gt;: ya se ha generado el componente y compilado su &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mounted&lt;/strong&gt;: ahora ya tenemos acceso a todas las propiedades del componete. Es el sitio donde hacer una patición externa si el valor devuelto queremos asignarlo a una variable del componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt;: se ha modificado el componente pero aún no se han renderizado los cambios&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;updated&lt;/strong&gt;: los cambios ya se han renderizado en la página&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeUnmount&lt;/strong&gt;: antes de que se destruya el componente (en versiones anteriores a Vue3 &lt;strong&gt;beforeDestroy&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unmounted&lt;/strong&gt;: ya se ha destruido el componente (en versiones anteriores a Vue3 &lt;strong&gt;destroyed&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;componentes-asincronos&quot; tabindex=&quot;-1&quot;&gt;Componentes asíncronos&lt;/h2&gt;
&lt;p&gt;En proyectos grandes con centenares de componentes podemos hacer que en cada momento se carguen sólo los componentes necesarios de manera que se ahorra mucho tiempo de carga de la página.&lt;/p&gt;
&lt;p&gt;Para que un componente se cargue asíncronamente al registrarlo se hace como un objeto que será una función que importe el componente. Un componente normal (síncrono) se registraría así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
import ProductItem from &#39;./ProductItem.vue&#39;

export default {
    name: &#39;products-table&#39;,
    components: {
        ProductItem,
    },
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos que se cargue asíncronamente no lo importamos hasta se registra:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
    name: &#39;products-table&#39;,
    components: {
        ProductItem: () =&amp;gt; import(&#39;./ProductItem.vue&#39;),
    },
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos decirle que espere un tiempo a cargar el componente (delay) e incluso qué componente queremos cargar mientras está cargando el componente o cuál cargar si hay un error al cargarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
    name: &#39;products-table&#39;,
    components: {
        ProductItem: () =&amp;gt; ({
            component: import(&#39;./ProductItem.vue&#39;),
            delay: 500,       // en milisegundos
            timeout: 6000,
            loading: compLoading,   // componente que cargará mientras se está cargando
            error: compError,       // componente que cargará si hay un error,
        })
    },
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;custom-directives&quot; tabindex=&quot;-1&quot;&gt;Custom Directives&lt;/h2&gt;
&lt;p&gt;Podemos crear nuestras propias directivas para usar en los elementos que queramos. Se definen en un fichero .js con &lt;code&gt;Vue.directive&lt;/code&gt; y le pasamos su nombre y un objeto con los estados en que queremos que reaccione. Por ejemplo vamos a hacer una directiva para que se le asigne el foco al elemento al que se la pongamos, que será de tipo &lt;em&gt;input&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;

Vue.directive(&#39;focus&#39;, {
  mounted(el) {
    el.focus();
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para usarla en un componente la importamos y ya podemos usarla en el &lt;em&gt;template&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  ...
  &amp;lt;input v-focus type=&amp;quot;text&amp;quot; name=&amp;quot;nombre&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import focus from &#39;./focus.js&#39;
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos utilizarla en muchos componentes podemos importarla en el &lt;em&gt;main.js&lt;/em&gt; y así estará disponible para todos los componentes.&lt;/p&gt;
&lt;p&gt;Los estados de la directiva en los que podemos actuar son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mounted&lt;/strong&gt; (en Vue2 &lt;strong&gt;inserted&lt;/strong&gt;): cuando se inserte la directiva&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;updated&lt;/strong&gt; (en Vue2 &lt;strong&gt;componentUpdated&lt;/strong&gt;): cuando se actualice el componente que contiene la directiva&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeMount&lt;/strong&gt; (en Vue2 &lt;strong&gt;bind&lt;/strong&gt;): cuando se enlaza la directiva al componente por primera vez, antes de montar el componente&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;imagenes&quot; tabindex=&quot;-1&quot;&gt;Imágenes&lt;/h2&gt;
&lt;p&gt;Si se trata de imágenes estáticas lo más sencillo es ponerlas dentro de la carpeta &lt;code&gt;public&lt;/code&gt; y hacer referencia a ellas usando &lt;strong&gt;ruta absoluta&lt;/strong&gt;. Todo lo que está en &lt;em&gt;public&lt;/em&gt; se referencia como si estuviera en la raíz de nuestra aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;img src=&amp;quot;/img/elPatitoFeo.jpeg&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos poner las imágenes en la carpeta &lt;code&gt;assets&lt;/code&gt;, pero antes de usarlas deberemos imnportarlas. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
  import imgUrl from &#39;./assets/img/elPatitoFeo.jpeg&#39;
  ...
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  ...
  &amp;lt;img :src=&amp;quot;imgUrl&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: Si usamos &lt;em&gt;webpack&lt;/em&gt; en lugar de &lt;em&gt;Vite&lt;/em&gt;, en lugar de importarlas usaremos en su atributo &lt;code&gt;src&lt;/code&gt; la función &lt;code&gt;require&lt;/code&gt; con la URL de la imagen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;img :src=&amp;quot;require(&#39;../assets/img/elPatitoFeo.jpeg&#39;)&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;em&gt;Vite&lt;/em&gt; también podemos importarlas usando &lt;code&gt;import.meta.url&lt;/code&gt; (más información en la &lt;a href=&quot;https://vitejs.dev/guide/assets.html#new-url-url-import-meta-url&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vite&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      imgUrl = new URL(&#39;./assets/elPatitoFeo.png&#39;, import.meta.url).href
    }
  },
  ...
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  ...
  &amp;lt;img :src=&amp;quot;imgUrl&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos permite también importar las imágenes dinámicamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
export default {
  methods: {
    function getImageUrl(name) {
      return new URL(`./dir/${name}`, import.meta.url).href
    }
  }
  ...
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  ...
  &amp;lt;img :src=&amp;quot;getImageUrl(imgName)&amp;quot; height=&amp;quot;100px&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto permitiría mostrar también imágenes obtenidas de una API.&lt;/p&gt;
&lt;h2 id=&quot;transiciones&quot; tabindex=&quot;-1&quot;&gt;Transiciones&lt;/h2&gt;
&lt;p&gt;Vue permite controlar transiciones en nuestra aplicación poniendo el código CSS correspondiente y añadiéndole al elemento el atributo &lt;em&gt;transition&lt;/em&gt;. Podemos encontrar más información en la &lt;a href=&quot;https://vuejs.org/v2/guide/transitions.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;entornos&quot; tabindex=&quot;-1&quot;&gt;Entornos&lt;/h2&gt;
&lt;p&gt;En Vue tenemos normalmente 3 entornos o &lt;em&gt;modos&lt;/em&gt;, el de &lt;strong&gt;development&lt;/strong&gt;, el de &lt;strong&gt;test&lt;/strong&gt; y el de &lt;strong&gt;production&lt;/strong&gt;. Las variables de entorno las guardaremos en uno de los siguientes ficheros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.env&lt;/strong&gt;: se cargan en todos los modos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.env.local&lt;/strong&gt;: se cargan en todos los modos pero son ignoradas por git&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.env.[modo]&lt;/strong&gt;: se cargan sólo en el modo indicado&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.env.[modo].local&lt;/strong&gt;: ídem pero son ignordas por git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En contenido de estos ficheros son variables en forma &lt;code&gt;clave=valor&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fichero .env
TITULO=Mi proyecto
VITE_API=https://localhost/api
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el nombre de la variable comienza por &lt;code&gt;VITE_&lt;/code&gt; será accesible desde el código a través de &lt;code&gt;import.meta.env.nombreVariable&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// &amp;lt;script&amp;gt; de componente
console.log(process.env.VITE_API);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos saber en qué entorno se está ejecutando la aplicación consultando el valor de la variable &lt;code&gt;import.meta.env.MODE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si no estamos usando &lt;em&gt;Vite&lt;/em&gt; sino &lt;em&gt;webpack&lt;/em&gt; el nombre de las variables debe comenzar por &lt;code&gt;VUE_APP_&lt;/code&gt; y será accesible desde el código con &lt;code&gt;process.env.nombreVariable&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// &amp;lt;script&amp;gt; de componente
console.log(process.env.VUE_APP_API);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;guards-del-router&quot; tabindex=&quot;-1&quot;&gt;Guards del router&lt;/h2&gt;
&lt;p&gt;Son &lt;em&gt;hooks&lt;/em&gt; que podemos controlar en distintos momentos, algunos desde el componente y otros desde el &lt;em&gt;router&lt;/em&gt;. Podemos ponerlos para todas las rutas, para una ruta en concreto o en el componente.&lt;/p&gt;
&lt;p&gt;La mayoría reciben 3 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;to&lt;/strong&gt;: ruta a la que se va a saltar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;from&lt;/strong&gt;: ruta de la que se viene&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next&lt;/strong&gt;: función para que continue la carga del router. Siempre tras ejecutar el código que deseemos pondremos &lt;code&gt;netx()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En el router tenemos estos &lt;em&gt;guards&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;router.beforeEach(to, from, next)&lt;/strong&gt;: se ejecuta antes de que vaya a cambiarse la ruta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;router.afterEach(to, from)&lt;/strong&gt;: se ejecuta una vez cambiada la ruta (por eso no tiene next, porque ya ha acabado)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ruta.beforeEnter(to, from, next)&lt;/strong&gt;: se pone como propiedad de una ruta y se ejecuta antes de entrar a ella&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para aplicarlos en nuestro router lo asignamos a una variable que exportamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let router = new Router({
  routes: [
    {
      path: &#39;/&#39;,
      component: &#39;MyComponent&#39;,
      beforeEnter(to, from, next) {
        console.log(&#39;Vengo de &#39; + from + &#39; y voy a &#39; + to);
        next();
      },
...
})

router.beforeEach(to, from, next) {
  console.log(&#39;Vengo de &#39; + from + &#39; y voy a &#39; + to);
  next();
}

export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En un componente también puedo definir los &lt;em&gt;hooks&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;beforeRouteEnter(to, from, next)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeRouteUpdate(to, from, next)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeRouteLeave(to, from, next)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/06-profundizando/" >
        </entry>
        <entry>
            <title>
                05-vue-router
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/05-vue-router/</id>
            <content type="html">
                &lt;h1 id=&quot;vue-router&quot; tabindex=&quot;-1&quot;&gt;Vue-router&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue-router&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalación&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-vue-router-a-un-proyecto-ya-creado&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir vue-router a un proyecto ya creado&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-las-rutas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear las rutas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#rutas-din%C3%A1micas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Rutas dinámicas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#opciones-de-cada-ruta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Opciones de cada ruta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-men%C3%BA&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un menú&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saltar-a-una-ruta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saltar a una ruta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-de-par%C3%A1metros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso de parámetros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-objeto-route&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El objeto $route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ruta-no-encontrada-404-not-found&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ruta no encontrada: 404 Not found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#redireccionamiento&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Redireccionamiento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cambio-de-par%C3%A1metros-en-una-ruta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cambio de parámetros en una ruta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vistas-con-nombre-y-subvistas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vistas con nombre y Subvistas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Como comentamos al principio Vue nos va a permitir crear SPA (&lt;em&gt;Single Page Applications&lt;/em&gt;) lo que significa que sólo se cargará una pagina: &lt;em&gt;index.html&lt;/em&gt;. Sin embargo nuestra aplicación estará dividida en diferentes vistas que el usuario percibirá como si fueran páginas diferentes y el encargado de gestionar la navegación entre estas vistas/páginas es &lt;strong&gt;vue-router&lt;/strong&gt; que es otra de las librerías del &amp;quot;ecosistema&amp;quot; de Vue (en este caso realizada por los desarrolladores de Vue).&lt;/p&gt;
&lt;p&gt;En resumen, en nuestra aplicación (normalmente en el &lt;em&gt;App.vue&lt;/em&gt;) tendremos una etiqueta &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; y lo que hará &lt;em&gt;vue-router&lt;/em&gt; es cargar en esa etiqueta el componente que corresponda en función de la ruta que haya en la barra de direcciones del navegador. Por ejemplo si la URL es &lt;strong&gt;/products&lt;/strong&gt; cargará un componente llamado &lt;em&gt;ProductsTable&lt;/em&gt; (que mostrará una tabla con todos los productos de la aplicación) y si la URL es &lt;strong&gt;/newprod&lt;/strong&gt; cargará un componente llamado &lt;em&gt;ProductForm&lt;/em&gt; con un formulario para añadir un nuevo producto.&lt;/p&gt;
&lt;p&gt;Lo que hacemos para configurar &lt;em&gt;vue-router&lt;/em&gt; es definir rutas que &lt;em&gt;mapean&lt;/em&gt; componentes de nuestra aplicación a rutas URL de forma que cuando se pone determinada ruta en el navegador se carga en nuestra página el componente indicado. También permite tener subrutas que mapeen subcomponentes dentro de otros.&lt;/p&gt;
&lt;h2 id=&quot;instalacion&quot; tabindex=&quot;-1&quot;&gt;Instalación&lt;/h2&gt;
&lt;p&gt;La forma más sencilla es escoger la opción de &lt;em&gt;Vue-router&lt;/em&gt; al crear nuestro proyecto &lt;em&gt;Vue&lt;/em&gt;. En ese caso no es necesario hacer nada porque se instala y configura todo automáticamente.&lt;/p&gt;
&lt;h3 id=&quot;anadir-vue-router-a-un-proyecto-ya-creado&quot; tabindex=&quot;-1&quot;&gt;Añadir vue-router a un proyecto ya creado&lt;/h3&gt;
&lt;p&gt;Si queremos añadirlo a un proyecto ya creado previamente tendremos que instalarlo y configurarlo manualmente nosotros.&lt;/p&gt;
&lt;p&gt;Los pasos son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;se instala el paquete &lt;strong&gt;vue-router&lt;/strong&gt; como dependencia de producción:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -S vue-router
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;se crea el fichero de rutas, por ejemplo en &lt;strong&gt;/src/router/index.js&lt;/strong&gt;. Aquí se define para cada ruta de nuestra aplicación el componente que debe cargarse. Su contenido es&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createRouter, createWebHistory } from &amp;quot;vue-router&amp;quot;;
import HomeView from &amp;quot;../views/HomeView.vue&amp;quot;;

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: &amp;quot;/&amp;quot;,
      name: &amp;quot;home&amp;quot;,
      component: HomeView,
    },
    {
      path: &amp;quot;/about&amp;quot;,
      name: &amp;quot;about&amp;quot;,
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () =&amp;gt; import(&amp;quot;../views/AboutView.vue&amp;quot;),
    },
  ],
});

export default router;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;se importa dicho fichero en el &lt;strong&gt;main.js&lt;/strong&gt; para que el almacén esté disponible para todos los componentes en la variable &lt;code&gt;this.$router&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createApp } from &amp;quot;vue&amp;quot;;
import App from &amp;quot;./App.vue&amp;quot;;
import router from &amp;quot;./router&amp;quot;; // &amp;lt;---

const app = createApp(App);
app.use(router);
app.mount(&amp;quot;#app&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;en el &lt;em&gt;scaffolding&lt;/em&gt; del proyecto es recomendable crear una nueva carpeta &lt;em&gt;views&lt;/em&gt; donde guardar las distintas vistas de nuestra aplicación, que son componentes que renderizan una &amp;quot;&lt;em&gt;página&lt;/em&gt;&amp;quot; de la aplicación (es decir, nuestros componentes ahora se dividen en 2 tipos: los que renderizan una &amp;quot;página&amp;quot;, que irán a &lt;em&gt;Views&lt;/em&gt; y los que son parte de una página, que irán a &lt;em&gt;Components&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;crear-las-rutas&quot; tabindex=&quot;-1&quot;&gt;Crear las rutas&lt;/h2&gt;
&lt;p&gt;Las rutas de nuestra aplicación las definiremos en un fichero Javascript (por defecto &lt;strong&gt;&lt;em&gt;/src/router/index.js&lt;/em&gt;&lt;/strong&gt;). Allí creamos la instancia para nuestras rutas (el objeto que exportamos) y la configuramos. También debemos importar todos los componentes que definamos en el router:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createWebHistory, createRouter } from &#39;vue-router&#39;

// Importamos los componentes que se carguen en alguna ruta
import AppHome from &#39;./components/AppHome.vue&#39;
import AppAbout from &#39;./components/AppAbout.vue&#39;
import UsersTable from &#39;./components/UsersTable.vue&#39;
import UserNew from &#39;./components/UserNew.vue&#39;
import UserEdit from &#39;./components/UserEdit.vue&#39;

const routes = [
  {
    path: &#39;/&#39;,
    name: &#39;home&#39;,
    component: AppHome
  },{
    path: &#39;/about&#39;,
    name: about,
    component: AppAbout
  },{
    path: &#39;/users&#39;,
    component: UsersTable
  },{
    path: &#39;/new&#39;,
    component: UserNew
  },{
    path: &#39;/edit/:id&#39;,
    component: UserEdit
    props: true
  }
];

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes
})

export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada vez que cambie la URL en el navegador no cambiará todo el layout sino que sólo se cargará en la etiqueta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;el componente indicado para esa ruta. Dicha etiqueta estará normalmente en el fichero &lt;em&gt;App.vue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El modo &lt;em&gt;&#39;history&#39;&lt;/em&gt; de nuestro router indica que use rutas &amp;quot;amigables&amp;quot; y que no incluyan la # (piensa que en realidad no se están cargando diferentes páginas sino partes de una única página ya que es una SPA). Esta es la opción que escogeremos siempre en las aplicaciones SPA, aunque si nuestro servidor web usa &lt;a href=&quot;http://asp.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ASP.NET&lt;/a&gt; o JSP habrá que decirle que ignore las URLs porque ya se ocupa de ellas Vue. La alternativa sería usar &lt;code&gt;createWebHashHistory()&lt;/code&gt; pero en ese caso las rutas en vez de ser algo como &lt;code&gt;http://localhost:8080/products&lt;/code&gt; serían &lt;code&gt;http://localhost:8080/#products&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;rutas-dinamicas&quot; tabindex=&quot;-1&quot;&gt;Rutas dinámicas&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;VueRouter&lt;/em&gt; permite rutas dinámicas como la indicada para el componente &lt;em&gt;UserEdit&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/edit/:id&#39;,
  component: UserEdit
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esa ruta coincidirá con cualquier URL que comience por &lt;em&gt;/edit/&lt;/em&gt; y tenga algo más. Lo que haya tras la última &lt;em&gt;/&lt;/em&gt; lo asignará el &lt;em&gt;router&lt;/em&gt; a una variable llamada &lt;em&gt;id&lt;/em&gt; (el nombre que pongamos tras el carácter &lt;code&gt;:&lt;/code&gt;) y dicha variable la recibirá el componente &lt;em&gt;UserEdit&lt;/em&gt; en un parámetro accesible desde &lt;code&gt;this.$route.params.id&lt;/code&gt;. Si añadimos a la ruta la opción &lt;code&gt;props: true&lt;/code&gt; hacemos que el componente además reciba el parámetro en sus &lt;em&gt;props&lt;/em&gt; (en este caso recibirá una variable llamada &lt;em&gt;id&lt;/em&gt; que será accesible desde &lt;code&gt;this.id&lt;/code&gt; directamente).&lt;/p&gt;
&lt;h3 id=&quot;opciones-de-cada-ruta&quot; tabindex=&quot;-1&quot;&gt;Opciones de cada ruta&lt;/h3&gt;
&lt;p&gt;Para cada ruta que queramos mapear hay que definir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: la url que hará que se cargue el componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: el componente que se cargará donde se encuentre la etiqueta &lt;strong&gt;&amp;lt;router-view&amp;gt;&lt;/strong&gt; en el HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además de esas propiedades podemos indicar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: le damos a la ruta un nombre que luego podemos usar para referirnos a ella&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt;: se usa en rutas dinámicas e indica que el componente recibirá el parámetro de la ruta en sus &lt;em&gt;props&lt;/em&gt;. Si no se incluye esta opción el componente tendrá que acceder al parámetro &lt;em&gt;id&lt;/em&gt; desde &lt;code&gt;this.$route.params.id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;crear-un-menu&quot; tabindex=&quot;-1&quot;&gt;Crear un menú&lt;/h2&gt;
&lt;p&gt;Seguramente querremos un menú en nuestra SPA que nos permita ir a las diferentes rutas (que provocarán que se carguen los componentes). Para ello usaremos la etiqueta &lt;strong&gt;&amp;lt;router-link&amp;gt;&lt;/strong&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link to=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
&amp;lt;router-link to=&amp;quot;/about&amp;quot;&amp;gt;Acerca de...&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando accedemos a una ruta su elemento &amp;lt;router-link&amp;gt; adquiere la clase &lt;em&gt;.router-link-active&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si le hemos puesto la propiedad &lt;em&gt;name&lt;/em&gt; a una ruta podemos hacer un enlace a ella con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link :to=&amp;quot;{name: &#39;nombre_de_la_ruta&#39;}&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que hemos de &lt;em&gt;bindear&lt;/em&gt; el atributo &lt;code&gt;to&lt;/code&gt; porque ya no le pasamos texto sino una variable.&lt;/p&gt;
&lt;p&gt;Se podría hacer (aunque no es normal) una opción de menú a una ruta dinámica y pasarle el parámetro deseado. Por ejemplo para editar el usuario 5 haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link :to=&amp;quot;{name: &#39;edit&#39;, params: {id: 5}}&amp;quot;
  &amp;gt;Editar usuario 5&amp;lt;/router-link
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso es necesario que la ruta dinámica tenga un &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;saltar-a-una-ruta&quot; tabindex=&quot;-1&quot;&gt;Saltar a una ruta&lt;/h2&gt;
&lt;p&gt;Al hacer &lt;code&gt;.use(router)&lt;/code&gt; en el fichero &lt;em&gt;main.js&lt;/em&gt; estamos declarando esa variable (&lt;em&gt;router&lt;/em&gt;) en la instancia principal de la aplicación por lo que estará disponible para todos los componentes desde &lt;code&gt;this.$router&lt;/code&gt;. Esto nos permite acceder al router desde un componente para, por ejemplo, cambiar a una ruta.&lt;/p&gt;
&lt;p&gt;El código para cambiar la ruta desde Javascript es&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$router.push(ruta);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tenemos varios métodos para navegar por código:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.push(newUrl)&lt;/code&gt;&lt;/strong&gt;: salta a la ruta &lt;em&gt;newUrl&lt;/em&gt; y la añade al historial&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.replace(newURL)&lt;/code&gt;&lt;/strong&gt;: salta a la nueva ruta pero reemplaza en el historial la ruta actual por esta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.go(num)&lt;/code&gt;&lt;/strong&gt;: permite saltar el num. de páginas indicadas adelante (ej. &lt;em&gt;this.$router.go(1)&lt;/em&gt;) o atrás (&lt;em&gt;.go(-1)&lt;/em&gt;) por el historial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos métodos son equivalentes a los métodos &lt;em&gt;history.push()&lt;/em&gt;, &lt;em&gt;history.replace()&lt;/em&gt; y &lt;em&gt;history.go()&lt;/em&gt; de Javascript.&lt;/p&gt;
&lt;p&gt;Además podemos pasar a &lt;code&gt;push()&lt;/code&gt; y &lt;code&gt;replace()&lt;/code&gt; funciones &lt;em&gt;callback&lt;/em&gt; que se ejecutarán al cambiar la ruta si todo va bien o si hay algún error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;this.$router.push(location, onComplete?, onAbort?)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos obtener toda la ruta con &lt;code&gt;this.$route.fullPath&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;paso-de-parametros&quot; tabindex=&quot;-1&quot;&gt;Paso de parámetros&lt;/h2&gt;
&lt;p&gt;La forma de pasar parámetros a la ruta es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$router.push({ name: &amp;quot;users&amp;quot;, params: { id: 123 } });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;esto hace que se salte a la ruta con &lt;em&gt;name&lt;/em&gt; &amp;quot;users&amp;quot; y le pasa como parámetro una &lt;em&gt;id&lt;/em&gt; de valor 123. En el componente que se cargue en dicha ruta obtendremos el parámetro pasado con &lt;code&gt;this.$route.params.nombreparam&lt;/code&gt; (en el ejemplo en &lt;code&gt;this.$route.params.id&lt;/code&gt; obtenemos el valor &lt;code&gt;123&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Se puede pasar más de un parámetro pero para que los pueda recibir el componente hay que ponerlos todos en el &lt;em&gt;router&lt;/em&gt;. Por ejemplo para hacer un &lt;code&gt;this.$router.push({ name: &#39;books&#39;, params: { autor: 12, tema: 4 }})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;la ruta en el &lt;em&gt;router&lt;/em&gt; debería contener ambas variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;path: &amp;quot;/books/author/:autor/topic/:tema&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos pasar también un objeto como parámetro pero antes debemos convertirlo a texto con &lt;code&gt;JSON.stringify()&lt;/code&gt;. Sin embargo no es muy conveniente porque la URL quedaría demasiado larga y &amp;quot;sucia&amp;quot;.&lt;/p&gt;
&lt;p&gt;También se puede pasar una &lt;em&gt;query&lt;/em&gt; a la ruta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$router.push({ path: &amp;quot;/register&amp;quot;, query: { plan: &amp;quot;private&amp;quot; } });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;salta a la URL &lt;code&gt;/register?plan=private&lt;/code&gt;. En el componente que se carga obtenemos la query pasada con &lt;code&gt;this.$route.query&lt;/code&gt; (obtenemos un objeto, en el ejemplo &lt;code&gt;{ plan: &#39;private&#39; }&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Tened en cuenta que lo que se pasa como parámetro o consulta aparecerá en la URL por lo que no debemos enviar información sensible y no se recomienda enviar algo muy largo (como un objeto o array) para evitar que la URL quede &amp;quot;sucia&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;el-objeto-route&quot; tabindex=&quot;-1&quot;&gt;El objeto $route&lt;/h2&gt;
&lt;p&gt;Es un objeto que contiene información de la ruta actual (no confundir con &lt;em&gt;$router&lt;/em&gt;). Algunas de sus propiedades son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: el objeto con los parámetros pasados a la ruta (puede haber más de uno)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query&lt;/strong&gt;: si hubiera alguna consulta en la ruta (tras &#39;?&#39;) se obtiene aquí un objeto con ellas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: la ruta pasada (sin servidor ni querys, por ejemplo de &lt;code&gt;http://localhost:3000/users?company=5&lt;/code&gt; devolvería &#39;/users&#39;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fullPath&lt;/strong&gt;: la ruta pasada (con las querys, por ejemplo de &lt;code&gt;http://localhost:3000/users?company=5&lt;/code&gt; devolvería &#39;/users?company=5&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ruta-no-encontrada-404-not-found&quot; tabindex=&quot;-1&quot;&gt;Ruta no encontrada: 404 Not found&lt;/h2&gt;
&lt;p&gt;Si en nuestra aplicación cargamos una ruta que no coincide con ninguna de las definidas en el &lt;em&gt;router&lt;/em&gt; no se cargará ningún componente en el &lt;em&gt;RouterView&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Una mejora de esto es crear una vista con lo que queramos mostrar (&#39;404 - La página no existe&#39; o algo similar) y hacer una ruta que cargue dicho componente.&lt;/p&gt;
&lt;p&gt;Si llamamos a esa vista &lt;code&gt;PathNotFound.vue&lt;/code&gt; la ruta a crear sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/:pathMatch(.*)*&#39;,
  component: PathNotFound
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta ruta hay que ponerla la última ya que coincidirá con cualquier URL (usa una expresión regular y la dice que la ruta coincida con &#39;*&#39;).&lt;/p&gt;
&lt;h2 id=&quot;redireccionamiento&quot; tabindex=&quot;-1&quot;&gt;Redireccionamiento&lt;/h2&gt;
&lt;p&gt;En el &lt;em&gt;router&lt;/em&gt; puedo también poner una ruta que haga una redirección a otra en lugar de cargar un componente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/a&#39;,
  redirect: &#39;/b&#39;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que hace es que si se pone una URL &lt;code&gt;/a&lt;/code&gt; la cambia automáticamente a &lt;code&gt;/b&lt;/code&gt; y se buscará una ruta que coincida con esa.&lt;/p&gt;
&lt;p&gt;También podemos poner &lt;em&gt;alias&lt;/em&gt; a una ruta de forma que se cargue un componente tanto si la URL es una como otra (en este caso no se cambiaría la URL):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/a&#39;,
  component: A,
  alias: &#39;/b&#39;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podés obtener más información en la &lt;a href=&quot;https://v3.router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue-router&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;cambio-de-parametros-en-una-ruta&quot; tabindex=&quot;-1&quot;&gt;Cambio de parámetros en una ruta&lt;/h2&gt;
&lt;p&gt;Si cambiamos a la misma ruta pero con distintos parámetros Vue reutiliza la instancia del componente y no vuelve a lanzar sus &lt;em&gt;hooks&lt;/em&gt; (created, mounted, ...). Esto hará que no se ejecute el código que tengamos allí. Por ejemplo supongamos que en una ruta &#39;/edit/5&#39; al cargar el componente se pide el registro 5 y se muestra en la página. Si a continuación cargamos la ruta &#39;/edit/8&#39; seguiremos viendo los datos del registro 5).&lt;/p&gt;
&lt;p&gt;Podemos solucionar esto desde el &lt;em&gt;router&lt;/em&gt; o desde el componente.&lt;/p&gt;
&lt;p&gt;Desde el &lt;em&gt;router&lt;/em&gt; podemos usar el elemento &lt;code&gt;beforeRouteUpdate&lt;/code&gt; y realizar allí la carga de los datos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;beforeRouteUpdate (to, from, next) {
    // Código que responde al cambio. En &#39;to&#39; tenemos la ruta anterior y en &#39;from&#39; la nueva
    // antes de acabar hay que llamar a next()
    // Aquí cargamos los nuevos datos
    next();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde el componente podemos usar un &lt;em&gt;watcher&lt;/em&gt; para detectar el cambio en la ruta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;watch: {
    &#39;$route&#39; (to, from) {
        // Aquí cargamos los nuevos datos
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada vez que cambie el valor de &lt;em&gt;$route&lt;/em&gt; se ejecutará ese código y recibirá en el parámetro &lt;em&gt;to&lt;/em&gt; la nueva ruta y en &lt;em&gt;from&lt;/em&gt; el valor anterior de la variable. Veremos los &lt;em&gt;watchers&lt;/em&gt; más adelante o podéi consultar la &lt;a href=&quot;https://vuejs.org/guide/essentials/watchers.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;vistas-con-nombre-y-subvistas&quot; tabindex=&quot;-1&quot;&gt;Vistas con nombre y Subvistas&lt;/h2&gt;
&lt;p&gt;Podemos cargar más de un componente usando varias etiquetas &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. Por ejemplo si nestra página constará de 3 componentes (uno en la cabecera, otro el principal y otro en un &lt;em&gt;aside&lt;/em&gt; pondremos en el HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-view class=&amp;quot;cabecera&amp;quot; name=&amp;quot;top&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;router-view class=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;router-view class=&amp;quot;aside&amp;quot; name=&amp;quot;aside&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para que se carguen los 3 componentes lo debemos indicar al definir las rutas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
    path: &#39;/&#39;,
    components: {
        default: CompMain,		// CompMain se cargará en el &amp;lt;router-view&amp;gt; sin nombre
        top: CompCabecera,
        aside: CompAside
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También un componente puede incluir su propia etiqueta &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; que cargue dentro de él un subcomponente en función de una subruta. Por &lt;a href=&quot;http://jsfiddle.net/yyx990803/L7hscd8h/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ejemplo&lt;/a&gt; tenemos una ruta &lt;em&gt;/user/:id&lt;/em&gt; que carga un componente &lt;em&gt;User&lt;/em&gt; con el nombre y la imagen del usuario y debajo cargará, en función de la ruta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/user/:id&lt;/em&gt;: debajo cargará el componente con el home del usuario&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/user/:id/profile&lt;/em&gt;: debajo cargará el componente con el perfil del usuario&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/user/:id/posts&lt;/em&gt;: debajo cargará el componente con los posts del usuario&lt;br /&gt;
Definiremos la ruta del siguiente modo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/&#39;,
  components: {
    {
      path: &#39;/user/:id&#39;,
      component: User,
      children: [
        { path: &#39;&#39;, component: UserHome },
        { path: &#39;profile&#39;, component: UserProfile },
        { path: &#39;posts&#39;, component: UserPosts }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos consultar toda la información referente al router de Vue en &lt;a href=&quot;https://router.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://router.vuejs.org/&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/05-vue-router/" >
        </entry>
        <entry>
            <title>
                04-axios
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/04-axios/</id>
            <content type="html">
                &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#axios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Axios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-axios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar &lt;em&gt;axios&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#aplicaci%C3%B3n-de-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aplicación de ejemplo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pedir-los-datos-al-cargarse&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pedir los datos al cargarse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#borrar-un-todo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Borrar un todo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-un-todo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir un todo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#actualizar-el-campo-done&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Actualizar el campo &lt;em&gt;done&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#borrar-todas-las-tareas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Borrar todas las tareas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-las-peticiones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar las peticiones&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#api-con-varias-tablas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Api con varias tablas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#api-como-clase&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Api como clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-fichero-env&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#axios-interceptors&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Axios interceptors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h1 id=&quot;axios&quot; tabindex=&quot;-1&quot;&gt;Axios&lt;/h1&gt;
&lt;p&gt;El framework &lt;em&gt;Vue&lt;/em&gt; sólo se ocupa de la capa de vista de la aplcación pero su &amp;quot;ecosistema&amp;quot; como sus creadores le llaman, incluye multitud de herramientas para todo lo que podamos necesitar a la hora de realizar grandes proyectos.&lt;/p&gt;
&lt;p&gt;Una de las librerías más utilizadas es la que permite realizar de forma sencilla peticiones Ajax a un servidor. Existen múltiples librerías para ello y la más utilizada es &lt;a href=&quot;https://github.com/axios/axios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;axios&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podríamos hacer peticiones Ajax como vimos en Javascript (con &lt;em&gt;fetch&lt;/em&gt; y &lt;em&gt;async/await&lt;/em&gt;) pero es más sencillo con &lt;em&gt;axios&lt;/em&gt;. Axios ya devuelve los datos transformados a JSON en una propiedad llamada &lt;em&gt;data&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;instalacion&quot; tabindex=&quot;-1&quot;&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Como esta librería vamos a usarla en producción la instalaremos como dependencia del proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-[bash]&quot;&gt;npm install axios -S
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;usar-em-axios-em&quot; tabindex=&quot;-1&quot;&gt;Usar &lt;em&gt;axios&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;En el componente en que vayamos a usarla la importaremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;import axios from &#39;axios&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como es una dependencia incluida en el &lt;em&gt;package.json&lt;/em&gt; no se indica su ruta (se buscará en &lt;strong&gt;node-modules&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Ya podemos hacer peticiones Ajax en el componente. Para ello axios incluye los métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.get(url)&lt;/strong&gt;: realiza una petición GET a la url pasada como parámetro que supondrá una consulta SELECT a la base de datos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.post(url, objeto)&lt;/strong&gt;: realiza una petición POST a la url pasada como parámetro que posiblemente realizará un INSERT del objeto pasado como segundo parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.put(url, objeto)&lt;/strong&gt;: realiza una petición PUT a la url pasada como parámetro que posiblemente realizará un UPDATE sobre el registro indicado en la url que será actualizado con los datos del objeto pasado como segundo parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.delete(url)&lt;/strong&gt;: realiza una petición DELETE a la url pasada como parámetro que supondrá una consulta DELETE a la base de datos para borrar el registro indicado en la url&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos métodos devuelven una promesa por lo que al hacer la petición deberemos anteponerle el &lt;strong&gt;&lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; o bien indicaremos con el método &lt;strong&gt;&lt;code&gt;.then&lt;/code&gt;&lt;/strong&gt; la función que se ejecutará cuando responda el servidor si la petición se resuelve correctamente y con el método &lt;strong&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/strong&gt; la función que se ejecutará cuando responda el servidor si ocurre algún error.&lt;/p&gt;
&lt;p&gt;Lo que devuelve es un objeto que tiene, entre otras, las propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;data&lt;/code&gt;&lt;/strong&gt;: aquí tendremos los datos devueltos por el servidor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;: obtendremos el código de la respuesta del servidor (200, 404, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statusText&lt;/code&gt;: el texto de la respuesta del servidor (&#39;Ok&#39;, &#39;Not found&#39;, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: mensaje del servidor en caso de producirse un error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headers&lt;/code&gt;: las cabeceras HTTP de la respuesta&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La sintaxis de una petición GET a axios usando &lt;em&gt;async/await&lt;/em&gt; sería algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  const response = await axios.get(url)
  console.log(response.data)
} catch (response) {
  console.error(response.message) 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y usando promesas sería algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;axios.get(url)
  .then(response =&amp;gt; console.log(response.data))
  .catch(response =&amp;gt; console.error(response.message))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;aplicacion-de-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Aplicación de ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a seguir con la aplicación de la lista de tareas pero ahora los datos no serán un array estático sino que estarán en un servidor. Usaremos como servidor para probar la aplicación &lt;a href=&quot;https://pedroporo.github.io/#json-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;json-server&lt;/strong&gt;&lt;/a&gt; por lo que las peticiones serán a la URL &#39;localhost:3000&#39; que es el servidor web de json-server.&lt;/p&gt;
&lt;p&gt;Los cambios que debemos hacer en nuestra aplicación son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El componente principal (TodoList) pide todos los datos al cargarse&lt;/li&gt;
&lt;li&gt;Al borrar un elemento haremos una petición al servidor para que lo borre de allí y cuando sepamos que se ha borrado lo borramos del array (o recargamos los datos)&lt;/li&gt;
&lt;li&gt;Lo mismo al insertar un nuevo elemento&lt;/li&gt;
&lt;li&gt;Al marcar/desmarcar un elemento lo modificaremos en la base de datos&lt;/li&gt;
&lt;li&gt;Para borrarlos todos haremos peticiones DELETE al servidor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vamos a modificar los diferentes componentes para implementar os cambios requeridos:&lt;/p&gt;
&lt;h3 id=&quot;pedir-los-datos-al-cargarse&quot; tabindex=&quot;-1&quot;&gt;Pedir los datos al cargarse&lt;/h3&gt;
&lt;p&gt;Modificamos el fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt; para añadir en su sección &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Antes del objeto vue:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const SERVER = &#39;http://localhost:3000&#39;
// o mejor, si usamos el fichero .env como vimos en Javascript
// const SERVER = import.meta.env.VITE_URL_API
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Dentro del objeto añadimos el &lt;em&gt;hook&lt;/em&gt; &lt;strong&gt;mounted()&lt;/strong&gt; para hacer la petición Ajax al montar el componente (recordad que esa función se ejecuta automáticamente cuando se acaba de &lt;em&gt;renderizar&lt;/em&gt; el componente):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
  async mounted() {
    try {
      const response = await axios.get(SERVER + &#39;/todos&#39;)
      this.todos = response.data
    } catch (response) {
        alert(&#39;Error: &#39; + response.message)          
        this.todos=[]
    }
  },
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar-un-todo&quot; tabindex=&quot;-1&quot;&gt;Borrar un todo&lt;/h3&gt;
&lt;p&gt;Modificamos el método &lt;em&gt;delTodo&lt;/em&gt; del fichero &lt;strong&gt;Todo-List.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    async delTodo(index){
      const id = this.todos[index].id
      try {
        await axios.delete(SERVER + &#39;/todos/&#39; + id)
        this.todos.splice(index, 1)
      } catch (response) {
        alert(&#39;Error: no se ha borrado el registro. &#39; + response.message)
      }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;anadir-un-todo&quot; tabindex=&quot;-1&quot;&gt;Añadir un todo&lt;/h3&gt;
&lt;p&gt;Modificamos el método &lt;em&gt;addTodo&lt;/em&gt; del fichero &lt;strong&gt;Todo-List.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    async addTodo(title) {
      try {
        const response = await axios.post(SERVER + &#39;/todos&#39;, {
          title: title, 
          done: false
        })
        this.todos.push(response.data)
      } catch (response) {
        alert(&#39;Error: no se ha añadido el registro. &#39; + response.message)
      }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al servidor hay que pasarle como parámetro el objeto a añadir. En el caso de &lt;em&gt;json-server&lt;/em&gt; devolverá en el &lt;strong&gt;response.data&lt;/strong&gt; el nuevo objeto añadido al completo. Otras APIs devuelven sólo la &lt;em&gt;id&lt;/em&gt; del nuevo registro o pueden no devolver nada.&lt;/p&gt;
&lt;h3 id=&quot;actualizar-el-campo-em-done-em&quot; tabindex=&quot;-1&quot;&gt;Actualizar el campo &lt;em&gt;done&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Ahora ya no nos es útil el índice de la tarea a actualizar sino que necesitamos su id, su título y su estado así que modificamos el &lt;em&gt;template&lt;/em&gt; del fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt; para pasar el elemento entero a la función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;      &amp;lt;todo-item 
        v-for = &amp;quot;(item,index) in todos&amp;quot; 
        :key = &amp;quot;item.id&amp;quot;
        :todo = &amp;quot;item&amp;quot;
        @delItem = &amp;quot;delTodo(index)&amp;quot;
        @doneChanged = &amp;quot;toogleDone(item)&amp;quot;&amp;gt;
      &amp;lt;/todo-item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación modificamos el método &lt;em&gt;changeTodo&lt;/em&gt; del fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    async toogleDone(todo) {
      try {
        const response = await axios.patch(SERVER + &#39;/todos/&#39; + todo.id, {
          done: !todo.done
        })
        todo.done = response.data.done
      } catch (response) {
        alert(&#39;Error: no se ha modificado el registro. &#39; + response.message)
      }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar-todas-las-tareas&quot; tabindex=&quot;-1&quot;&gt;Borrar todas las tareas&lt;/h3&gt;
&lt;p&gt;Modificamos el método &lt;em&gt;delTodos&lt;/em&gt; del fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt;. Como el servidor no tiene una llamada para borrar todos los datos podemos recorrer el array &lt;em&gt;todos&lt;/em&gt; y borrar cada tarea usando el método &lt;strong&gt;delTodo&lt;/strong&gt; que ya tenemos hecho:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    delTodos() {
      this.todos.forEach((todo, index) =&amp;gt; this.delTodo(index))
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto no tiene mucho sentido y si necesito borrar todos los datos de la base de datos lo mejor es que la API me proporcione un método para borrarlos todos.&lt;/p&gt;
&lt;p&gt;Si lo probáis este código con muchos registros es posible que no se borren todos correctamente (en realidad sí se borran de la base de datos pero no del array). ¿Sabes por qué?. ¿Cómo lo podemos arreglar? (PISTA: el índice cambia según los elementos que haya y las peticiones asíncronas pueden no ejecutarse en el orden que esperamos).&lt;/p&gt;
&lt;h2 id=&quot;organizar-las-peticiones&quot; tabindex=&quot;-1&quot;&gt;Organizar las peticiones&lt;/h2&gt;
&lt;p&gt;Que cada componente haga llamadas a &lt;em&gt;axios&lt;/em&gt; tiene el inconveniente de que cada uno crea su propia instancia, además de que tenemos las peticiones a la API desperdigadas por el código. Para mejorar la legibilidad del código vamos a crear un fichero que será donde estén las peticiones a &lt;em&gt;axios&lt;/em&gt; de forma que nuestros componentes queden más limpios. Otra ventaja de centralizar las peticiones es que cosas como la URL a la que hacer la petición la definimos en un único sitio.&lt;/p&gt;
&lt;p&gt;Podríamos llamar al fichero &lt;em&gt;repositories/todosRepository.js&lt;/em&gt; y allí creamos las funciones que laman a la API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const apiClient = axios.create({
  // Esta parte es opcional. Estamos creando un &#39;axios&#39; personailizado con las opciones
  // que necesitemos para no tener que indicarlas cada vez. En concreto:
  // - baseURL: lo que antecederá a la ruta de cada petición
  // - headers.Accept: el tipo de datos que esperamos obtener (no es necesario
  // porque JSON es la opción por defecto)
  // - headers.Content-type: el tipo de datos que estamos pasando al servidor (no es
  // necesario porque JSON es la opción por defecto)
  // - headers.Authorization: el token que enviaremos junto a cada petición
  baseURL: &#39;http://localhost:3000&#39;,
  headers: {
    Accept: &#39;application/json&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;
    Authorization = &#39;Bearer &#39; + localStorage.token
  }
})

export default {
  getTodos() {
    return apiClient.get(&#39;/todos&#39;)
  },

  delTodo(id){
    return apiClient.delete(&#39;/todos/&#39; + id)
  },

  addTodo(newTodo) {
    return apiClient.post(&#39;/todos&#39;, newTodo)
  },

  toogleDone(todo) {
    return apiClient.put(&#39;/todos/&#39; + todo.id, {
      id: todo.id, 
      title: todo.title, 
      done: !todo.done
    })
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En primer lugar importamos &lt;em&gt;axios&lt;/em&gt; y a continuación creamos una única instancia con las opciones que necesitemos. En este ejemplo estamos enviando al servidor el &lt;em&gt;token&lt;/em&gt; del usuario con cada petición.&lt;/p&gt;
&lt;p&gt;En cada componente que tenga que hacer una llamada a la API se importa este fichero y se llama a sus funciones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import todosRepository from &#39;../repositories/todosRepository&#39;

export default {
  ...
  methods: {
    async getData() {
      try {
        const response = await todosRepository.getTodos()
        this.todos = response.data
      } catch (response) {
        console.error(&#39;Error: &#39; + response.message)
      }
    },
    ...
  },
  created() {
    this.getData()
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;api-con-varias-tablas&quot; tabindex=&quot;-1&quot;&gt;Api con varias tablas&lt;/h3&gt;
&lt;p&gt;Si trabajamos con varias tablas podemos hacer un fichero de repositorio para cada una de ellas o bien podemos escribir lo mismo de antes pero de forma más concisa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const apiClient = axios.create({
  baseURL: &#39;http://localhost:3000&#39;,
  withCredentials: false,
  headers: {
    Accept: &#39;application/json&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
})

const todos = {
    getAll: () =&amp;gt; apiClient.get(`/todos`),
    getOne: (id) =&amp;gt; apiClient.get(`/todos/${id}`),
    create: (item) =&amp;gt; apiClient.post(`/todos`, item),
    modify: (item) =&amp;gt; apiClient.put(`/todos/${item.id}`, item),
    delete: (id) =&amp;gt; apiClient.delete(`/todos/${id}`),
    toogleDone: (item) =&amp;gt; apiClient.put(`/categories/${item.id}`, {
      id: item.id,
      title: item.title, 
      done: !item.done
    }),
}

const categories = {
    getAll: () =&amp;gt; apiClient.get(`/categories`),
    getOne: (id) =&amp;gt; apiClient.get(`/categories/${id}`),
    create: (item) =&amp;gt; apiClient.post(`/categories`, item),
    modify: (item) =&amp;gt; apiClient.put(`/categories/${item.id}`, item),
    delete: (id) =&amp;gt; apiClient.delete(`/categories/${id}`),
}


export default {
    todos,
    categories,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en los componentes donde queramos usarlo importamos el fichero y llamamos a las funciones que necesitemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import apiService from &#39;../apiService&#39;

export default {
  methods: {
    async getData() {
      try {
        const response = await apiService.todos.getAll()
        this.todos = response.data
      } catch (response) {
        console.error(&#39;Error: &#39; + response.message)
      }
    },
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;api-como-clase&quot; tabindex=&quot;-1&quot;&gt;Api como clase&lt;/h3&gt;
&lt;p&gt;También podemos usar programación orientada a objetos para hacer nuestra ApiService y construir una clase que se ocupe de las peticiones a la API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const apiClient = axios.create({
  baseURL: &#39;http://localhost:3000&#39;,
  withCredentials: false,
  headers: {
    Accept: &#39;application/json&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
})

export default class APIService{
  constructor(){
  }
  getTodos() {
    return apiClient.get(&#39;/todos&#39;)
  }
  delTodo(id){
    return apiClient.delete(&#39;/todos/&#39;+id)
  },
  addTodo(newTodo) {
    return apiClient.post(&#39;/todos&#39;, newTodo)
  },
  toogleDone(todo) {
    return apiClient.put(&#39;/todos/&#39;+todo.id, {
      id: todo.id, 
      title: todo.title, 
      done: !todo.done
    })
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en los componentes donde queramos usarlo importamos la clase y creamos una instancia de la misma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import APIService from &#39;../APIService&#39;

const apiService = new APIService()

export default {
  methods: {
    async getData() {
      try {
        const response = await apiService.getAll()
        this.todos = response.data
      } catch (response) {
        console.error(&#39;Error: &#39; + response.message)
      }
    },
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;el-fichero-em-env-em&quot; tabindex=&quot;-1&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Se trata de un fichero donde guardar las configuraciones de la aplicación y la ruta del servidor es una constante que estaría mejor en este fichero que en el código como hemos hecho nosotros.&lt;/p&gt;
&lt;p&gt;Vue por medio de &lt;em&gt;Vite&lt;/em&gt; puede acceder a todas las variables de &lt;em&gt;.env&lt;/em&gt; que comiencen por VITE_ por medio del objeto &lt;code&gt;import.meta.env&lt;/code&gt; por lo que en nuestro código en vez de darle el valor a &lt;em&gt;baseURL&lt;/em&gt; podríamos haber puesto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const apiClient = axios.create({
  baseURL: import.meta.env.VITE_RUTA_API,
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el fichero &lt;strong&gt;&lt;em&gt;.env&lt;/em&gt;&lt;/strong&gt; ponemos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;VITE_RUTA_API=http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si usamos Vue con &lt;em&gt;webpack&lt;/em&gt; las variables de &lt;em&gt;.env&lt;/em&gt; deben comenzar por VUE_APP_ y accedemos a ellas por medio del objeto &lt;code&gt;process.env&lt;/code&gt; por lo que en el fichero &lt;code&gt;.env&lt;/code&gt; definiríamos la variable &lt;code&gt;VUE_APP_RUTA_API=http://localhost:3000&lt;/code&gt; y en nuestro código pondría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const apiClient = axios.create({
  baseURL: process.env.VUE_APP_RUTA_API,
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fichero &lt;em&gt;.env&lt;/em&gt; por defecto se sube al repositorio por lo que no debemos poner información sensible (como usuarios o contraseñas). Para ello tenemos un fichero &lt;strong&gt;&lt;em&gt;.env.local&lt;/em&gt;&lt;/strong&gt; que no se sube, o bien debemos añadir al &lt;em&gt;.gitignore&lt;/em&gt; dicho fichero. En cualquier caso, si el fichero con la configuración no lo subimos al repositorio es conveniente tener un fichero &lt;em&gt;.env.exemple&lt;/em&gt;, que sí se sube, con valores predeterminados para las distintas variables que deberán cambiarse por los valores adecuados en producción. Además del &lt;em&gt;.env&lt;/em&gt; y el &lt;em&gt;.env.local&lt;/em&gt; también hay distintos ficheros que son usados en desarrollo (&lt;em&gt;.env.development&lt;/em&gt;) y en producción (&lt;em&gt;.env.production&lt;/em&gt;) y que pueden tener distintos datos según el entorno en que nos encontramos. Por ejemplo en el de desarrollo el valor de VUE_APP_RUTA_API podría ser &amp;quot;&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000&lt;/a&gt;&amp;quot; si usamos &lt;em&gt;json-server&lt;/em&gt; mientras que en el de producción tendríamos la ruta del servidor de producción de la API.&lt;/p&gt;
&lt;h2 id=&quot;axios-interceptors&quot; tabindex=&quot;-1&quot;&gt;Axios interceptors&lt;/h2&gt;
&lt;p&gt;Podemos hacer que se ejecute código antes de cualquier petición a axios o tras recibir la respuesta del servidor usando los &lt;em&gt;interceptores&lt;/em&gt; de axios. Es otra forma de enviar un token que nos autentifique ante una API sin tener que ponerlo en el código de cada petición, pero también nos permite hacer cualquier cosa que necesitemos.&lt;/p&gt;
&lt;p&gt;Y podemos interceptar las respuestas para, por ejemplo, redireccionar a la página de login si el servidor nos devuelve un error 401 (no autorizado).&lt;/p&gt;
&lt;p&gt;Para interceptar las peticiones que hacemos usaremos &lt;code&gt;axios.interceptors.request.use( (config) =&amp;gt; fnAEjecutar, (error) =&amp;gt; fnAEjecutar)&lt;/code&gt; y para interceptar las respuestas del servidor &lt;code&gt;axios.interceptors.response.use( (response) =&amp;gt; fnAEjecutar, (error) =&amp;gt; fnAEjecutar)&lt;/code&gt;. Se les pasa como parámetro la función a ejecutar si todo es correcto y la que se ejecutará si ha habido algún error. El interceptor de peticiones recibe como parámetro un objeto con toda la configuración de la petición (incluyendo sus cabeceras) y el interceptor de respuestas recibe la respuesta del servidor.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo en que queremos enviar en las cabeceras de cada petición el token que tenemos almacenado en el &lt;em&gt;LocalStorage&lt;/em&gt; y queremos mostrar un alert siempre que el servidor devuelva en su respuesta un error que no sea de tipo 400. Además mostraremos por consola las peticiones y las respuestas si activamos el modo DEBUG:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;
const baseURL = &#39;http://localhost:3000&#39;
const DEBUG = true

axios.interceptors.request.use((config) =&amp;gt; {
    if (DEBUG) {
        console.info(&#39;Request: &#39;, config)
    }

    const token = localStorage.token
    if (token) {
        config.headers[&#39;Authorization&#39;] = &#39;Bearer &#39; + localStorage.token
    }
    return config
}, (error) =&amp;gt; {
    if (DEBUG) {
        console.error(&#39;Request error: &#39;, error)
    }
    return Promise.reject(error)
})

axios.interceptors.response.use((response) =&amp;gt; {
    if (DEBUG) {
        console.info(&#39;Response: &#39;, response)
    }
    return response
}, (error) =&amp;gt; {
    if (error.response &amp;amp;&amp;amp; error.response.status !== 400) {
        alert(&#39;Response error &#39; + error.response.status + &#39;(&#39; + error.response.statusText + &#39;)&#39;)
    }
    if (DEBUG) {
        console.info(&#39;Response error: &#39;, error)
    }
    return Promise.reject(error)
})

const categories = {
    getAll: () =&amp;gt; axios.get(`${baseURL}/categories`),
    getOne: (id) =&amp;gt; axios.get(`${baseURL}/categories/${id}`),
    create: (item) =&amp;gt; axios.post(`${baseURL}/categories`, item),
    modify: (item) =&amp;gt; axios.put(`${baseURL}/categories/${item.id}`, item),
    delete: (id) =&amp;gt; axios.delete(`${baseURL}/categories/${id}`),
}

export default {
    categories,
}
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/04-axios/" >
        </entry>
        <entry>
            <title>
                03_2-comunicar_componentes
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/03-2-comunicar-componentes/</id>
            <content type="html">
                &lt;h1 id=&quot;comunicacion-entre-componentes&quot; tabindex=&quot;-1&quot;&gt;Comunicación entre componentes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#comunicaci%C3%B3n-entre-componentes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comunicación entre componentes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#props-de-padre-a-hijo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Props (de padre a hijo)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#nunca-cambiar-el-valor-de-una-prop&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nunca cambiar el valor de una prop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-de-props&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación de props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pasar-otros-atributos-de-padre-a-hijo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pasar otros atributos de padre a hijo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#emitir-eventos-de-hijo-a-padre&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Emitir eventos (de hijo a padre)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#definir-y-validar-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Definir y validar eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#capturar-el-evento-en-el-padre&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Capturar el evento en el padre&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#compartir-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Compartir datos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#root-y-parent&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;$root y $parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#store-pattern&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Store pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pinia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slots&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Slots&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slots-con-nombre&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Slots con nombre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceder-a-datos-del-hijo-desde-el-padre-con-slot&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceder a datos del hijo desde el padre con &lt;em&gt;slot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#aplicaci%C3%B3n-de-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aplicación de ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Cada componente tiene sus propios datos que son &lt;strong&gt;datos de nivel de componente&lt;/strong&gt;, pero hay ocasiones en que varios componentes necesitan acceder a los mismos datos. Es lo que nos sucede en nuestra aplicación de ejemplo donde varios componentes necesitan acceder a la lista de tareas (variable &lt;em&gt;todos&lt;/em&gt;) para mostrarla (&lt;em&gt;todo-list&lt;/em&gt;), añadir items (&lt;em&gt;todo-add&lt;/em&gt;) o borrarla (&lt;em&gt;todo-del-all&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Estos datos se consideran &lt;strong&gt;datos de nivel de aplicación&lt;/strong&gt; y hay varias formas de tratarlos.&lt;/p&gt;
&lt;p&gt;Ya hemos visto que podemos pasar información a un componente hijo mediante &lt;em&gt;props&lt;/em&gt;. Esto permite la comunicación de padres a hijos, pero queda por resolver cómo comunicarse los hijos con sus padres para informarles de cambios o eventos producidos y cómo comunicarse otros componentes entre sí.&lt;/p&gt;
&lt;p&gt;Nos podemos encontrar las siguientes situaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comunicación de padres a hijos: paso de parámetros (&lt;strong&gt;&lt;em&gt;props&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Comunicación de hijos a padres: emitir eventos (&lt;strong&gt;&lt;em&gt;$emit&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Comunicación entre otros componentes: usar el patrón &lt;strong&gt;&lt;em&gt;store pattern&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Comunicación más compleja: &lt;strong&gt;&lt;em&gt;Pinia&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;props-de-padre-a-hijo&quot; tabindex=&quot;-1&quot;&gt;Props (de padre a hijo)&lt;/h2&gt;
&lt;p&gt;Ya hemos visto que podemos pasar parámetros del padre al componente hijo. Si el valor del parámetro cambia en el padre automáticamente se reflejan esos cambios en el hijo.&lt;/p&gt;
&lt;p&gt;NOTA: Cualquier parámetro que pasemos sin &lt;em&gt;v-bind&lt;/em&gt; se considera texto. Si queremos pasar un número, booleano, array u objeto hemos de pasarlo con &lt;em&gt;v-bind&lt;/em&gt; igual que hacemos con las variables para que no se considere texto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item todo=&amp;quot;Aprender Vue&amp;quot; :done=&amp;quot;false&amp;quot; &amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos pasar varios parámetros a un componente hijo podemos pasarle un objeto en un atributo &lt;em&gt;v-bind&lt;/em&gt; sin nombre y lo que recibirá el componente hijo son sus propiedades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;todo-item v-bind=&amp;quot;propsObject&amp;quot; &amp;gt;&amp;lt;/todo-item&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  ...
  data() {
    return {
      propsObject: { 
        todo: &#39;Aprender Vue&#39;, 
        done: false
      }
    }
  }
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en el componente se reciben sus parámetros separadamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// todo-item.vue
  ...
  props: [&#39;todo&#39;, &#39;done&#39;],
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También es posible que el nombre de un parámetro que queramos pasar sea una variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;child-component :[paramName]=&amp;quot;valorAPasar&amp;quot; &amp;gt;&amp;lt;/child-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-12&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;nunca-cambiar-el-valor-de-una-prop&quot; tabindex=&quot;-1&quot;&gt;Nunca cambiar el valor de una prop&lt;/h3&gt;
&lt;p&gt;Al pasar un parámetro mediante una &lt;em&gt;prop&lt;/em&gt; su valor se mantendrá actualizado en el hijo si su valor cambiara en el padre, pero no al revés por lo que no debemos cambiar su valor en el componente hijo (de hecho &lt;em&gt;Vue3&lt;/em&gt; no nos lo permite).&lt;/p&gt;
&lt;p&gt;Si tenemos que cambiar su valor porque lo que nos pasan es sólo un valor inicial podemos crear una variable local a la que le asignamos como valor inicial el parámetro pasado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: [&#39;initialValue&#39;],
data(): {
  return {
    myValue: this.initialValue
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el componente usaremos la nueva variable &lt;em&gt;myValue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si no necesitamos cambiarla sino sólo darle determinado formato a la variable pasada lo haremos creando una nueva variable (en este caso mejor una &lt;em&gt;computed&lt;/em&gt;), que es con la que trabajaremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: [&#39;cadenaSinFormato&#39;],
computed(): {
  cadenaFormateada() {
    return this.cadenaSinFormato.trim().toLowerCase()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: Si el parámetro es un objeto o un array éste se pasa por referencia por lo que si lo cambiamos en el componente hijo &lt;strong&gt;sí&lt;/strong&gt; se cambiará en el padre, cosa que debemos evitar.&lt;/p&gt;
&lt;h3 id=&quot;validacion-de-props&quot; tabindex=&quot;-1&quot;&gt;Validación de props&lt;/h3&gt;
&lt;p&gt;Al recibir los parámetros podemos usar &lt;em&gt;sintaxis de objeto&lt;/em&gt; en lugar de &lt;em&gt;sintaxis de array&lt;/em&gt; y en ese caso podemos indicar algunas cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: su tipo (String, Number, Boolean, Array, Object, Date, Function, Symbol o una clase propia). Puede ser un array con varios tipos: &lt;code&gt;type: [Boolean, Number]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;: su valor por defecto si no se pasa ese parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: si es o no obligatorio&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;validator&lt;/strong&gt;: una función que recibe como parámetro el valor del parámetro y devolverá true o false en función de si el valor es o no válido&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: {
  nombre: String,
  apellidos: {
    type: String,
    required: true
  },
  idPropietario: {
    type: [Boolean, Number],
    default: false
  },
  products: {
    type: Object,
    default(): { 
      return {id:0, units: 0} 
    }  // Si es un objeto o array _default_ debe ser una función que devuelva el valor
  },
  nifGestor: {
    type: String,
    required: true,
    validator(value): {
      return /^[0-9]{8}[A-Z]$/.test(value)   // Si devuelve *true* será válido
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;pasar-otros-atributos-de-padre-a-hijo&quot; tabindex=&quot;-1&quot;&gt;Pasar otros atributos de padre a hijo&lt;/h3&gt;
&lt;p&gt;Además de los parámetros, que se reciben en &lt;em&gt;props&lt;/em&gt;, el componente padre puede poner cualquier otro atributo en la etiqueta del hijo, quien lo recibirá y se aplicará a su elemento raíz. A esos atributos se puede acceder a través de &lt;code&gt;$attr&lt;/code&gt;. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- componente padre --&amp;gt;
&amp;lt;date-picker id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot; class=&amp;quot;fecha&amp;quot;&amp;gt;&amp;lt;/date-picker&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;// Componente hijo date-picker.vue
&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;date-picker&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;datetime&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  ...
  methods: {
    showAttributes() {
      console.log(&#39;Id: &#39; + this.$attrs.id + &#39;, Data: &#39; + this.$attrs[&#39;data-status&#39;])
    }
  }
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El subcomponente se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;fecha date-picker&amp;quot; id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;datetime&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y al ejecutar el método &lt;em&gt;showAttributes&lt;/em&gt; mostrará en la consola &lt;code&gt;Id: now, Data: activated&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A veces no queremos que esos atributos se apliquen al elemento raíz del subcomponente sino a alguno interno (habitual si le pasamos escuchadores de eventos). En ese caso podemos deshabilitar la herencia de parámetros definiendo el atributo del componente &lt;code&gt;inheritAttrs&lt;/code&gt; a &lt;em&gt;false&lt;/em&gt; y aplicándolos nosotros manualmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- componente padre --&amp;gt;
&amp;lt;date-picker id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot; @input=&amp;quot;dataChanged&amp;quot;&amp;gt;&amp;lt;/date-picker&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Componente hijo date-picker.vue
&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;date-picker&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;datetime&amp;quot; v-bind=&amp;quot;$attrs&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  ...
  inheritAttrs: false,
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;date-picker&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;datetime&amp;quot; class=&amp;quot;fecha&amp;quot; id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot; @input=&amp;quot;dataChanged&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El componente padre está escuchando el evento &lt;em&gt;input&lt;/em&gt; sobre el &amp;lt;INPUT&amp;gt; del componente hijo.&lt;/p&gt;
&lt;p&gt;En Vue3, si el componente hijo tiene varios elementos raíz deberemos &lt;em&gt;bindear&lt;/em&gt; los &lt;em&gt;attrs&lt;/em&gt; a uno de ellos como acabamos de ver.&lt;/p&gt;
&lt;h2 id=&quot;emitir-eventos-de-hijo-a-padre&quot; tabindex=&quot;-1&quot;&gt;Emitir eventos (de hijo a padre)&lt;/h2&gt;
&lt;p&gt;Si un componente hijo debe pasarle un dato a su padre o informarle de algo puede emitir un evento que el padre capturará y tratará convenientemente. Para emitir el evento el hijo hace:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  this.$emit(&#39;nombreEvento&#39;, parametro)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El padre debe capturar el evento como cualquier otro. En su HTML hará:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component @nombre-evento=&amp;quot;fnManejadora&amp;quot; ... /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en su JS tendrá la función para manejar ese evento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  methods: {
    fnManejadora(param) {
      ...
    },
  }
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El componente hijo puede emitir cualquiera de los eventos estándar de JS (&#39;click&#39;, &#39;change&#39;, ...) o un evento personalizado (&#39;cambiado&#39;, ...).&lt;/p&gt;
&lt;p&gt;Igual que un componente declara las &lt;em&gt;props&lt;/em&gt; que recibe, también puede declarar los eventos que emite. Esto es opcional pero &lt;strong&gt;muy recomendable&lt;/strong&gt; ya que proporciona mayor claridad al código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// TodoItem.vue
...
props: {
  todo: Object
},
emits: [&#39;nombreEvento&#39;],
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;: continuando con la aplicación de tareas que dividimos en componentes, en el componente &lt;strong&gt;&lt;em&gt;todo-item&lt;/em&gt;&lt;/strong&gt; en lugar de hacer un alert emitiremos un evento al padre:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;delTodo() {
  this.$emit(&#39;delItem&#39;)
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en el componente &lt;strong&gt;&lt;em&gt;todo-list&lt;/em&gt;&lt;/strong&gt; lo escuchamos y llamamos al método que borre el item:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  template: `
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;{{ title }}&amp;lt;/h2&amp;gt;
      &amp;lt;ul&amp;gt;
       &amp;lt;todo-item 
         v-for=&amp;quot;(item, index) in todos&amp;quot; 
         :key=&amp;quot;item.id&amp;quot;
         :todo=&amp;quot;item&amp;quot;
         @del-item=&amp;quot;delTodo(index)&amp;quot;&amp;gt;
       &amp;lt;/todo-item&amp;gt;
      &amp;lt;/ul&amp;gt;
      &amp;lt;add-item&amp;gt;&amp;lt;/add-item&amp;gt;
      &amp;lt;br&amp;gt;
      &amp;lt;del-all&amp;gt;&amp;lt;/del-all&amp;gt;
    &amp;lt;/div&amp;gt;`,
  methods: {
    delTodo(index){
      this.todos.splice(index,1)
    },
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-13&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;definir-y-validar-eventos&quot; tabindex=&quot;-1&quot;&gt;Definir y validar eventos&lt;/h3&gt;
&lt;p&gt;Como hemos dicho, los eventos que emite un componente pueden (y se recomienda) definirse en la opción &lt;em&gt;emits&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// component todo-item.vue
  ...
  emits: [&#39;toogle-done&#39;, &#39;dblclick&#39;],
  props: [&#39;todo&#39;],
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es recomendable definir los argumentos que emite usando sintaxis de objeto en vez de array, similar a como hacemos con las &lt;em&gt;props&lt;/em&gt;. Para ello el evento se asigna a una función que recibe como parámetro los parámetros del evento y devuelve &lt;em&gt;true&lt;/em&gt; si es válido o &lt;em&gt;false&lt;/em&gt; si no lo es:&lt;br /&gt;
&lt;code&gt;custom-form.vue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
  emits: {
    // No validation
    click: null,
    // Validate submit event
    submit: ({ email, password }) =&amp;gt; {
      if (email &amp;amp;&amp;amp; password) {
        return true
      } else {
        console.warn(&#39;Invalid submit event payload!&#39;)
        return false
      }
    }
  },
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo el componente emite &lt;em&gt;click&lt;/em&gt; que no se valida y &lt;em&gt;submit&lt;/em&gt; donde se valida que reciba 2 parámetros.&lt;/p&gt;
&lt;h3 id=&quot;capturar-el-evento-en-el-padre&quot; tabindex=&quot;-1&quot;&gt;Capturar el evento en el padre&lt;/h3&gt;
&lt;p&gt;En ocasiones (como en este caso) el componente hijo no hace nada más que informar al padre de que se ha producido un evento sobre él. En estos casos podemos hacer que el evento se capture directamente en el padre en lugar de en el hijo:&lt;/p&gt;
&lt;p&gt;Componente &lt;strong&gt;&lt;em&gt;todo-list.vue&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;{{ title }}&amp;lt;/h2&amp;gt;
      &amp;lt;ul&amp;gt;
       &amp;lt;todo-item 
         v-for=&amp;quot;(item, index) in todos&amp;quot; 
         :key=&amp;quot;item.id&amp;quot;
         :todo=&amp;quot;item&amp;quot;
         @dblclick=&amp;quot;delTodo(index)&amp;quot;&amp;gt;
        &amp;lt;/todo-item&amp;gt;
    ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le estamos indicando a Vue que el evento &lt;em&gt;dblclick&lt;/em&gt; se capture en &lt;em&gt;todo-list&lt;/em&gt; directamente por lo que el componente &lt;em&gt;todo-item&lt;/em&gt; no tiene que capturarlo ni hacer nada:&lt;/p&gt;
&lt;p&gt;Componente &lt;strong&gt;&lt;em&gt;todo-item.vue&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;label&amp;gt;
    ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;compartir-datos&quot; tabindex=&quot;-1&quot;&gt;Compartir datos&lt;/h2&gt;
&lt;p&gt;Una forma más sencilla de modificar datos de un componente desde otros es compartiendo los datos entre ellos. Definimos en un fichero &lt;em&gt;.js&lt;/em&gt; aparte un objeto que contendrá todos los datos a compartir entre componentes, lo importamos y lo registramos en el &lt;em&gt;data&lt;/em&gt; de cada componente que tenga que acceder a él. Ejemplo:&lt;/p&gt;
&lt;p&gt;Fichero &lt;code&gt;/src/store/index.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &#39;vue&#39;

export const store = reactive({
  message: &#39;&#39;,
  myData: [],
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En Vue3 para que la variable store sea reactiva (que la vista reaccione a los cambios que se produzcan en ella) hay que declararla con &lt;code&gt;reactive&lt;/code&gt; si es un objeto o con &lt;code&gt;ref&lt;/code&gt; si es un tipo primitivo (&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, ...).&lt;/p&gt;
&lt;p&gt;Fijaos que se declara el objeto &lt;em&gt;store&lt;/em&gt; como una constante porque NO puedo cambiar su valor para que pueda ser usado por todos los componentes, pero sí el de sus propiedades.&lt;/p&gt;
&lt;p&gt;En cada componente que necesite acceder a datos del &lt;em&gt;store&lt;/em&gt; lo importamos y definimos dentro de &lt;em&gt;computed&lt;/em&gt; las variables a las que queramos acceder. No lo hacemos en &lt;em&gt;data&lt;/em&gt; porque allí declaro las variables locales del componente y estas está en el &lt;em&gt;store&lt;/em&gt;.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Componente `compA.vue`
```javascript
import { store } from &#39;../store/&#39;

export default {
  template: `&amp;lt;p&amp;gt;Mensaje: { { message}} &amp;lt;/p&amp;gt;`,
  computed: {
    message() {
      return store.message
    }
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ya puedo acceder a la variable &lt;em&gt;message&lt;/em&gt; del &lt;em&gt;store&lt;/em&gt; desde el componente con &lt;code&gt;this.message&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esta forma de trabajar tiene un grave inconveniente: como el valor de cualquier dato puede ser modificado desde cualquier parte de la aplicación es difícilmente mantenible y se convierte en una pesadilla depurar el código y encontrar errores.&lt;/p&gt;
&lt;p&gt;Para evitarlo usaremos un patrón de programación llamado &lt;em&gt;Store pattern&lt;/em&gt; que veremos en el siguiente apartado.&lt;/p&gt;
&lt;h3 id=&quot;root-y-parent&quot; tabindex=&quot;-1&quot;&gt;$root y $parent&lt;/h3&gt;
&lt;p&gt;Todos los componentes tienen acceso a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;los parámetros que le han pasado como &lt;code&gt;props&lt;/code&gt; (que no deberían cambiarse)&lt;/li&gt;
&lt;li&gt;sus variables locales, declaradas en &lt;code&gt;data()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sus variables calculadas, declaradas en &lt;code&gt;computed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pero además tienen acceso a los datos y métodos definidos en la instancia de Vue (donde hacemos el &lt;code&gt;Vue.createApp()&lt;/code&gt;, es decir, en el &lt;code&gt;main.js&lt;/code&gt;) a los que accede desde el objeto &lt;strong&gt;&lt;code&gt;$root&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue.createApp({
  data: {
    message: &#39;Hola&#39;,
  },
  methods: {
    getInfo() {
  ...
}).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde cualquier componente podemos hacer cosas como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(this.$root.message)
this.$root.message=&#39;Adios&#39;
this.$root.getInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También es posible acceder a los datos y métodos del componente padre del actual usando &lt;code&gt;$parent&lt;/code&gt; en lugar de &lt;code&gt;$root&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;De esta manera podríamos acceder directamente a datos del padre o usar la instancia de Vue como almacén (evitando crear el objeto &lt;strong&gt;store&lt;/strong&gt; para compartir datos). Sin embargo, aunque esto puede ser útil en aplicaciones pequeñas, es difícil de mantener cuando nuestra aplicación crece por lo que se recomienda usar un &lt;strong&gt;&lt;em&gt;Store pattern&lt;/em&gt;&lt;/strong&gt; como veremos a continuación o &lt;strong&gt;Pinia&lt;/strong&gt; si nuestra aplicación va a ser grande.&lt;/p&gt;
&lt;h3 id=&quot;store-pattern&quot; tabindex=&quot;-1&quot;&gt;Store pattern&lt;/h3&gt;
&lt;p&gt;Es una mejora sobre lo que hemos visto de compartir datos. Para evitar que todos los componentes puedan modificar los datos compartidos en el almacén, las acciones que modifican dichos datos están incluidas dentro del propio almacén, lo que facilita su seguimiento:&lt;/p&gt;
&lt;p&gt;Fichero &lt;code&gt;/src/store/index.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &#39;vue&#39;

export const store = {
  debug: true,
  state: reactive({
    message: &#39;&#39;,
    ...
  }),
  setMessageAction (newValue) {
    if (this.debug) console.log(&#39;setMessageAction triggered with &#39;, newValue)
    this.state.message = newValue
  },
  clearMessageAction () {
    if (this.debug) console.log(&#39;clearMessageAction triggered&#39;)
    this.state.message = &#39;&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Componente &lt;code&gt;compA.vue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { store } from &#39;../store/&#39;

export default {
  template: `&amp;lt;p&amp;gt;Mensaje: { { message}} &amp;lt;/p&amp;gt;`,
  computed: {
    message() {
      return store.state.message,
    }
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que lo declaramos como &lt;code&gt;computed&lt;/code&gt; porque es una varable calculada: una variable que está en otro sitio.&lt;/p&gt;
&lt;p&gt;Componente &lt;code&gt;compB.vue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { store } from &#39;/src/datos.js&#39;
  ...
  methods: {
    delMessage() {
      store.clearMessageAction()
    }
  },
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: no debemos guardar todos los datos en el &lt;em&gt;store&lt;/em&gt; sólo los datos de aplicación (aquellos que utiliza más de un componente). Los datos privados de cada componente seguiremos declarándolos en su &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;pinia&quot; tabindex=&quot;-1&quot;&gt;Pinia&lt;/h2&gt;
&lt;p&gt;Hemos visto que con un &lt;em&gt;store pattern&lt;/em&gt; se simplifica mucho la gestión de los datos de aplicación y al centralizar los métodos que modifican los datos tengo control sobre los cambios producidos. Sin embargo en un componente puedo seguir escribiendo código que manipule los datos del almacén directamente, sin usar los métodos del almacén. &lt;em&gt;Pinia&lt;/em&gt; básicamente es un &lt;em&gt;store pattern&lt;/em&gt; donde parte del trabajo de definirlo ya está hecho y que me obliga a usarlo para mainular los datos de aplicación (con él no puedo cambiarlos directamente desde un componente). Además se integra perfectamente con las &lt;em&gt;DevTools&lt;/em&gt; por lo que es muy sencillo seguir los cambios producidos.&lt;/p&gt;
&lt;p&gt;Se trata de una librería para gestionar los estados en una aplicación Vue. Ofrece un almacenamiento centralizado para todos los componentes con unas reglas para asegurar que un estado sólo cambia de determinada manera. Es el método a utilizar en aplicaciones medias y grandes y le dedicaremos todo un tema más adelante. En Vue2 y anteriores la librería que se usaba es &lt;em&gt;Vuex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lo veremos en detalle en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/07-pinia.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad dedicada a esta librería&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;slots&quot; tabindex=&quot;-1&quot;&gt;Slots&lt;/h2&gt;
&lt;p&gt;Otra forma en que un componente hijo puede mostrar información del padre es usando &lt;em&gt;slots&lt;/em&gt;. Un &lt;em&gt;slot&lt;/em&gt; es un hueco en un componente que, al renderizarse, se rellena con lo que le pasa el padre en el innerHTML de la etiqueta del componente. El &lt;em&gt;slot&lt;/em&gt; tiene acceso al contexto del componente padre, no al del componente donde se renderiza. Los &lt;em&gt;slots&lt;/em&gt; son una herramienta muy potente. Podemos obtener toda la información en la &lt;a href=&quot;https://v3.vuejs.org/guide/component-slots.html#slot-content&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;br /&gt;
Tenemos un componente llamado &lt;em&gt;my-component&lt;/em&gt; con un slot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h3&amp;gt;Componente con un slot&amp;lt;/h3&amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;p&amp;gt;Esto se verá si no se pasa nada al slot&amp;lt;/p&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si llamamos al componente con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component&amp;gt;
  &amp;lt;p&amp;gt;Texto del slot&amp;lt;/p&amp;gt;
&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;h3&amp;gt;Componente con un slot&amp;lt;/h3&amp;gt;
  &amp;lt;p&amp;gt;Texto del slot&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero si lo llamamos con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component&amp;gt;
&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;h3&amp;gt;Componente con un slot&amp;lt;/h3&amp;gt;
  &amp;lt;p&amp;gt;Esto se verá si no se pasa nada al slot&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-14&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Un ejemplo más util de &lt;em&gt;slot&lt;/em&gt; es el siguiente: queremos hacer un componente que renderice una fila de una tabla donde mostrar los datos de un usuario. Tendremos una última columna donde poner unos botones para realizar acciones sobre ese usuario pero esos botones variarán en función de la página donde se muestre la tabla. Para ello usaremos &lt;em&gt;slots&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;{{ user.name }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ user.email }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ user.age }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;
      &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
    &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Donde queremos mostrar un usuario con botones para editar y borrar haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;user-row :user=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;button @click=&amp;quot;editUser&amp;quot;&amp;gt;Editar&amp;lt;/button&amp;gt;
    &amp;lt;button @click=&amp;quot;deleteUser&amp;quot;&amp;gt;Borrar&amp;lt;/button&amp;gt;
&amp;lt;/user-row&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y donde queremos mostrarlo sólo con un botón para ver más detalles haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;user-row :user=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;button @click=&amp;quot;showDetails&amp;quot;&amp;gt;Detalles&amp;lt;/button&amp;gt;
&amp;lt;/user-row&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;slots-con-nombre&quot; tabindex=&quot;-1&quot;&gt;Slots con nombre&lt;/h3&gt;
&lt;p&gt;A veces nos interesa tener más de un slot en un componente. Para saber qué contenido debe ir a cada slot se les da un nombre.&lt;/p&gt;
&lt;p&gt;Vamos a ver un ejemplo de un componente llamado &lt;em&gt;base-layout&lt;/em&gt; con 3 &lt;em&gt;slots&lt;/em&gt;, uno para la cabecera, otro para el pie y otro principal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;main&amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/main&amp;gt;
  &amp;lt;footer&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/footer&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A la hora de llamar al componente hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;base-layout&amp;gt;
  &amp;lt;template v-slot:header&amp;gt;
    &amp;lt;h1&amp;gt;Here might be a page title&amp;lt;/h1&amp;gt;
  &amp;lt;/template&amp;gt;

  &amp;lt;template v-slot:default&amp;gt;
    &amp;lt;p&amp;gt;A paragraph for the main content.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And another one.&amp;lt;/p&amp;gt;
  &amp;lt;/template&amp;gt;

  &amp;lt;template v-slot:footer&amp;gt;
    &amp;lt;p&amp;gt;Here&#39;s some contact info&amp;lt;/p&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/base-layout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La directiva &lt;code&gt;v-slot&lt;/code&gt; tiene una abreviatura que es &lt;code&gt;#&lt;/code&gt; de forma que podríamos haber puesto &lt;code&gt;&amp;lt;template &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#header&quot;&gt;#header&lt;/a&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podría no ponerse el &lt;em&gt;template &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#default&quot;&gt;#default&lt;/a&gt;&lt;/em&gt; y funcionaría igual: lo que está dentro de un &lt;em&gt;template&lt;/em&gt; con &lt;em&gt;v-slot&lt;/em&gt; irá al &lt;em&gt;slot&lt;/em&gt; del componente con ese nombre. El resto del innerHTML irá al &lt;em&gt;slot&lt;/em&gt; por defecto (el que no tiene nombre).&lt;/p&gt;
&lt;p&gt;La directiva &lt;em&gt;v-slot&lt;/em&gt; podemos ponérsela a cualquier etiqueta (no tiene que ser &amp;lt;template&amp;gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;base-layout&amp;gt;
  &amp;lt;h1 v-slot=&amp;quot;header&amp;quot;&amp;gt;Here might be a page title&amp;lt;/h1&amp;gt;

  &amp;lt;p&amp;gt;A paragraph for the main content.&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;And another one.&amp;lt;/p&amp;gt;

  &amp;lt;p slot=&amp;quot;footer&amp;quot;&amp;gt;Here&#39;s some contact info&amp;lt;/p&amp;gt;
&amp;lt;/base-layout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;acceder-a-datos-del-hijo-desde-el-padre-con-em-slot-em&quot; tabindex=&quot;-1&quot;&gt;Acceder a datos del hijo desde el padre con &lt;em&gt;slot&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El componente hijo puede hacer accesibles sus variables al padre declarándolas en su etiqueta &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- ChildComponent --&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;slot :text=&amp;quot;greetingMessage&amp;quot; :count=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- ParentComponent --&amp;gt;
&amp;lt;child-component v-slot={ text, count }&amp;gt;
  {{ text }}: {{ count }}
&amp;lt;/child-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto es particularmente útil en componentes hijos que muestran un array de datos (con un &lt;code&gt;v-for&lt;/code&gt;) si queremos acceder con el padre a cada dato.&lt;/p&gt;
&lt;p&gt;Podéis profundizar en el uso de &lt;em&gt;slots&lt;/em&gt; en la &lt;a href=&quot;https://vuejs.org/guide/components/slots.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;aplicacion-de-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Aplicación de ejemplo&lt;/h1&gt;
&lt;p&gt;Vamos a hacer que funcione la aplicación que tenemos hecha con &lt;em&gt;SFC&lt;/em&gt; y &lt;em&gt;Store pattern&lt;/em&gt;. Para ello vamos a crear un &lt;em&gt;store&lt;/em&gt; que contendrá el array de tareas y los métodos para añadir, borrar y cambiar el estado de las tareas, así como para borrarlas todas.&lt;/p&gt;
&lt;p&gt;En el componente &lt;em&gt;todo_list&lt;/em&gt; debemos incluir el array &lt;em&gt;todos&lt;/em&gt; lo que haremos en su &lt;em&gt;computed&lt;/em&gt;. El resto de componentes no necesitan acceder al array, pero sí llamarán a los métodos para cambiarlo.&lt;/p&gt;
&lt;p&gt;Respecto al &lt;em&gt;todo-item&lt;/em&gt; debe cambiar los datos tanto al hacer doble click (se borra la tarea) como al marcar/desmarcar el checkbox (se cambia el estado de la tarea).&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/todo-app-with-vue-cli-it-works-fnen9g?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;ToDo App with vue-cli (it works!!!)&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/03-2-comunicar-componentes/" >
        </entry>
        <entry>
            <title>
                03_1-sfc
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/03-1-sfc/</id>
            <content type="html">
                &lt;h1 id=&quot;single-file-components&quot; tabindex=&quot;-1&quot;&gt;Single File Components&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#single-file-components&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Single File Components&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#recordatorio-de-c%C3%B3mo-separar-componentes-en-ficheros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Recordatorio de cómo separar componentes en ficheros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-del-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución del ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-proyecto-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un proyecto Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creaci%C3%B3n-de-un-nuevo-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creación de un nuevo proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#scaffolding-creado&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Scaffolding&lt;/em&gt; creado&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#packagejson&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;package.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#indexhtml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mainjs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;main.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#appvue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;App.vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#componentshelloworldvue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;components/HelloWorld.vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#build-and-deploy-de-nuestra-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Build and Deploy&lt;/em&gt; de nuestra aplicación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#los-ficheros-sfc-single-file-component&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Los ficheros SFC (&lt;em&gt;Single File Component&lt;/em&gt;)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#secciones-de-un-single-file-component&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Secciones de un Single File Component&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#template&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;template&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#script&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;script&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#style&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;style&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#custom-blocks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Custom blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-nuevos-paquetes-y-plugins&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir nuevos paquetes y plugins&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bootstrap&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bootstrap&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#iconos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Iconos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-nuevo-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un nuevo componente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#depurar-el-c%C3%B3digo-en-la-consola&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Depurar el código en la consola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#aplicaci%C3%B3n-de-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aplicación de ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;La utilidad de separar nuestra aplicación en componentes es que cada uno de ellos puede guardarse en su propio fichero y así no tenemos un fichero con demasiado código. A estos ficheros que contienen un componente se les llama &lt;em&gt;Single File Component (SFC)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;recordatorio-de-como-separar-componentes-en-ficheros&quot; tabindex=&quot;-1&quot;&gt;Recordatorio de cómo separar componentes en ficheros&lt;/h3&gt;
&lt;p&gt;Como vimos en la unidad anterior, en el fichero en que definimos el componente exportamos un objeto con las opciones del componente (el segundo parámetro del &lt;code&gt;app.component()&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
    props: [&#39;todo&#39;],
    template: 
      `&amp;lt;li @dblclick=&amp;quot;delTodo&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
          &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;todo.done&amp;quot;&amp;gt;
          &amp;lt;del v-if=&amp;quot;todo.done&amp;quot;&amp;gt;
            { { todo.title }}
          &amp;lt;/del&amp;gt;
          &amp;lt;span v-else&amp;gt;
            { { todo.title }}
          &amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
      &amp;lt;/li&amp;gt;`,
    methods: {
      delTodo() {
        alert(&#39;Quiero borrar &amp;quot;&#39; + this.todo.title + &#39;&amp;quot;&#39;);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde queramos usarlo (puede ser en otro componente o en la instancia raíz de &lt;em&gt;Vue&lt;/em&gt;) debemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar el fichero del componente&lt;/li&gt;
&lt;li&gt;registrar el componente en una propiedad llamada &lt;em&gt;components&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El fichero &lt;code&gt;main.js&lt;/code&gt; de nuestra aplicación de la &lt;em&gt;Lista de tareas&lt;/em&gt; quedaba:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import TodoList from &#39;./TodoList.js&#39;
import TodoAdd from &#39;./TodoAdd.js&#39;
import TodoDellAll from &#39;./TodoDellAll.js&#39;

var myApp=Vue.createApp({
    components:  {
        TodoList,
        TodoAdd,
        TodoDellAll,
    }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuerda que para que el navegador entienda la sentencia &lt;code&gt;import&lt;/code&gt; debemos indicar que el script que lo contiene es de tipo &lt;strong&gt;module&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;solucion-del-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Solución del ejemplo&lt;/h3&gt;
&lt;p&gt;Podéis ver aquí cómo quedará nuestra aplicación de ejemplo con los componentes separados en ficheros:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/gracious-kepler-mq9ypp?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;gracious-kepler-mq9ypp&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;crear-un-proyecto-vue&quot; tabindex=&quot;-1&quot;&gt;Crear un proyecto Vue&lt;/h2&gt;
&lt;p&gt;Aunque puede usarse &lt;em&gt;Vue&lt;/em&gt; como hemos visto, enlazándolo directamente en el &lt;em&gt;index.html&lt;/em&gt; lo más habitual es crear un nuevo proyecto para la aplicación que vamos a desarrollar usando &lt;strong&gt;npm&lt;/strong&gt; y &lt;strong&gt;Vite&lt;/strong&gt;. Esto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crea automáticamente el &lt;em&gt;scaffolding&lt;/em&gt; básico de nuestro proyecto basándose en una serie de plantillas predefinidas&lt;/li&gt;
&lt;li&gt;Facilita el trabajo con componentes, permitiendo que cada uno de ellos esté en su propio fichero (&lt;strong&gt;SFC&lt;/strong&gt;, &lt;em&gt;Single File Components&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Incluye utilidades y herramientas como Babel, Uglify, ... que permiten
&lt;ul&gt;
&lt;li&gt;gestionar las dependencias de nuestro código&lt;/li&gt;
&lt;li&gt;empaquetar todos los ficheros &lt;em&gt;.vue&lt;/em&gt; y librerías en un único fichero JS y CSS&lt;/li&gt;
&lt;li&gt;traspilar el código ES2015/2016, SCSS, etc a ES5 y CSS3 estándar&lt;/li&gt;
&lt;li&gt;minimizar el código generado&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incluye herramientas que facilitan el desarrollo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;creacion-de-un-nuevo-proyecto&quot; tabindex=&quot;-1&quot;&gt;Creación de un nuevo proyecto&lt;/h3&gt;
&lt;p&gt;Para crear un nuevo proyecto ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init vue@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al ejecutar este comando se nos pregunta el nombre del proyecto a crear y si queremos usar o no determinadas herramientas (más adelante veremos qué es cada una, de momento decimos que &lt;em&gt;No&lt;/em&gt;) y se creará el directorio para el mismo con el &lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt; del proyecto en su interior con su configuración.&lt;/p&gt;
&lt;p&gt;![Nuevo Proyecto](/img/user/01 Apuntes/Vue Teoria Batoi/img/npm-init-vue.png)&lt;/p&gt;
&lt;p&gt;Lo primero que haremos es entrar al directorio del proyecto e instalar las dependencias (&lt;code&gt;npm install&lt;/code&gt;) y a continuación ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este script de &lt;em&gt;Vite&lt;/em&gt; funciona como ya vismo en el bloque de Javascript: compila el código, muestra si hay errores, lanza un servidor web en el puerto 5173 y carga el proyecto en el navegador (&lt;a href=&quot;http://localhost:5173/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:5173&lt;/a&gt;). Si cambiamos cualquier fichero del directorio &lt;em&gt;src&lt;/em&gt; recompila y recarga la página automáticamente.&lt;/p&gt;
&lt;p&gt;Además nos permite acceder a una página desde donde explorar los componentes de nuestra aplicación y ver su código, propiedades, etc. igual que podemos hacer desde la consola si hemos instalado las &lt;strong&gt;Vue DevTools&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La página generada es por el proyecto es:&lt;/p&gt;
&lt;p&gt;![Proyecto de plantilla simple](/img/user/01 Apuntes/Vue Teoria Batoi/img/vue-vite-sample-app.png)&lt;/p&gt;
&lt;h3 id=&quot;em-scaffolding-em-creado&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Scaffolding&lt;/em&gt; creado&lt;/h3&gt;
&lt;p&gt;Se ha creado la carpeta con el nombre del proyecto y dentro el scaffolding para nuestro proyecto:&lt;/p&gt;
&lt;p&gt;![Directorios del proyecto de plantilla simple](/img/user/01 Apuntes/Vue Teoria Batoi/img/vue-vite-sample-folders.png)&lt;/p&gt;
&lt;p&gt;Los principales ficheros y directorios creados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: configuración del proyecto (nombre, autor, ...) y dependencias&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vite.config.js&lt;/code&gt;: configuración de Vite&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;: html con un div donde se cargará la app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;: librerías de las dependencias&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;: lugar donde dejar elementos estáticos que no pasarán por &lt;em&gt;vite&lt;/em&gt;. Podemos poner imágenes, CSS, etc y lo referenciaremos de forma ABSOLUTA como si estuviera en &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: todo nuestro código
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assets/&lt;/code&gt;: nuestros CSS, imágenes, etc. Elementos que &lt;em&gt;vite&lt;/em&gt; procesará y optimizará&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components/&lt;/code&gt;: carpeta que contendrá los ficheros .vue de los diferentes componentes
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HelloWorld.vue&lt;/code&gt;: componente de ejemplo llamado por App.vue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;router/&lt;/code&gt;: carpeta con los ficheros del router si usamos _vue-&lt;em&gt;router&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store/&lt;/code&gt;: carpeta con los ficheros del store si usamos &lt;em&gt;pinia&lt;/em&gt; o &lt;em&gt;vuex&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;: si usamos &lt;em&gt;vue-router&lt;/em&gt; aquí pondremos los componentes que constituyen una vista de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;App.vue&lt;/code&gt;: es el componente principal y constituye nuestra página de inicio del proyecto. Aquí cargaremos la cabecera, el menú,... y los diferentes componentes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.js&lt;/code&gt;: JS principal que crea la instancia de Vue que carga el componente principal llamado &lt;em&gt;App.vue&lt;/em&gt; y lo renderiza en &lt;code&gt;_#app_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;package-json&quot; tabindex=&quot;-1&quot;&gt;package.json&lt;/h4&gt;
&lt;p&gt;Aquí se configura nuestra aplicación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name, version, author, license&lt;/strong&gt;, ...: configuración general de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scripts&lt;/strong&gt;: ejecutan entornos de configuración para webpack:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dev&lt;/strong&gt;: lanza el servidor web de vite y configura vue para el entorno de desarrollo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build&lt;/strong&gt;: crea los ficheros JS y CSS dentro de &lt;strong&gt;/dist&lt;/strong&gt; con todo el código de la aplicación&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependences&lt;/strong&gt;: se incluyen las librerías y plugins que utiliza nuestra aplicación en producción. Todas las dependencias se instalan dentro de &lt;strong&gt;/node-modules&lt;/strong&gt;.  Para instalar una nueva dependencia de desarrollo ejecutaremos &lt;code&gt;npm install nombre-del-paquete -S&lt;/code&gt; (la opción -S la añade a package.json como dependencia de producción).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;devDependencies&lt;/strong&gt;: igual pero son paquetes que sólo se usan en desarrollo (vite, etc). También se instalan dentro de node-modules pero no estarán cuando se genere el código para producción. Para instalar una nueva dependencia de desarrollo ejecutaremos &lt;code&gt;npm install nombre-del-paquete -D&lt;/code&gt; (la opción -D la añade a package.json pero como dependencia de desarrollo).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;index-html&quot; tabindex=&quot;-1&quot;&gt;index.html&lt;/h4&gt;
&lt;p&gt;Simplemente tiene el &amp;lt;div&amp;gt; &lt;em&gt;app&lt;/em&gt; que es el que contendrá la aplicación.&lt;/p&gt;
&lt;h4 id=&quot;main-js&quot; tabindex=&quot;-1&quot;&gt;main.js&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createApp } from &#39;vue&#39;
import App from &#39;./App.vue&#39;
import &#39;./assets/main.css&#39;

createApp(App).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es el fichero JS principal. Importa la utilidad &lt;em&gt;createApp&lt;/em&gt; de la librería &lt;em&gt;Vue&lt;/em&gt; y el componente &lt;em&gt;App.vue&lt;/em&gt;. Crea la instancia de Vue con el componente definido en &lt;em&gt;App.vue&lt;/em&gt; y lo renderiza en el elemento &lt;code&gt;_#app_.&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;app-vue&quot; tabindex=&quot;-1&quot;&gt;App.vue&lt;/h4&gt;
&lt;p&gt;Es el componente raíz de la aplicación, el que contiene el &lt;em&gt;layout&lt;/em&gt; de la página. Se trata de un &lt;em&gt;SFC (Single File Component)&lt;/em&gt; y lo que contiene dentro de la etiqueta &lt;em&gt;&amp;lt;template&amp;gt;&lt;/em&gt; es lo que se renderizará en el div &lt;em&gt;app&lt;/em&gt; que hay en &lt;em&gt;index.html&lt;/em&gt;. Si contiene algún otro componente se indica aquí dónde renderizarlo (en este caso &amp;lt;HelloWorld&amp;gt; y &amp;lt;TheWelcome&amp;gt;).&lt;/p&gt;
&lt;p&gt;En el siguiente apartado explicaremos qué es un &lt;em&gt;SFC&lt;/em&gt; y qué partes lo forman. De momento veamos qué contiene cada sección:&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;template&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;img alt=&amp;quot;Vue logo&amp;quot; class=&amp;quot;logo&amp;quot; src=&amp;quot;./assets/logo.svg&amp;quot; width=&amp;quot;125&amp;quot; height=&amp;quot;125&amp;quot; /&amp;gt;

    &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
      &amp;lt;HelloWorld msg=&amp;quot;You did it!&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/header&amp;gt;

  &amp;lt;main&amp;gt;
    &amp;lt;TheWelcome /&amp;gt;
  &amp;lt;/main&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muestra la imagen del logo (las imágenes y otros ficheros como ficheros .css se guardan dentro de &lt;strong&gt;/src/assets/&lt;/strong&gt;) y los subcomponentes &lt;em&gt;HelloWorld&lt;/em&gt; y &lt;em&gt;TheWelcome&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script setup&amp;gt;
import HelloWorld from &#39;./components/HelloWorld.vue&#39;
import TheWelcome from &#39;./components/TheWelcome.vue&#39;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que hace es importar los componentes que se utilizan en el template. Su sintaxis es de &lt;em&gt;Composition API&lt;/em&gt;. En sintaxis de &lt;em&gt;Options API&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
import HelloWorld from &#39;./components/HelloWorld.vue&#39;
import TheWelcome from &#39;./components/TheWelcome.vue&#39;

export default {
  components: {
    HelloWorld,
    TheWelcome
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En esta sintaxis siempre se exporta un objeto con las opciones del componente. En este caso la opción &lt;em&gt;components&lt;/em&gt; donde se registran los componentes que hemos importado.&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;style&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Aquí se definen los estilos de este componente. Como la etiqueta SÍ tiene el atributo &lt;em&gt;scoped&lt;/em&gt; (&lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt;) significa que los estilos aquí definidos se aplicarán SÓLO a este componente, y a sus subcomponentes.&lt;/p&gt;
&lt;h4 id=&quot;components-hello-world-vue&quot; tabindex=&quot;-1&quot;&gt;components/HelloWorld.vue&lt;/h4&gt;
&lt;p&gt;Es el componente que muestra el texto que aparece bajo la imagen. Recibe como parámetro el título a mostrar. Veamos qué contiene cada sección:&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;template&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;greetings&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;green&amp;quot;&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
    &amp;lt;h3&amp;gt;
      You’ve successfully created a project with
      &amp;lt;a href=&amp;quot;https://vitejs.dev/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot;&amp;gt;Vite&amp;lt;/a&amp;gt; +
      &amp;lt;a href=&amp;quot;https://vuejs.org/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot;&amp;gt;Vue 3&amp;lt;/a&amp;gt;.
    &amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muestra el &lt;em&gt;msg&lt;/em&gt; recibido como parámetro y varios apartados con listas.&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script setup&amp;gt;
defineProps({
  msg: {
    type: String,
    required: true
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recibe el parámetro &lt;em&gt;msg&lt;/em&gt; que es de tipo String. En sintaxis &lt;strong&gt;&lt;em&gt;Options API&lt;/em&gt;&lt;/strong&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
export default {
  name: &#39;HelloWorld&#39;,
  props: {
    msg: {
      type: String,
      required: true
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;style&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;También tiene el atributo &lt;em&gt;scoped&lt;/em&gt; (&lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt;) por lo que los estilos aquí definidos se aplicarán sólo a este componente.&lt;/p&gt;
&lt;h3 id=&quot;em-build-and-deploy-em-de-nuestra-aplicacion&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Build and Deploy&lt;/em&gt; de nuestra aplicación&lt;/h3&gt;
&lt;p&gt;Normalmente trabajaremos con algún gestor de versiones como &lt;em&gt;git&lt;/em&gt;. Para subir nuestro proyecto al repositorio lo creamos (en &lt;em&gt;GitHub&lt;/em&gt;, &lt;em&gt;GitLab&lt;/em&gt; o donde queramos) y ejecutamos desde la carpeta del proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git init
git add .
git remote add origin https://github.com/mi-usuario/mi-proyecto
git commit -m &amp;quot;Primer commit&amp;quot;
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando nuestra aplicación esté lista para subir a producción ejecutaremos el script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando genera los JS y CSS para subir a producción dentro de la carpeta &lt;em&gt;dist&lt;/em&gt;. El contenido de esta carpeta es lo único que debemos subir a nuestro servidor de producción.&lt;/p&gt;
&lt;h2 id=&quot;los-ficheros-sfc-em-single-file-component-em&quot; tabindex=&quot;-1&quot;&gt;Los ficheros SFC (&lt;em&gt;Single File Component&lt;/em&gt;)&lt;/h2&gt;
&lt;p&gt;Guardar los componentes en ficheros &lt;code&gt;.js&lt;/code&gt; como hicimos en el tema anterior genera varios problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El HTML del template está en ese fichero en medio del JS lo que lo hace menos legible y el editor no lo resalta adecuadamente (ya que espera encontrar código JS no HTML)&lt;/li&gt;
&lt;li&gt;El HTML y el JS del componente están juntos pero no su CSS&lt;/li&gt;
&lt;li&gt;No podemos usar fácilmente herramientas para convertir SCSS a CSS, ES2015 a ES5, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto eso puede ser adecuado para proyectos muy pequeños pero no lo es cuando estos empiezan a crecer.&lt;/p&gt;
&lt;p&gt;La solución es guardar cada componente en un único fichero (SFC), que tendrá extensión &lt;strong&gt;.vue&lt;/strong&gt;. Estos ficheros contienen 3 secciones diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;template&amp;gt;: contiene todo el HTML del componente&lt;/li&gt;
&lt;li&gt;&amp;lt;script&amp;gt;: con el JS del mismo&lt;/li&gt;
&lt;li&gt;&amp;lt;style&amp;gt;: donde pondremos el CSS del componente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque esto va contra la norma de tener el HTML, JS y CSS en ficheros separados en realidad sí están separados en diferentes secciones y tenemos la ventaja de tener en un único fichero todo lo que necesita el componente.&lt;/p&gt;
&lt;p&gt;La mayoría de editores soportan estos ficheros instalándoles algún plugin, (como &lt;em&gt;Vue-Oficial&lt;/em&gt; para Visual Studio Code) por lo que el resaltado de las diferentes partes es correcto. Además &lt;strong&gt;Vite&lt;/strong&gt; nos permite usar ES2015 o posterior y los preprocesadores más comunes (SASS, Pug/Jade, Stylus, ...) y ya se se traducirá automáticamente el código a ES5, HTML5 y CSS3.&lt;/p&gt;
&lt;h3 id=&quot;secciones-de-un-single-file-component&quot; tabindex=&quot;-1&quot;&gt;Secciones de un Single File Component&lt;/h3&gt;
&lt;p&gt;Veamos en detalle cada una de las secciones del SFC.&lt;/p&gt;
&lt;h4 id=&quot;and-lt-template-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;template&amp;gt;&lt;/h4&gt;
&lt;p&gt;Aquí incluiremos el HTML que sustituirá a la etiqueta del componente. Recuerda que en las versiones anteriores a Vue3 dentro sólo puede haber un único elemento HTML (si queremos poner más de uno los incluiremos en otro que los englobe).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;greetings&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;green&amp;quot;&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
    &amp;lt;h3&amp;gt;
      You’ve successfully created a project with
      &amp;lt;a href=&amp;quot;https://vitejs.dev/&amp;quot;&amp;gt;Vite&amp;lt;/a&amp;gt; +
      &amp;lt;a href=&amp;quot;https://vuejs.org/&amp;quot;&amp;gt;Vue 3&amp;lt;/a&amp;gt;.
    &amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el código HTML a incluir en el template es muy largo podemos ponerlo en un fichero externo y vincularlo en el template, así nuestro SFC queda más pequeño y legible:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template src=&amp;quot;./myComp.html&amp;quot;&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Respecto al lenguaje, podemos usar HTML (la opción por defecto) o &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PUG&lt;/a&gt; que es una forma sencilla de escribir HTML. Lo indicamos como atributo de &amp;lt;template&amp;gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template lang=&amp;quot;pug&amp;quot;&amp;gt;
div.greetings
  h1.green {{ msg }}
  h3
    | You’ve successfully created a project with 
    a(href=&amp;quot;https://vitejs.dev/&amp;quot;) Vite
    |  +
    a(href=&amp;quot;https://vuejs.org/&amp;quot;) Vue 3

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;and-lt-script-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;script&amp;gt;&lt;/h4&gt;
&lt;p&gt;Aquí definimos y exportamos el componente, que será un objeto con diferentes propiedades. Si utiliza subcomponentes hay que importarlos antes de definir el objeto y registrarlos dentro de este.&lt;/p&gt;
&lt;p&gt;Entre las propiedades que puede tener el objeto están:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: el nombre del componente. Es recomendable ponerlo, aunque sólo es obligatorio en caso de componentes recursivos. Es el nombre con el que se referenciará al componente en la consola del navegador usando las &lt;em&gt;Dev tools&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;components&lt;/strong&gt;: aquí registramos componentes hijos que queramos usar en el &lt;em&gt;template&lt;/em&gt; de este componente (debemos haber importado previamente los ficheros &lt;em&gt;.vue&lt;/em&gt; que los contienen). En el &lt;em&gt;template&lt;/em&gt; usaremos como etiqueta el nombre con que lo registramos aquí&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt;: donde registramos los parámetros que nos pasa el componente padre como atributos de la etiqueta que renderiza este componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data()&lt;/strong&gt;: función que devuelve un objeto con todas las variables locales del componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methods&lt;/strong&gt;: objeto con los métodos del componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;computed&lt;/strong&gt;: aquí pondremos las variables calculadas del componente. Lo veremos en detalle en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/06-profundizando.html#computed&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;created()&lt;/strong&gt;, &lt;strong&gt;mounted()&lt;/strong&gt;, ...: funciones &lt;em&gt;hook&lt;/em&gt; que se ejecutan al crearse el componente, al montarse, ... Aquí pondremos el código que queremos que se ejecute al cargar un componente, como pedir a la BBDD los datos que necesita. Veremos los diferentes &lt;em&gt;hooks&lt;/em&gt; en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/06-profundizando.html#ciclo-de-vida-del-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watch&lt;/strong&gt;: si queremos observar manualmente cambios en alguna variable y ejecutar código como respuesta a ellos (recuerda que Vue ya se encarga de actualizar la vista al cambiar las variables y viceversa). Lo veremos en detalle en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/06-profundizando.html#watchers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;and-lt-style-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;style&amp;gt;&lt;/h4&gt;
&lt;p&gt;Aquí pondremos estilos CSS que se aplicarán al componente. Podemos usar CSS, SASS o &lt;a href=&quot;https://postcss.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PostCSS&lt;/a&gt;. Si queremos importar ficheros de estilo con &lt;code&gt;@import&lt;/code&gt; deberíamos guardarlos dentro de la carpeta &lt;em&gt;assets&lt;/em&gt; de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Si la etiqueta incluye el atributo &lt;em&gt;&lt;strong&gt;scoped&lt;/strong&gt;&lt;/em&gt; estos estilos se aplicarán únicamente a este componente (y sus descendientes) y no a todos los componentes de nuestra aplicación. Si tenemos estilos que queremos que se apliquen a toda la aplicación y otros que son sólo para el componente y sus descendientes pondremos 2 etiquetas &amp;lt;style&amp;gt;, una sin el atributo &lt;em&gt;scoped&lt;/em&gt; y otra con él.&lt;/p&gt;
&lt;p&gt;La forma más común de asignar estilos a elementos es usando clases. Para conseguir que su estilo cambie fácilmente podemos asignar al elemento clases dinámicas que hagan referencia a variables del componente. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p :class=&amp;quot;[decoration, {weight: isBold}]&amp;quot;&amp;gt;Hi!&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      decoration: &#39;underline&#39;,
      isBold: true
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style lang=&amp;quot;css&amp;quot;&amp;gt;
  .underline { text-decoration: underline; }
  .weight { font-weight: bold; }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El párrafo tendrá la clase indicada en la variable &lt;code&gt;decoration&lt;/code&gt; (en este caso &lt;em&gt;underline&lt;/em&gt;) y además como el valor de &lt;code&gt;isBold&lt;/code&gt; es verdadero tendrá la clase &lt;em&gt;weight&lt;/em&gt;. Hacer que cambien las clases del elemento es tan sencillo como cambiar el valor de las variables.&lt;/p&gt;
&lt;p&gt;Podemos ver las diferentes maneras de asignar clases a los elementos HTML en la &lt;a href=&quot;https://vuejs.org/guide/essentials/class-and-style.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Igual que vimos en la etiqueta &amp;lt;template&amp;gt;, si el código de los estilos es demasiado largo podemos ponerlo en un fichero externo que vinculamos a la etiqueta con el atributo &lt;em&gt;src&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;custom-blocks&quot; tabindex=&quot;-1&quot;&gt;Custom blocks&lt;/h4&gt;
&lt;p&gt;Además de estos 3 bloques un SFC puede tener otros bloques definidos por el programador para, por ejemplo, incluir la documentación del componente o sus test unitarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;custom1 src=&amp;quot;./unit-test.js&amp;quot;&amp;gt;
    Aquí podríamos incluir los test unitarios del proyecto
&amp;lt;/custom1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;anadir-nuevos-paquetes-y-plugins&quot; tabindex=&quot;-1&quot;&gt;Añadir nuevos paquetes y plugins&lt;/h2&gt;
&lt;p&gt;Si queremos usar un nuevo paquete en nuestra aplicación lo instalaremos con &lt;em&gt;npm&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install nombre-paquete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando además de instalar el paquete en &lt;em&gt;node-modules&lt;/em&gt; lo añade a las dependencias del &lt;em&gt;package.json&lt;/em&gt;. La opción &lt;strong&gt;&lt;code&gt;--save&lt;/code&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/strong&gt; lo añadirá como dependencia de producción y &lt;strong&gt;&lt;code&gt;--dev&lt;/code&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;code&gt;-D&lt;/code&gt;&lt;/strong&gt; como dependencia de desarrollo. Si no ponemos nada se añade como una dependencia de producción. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -S axios
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para usarlo en nuestros componentes debemos importarlo y registrarlo tal y como se indique en su documentación. Lo normal es hacerlo en el &lt;strong&gt;&lt;em&gt;main.js&lt;/em&gt;&lt;/strong&gt; (o en algún fichero JS que importemos en &lt;em&gt;main.js&lt;/em&gt; como en el caso de los plugins) si queremos poder usarlo en todos los componentes.&lt;/p&gt;
&lt;p&gt;Si el paquete que queremos instalar se encuentra como plugin el proceso es más sencillo ya que sólo es necesario usar &lt;code&gt;app.use(myPlugin, { /* opciones opcionales */})&lt;/code&gt; en el fichero &lt;code&gt;main.js&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;bootstrap&quot; tabindex=&quot;-1&quot;&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;Simplemente lo instalaremos como una dependencia de producción y después lo añadimos al fichero &lt;code&gt;src/main.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &amp;quot;bootstrap/dist/css/bootstrap.css&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuerda que siempre es conveniente importar &lt;em&gt;Bootstrap&lt;/em&gt; antes de importar nuestro propio CSS (antes de la línea &lt;code&gt;import &#39;./assets/main.css&#39;&lt;/code&gt;). Si necesitamos algún componente de &lt;em&gt;Bootstrap&lt;/em&gt; que utilice Javascript importaríamos también su javascript en el fichero &lt;em&gt;main.js&lt;/em&gt; pero en este caso después de montar la aplicación vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// src/main.js
import { createApp } from &#39;vue&#39;
import App from &#39;./App.vue&#39;

import &amp;quot;bootstrap/dist/css/bootstrap.css&amp;quot;
import &#39;./assets/main.css&#39;

createApp(App).mount(&#39;#app&#39;)

import &amp;quot;bootstrap/dist/js/bootstrap.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;iconos&quot; tabindex=&quot;-1&quot;&gt;Iconos&lt;/h4&gt;
&lt;p&gt;Para usar los iconos de &lt;em&gt;Bootstrap 5&lt;/em&gt; podemos instalar el paquete &lt;em&gt;bootstrap-icons&lt;/em&gt; o bien importarlos en el CSS desde su CDN, tal y como se explica en la &lt;a href=&quot;https://icons.getbootstrap.com/#install&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Bootstrap&lt;/a&gt;. Una vez hecho ya podemos incluir los iconos en etiquetas &lt;em&gt;&amp;lt;i&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si importamos el CSS incluiremos en el &lt;em&gt;&amp;lt;style&amp;gt;&lt;/em&gt; del componente &lt;strong&gt;App.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;@import url(&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y donde queramos incluir el icono de la papelera, por ejemplo, incluimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;i class=&amp;quot;bi bi-trash&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos usar otras librerías de iconos como &lt;em&gt;Font Awesome&lt;/em&gt; o &lt;em&gt;Material Icons&lt;/em&gt; simplemente importaremos su CSS en el fichero &lt;em&gt;App.vue&lt;/em&gt; y usaremos las clases que nos proporcionen. Para &lt;em&gt;Material Icons&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;@import url(&#39;https://fonts.googleapis.com/icon?family=Material+Icons&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y su uso sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span class=&amp;quot;material-icons&amp;quot;&amp;gt;delete&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Respecto a los componentes de &lt;em&gt;Bootstrap&lt;/em&gt;, para que funcionen sólo tenemos que usar los atributos &lt;code&gt;data-bs-&lt;/code&gt; (recuerda que muchos de estos componenetes necesitan su Javascript por lo que deberemos importarlo como se ha explicado antes). Por ejemplo para hacer un botón colapsable haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button 
  class=&amp;quot;btn btn-primary&amp;quot; 
  data-bs-target=&amp;quot;#collapseTarget&amp;quot; 
  data-bs-toggle=&amp;quot;collapse&amp;quot;&amp;gt;
  Bootstrap collapse
&amp;lt;/button&amp;gt;
&amp;lt;div class=&amp;quot;collapse py-2&amp;quot; id=&amp;quot;collapseTarget&amp;quot;&amp;gt;
  This is the toggle-able content!
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En lugar de usar atributos &lt;em&gt;data-bs-&lt;/em&gt; podemos &lt;em&gt;envolver&lt;/em&gt; los componentes bootstrap en componentes Vue como se explica en muchas páginas, como &lt;a href=&quot;https://stackoverflow.com/questions/65547199/using-bootstrap-5-with-vue-3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Using Bootstrap 5 with Vue 3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;crear-un-nuevo-componente&quot; tabindex=&quot;-1&quot;&gt;Crear un nuevo componente&lt;/h2&gt;
&lt;p&gt;Creamos un nuevo fichero en &lt;strong&gt;/src/components&lt;/strong&gt; (o en alguna subcarpeta dentro) con extensión &lt;em&gt;.vue&lt;/em&gt;. Donde queramos usar ese componente debemos importarlo y registrarlo como ya hemos visto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import CompName from &#39;./CompName.vue&#39;

export default {
  ...
  components: {
    &#39;comp-name&#39;: CompName
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ya podemos incluir el componente en el HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;comp-name ...&amp;gt; ... &amp;lt;/comp-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;depurar-el-codigo-en-la-consola&quot; tabindex=&quot;-1&quot;&gt;Depurar el código en la consola&lt;/h2&gt;
&lt;p&gt;Podemos seguir depurando nuestro código, poniendo puntos de interrupción y usando todas las herramientas que nos proporciona la consola mientras estamos en modo de depuración (si hemos abierto la aplicación con &lt;code&gt;npm run dev&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Como estamos usando &lt;em&gt;Vite&lt;/em&gt; no se está ejecutando nuestro código directamente sino que se ha convertido al código que ejecuta el navegador, por eso en el depurador aparecen varios ficheros y el que usaremos para depurar es el que pone &lt;em&gt;(mapeado)&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;![Depurar en la consola](/img/user/01 Apuntes/Vue Teoria Batoi/img/console-vite.png)&lt;/p&gt;
&lt;p&gt;Recordad que si hemos instalado las &lt;strong&gt;Vue DevTools&lt;/strong&gt; tenemos una nueva pestaña en la consola desde la que podemos ver todos nuestros componentes con sus propiedades y datos:&lt;/p&gt;
&lt;p&gt;![Vue DevTools](/img/user/01 Apuntes/Vue Teoria Batoi/img/console-vue_devtools.png)&lt;/p&gt;
&lt;h1 id=&quot;aplicacion-de-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Aplicación de ejemplo&lt;/h1&gt;
&lt;p&gt;Recordemos que la aplicación que estamos desarrollando tiene los componentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;todo-list: lista de tareas a hacer. Cada item de la lista es un componente &lt;em&gt;todo-item&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;todo-item: cada elemento de la lista de tareas a hacer&lt;/li&gt;
&lt;li&gt;todo-add: formulario para añadir una nueva tarea&lt;/li&gt;
&lt;li&gt;todo-del-all: botón para eliminar todas las tareas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para transformar esto en SFC simplemente crearemos un fichero para cada uno de estos componentes. Nuestro anterior &lt;em&gt;index.html&lt;/em&gt; será el &amp;lt;template&amp;gt; del componente principal &lt;strong&gt;App.vue&lt;/strong&gt;, que en un sección &amp;lt;script&amp;gt; deberá importar y registrar cada uno de los componentes usados en el &lt;em&gt;template&lt;/em&gt; (&lt;em&gt;todo-list&lt;/em&gt;, &lt;em&gt;todo-add&lt;/em&gt; y &lt;em&gt;todo-del-all&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Solución:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/cranky-mclean-f6xwo3?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;cranky-mclean-f6xwo3&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/03-1-sfc/" >
        </entry>
        <entry>
            <title>
                03-componentes
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/03-componentes/</id>
            <content type="html">
                &lt;h1 id=&quot;componentes-en-vue&quot; tabindex=&quot;-1&quot;&gt;Componentes en Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#componentes-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Componentes en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#dividir-la-aplicaci%C3%B3n-en-componentes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Dividir la aplicación en componentes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#separar-los-componentes-en-ficheros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Separar los componentes en ficheros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#par%C3%A1metros-props&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Parámetros: &lt;em&gt;props&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-de-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo de aplicación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;El sistema de componentes es un concepto importante en Vue y en cualquier framework moderno. En lugar de separar nuestra aplicación en ficheros según el tipo de información que contienen (ficheros html, css o js) es más lógico separarla según su funcionalidad. Una página web muestra una UI donde se pueden distinguir diferentes partes. En el siguiente ejemplo tenemos:&lt;/p&gt;
&lt;p&gt;![Ejemplo de página web](/img/user/01 Apuntes/Vue Teoria Batoi/img/borsaTreball.png)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un menú que es una lista que contiene
&lt;ul&gt;
&lt;li&gt;(repetido) un elemento de menú, cada uno formado por un logo y un texto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;una barra de título, con un icono y 2 textos&lt;/li&gt;
&lt;li&gt;una tabla con la información a mostrar, formada por
&lt;ul&gt;
&lt;li&gt;un elemento para filtrar la información formado por un input y un botón de buscar&lt;/li&gt;
&lt;li&gt;un botón para añadir nuevos elementos a la tabla&lt;/li&gt;
&lt;li&gt;una cabecera con los nombres de cada campo&lt;/li&gt;
&lt;li&gt;(repetido) una fila para mostrar cada elemento de información, con botones para realizar diferentes acciones&lt;/li&gt;
&lt;li&gt;un pie de tabla con información sobre los datos mostrados&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;un pie de página&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pues estos elementos podrían constituir diferentes componentes: nuestras aplicaciones estarán compuestas de pequeños componentes independientes y reusables en diferentes partes de nuestra aplicación o en otras aplicaciones (podemos usar el elemento de buscar en otras páginas de nuestra aplicación o incluso en otras aplicaciones). También es habitual que un componente contenga otros subcomponentes, estableciéndose relaciones padre-hijo (por ejemplo el componente tabla tiene como subcomponentes el buscador y cada una de las filas, y el componente fila tendrá un subcomponente por cada botón que queramos poner en ella).&lt;/p&gt;
&lt;p&gt;Para saber qué debe ser un componente y que no, podemos considerar un componente como un elemento que tiene entidad propia, tanto a nivel funcional como visual, es decir, que puede ponerse en el lugar que queramos de la aplicación y se verá y funcionará correctamente. Además es algo que es muy posible que pueda aparecer en más de un lugar de la aplicación. En definitiva un componente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es una parte de la UI&lt;/li&gt;
&lt;li&gt;debe poder reutilizarse y combinarse con otros componentes para formar componentes mayores&lt;/li&gt;
&lt;li&gt;son objetos JS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El componente es un objeto con una parte de &lt;strong&gt;HTML&lt;/strong&gt; donde definimos su estructura y una parte &lt;strong&gt;JS&lt;/strong&gt; que le da su funcionalidad. Cuando trabajemos con &lt;em&gt;Single File Components (SFC)&lt;/em&gt; también se incluirá una parte &lt;strong&gt;CSS&lt;/strong&gt; para establecer su apariencia.&lt;/p&gt;
&lt;p&gt;Separar nuestra aplicación en componentes nos va a ofrecer muchas ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;encapsulamos el código de la aplicación en elementos más sencillos&lt;/li&gt;
&lt;li&gt;facilita la reutilización de código&lt;/li&gt;
&lt;li&gt;evita tener código repetido&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque también tiene sus inconvenientes: habrá que geationar la comunicación entre componentes.&lt;/p&gt;
&lt;p&gt;El primer paso a la hora de hacer una aplicación debe ser analizar qué componentes tendrá. Para ello podemos hacer un &lt;em&gt;mockup&lt;/em&gt; de la aplicación donde se vean los diferentes elementos que la componen y cómo se relacionan entre ellos. A partir de ahí podemos ir creando los componentes necesarios.&lt;/p&gt;
&lt;p&gt;En definitiva nuestra aplicación será como un árbol de componentes con la instancia principal de Vue como raíz.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/components.B1JZbf0_.png&quot; alt=&quot;Árbol de componentes&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;dividir-la-aplicacion-en-componentes&quot; tabindex=&quot;-1&quot;&gt;Dividir la aplicación en componentes&lt;/h2&gt;
&lt;p&gt;Un componente se crea con &lt;code&gt;app.component&lt;/code&gt; al que le pasamos 2 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el nombre del componente&lt;/li&gt;
&lt;li&gt;el objeto con sus opciones (&lt;code&gt;data&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, …). Además tendrá una opción &lt;strong&gt;&lt;code&gt;template&lt;/code&gt;&lt;/strong&gt; con el código HTML que se insertará donde pongamos el componente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo, vamos a crear un componente para mostrar cada elemento de la lista de tareas a hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const app = Vue.createApp({
  ...
})

app.component(&#39;TodoItem&#39;, {
  template: `
    &amp;lt;li&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;elem.done&amp;quot;&amp;gt;
      &amp;lt;del v-if=&amp;quot;elem.done&amp;quot;&amp;gt;
        { { elem.title }}
      &amp;lt;/del&amp;gt;
      &amp;lt;span v-else&amp;gt;
        { { elem.title }}
      &amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;`,
  data: ()=&amp;gt;({
    elem: { title: &#39;Cosa a hacer&#39;, done: true }
  })
})
...
app.mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: no se puede montar la aplicación hasta después de haber definido los componentes.&lt;/p&gt;
&lt;p&gt;Ahora ya podemos usar el componente en nuestro HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resultado:&lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;
 &lt;input type=&quot;checkbox&quot; v-model=&quot;elem.done&quot; /&gt;
 &lt;span&gt;Cosa a hacer&lt;/span&gt;
&lt;/li&gt;
&lt;/blockquote&gt;
&lt;p&gt;Podemos utilizar la etiqueta tal (&amp;lt;todo-item&amp;gt;) o usar una etiqueta estándar y poner la nuestra como valor de su atributo &lt;em&gt;is&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li is=&amp;quot;todo-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma evitamos errores de validación de HTML ya que algunos elementos sólo pueden tener determinados elementos hijos (por ejemplo los hijos de un &lt;/p&gt;&lt;ul&gt; deben ser &lt;li&gt; o los de un &lt;tr&gt; deben ser &lt;td&gt;).&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ATENCIÓN&lt;/strong&gt;: El nombre de un componente puede estar en &lt;em&gt;PascalCase&lt;/em&gt; (MyComponentName) o en &lt;em&gt;kebab-case&lt;/em&gt; (my-component-name). Lo recomendado es que en Javascript lo pongamos en &lt;em&gt;PascalCase&lt;/em&gt; y en el HTML en &lt;em&gt;kebab-case&lt;/em&gt; (&lt;em&gt;Vue&lt;/em&gt; hace la traducción automáticamente). Se recomienda que el nombre de un componente tenga al menos 2 palabras para evitar que pueda llamarse como alguna futura etiqueta HTML.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En versiones anteriores de Vue la propiedad &lt;em&gt;template&lt;/em&gt; sólo podía tener un nodo raíz. En Vue3 esta limitación no existe aunque en &lt;em&gt;dev-tools&lt;/em&gt; se depura más fácilmente si solo hay uno. Por ello, si tenemos más de 1 nodo los envolvemos en otra etiqueta (normalmente un &lt;/p&gt;&lt;div&gt;):&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MAL en Vue2
  template: `&amp;lt;input id=&amp;quot;query&amp;quot;&amp;gt;
             &amp;lt;button id=&amp;quot;search&amp;quot;&amp;gt;Buscar&amp;lt;/button&amp;gt;`,

// BIEN en Vue2
  template: `&amp;lt;div&amp;gt;
               &amp;lt;input id=&amp;quot;query&amp;quot;&amp;gt;
               &amp;lt;button id=&amp;quot;search&amp;quot;&amp;gt;Buscar&amp;lt;/button&amp;gt;
             &amp;lt;/div&amp;gt;`,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;separar-los-componentes-en-ficheros&quot; tabindex=&quot;-1&quot;&gt;Separar los componentes en ficheros&lt;/h2&gt;
&lt;p&gt;Declarar los componentes con &lt;code&gt;app.component()&lt;/code&gt; en el mismo fichero JS de la instancia genera varios problemas, especialmente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los componentes así declarados son globales a la aplicación por lo que sus nombres deben ser únicos&lt;/li&gt;
&lt;li&gt;Nuestro fichero crece rápidamente y nos encontramos con código &lt;em&gt;spaguetti&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto eso puede ser adecuado para proyectos muy pequeños pero no lo es cuando estos empiezan a crecer.&lt;/p&gt;
&lt;p&gt;La solución es guardar cada componente en un único fichero javascript (con extensión &lt;code&gt;.js&lt;/code&gt;), aunque cuando usemos &lt;em&gt;SFC&lt;/em&gt; usaremos ficheros &lt;code&gt;.vue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el fichero exportaremos un objeto con las propiedades del componente (&lt;em&gt;data&lt;/em&gt;, &lt;em&gt;methods&lt;/em&gt;, ...), además de la propiedad &lt;em&gt;template&lt;/em&gt;. También podemos añadir una propiedad &lt;em&gt;name&lt;/em&gt; donde indicar el nombre del componente.&lt;/p&gt;
&lt;p&gt;Por ejemplo, vamos a crear un componente para el botón de eliminar todas las tareas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero DelAllItems.js
export default {
  template: `
    &amp;lt;button @click=&amp;quot;delAll&amp;quot;&amp;gt;Vacía lista&amp;lt;/button&amp;gt;
  `,
  methods: {
    delAll() {
      if (confirm(&#39;Vas a borrar la lista de tareas&#39;)) {
        this.todos.splice(0)
      }
    }
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder usar un componente, en donde queramos usarlo (otro componente o la instancia raíz) debemos hacer 2 cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar el fichero&lt;/li&gt;
&lt;li&gt;registrar el componente, lo que se hace en una opción llamada &lt;code&gt;components&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero main.js
import DelAllItems from &#39;./DellAllItems.js&#39;

Vue.createApp({
  components: {
    DelAllItems,
  },
  data() {
    ...
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora ya podemos usar el componente en nuestro HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;...
    &amp;lt;/form&amp;gt;
    &amp;lt;del-all-items&amp;gt;&amp;lt;/del-all-items&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fíjate que hay que declarar el fichero &lt;em&gt;main.js&lt;/em&gt; como &lt;code&gt;module&lt;/code&gt; para que nos permita importar ficheros en él.&lt;/p&gt;
&lt;p&gt;El navegador sustituirá la etiqueta del componente (&amp;lt;del-all-items&amp;gt;) por su &lt;em&gt;template&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-11&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;parametros-em-props-em&quot; tabindex=&quot;-1&quot;&gt;Parámetros: &lt;em&gt;props&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Podemos pasar parámetros a un componente añadiendo atributos a su etiqueta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item :todo=&amp;quot;{ title: &#39;Nueva cosa&#39;, done: false }&amp;quot;&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: recuerda que si no ponemos el &lt;em&gt;v-bind&lt;/em&gt; estaríamos pasando texto y no el valor de una variable (en este caso un objeto).&lt;/p&gt;
&lt;p&gt;El parámetro lo recibimos en el componente en una opción llamada &lt;code&gt;props&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.component(&#39;todo-item&#39;, {
  props: {
    todo: Object
  },
  template: `
    &amp;lt;li&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;todo.done&amp;quot;&amp;gt;
      ...`
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las &lt;em&gt;props&lt;/em&gt; son el equivalente a los parámetros que recibe una función.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-12&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Se pueden declarar las &lt;em&gt;props&lt;/em&gt; recibidas como un array de string (&lt;code&gt;props: [&#39;todo&#39;]&lt;/code&gt;), aunque es mejor declararlas como un objeto porque nos permitirá hacer ciertas comprobaciones (en el ejemplo anterior que se recibe un &lt;em&gt;Object&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: si un parámetro tiene más de 1 palabra en el HTML lo pondremos en forma kebab-case (ej.: &lt;code&gt;&amp;lt;todo-item :todo-elem=...&amp;gt;&lt;/code&gt;) pero en el Javascript irá en camelCase (&lt;code&gt;app.component(&#39;todo-item&#39;,{ props: [&#39;todoElem&#39;],...})&lt;/code&gt;). Vue hace la traducción automáticamente.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resultado:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
   &lt;input type=&quot;checkbox&quot; /&gt;
   &lt;span&gt;
     Nueva cosa a hacer
   &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;En nuestro caso queremos un componente &lt;em&gt;todo-item&lt;/em&gt; para cada elemento del array &lt;em&gt;todos&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item v-for=&amp;quot;item in todos&amp;quot; :key=&amp;quot;item.id&amp;quot; :todo=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resultado:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
   &lt;input type=&quot;checkbox&quot; checked=&quot;&quot; /&gt;
   &lt;del&gt;
     Learn JavaScript
   &lt;/del&gt;
 &lt;/li&gt;
 &lt;li&gt;
   &lt;input type=&quot;checkbox&quot; /&gt;
   &lt;span&gt;
     Learn Vue
   &lt;/span&gt;
 &lt;/li&gt;
 ...
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: al usar &lt;code&gt;v-for&lt;/code&gt; en un componente debemos indicarle obligatoriamente en la propiedad &lt;code&gt;key&lt;/code&gt; la clave de cada elemento. Si no tuviera ninguna podemos usar como clave su índice en el array como vimos al hablar de &lt;em&gt;v-for&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item v-for=&amp;quot;(item, index) in todos&amp;quot; :key=&amp;quot;index&amp;quot; :todo=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ejemplo-de-aplicacion&quot; tabindex=&quot;-1&quot;&gt;Ejemplo de aplicación&lt;/h2&gt;
&lt;p&gt;Para empezar a ver el uso de componentes vamos a seguir con la aplicación de la lista de cosas que hacer pero dividiéndola en componentes.&lt;/p&gt;
&lt;p&gt;La decisión de qué componentes crear es subjetiva pero en principio cuanto más descompongamos más posibilidades tendremos de reutilizar componentes. Nosotros haremos los siguientes componentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;todo-list: muestra la lista de tareas a realizar. Dentro tendrá:
&lt;ul&gt;
&lt;li&gt;todo-item: cada una de las tareas a hacer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add-item: incluye el formulario para añadir una nueva tarea (el input y el botón)&lt;/li&gt;
&lt;li&gt;del-all: el botón para borrar toda la lista&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A continuación tienes la solución de cómo dividirla en componentes en un único fichero pero en su lugar lo que haremos es separar cada componente en su propio fichero.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: separar los componentes en ficheros que se importan donde vayan a usarse sólo funciona si abrimos la aplicación desde un servidor web, no desde local (sí &lt;em&gt;http://...&lt;/em&gt;, no &lt;em&gt;file://...&lt;/em&gt;). Si no tenéis ninguno podéis usar la extensión &lt;strong&gt;Live Server&lt;/strong&gt; de Visual Studio Code para ejecutar la aplicación.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: ahora nuestra aplicación ya no funciona porque los datos que se declaran en un componenete son locales al mismo y no son accesibles desde otros componentes. Para solucionar esto necesitamos un sistema de comunicación entre componentes que veremos en el siguiente apartado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solución&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;wvqjJjY&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/wvqjJjY&quot;&gt;
  to-do app components&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;Pasos que he hecho&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creamos la instancia principal de Vue. No tiene &lt;em&gt;data&lt;/em&gt; ni &lt;em&gt;methods&lt;/em&gt; ni ningún otro elemento porque está todo en los componentes&lt;/li&gt;
&lt;li&gt;Creo el componente encargado de renderizar un elemento de la lista de tares, &lt;em&gt;todo-item&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;recibirá un objeto con la tarea a mostrar&lt;/li&gt;
&lt;li&gt;su template será el &lt;/li&gt;&lt;li&gt; que tenía en el HTML pero quitando el &lt;em&gt;v-for&lt;/em&gt; porque él sólo se encarga de mostrar 1 item&lt;/li&gt;
&lt;li&gt;el método para borrarlo al hacer doble click ya no puede funcionar porque el componente no tiene acceso al array de tareas. De momento sólo ponemos un &lt;em&gt;alert&lt;/em&gt; que nos diga que lo queremos borrar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creo el componente &lt;em&gt;add-item&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;su &lt;em&gt;template&lt;/em&gt; será el &amp;lt;input&amp;gt; y el &amp;lt;button&amp;gt; que teníamos en el HTML, pero como sólo puede haber un elemento en el template los incluimos dentro de un &lt;div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;no recibe ningún parámetro pero sí tiene una variable propia, &lt;em&gt;newTodo&lt;/em&gt;, que quitamos del componente principal para añadirla a este componente&lt;/li&gt;
&lt;li&gt;el método addTodo ya no funciona porque no tengo acceso al array de tareas así que de momento muestro un &lt;em&gt;alert&lt;/em&gt; con lo que querría añadir&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creo el componente &lt;em&gt;del-all&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;su &lt;em&gt;template&lt;/em&gt; es el botón&lt;/li&gt;
&lt;li&gt;ni recibe parámetros ni tiene variables propias&lt;/li&gt;
&lt;li&gt;con el método pasa lo mismo que en los otros casos así que simplemente muestro un &lt;em&gt;alert&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creo el componente que mostrará la lista: &lt;em&gt;todo-list&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;Su &lt;em&gt;template&lt;/em&gt; es un div que incluye el título (que será una variable para poderlo reutilizar) y la lista con las tareas a mostrar. Cada una de ellas será un subcomponente llamado &lt;em&gt;todo-item&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;como parámetro recibirá el título de la lista como hemos indicado antes&lt;/li&gt;
&lt;li&gt;llama al subcomponente &lt;em&gt;todo-item&lt;/em&gt; para cada tarea (v-for) y le pasa la tarea que debe mostrar&lt;/li&gt;
&lt;li&gt;sus datos será el array de tareas&lt;/li&gt;
&lt;li&gt;Los métodos los dejamos tal cual aunque ahora no funcionan porque nadie los llama. Ya lo arreglaremos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/li&gt;&lt;/ul&gt;
            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/03-componentes/" >
        </entry>
        <entry>
            <title>
                02-directivas
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/02-directivas/</id>
            <content type="html">
                &lt;h1 id=&quot;directivas-en-vue&quot; tabindex=&quot;-1&quot;&gt;Directivas en Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#directivas-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Directivas en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#directivas-b%C3%A1sicas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Directivas básicas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#condicionales-v-if&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Condicionales: v-if&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucles-v-for&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucles: v-for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-v-on&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos: v-on&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#modificadores-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Modificadores de eventos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-de-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo de aplicación&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-de-la-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución de la aplicación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;directivas-basicas&quot; tabindex=&quot;-1&quot;&gt;Directivas básicas&lt;/h2&gt;
&lt;p&gt;Las directivas son atributos especiales que se ponen en las etiquetas HTML y que les dan cierta funcionalidad. Todas comienzan por &lt;strong&gt;v-&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Las más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-text&lt;/code&gt;: es equivalente a hacer una interpolación (&lt;strong&gt;{{ ... }}&lt;/strong&gt;). Muestra el valor en la etiqueta. Los dos ejemplos siguientes son equivalentes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p v-text=&amp;quot;mensaje&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ { mensaje }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-once&lt;/code&gt;: igual pero una vez renderizado no cambia lo mostrado en la vista aunque cambie el valor de la variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-html&lt;/code&gt;: permite que el texto que se muestra contenga caracteres HTML que interpretará el navegador (al usar la interpolación las etiquetas HTML son escapadas). Internamente hace un &lt;code&gt;.innerHTML&lt;/code&gt; del elemento mientras que &lt;code&gt;v-text&lt;/code&gt; (y &lt;code&gt;{ {...}}&lt;/code&gt;) hacen un &lt;code&gt;.textContent&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-bind&lt;/code&gt;: para asignar el valor de una variable a un atributo de una etiqueta HTML (no entre la etiqueta y su cierre como hace la interpolación). Por ejemplo si tenemos la variable &lt;em&gt;estado&lt;/em&gt; cuyo valor es &lt;em&gt;error&lt;/em&gt; y queremos que un &lt;em&gt;span&lt;/em&gt; tenga como clase ese valor haremos:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span v-bind:class=&amp;quot;estado&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado será: &lt;code&gt;&amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&lt;/code&gt;. La directiva &lt;em&gt;v-bind:&lt;/em&gt; se puede abreviar simplemente como &lt;strong&gt;&lt;code&gt;:&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;span :class=&amp;quot;estado&amp;quot;&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-model&lt;/code&gt;: permite enlazar un input a una variable (la hemos visto en el capítulo anterior). Tiene 3 modificadores útiles.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.lazy&lt;/code&gt;: em lugar de actualizar el valor al pulsar cada tecla (&lt;em&gt;onInput&lt;/em&gt;) lo hace al perder el foco (&lt;em&gt;onChange&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.number&lt;/code&gt;: convierte el contenido a Number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.trim&lt;/code&gt;: elimina los espacios al principio y al final del texto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt;: renderiza o no el elemento que la contiene en función de una condición&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-show&lt;/code&gt;: similar al &lt;em&gt;v-if&lt;/em&gt; pero siempre renderiza el elemento (está en el DOM) y lo que hace es mostrarlo u ocultarlo (&lt;code&gt;display: none&lt;/code&gt;) en función de la condición. Es mejor si el elemento va a mostrarse y ocultarse a menudo porque no tiene que volver a renderizarlo cada vez&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-for&lt;/code&gt;: repite el elemento HTML que contiene esta etiqueta para cada elemento de un array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-on&lt;/code&gt;: le pone al elemento HTML un escuchador de eventos (ej &lt;code&gt;&amp;lt;button v-on:click=&amp;quot;pulsado&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;&lt;/code&gt;. La directiva &lt;code&gt;v-on:&lt;/code&gt; se puede abreviar como &lt;code&gt;@&lt;/code&gt;, por ejemplo &lt;code&gt;&amp;lt;button @click=&amp;quot;pulsado&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo que enlazamos en una directiva o una interpolación puede ser una variable o una expresión Javascript. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p&amp;gt;{ { name }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ { &#39;Cómo estás &#39; + name }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ { name==&#39;root&#39;?&#39;Hola Administrador&#39;:&#39;Hola &#39; + name }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;condicionales-v-if&quot; tabindex=&quot;-1&quot;&gt;Condicionales: v-if&lt;/h2&gt;
&lt;p&gt;Esta directiva permite renderizar o no un elemento HTML en función de una variable o expresión.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/84jq5jbg/4/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;El checkbox está enlazado a la variable &lt;em&gt;marcado&lt;/em&gt; (a la que al inicio le hemos dado el valor true, por eso aparece marcado por defecto) y los párrafos se muestran o no en función del valor de dicha variable.&lt;/p&gt;
&lt;p&gt;La directiva &lt;code&gt;v-else&lt;/code&gt; es opcional (puede estar sólo el &lt;code&gt;v-if&lt;/code&gt;) pero si la ponemos el elemento con el &lt;code&gt;v-else&lt;/code&gt; debe ser el inmediatamente siguiente al del &lt;code&gt;v-if&lt;/code&gt; (su &lt;em&gt;nextElementSibling&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;NOTA: Los ejemplos de esta página son todos de Vue2. Recordad que en Vue3 es todo igual excepto la forma de crear la instancia Vue que sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const app = Vue.createApp({
  data() {
    return {
      marcado: true,
    }
  }
}).mount(&#39;#app&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se pueden enlazar varios &lt;em&gt;if&lt;/em&gt; &lt;em&gt;else&lt;/em&gt; con &lt;code&gt;v-else-if&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div v-if=&amp;quot;type === &#39;A&#39;&amp;quot;&amp;gt;
  A
&amp;lt;/div&amp;gt;
&amp;lt;div v-else-if=&amp;quot;type === &#39;B&#39;&amp;quot;&amp;gt;
  B
&amp;lt;/div&amp;gt;
&amp;lt;div v-else-if=&amp;quot;type === &#39;C&#39;&amp;quot;&amp;gt;
  C
&amp;lt;/div&amp;gt;
&amp;lt;div v-else&amp;gt;
  Not A/B/C
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-6&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;bucles-v-for&quot; tabindex=&quot;-1&quot;&gt;Bucles: v-for&lt;/h2&gt;
&lt;p&gt;Esta directiva repite el elemento HTML en que se encuentra una vez por cada elemento del array al que se enlaza.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;ExvLZOz&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/ExvLZOz&quot;&gt;
  v-for&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;La directiva v-for recorre el array &lt;em&gt;todos&lt;/em&gt; y para cada elemento del array crea una etiqueta &amp;lt;li&amp;gt; y carga dicho elemento en la variable &lt;em&gt;elem&lt;/em&gt; a la que podemos acceder dentro del &amp;lt;li&amp;gt;.&lt;/p&gt;
&lt;p&gt;Además del elemento nos puede devolver su índice en el array: &lt;code&gt;v-for=&amp;quot;(elem, index) in todos&amp;quot; ...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vue es más eficiente a la hora de renderizar si cada elemento que crea &lt;em&gt;v-for&lt;/em&gt; tiene su propia clave, lo que se consigue con el atributo &lt;em&gt;key&lt;/em&gt;. Podemos indicar como clave algún campo único del elemento o el índice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;... v-for=&amp;quot;(item) in todos&amp;quot; :key=&amp;quot;item.id&amp;quot; ...&amp;gt;
o
&amp;lt;... v-for=&amp;quot;(item, index) in todos&amp;quot; :key=&amp;quot;index&amp;quot; ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pasar una &lt;em&gt;key&lt;/em&gt; en cada &lt;em&gt;v-for&lt;/em&gt; es recomendable ahora pero será obligatorio al usarlo en componentes así que conviene usarlo siempre.&lt;/p&gt;
&lt;p&gt;También podemos usar &lt;code&gt;v-for&lt;/code&gt; para que se ejecute sobre un rango (como el típico &lt;code&gt;for (i=0; i&amp;lt;10; i++)&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span v-for=&amp;quot;i in 10&amp;quot; :key=&amp;quot;i&amp;quot;&amp;gt;{{ i }}&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: No se recomienda usar &lt;code&gt;v-for&lt;/code&gt; y &lt;code&gt;v-if&lt;/code&gt; sobre el mismo elemento. Si se hace siempre se ejecuta primero el &lt;code&gt;v-if&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-7&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;eventos-v-on&quot; tabindex=&quot;-1&quot;&gt;Eventos: v-on&lt;/h2&gt;
&lt;p&gt;Esta directiva captura un evento y ejecuta un método como respuesta al mismo.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;ExvLZGB&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/ExvLZGB&quot;&gt;
  v-for&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;El evento que queremos capturar se pone tras el carácter &lt;code&gt;:&lt;/code&gt; y se indica el método que se ejecutará.&lt;/p&gt;
&lt;p&gt;Fijaos en el método &lt;em&gt;delTodos()&lt;/em&gt; que para hacer referencia desde el objeto Vue a alguna variable o método se le antepone &lt;strong&gt;&lt;em&gt;this.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se puede pasar un parámetro a la función escuchadora:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;button v-on:click=&amp;quot;pulsado(&#39;prueba&#39;)&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  pulsado(valor) {
    alert(valor);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta directiva se usa mucho así que se puede abreviar con &lt;strong&gt;&lt;code&gt;@&lt;/code&gt;&lt;/strong&gt;. El código equivalente sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button @click=&amp;quot;pulsado(&#39;prueba&#39;)&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;modificadores-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Modificadores de eventos&lt;/h3&gt;
&lt;p&gt;A un evento gestionado por una directiva &lt;em&gt;v-on&lt;/em&gt; podemos añadirle (separado por .) un modificador. Alguno de los más usados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.prevent&lt;/em&gt;&lt;/strong&gt;: equivale a hacer un preventDefault()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.stop&lt;/em&gt;&lt;/strong&gt;: como stopPropagation()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.self&lt;/em&gt;&lt;/strong&gt;: sólo se lanza si el evento se produce en este elemento y no en alguno de sus hijos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.once&lt;/em&gt;&lt;/strong&gt;: sólo se lanza la primera vez que se produce el evento (sería como hacer un &lt;em&gt;addEventListener&lt;/em&gt; y tras ejecutarse la primera vez hacer un &lt;em&gt;removeEventListener&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form @submit.prevent=&amp;quot;enviaForm&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ejemplo-de-aplicacion&quot; tabindex=&quot;-1&quot;&gt;Ejemplo de aplicación&lt;/h2&gt;
&lt;p&gt;Vamos a hacer una aplicación para gestionar una lista de cosas a hacer. Cada cosa a hacer tiene un título y puede estar hecha o no.&lt;/p&gt;
&lt;p&gt;Debe aparecer la lista de cosas a hacer con:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un checkbox para cada cosa que nos indica si está o no hecha (y que podemos marcar/desmarcar para cambiar su estado)&lt;/li&gt;
&lt;li&gt;el título de la cosa a hacer, que aparecerá tachado si su estado es que ya está hecha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además queremos que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;al hacer doble click en una tarea a hacer debe borrarse de la lista&lt;/li&gt;
&lt;li&gt;bajo la lista aparecerá un input con un botón para añadir nuevas cosas a la lista. Sólo se añade si hemos introducido texto y su estado al añadirla será de NO hecha&lt;/li&gt;
&lt;li&gt;debajo tendremos un botón que borrará toda la lista de cosas a hacer tras pedir confirmación al usuario&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;solucion-de-la-aplicacion&quot; tabindex=&quot;-1&quot;&gt;Solución de la aplicación&lt;/h3&gt;
&lt;p&gt;Puedes ver una solución al problema planteado en:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;zYdjNgg&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/zYdjNgg&quot;&gt;
  Untitled&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Cosas a comentar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HTML&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;linea 3: el &amp;lt;ul&amp;gt; sólo se mostrará si hay elementos en la lista (todos.length)&lt;/li&gt;
&lt;li&gt;línea 4: la directiva v-for además de crear una variable con el elemento crea otra con su posición dentro del array que usaremos para borrarla&lt;/li&gt;
&lt;li&gt;línea 4: al método que llamamos al producirse el evento &lt;em&gt;dblclick&lt;/em&gt; le pasamos el índice de dicho elemento en el array de cosas a hacer&lt;/li&gt;
&lt;li&gt;línea 6: enlazamos cada checkbox con la propiedad &lt;em&gt;done&lt;/em&gt; del elemento de forma que al marcar al checkbox la propiedad valdrá &lt;em&gt;true&lt;/em&gt; y al desmarcarlo valdrá &lt;em&gt;false&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;líneas 7 a 12: para mostrar un elemento no hecho usamos un &lt;strong&gt;&lt;em&gt;span&lt;/em&gt;&lt;/strong&gt; y para mostrar uno hecho un &lt;strong&gt;&lt;em&gt;del&lt;/em&gt;&lt;/strong&gt; para que aparezca tachado&lt;/li&gt;
&lt;li&gt;línea 16: si no se muestra el &amp;lt;ul&amp;gt; se mostrará un párrafo diciendo que no hay elementos en la lista&lt;/li&gt;
&lt;li&gt;línea 17: el input lo enlazamos a una nueva variable, &lt;em&gt;newTodo&lt;/em&gt;, donde guardaremos lo que se escriba&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Javascript&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;línea 4: creamos la nueva variable &lt;em&gt;newTodo&lt;/em&gt; para guardar el título de la nueva cosa a añadir. Lo inicializamos a una cadena vacía y así el input estará vacío de entrada&lt;/li&gt;
&lt;li&gt;línea 27: delTodo recibe como parámetro el índice del elemento a borrar así que sólo tiene que hacer un splice al array&lt;/li&gt;
&lt;li&gt;línea 30: addTodo añade al array un nuevo elemento con el texto que hay en el input y después vacía dicho texto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/02-directivas/" >
        </entry>
        <entry>
            <title>
                01-basics
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/01-basics/</id>
            <content type="html">
                &lt;h1 id=&quot;conceptos-basicos&quot; tabindex=&quot;-1&quot;&gt;Conceptos básicos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#conceptos-b%C3%A1sicos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Conceptos básicos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estructura-de-una-aplicaci%C3%B3n-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estructura de una aplicación Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estilos-de-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estilos de &lt;em&gt;API&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#binding-de-variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Binding&lt;/em&gt; de variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlace-unidireccional-interpolaci%C3%B3n-&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlace unidireccional: interpolación {{...}}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlazar-a-un-atributo-v-bind&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlazar a un atributo: v-bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlace-bidireccional-v-model&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlace bidireccional: v-model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-devtools&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue devtools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#extensiones-para-el-editor-de-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Extensiones para el editor de código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otras-utilidades&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otras utilidades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cursos-de-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cursos de Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;El uso de un framework nos facilita enormemente el trabajo a la hora de crear una aplicación. Vue es un framework progresivo para la construcción de interfaces de usuario y aplicaciones desde el lado del cliente. Lo de framework &amp;quot;progresivo&amp;quot; significa que su núcleo es pequeño pero está diseñado para crecer: su núcleo está enfocado sólo en la capa de visualización pero es fácil añadirle otras bibliotecas o proyectos existentes (algunos desarrollados por el mismo equipo de Vue) que nos permitan crear complejas SPA.&lt;/p&gt;
&lt;p&gt;Su código es &lt;em&gt;opensource&lt;/em&gt; y fue creado por el desarrollador independiente &lt;a href=&quot;https://evanyou.me/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Evan You&lt;/a&gt;, lo que lo diferencia de los otros 2 frameworks más utilizados: &lt;strong&gt;Angular&lt;/strong&gt; desarrollado por &lt;em&gt;Google&lt;/em&gt; y &lt;strong&gt;React&lt;/strong&gt; desarrollado por &lt;em&gt;Facebook&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vue tiene una curva de aprendizaje menor que otros frameworks y es extremadamente rápido y ligero.&lt;/p&gt;
&lt;p&gt;Este material está basado en la &lt;a href=&quot;https://vuejs.org/guide/introduction.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;guía oficial de Vue&lt;/a&gt; y veremos además los servicios de vue-router, axios y pinia (sustituto de vuex en Vue3) entre otros.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué framework es mejor?&lt;/strong&gt;&lt;br /&gt;
Depende de la aplicación a desarrollar y de los gustos del programador. Tenéis algunos enlaces al respecto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/comparison.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comparativa VueJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openwebinars.net/blog/vuejs-vs-react/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Openwebminars: Vue vs React vs Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jTtab_rnvic&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Carlos Azaustre: Vue vs Angular (vídeo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codeinwp.com/blog/angular-vs-vue-vs-react/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Angular vs React vs Vue: Which Framework to Choose in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las razones de que veamos Vue en vez de Angular o React son, en resumen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sencillez&lt;/strong&gt;: aunque Angular es el framework más demandado hoy en el mercado su curva de aprendizaje es muy pronunciada. Vue es mucho más sencillo de aprender pero su forma de trabajar es muy similar a Angular por lo que el paso desde Vue a Angular es relativamente sencillo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uso del framework&lt;/strong&gt;: React es también muy sencillo ya que es simplemente Javascript en el que podemos codificar la vista con JSX, pero la forma de trabajar de Vue es más parecida a otros frameworks, especialmente a Angular por lo que lo aprendido nos será de gran ayuda si queremos pasar a ese framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendimiento&lt;/strong&gt;: Vue hace uso del concepto de &lt;em&gt;Virtual DOM&lt;/em&gt; igual que React por lo que también ofrece muy buen rendimiento&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;usar-vue&quot; tabindex=&quot;-1&quot;&gt;Usar Vue&lt;/h2&gt;
&lt;p&gt;Para utilizar Vue sólo necesitamos enlazarlo en nuestra página desde cualquier CDN como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/vue@3/dist/vue.global.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta no es la forma más recomendable de trabajar. Lo normal es crear un proyecto con &lt;strong&gt;&lt;em&gt;npm&lt;/em&gt;&lt;/strong&gt; que genere un completo &lt;em&gt;scaffolding&lt;/em&gt;. Esto nos permitirá trabajar con componentes (&lt;em&gt;Single File Components&lt;/em&gt; o &lt;em&gt;SFC&lt;/em&gt;) lo que nos facilitará enormemente la creación de nuestras aplicaciones.&lt;/p&gt;
&lt;p&gt;Un &lt;em&gt;SFC&lt;/em&gt; es un componente reutilizable que se guarda en un fichero con extensión &lt;em&gt;.vue&lt;/em&gt;. Para que &lt;em&gt;VSCode&lt;/em&gt; reconozca correctamente los ficheros &lt;em&gt;.vue&lt;/em&gt; debemos instalar la &lt;em&gt;extensión&lt;/em&gt; &lt;strong&gt;Volar&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;estructura-de-una-aplicacion-vue&quot; tabindex=&quot;-1&quot;&gt;Estructura de una aplicación Vue&lt;/h2&gt;
&lt;p&gt;Vamos a crear la aplicación con Vue que mostrará un contador y un botón para actualizarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue.createApp({
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  }
}).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;
    &amp;lt;!-- Import Vue.js --&amp;gt;
    &amp;lt;script src=&amp;quot;https://unpkg.com/vue@3/dist/vue.global.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
      &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;
        Count is: { { count }}
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;!-- Import Js --&amp;gt;
    &amp;lt;script src=&amp;quot;./main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver su funcionamiento en la &lt;a href=&quot;https://vuejs.org/guide/introduction.html#what-is-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue&lt;/a&gt; o en &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/abYweqQ&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este ejemplo podemos ver las 2 principales características de Vue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Renderizado declarativo&lt;/strong&gt;: Vue amplía HTML con una sintaxis que nos permite declarar en HTML una salida basada en un dato Javascript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reactividad&lt;/strong&gt;: Vue hace un seguimiento de las variables Javascript y modifica el DOM cuando alguna cambia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para probar el funcionamiento de código tenemos el &lt;strong&gt;&lt;em&gt;Playground&lt;/em&gt;&lt;/strong&gt; de Vue al que accedemos desde su documentación en &lt;a href=&quot;https://vuejs.org/guide/quick-start.html#try-vue-online&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://vuejs.org/guide/quick-start.html#try-vue-online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a ver qué estamos haciendo en cada fichero:&lt;/p&gt;
&lt;h3 id=&quot;html&quot; tabindex=&quot;-1&quot;&gt;HTML&lt;/h3&gt;
&lt;p&gt;En el HTML debemos vincular los scripts de la librería de Vue y de nuestro código.&lt;/p&gt;
&lt;p&gt;Vue se ejecutará dentro de un elemento de nuestra página (al que se le suele poner como id &lt;em&gt;app&lt;/em&gt;) que en este caso es un &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dentro de ese elemento es donde podemos usar expresiones de Vue (fuera del mismo se ignorarán). En este ejemplo se usa&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el &lt;em&gt;moustache&lt;/em&gt; &lt;strong&gt;{{ ... }}&lt;/strong&gt; que muestra en la página la variable o expresión Javascript que contiene&lt;/li&gt;
&lt;li&gt;la directiva &lt;strong&gt;@click&lt;/strong&gt; que pone al elemento un escuchador del evento &lt;em&gt;click&lt;/em&gt; que ejecuta la función indicada en el mismo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;Javascript&lt;/h3&gt;
&lt;p&gt;En el fichero JS debemos crear la aplicación con el método &lt;em&gt;createApp&lt;/em&gt; (al que se le pasa un objeto con una serie de opciones) y montarla en el elemento del HTML donde se ejecutará dicha aplicación. En nuestro caso la única opción que se le pasa es &lt;strong&gt;data&lt;/strong&gt; pero hay muchas más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;data&lt;/code&gt;&lt;/strong&gt;: aquí es donde se define el &lt;em&gt;estado&lt;/em&gt; de la aplicación, es decir, los datos de la misma. Es una &lt;strong&gt;función&lt;/strong&gt; que &lt;em&gt;devuelve un objeto&lt;/em&gt; donde cada dato será una propiedad del mismo. Lo que definimos aquí sería el equivalente a las propiedades definidas en una clase que almacenan el estado de la misma. Estos datos son reactivos y accesibles desde el HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue.createApp({
  data() {
    return {
      count: 0,
      msg: &#39;Hola&#39;,
      ...
    }
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;methods&lt;/code&gt;&lt;/strong&gt;: es un objeto donde cada propiedad es un método de la aplicación que puede ser llamado desde el HTML. Son el equivalente a los métodos de una clase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fijaos que para hacer referencia desde Javascript a una variable (o a un método) hay que anteponerle &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Además de las opciones &lt;em&gt;data&lt;/em&gt; y &lt;em&gt;methods&lt;/em&gt; podemos definir otras como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;computed&lt;/strong&gt;: es un objeto con funciones que devuelven una variable cuyo valor hay que calcularlo. Por ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    nombre: &#39;Juan&#39;,
    apellido: &#39;Segura&#39;, 
  }
},
computed: {
  nombreCompleto() {
    return this.nombre + &#39; &#39; + this.apellido;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;hooks&lt;/em&gt;&lt;/strong&gt; (eventos del ciclo de vida de la instancia): para ejecutar código en determinados momentos: &lt;strong&gt;&#39;created&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;mounted&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;updated&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;destroyed&#39;&lt;/strong&gt;. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;created() {
    console.log(&#39;instancia creada&#39;); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;estilos-de-em-api-em&quot; tabindex=&quot;-1&quot;&gt;Estilos de &lt;em&gt;API&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;La forma en que hemos programado estos ejemplos no es la más recomendable por lo que más adelante usaremos &lt;code&gt;npm&lt;/code&gt; para crear un completo &lt;em&gt;scaffolding&lt;/em&gt; que nos facilitará enormemente la creación de nuestras aplicaciones. Con ella dividiremos nuestra aplicación en componentes llamados &lt;em&gt;Single File Components&lt;/em&gt; que incluirán en un único fichero tanto la lógica del componente (Javascript) como su presentación (HTML) y su apariencia (CSS).&lt;/p&gt;
&lt;p&gt;Vue3 proporciona 2 formas diferentes de programar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Options API&lt;/em&gt;&lt;/strong&gt;: la lógica de un componente se establece en las distintas propiedades de un objeto, a las que se accede mediante &lt;em&gt;this&lt;/em&gt; que apunta a la instancia del componente. Es la que veremos ahora ya que es la más similar a la OOP que conocemos.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
  // Properties returned from data() become reactive state
  // and will be exposed on `this`.
  data() {
    return {
      msg: &amp;quot;Hola&amp;quot;,
      count: 0
    }
  },

  // Methods are functions that mutate state and trigger updates.
  // They can be bound as event listeners in templates.
  methods: {
    increment() {
      this.count++
    },
    decrement() {
      this.count--
    }
  },

  // Lifecycle hooks are called at different stages
  // of a component&#39;s lifecycle.
  // This function will be called when the component is mounted.
  mounted() {
    console.log(`The initial count is ${this.count}.`)
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Count is: {{ count }}&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Composition API&lt;/em&gt;&lt;/strong&gt;_: es algo más compleja pero mejora la reutilización de código y su organización por funcionalidades. Indicada para aplicaciones grandes la veremos al final del bloque&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { ref, onMounted } from &#39;vue&#39;

// reactive state
const count = ref(&#39;Hola&#39;)
const count = ref(0)

// functions that mutate state and trigger updates
function increment() {
  count.value++
}
function decrement() {
  count.value--
}

// lifecycle hooks
onMounted(() =&amp;gt; {
  console.log(`The initial count is ${count.value}.`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Count is: {{ count }}&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-binding-em-de-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Binding&lt;/em&gt; de variables&lt;/h2&gt;
&lt;p&gt;En la &lt;a href=&quot;https://vuejs.org/tutorial/#step-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Guía de la documentación oficial de Vue&lt;/a&gt; tenemos un tutorial guiado donde podemos probar cada una de las funcionalidades de Vue. En la parte superior izquierda nos pregunta por nuestras preferencias: de momento escogeremos &lt;strong&gt;Options&lt;/strong&gt; y &lt;strong&gt;HTML&lt;/strong&gt;, aunque enseguida cambiaremos a  &lt;strong&gt;Options&lt;/strong&gt; y &lt;strong&gt;SFC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;enlace-unidireccional-interpolacion&quot; tabindex=&quot;-1&quot;&gt;Enlace unidireccional: interpolación {{...}}&lt;/h3&gt;
&lt;p&gt;Donde queramos mostrar en la vista el valor de una variable simplemente la ponemos entre dobles llaves:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p&amp;gt;Contador: { { counter }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el código Javascript sólo tenemos que declarar esa variable dentro del objeto devuelto por &lt;em&gt;data()&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  data() {
    return {
      counter: 0
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver esa variable y manipularla desde la consola, y si cambiamos su valor vemos que cambia lo que muestra nuestra página. Esto es porque Vue (al igual que Angular o React) enlazan el DOM y los datos de forma que cualquier cambio en uno se refleja automáticamente en el otro.&lt;/p&gt;
&lt;h3 id=&quot;enlazar-a-un-atributo-v-bind&quot; tabindex=&quot;-1&quot;&gt;Enlazar a un atributo: v-bind&lt;/h3&gt;
&lt;p&gt;Para mostrar un dato en el DOM usamos la interpolación &lt;code&gt;**{ {  }}**&lt;/code&gt; pero si queremos nostrarlo como atributo de una etiqueta debemos usar &lt;code&gt;v-bind&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;p v-bind:title=&amp;quot;message&amp;quot;&amp;gt;
    Hover your mouse over me for a few seconds
    to see my dynamically bound title!
  &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vue incorpora estos &#39;&lt;em&gt;atributos&lt;/em&gt;&#39; que podemos usar en las etiquetas HTML y que se llaman &lt;strong&gt;directivas&lt;/strong&gt;. Todas las directivas comienzan por &lt;strong&gt;&lt;code&gt;v-&lt;/code&gt;&lt;/strong&gt; (en Angular es igual pero el prefijo es &lt;em&gt;ng-&lt;/em&gt;). Como la directiva &lt;code&gt;v-bind&lt;/code&gt; se utiliza mucho se puede abreviar símplemente como &lt;code&gt;:&lt;/code&gt; (el carácter &#39;dos puntos&#39;). El siguiente código es equivalente al de antes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;p :title=&amp;quot;message&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;enlace-bidireccional-v-model&quot; tabindex=&quot;-1&quot;&gt;Enlace bidireccional: v-model&lt;/h3&gt;
&lt;p&gt;Tanto &lt;strong&gt;&lt;code&gt;{ { }}&lt;/code&gt;&lt;/strong&gt; como &lt;code&gt;v-bind&lt;/code&gt; son un enlace unidireccional: muestran en el DOM el valor de un dato y reaccionan ante cualquier cambio en dicho valor.&lt;/p&gt;
&lt;p&gt;Pero además está la directiva &lt;code&gt;v-model&lt;/code&gt; que es un enlace bidireccional que enlaza un dato a un campo de formulario y permite cambiar el valor del campo al cambiar el dato pero también cambia el dato si se modifica lo introducido en el input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;input v-model=&amp;quot;message&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;GRvdrqp&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/GRvdrqp&quot;&gt;
  v-model&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Vemos que al escribir en el &lt;em&gt;input&lt;/em&gt; automáticamente cambia lo mostrado en el primer párrafo. Esta característica nos permite ahorrar innumerables líneas de código para hacer que el DOM refleje los cambios que se producen en los datos.&lt;/p&gt;
&lt;p&gt;NOTA: toda la aplicación se monta en el elemento &lt;em&gt;app&lt;/em&gt; por lo que las directivas o interpolaciones que pongamos fuera del mismo no se interpretarán.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue-devtools&quot; tabindex=&quot;-1&quot;&gt;Vue devtools&lt;/h2&gt;
&lt;p&gt;Es una extensión para Chrome y Firefox que nos permite inspeccionar nuestro objeto Vue y acceder a todos los datos de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Anteriormente había que instalarla pero ahora viene integrada en la herramienta de desarrollador de los navegadores.&lt;/p&gt;
&lt;p&gt;En ella tenemos distintos apartados, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Componentes: es la vista por defecto y nos permite inspeccionar todos los componentes Vue creados (ahora tenemos sólo 1, el principal, pero más adelante haremos componentes hijos)&lt;/li&gt;
&lt;li&gt;Pinia: es la herramienta de gestión de estado para aplicaciones medias/grandes&lt;/li&gt;
&lt;li&gt;Router: permite ver las rutas de nuestra aplicación&lt;/li&gt;
&lt;li&gt;Eventos: permite ver todos los eventos emitidos&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![DevTools](/img/user/01 Apuntes/Vue Teoria Batoi/img/DevTools.png)&lt;/p&gt;
&lt;h2 id=&quot;extensiones-para-el-editor-de-codigo&quot; tabindex=&quot;-1&quot;&gt;Extensiones para el editor de código&lt;/h2&gt;
&lt;p&gt;Cuando empecemos a trabajar con componentes usaremos ficheros con extensión &lt;strong&gt;.vue&lt;/strong&gt; que integran el HTML, el JS y el CSS de cada componente. Para que nuestro editor los detecte correctamente es conveniente instalar la extensión para Vue.&lt;/p&gt;
&lt;p&gt;En el caso de &lt;strong&gt;&lt;em&gt;Visual Studio Code&lt;/em&gt;&lt;/strong&gt; esta extensión se llama &lt;strong&gt;Vue-Oficial&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;otras-utilidades&quot; tabindex=&quot;-1&quot;&gt;Otras utilidades&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Vue 3&lt;/em&gt; permite utilizar directamente &lt;em&gt;Typescript&lt;/em&gt; en nuestros componentes simplemente indicándolo al definir el SFC (lo veremos al llegar allí).&lt;/p&gt;
&lt;p&gt;Respecto a los &lt;em&gt;tests&lt;/em&gt; se recomienda usar &lt;em&gt;Vitest&lt;/em&gt; para los test unitarios y &lt;em&gt;Cypress&lt;/em&gt; para los E2E, como se indica en la &lt;a href=&quot;https://vuejs.org/guide/scaling-up/testing.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt; aunque también puede usarse &lt;em&gt;Jest&lt;/em&gt; u otras herramientas.&lt;/p&gt;
&lt;h2 id=&quot;cursos-de-vue&quot; tabindex=&quot;-1&quot;&gt;Cursos de Vue&lt;/h2&gt;
&lt;p&gt;Podemos encontrar muchos cursos en internet, algunos de ellos gratuitos. Por ejemplo los creadores de Vue tienen la web &lt;a href=&quot;https://www.vuemastery.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Mastery&lt;/a&gt; donde podemos encontrar desde cursos de iniciación (gratuitos) hasta los mas avanzados.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/vue-teoria-batoi/01-basics/" >
        </entry>
        <entry>
            <title>
                PHP Teoria Batoi
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/index/</id>
            <content type="html">
                &lt;h1 id=&quot;desenvolupament-web-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;Desenvolupament Web en Entorn Servidor&lt;/h1&gt;
&lt;p&gt;Ací pots trobar les anotacions del mòdul de &lt;em&gt;Desenvolupament web en entorn servidor&lt;/em&gt;, que s&#39;imparteix en el segon curs del cicle formatiu de grau superior de Desenvolupament d&#39;Aplicacions Web.&lt;/p&gt;
&lt;p&gt;La duració del mòdul és de 160 hores lectives, a raó de &lt;strong&gt;8 hores setmanals&lt;/strong&gt;, i es desenvolupa al llarg dels &lt;strong&gt;dos primers trimestres&lt;/strong&gt; del curs. S&#39;ha &lt;a href=&quot;https://pedroporo.github.io/planning.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;planificat&lt;/a&gt; basant-se en 3 sessions de 3,3 i 2 hores lectives per setmana.&lt;/p&gt;
&lt;h2 id=&quot;que-aprendre&quot; tabindex=&quot;-1&quot;&gt;Què aprendré?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A desenvolupar aplicacions web dinàmiques, que obtenen la informació a partir d&#39;una base de dades.&lt;/li&gt;
&lt;li&gt;Analitzar l&#39;estructura d&#39;una aplicació client/servidor, separant el codi de presentació de la lògica de negoci&lt;/li&gt;
&lt;li&gt;Obtindre informació a partir de les dades emmagatzemades, així com modificar-los.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resultats-d-aprenentatge&quot; tabindex=&quot;-1&quot;&gt;Resultats d&#39;aprenentatge&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Selecciona les arquitectures i tecnologies de programació Web en entorn servidor, analitzant les seues capacitats i característiques pròpies.&lt;/li&gt;
&lt;li&gt;Escriu sentències executables per un servidor Web reconeixent i aplicant procediments d&#39;integració del codi en llenguatges de marques.&lt;/li&gt;
&lt;li&gt;Escriu blocs de sentències embeguts en llenguatges de marques, seleccionant i utilitzant les estructures de programació.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions Web embegudes en llenguatges de marques analitzant i incorporant funcionalitats segons especificacions.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentació de la lògica de negoci.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions d&#39;accés a magatzems de dades, aplicant mesures per a mantindre la seguretat i la integritat de la informació.&lt;/li&gt;
&lt;li&gt;Desenvolupa serveis web reutilitzables i accessibles mitjançant protocols web, verificant el seu funcionament&lt;/li&gt;
&lt;li&gt;Genera pàgines web dinàmiques analitzant i utilitzant tecnologies i frameworks del servidor web que afigen codi al llenguatge de marques.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions Web híbrides seleccionant i utilitzant llibreries de codi i repositoris heterogenis d&#39;informació.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;unitats-didactiques-temporalitzacio&quot; tabindex=&quot;-1&quot;&gt;Unitats didàctiques / Temporalització&lt;/h2&gt;
&lt;p&gt;A continuació es mostren les unitats didàctiques i una &lt;a href=&quot;https://pedroporo.github.io/planning.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;estimació temporal&lt;/a&gt; de cadascuna d&#39;elles.&lt;br /&gt;
La primera avaluació contindria les unitats compreses entre la 1 i 6. Així doncs, des de la meitat de la unitat 6 a la unitat 9 es veuran en la segona avaluació.&lt;/p&gt;
&lt;h3 id=&quot;primera-avaluacio&quot; tabindex=&quot;-1&quot;&gt;Primera avaluació&lt;/h3&gt;
&lt;p&gt;Duració estimada: 75 hores&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/1.%20Arquitecturas%20WEB.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arquitectures Web&lt;/a&gt; (3h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client/Servidor.&lt;/li&gt;
&lt;li&gt;MVC.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/Introducci%C3%B3n%20a%20PHP.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El llenguatge PHP&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Condicions i bucles.&lt;/li&gt;
&lt;li&gt;Arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/Programaci%C3%B3n%20en%20Web.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Programació Web&lt;/a&gt; (13h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formularis.&lt;/li&gt;
&lt;li&gt;Cookies i sessió.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/phpoo.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Orientació a objectes amb PHP&lt;/a&gt; (11h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classes i objectes&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Excepcions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/05accesoDatos.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Accés a dades&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;PDO&lt;/li&gt;
&lt;li&gt;Fitxers CSV i PDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projecte Integrador&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;segona-avaluacio&quot; tabindex=&quot;-1&quot;&gt;Segona avaluació&lt;/h3&gt;
&lt;p&gt;Duració estimada: 85 hores&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/07frameworks.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Frameworks PHP. Laravel.&lt;/a&gt; (29h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelRutesVistes.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Rutes i vistes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelControladors.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Controladors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelModelsDades.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Models i dades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelValidacioAutenticacio.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validacio i Autenticacio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelNotificacions.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Notificacions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelBatoiBook.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Activitats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/08laravelRestFull.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Serveis Web&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producció i consum.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;AJAX&lt;/em&gt; amb &lt;em&gt;JSON&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/01%20Apuntes/PHP%20Teoria%20Batoi/09mashup.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webs Híbrides&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reutilització de codi i dades.&lt;/li&gt;
&lt;li&gt;OAuth2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/01%20Apuntes/PHP%20Teoria%20Batoi/09mailLaravel.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Projecte Integrador&lt;/a&gt; (24h)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;instruments-de-qualificacio&quot; tabindex=&quot;-1&quot;&gt;Instruments de qualificació&lt;/h2&gt;
&lt;p&gt;La nota del curs es calcula mitjançant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;30% Activitats classe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada Unitat Temàtica (excepte la primera) tindrà una sèrie d&#39;activitats avaluables que poden ser realitzades en classe i a casa.
&lt;ul&gt;
&lt;li&gt;Les activitats s&#39;avaluen mitjançant tasques de &lt;em&gt;Aules&lt;/em&gt; avaluables per rúbriques.&lt;/li&gt;
&lt;li&gt;La puntuació de cada unitat temàtica serà la del número de hores previstes per eixa unitat, descomptat les proves escrites.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10% Qüestionaris per unitat temàtica (excepte la primera).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20% Projecte Integrador (Final de curs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;40% Exàmen d&#39;avaluació (Fan mitja a partir de 4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un per cada avaluació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dataview&quot;&gt;
list from 1. Arquitecturas Web

&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/index/" >
        </entry>
        <entry>
            <title>
                8. Exercici Pràctic, Guia d&#39;Equips de Futbol Femení amb Base de Dades
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/8-exercici-practic-guia-d-equips-de-futbol-femeni-amb-base-de-dades/</id>
            <content type="html">
                &lt;p&gt;L&#39;objectiu d&#39;aquest exercici és estendre la Guia d&#39;Equips de Futbol Femení per utilitzar una base de dades relacional. Aprendràs a crear taules amb migracions, models per gestionar les dades, i a integrar-los amb controladors i vistes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;strong-1-crear-la-migracio-per-a-la-taula-code-equips-code-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;1. Crear la Migració per a la Taula &lt;code&gt;equips&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;strong-migracio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Migració&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Genera una migració per a la taula &lt;code&gt;equips&lt;/code&gt; amb la següent estructura:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Clau primària, autoincremental.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nom&lt;/code&gt;: Nom de l&#39;equip (cadena, únic, obligatori).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;estadi&lt;/code&gt;: Nom de l&#39;estadi de l&#39;equip (cadena, obligatori).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titols&lt;/code&gt;: Nombre de títols guanyats (entero, predeterminat 0).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;created_at&lt;/code&gt; i &lt;code&gt;updated_at&lt;/code&gt;: Camps de timestamps generats automàticament.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration create_equips_table --create=equips
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica el fitxer de migració per incloure l&#39;estructura de la taula:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::create(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;id();
        $table-&amp;gt;string(&#39;nom&#39;)-&amp;gt;unique();
        $table-&amp;gt;string(&#39;estadi&#39;);
        $table-&amp;gt;integer(&#39;titols&#39;)-&amp;gt;default(0);
        $table-&amp;gt;timestamps();
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Executa la migració per crear la taula:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-models-i-seeders-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Models i Seeders&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Genera un model anomenat &lt;code&gt;Equip&lt;/code&gt; per gestionar la taula:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:model Equip 
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica el model Equip a app/Models/Equip.php per definir els camps que es poden emplenar mitjançant assignació massiva:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected $fillable = [&#39;nom&#39;, &#39;estadi&#39;, &#39;titols&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Crea un seeder per a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:seeder EquipsSeeder
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el seeder EquipsSeeder per generar dades d&#39;exemple:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    DB::table(&#39;equips&#39;)-&amp;gt;insert([
            [&#39;nom&#39; =&amp;gt; &#39;Barça Femení&#39;, &#39;estadi&#39; =&amp;gt; &#39;Camp Nou&#39;, &#39;titols&#39; =&amp;gt; 30],
            [&#39;nom&#39; =&amp;gt; &#39;Atlètic de Madrid&#39;, &#39;estadi&#39; =&amp;gt; &#39;Cívitas Metropolitano&#39;, &#39;titols&#39; =&amp;gt; 10],
            [&#39;nom&#39; =&amp;gt; &#39;Real Madrid Femení&#39;, &#39;estadi&#39; =&amp;gt; &#39;Alfredo Di Stéfano&#39;, &#39;titols&#39; =&amp;gt; 5],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Afegeix el seeder EquipsSeeder al fitxer DatabaseSeeder:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    $this-&amp;gt;call([
        EquipsSeeder::class,
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Executa els seeders per omplir la taula &lt;code&gt;equips&lt;/code&gt; amb dades d&#39;exemple:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;   php artisan db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-controladors-i-crud-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Controladors i CRUD&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modifica el mètode &lt;code&gt;index&lt;/code&gt;,&lt;code&gt;show&lt;/code&gt;,&lt;code&gt;create&lt;/code&gt;,&lt;code&gt;edit&lt;/code&gt; i &lt;code&gt;destroy&lt;/code&gt; del controlador per obtenir els equips des de la base de dades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function index() {
     $equips = Equip::all();
     return view(&#39;equips.index&#39;, compact(&#39;equips&#39;));
 }

 public function show(Equip $equip) {
     return view(&#39;equips.show&#39;, compact(&#39;equip&#39;));
 }

 public function create() {
     return view(&#39;equips.create&#39;);
 }

 public function edit(Equip $equip) {
     return view(&#39;equips.edit&#39;, compact(&#39;equip&#39;));
 }

 public function destroy(Equip $equip) {
     $equip-&amp;gt;delete();
     return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip esborrat correctament!&#39;);
 } 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;strong-relacions-entre-taules-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Relacions entre Taules&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Anem a crear la migració, model i seeder per la taula &lt;code&gt;estadis&lt;/code&gt; i vincular-la amb la taula &lt;code&gt;equips&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration create_estadis_table
php artisan make:migration add_estadi_id_to_equips_table
php artisan make:model Estadi
php artisan make:seeder EstadisSeeder
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica la migració &lt;code&gt;create_estadis_table&lt;/code&gt; per incloure l&#39;estructura de la taula &lt;code&gt;estadis&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::create(&#39;estadis&#39;, function (Blueprint $table) {
        $table-&amp;gt;id();
        $table-&amp;gt;string(&#39;nom&#39;)-&amp;gt;unique();
        $table-&amp;gt;integer(&#39;capacitat&#39;);
        $table-&amp;gt;timestamps();
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Modifica la migració &lt;code&gt;add_estadi_id_to_equips_table&lt;/code&gt; per afegir la clau forana &lt;code&gt;estadi_id&lt;/code&gt; a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;dropColumn(&#39;estadi&#39;); // Esborra el camp estadi
        $table-&amp;gt;foreignId(&#39;estadi_id&#39;)-&amp;gt;constrained(); // Afegir la clau forana
    });
 }

public function down()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;string(&#39;estadi&#39;);
        $table-&amp;gt;dropForeign([&#39;estadi_id&#39;]);
        $table-&amp;gt;dropColumn(&#39;estadi_id&#39;);
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Equip&lt;/code&gt; per definir la relació amb l&#39;estadi:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function estadi()
{
    return $this-&amp;gt;belongsToclass;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Estadi&lt;/code&gt; per definir la relació amb els equips:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function equips()
{
    return $this-&amp;gt;hasManyclass;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Modifica el seeder &lt;code&gt;EstadisSeeder&lt;/code&gt; per generar dades d&#39;exemple per a la taula &lt;code&gt;estadis&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    DB::table(&#39;estadis&#39;)-&amp;gt;insert([
        [&#39;nom&#39; =&amp;gt; &#39;Camp Nou&#39;, &#39;capacitat&#39; =&amp;gt; 99000],
        [&#39;nom&#39; =&amp;gt; &#39;Wanda Metropolitano&#39;, &#39;capacitat&#39; =&amp;gt; 68000],
        [&#39;nom&#39; =&amp;gt; &#39;Santiago Bernabéu&#39;, &#39;capacitat&#39; =&amp;gt; 81000],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Afegeix el seeder &lt;code&gt;EstadisSeeder&lt;/code&gt; al fitxer &lt;code&gt;DatabaseSeeder&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    $this-&amp;gt;call([
        EstadisSeeder::class,
        EquipsSeeder::class,
        
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Modifica el seeder &lt;code&gt;EquipsSeeder&lt;/code&gt; per assignar equips a estadis existents:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    $estadi = Estadi::where(&#39;nom&#39;, &#39;Camp Nou&#39;)-&amp;gt;first();
    $estadi-&amp;gt;equips()-&amp;gt;create([
        &#39;nom&#39; =&amp;gt; &#39;Barça Femení&#39;,
        &#39;titols&#39; =&amp;gt; 30,
    ]);
    $estadi = Estadi::where(&#39;nom&#39;, &#39;Wanda Metropolitano&#39;)-&amp;gt;first();
    $estadi-&amp;gt;equips()-&amp;gt;create([
        &#39;nom&#39; =&amp;gt; &#39;Atlètic de Madrid&#39;,
        &#39;titols&#39; =&amp;gt; 10,
    ]);
    $estadi = Estadi::where(&#39;nom&#39;, &#39;Santiago Bernabéu&#39;)-&amp;gt;first();
    $estadi-&amp;gt;equips()-&amp;gt;create([
        &#39;nom&#39; =&amp;gt; &#39;Real Madrid Femení&#39;,
        &#39;titols&#39; =&amp;gt; 5,
    ]);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Executa els seeders per omplir les taules &lt;code&gt;equips&lt;/code&gt; i &lt;code&gt;estadis&lt;/code&gt; amb dades d&#39;exemple:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:fresh --seed 
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.index&lt;/code&gt; per mostrar l&#39;estadi de cada equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;@foreach ($equips as $equip)
    &amp;lt;tr class=&amp;quot;hover:bg-gray-100&amp;quot;&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;{{ route(&#39;equips.show&#39;, $equip-&amp;gt;id) }}&amp;quot; class=&amp;quot;text-blue-700 hover:underline&amp;quot;&amp;gt;{{ $equip-&amp;gt;nom }}&amp;lt;/a&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;{{ $equip-&amp;gt;estadi-&amp;gt;nom }}&amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;{{ $equip-&amp;gt;titols }}&amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2 flex space-x-2&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;{{ route(&#39;equips.show&#39;, $equip-&amp;gt;id) }}&amp;quot; class=&amp;quot;text-green-600 hover:underline&amp;quot;&amp;gt;Mostrar&amp;lt;/a&amp;gt;
            &amp;lt;a href=&amp;quot;{{ route(&#39;equips.edit&#39;, $equip-&amp;gt;id) }}&amp;quot; class=&amp;quot;text-yellow-600 hover:underline&amp;quot;&amp;gt;Editar&amp;lt;/a&amp;gt;
        &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
@endforeach

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;Crea la vista &lt;code&gt;equips.create&lt;/code&gt; per incloure un desplegable amb els estadis disponibles:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;form action=&amp;quot;{{ route(&#39;equips.store&#39;) }}&amp;quot; method=&amp;quot;POST&amp;quot; class=&amp;quot;bg-white p-6 rounded-lg shadow-md max-w-md mx-auto&amp;quot;&amp;gt;
    @csrf
    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;nom&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Nom:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;nom&amp;quot; id=&amp;quot;nom&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;titols&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Títols:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;titols&amp;quot; id=&amp;quot;titols&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;estadi_id&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Estadi:&amp;lt;/label&amp;gt;
        &amp;lt;select name=&amp;quot;estadi_id&amp;quot; id=&amp;quot;estadi_id&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
            @foreach ($estadis as $estadi)
                &amp;lt;option value=&amp;quot;{{ $estadi-&amp;gt;id }}&amp;quot;&amp;gt;{{ $estadi-&amp;gt;nom }}&amp;lt;/option&amp;gt;
            @endforeach
        &amp;lt;/select&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;button type=&amp;quot;submit&amp;quot;
        class=&amp;quot;w-full bg-blue-500 text-white font-medium py-2 px-4 rounded-lg shadow hover:bg-blue-600 focus:ring focus:ring-blue-300&amp;quot;&amp;gt;
        Crear Equip
    &amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cal modificar el controlador &lt;code&gt;EquipController&lt;/code&gt; per obtenir els estadis disponibles.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;Crea el mètode store en el controlador EquipController per emmagatzemar un nou equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function store(Request $request) {
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips&#39;,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
    ]);
    Equip::create($validated);
    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip creat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cal modificat el model &lt;code&gt;Equip&lt;/code&gt; per permetre l&#39;assignació massiva de l&#39;estadi.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.edit&lt;/code&gt; per incloure un desplegable amb els estadis disponibles:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;form action=&amp;quot;{{ route(&#39;equips.update&#39;, $equip-&amp;gt;id) }}&amp;quot; method=&amp;quot;POST&amp;quot; class=&amp;quot;bg-white p-6 rounded-lg shadow-md max-w-md mx-auto&amp;quot;&amp;gt;
    @csrf
    @method(&#39;PUT&#39;)

    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;nom&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Nom:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;nom&amp;quot; id=&amp;quot;nom&amp;quot; value=&amp;quot;{{ old(&#39;nom&#39;, $equip-&amp;gt;nom) }}&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 
            @error(&#39;nom&#39;) border-red-500 @enderror&amp;quot;&amp;gt;
        @error(&#39;nom&#39;)
            &amp;lt;p class=&amp;quot;text-red-500 text-sm mt-1&amp;quot;&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
        @enderror
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;titols&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Títols:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;titols&amp;quot; id=&amp;quot;titols&amp;quot; value=&amp;quot;{{ old(&#39;titols&#39;, $equip-&amp;gt;titols) }}&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 
            @error(&#39;titols&#39;) border-red-500 @enderror&amp;quot;&amp;gt;
        @error(&#39;titols&#39;)
            &amp;lt;p class=&amp;quot;text-red-500 text-sm mt-1&amp;quot;&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
        @enderror
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;estadi_id&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Estadi:&amp;lt;/label&amp;gt;
        &amp;lt;select name=&amp;quot;estadi_id&amp;quot; id=&amp;quot;estadi_id&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 
            @error(&#39;estadi_id&#39;) border-red-500 @enderror&amp;quot;&amp;gt;
            @foreach ($estadis as $estadi)
                &amp;lt;option value=&amp;quot;{{ $estadi-&amp;gt;id }}&amp;quot; {{ $estadi-&amp;gt;id == $equip-&amp;gt;estadi_id ? &#39;selected&#39; : &#39;&#39; }}&amp;gt;
                    {{ $estadi-&amp;gt;nom }}
                &amp;lt;/option&amp;gt;
            @endforeach
        &amp;lt;/select&amp;gt;
        @error(&#39;estadi_id&#39;)
            &amp;lt;p class=&amp;quot;text-red-500 text-sm mt-1&amp;quot;&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
        @enderror
    &amp;lt;/div&amp;gt;

    &amp;lt;button type=&amp;quot;submit&amp;quot;
        class=&amp;quot;w-full bg-blue-500 text-white font-medium py-2 px-4 rounded-lg shadow hover:bg-blue-600 focus:ring focus:ring-blue-300&amp;quot;&amp;gt;
        Actualitzar Equip
    &amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;Crea el mètode update en el controlador EquipController per actualitzar un equip existent:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function update(Request $request, $id) {
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips,nom,&#39;.$id,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
    ]);
    $equip = Equip::findOrFail($id);
    $equip-&amp;gt;update($validated);
    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip actualitzat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-afegir-un-escut-a-l-equip-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Afegir un escut a l&#39;equip&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crea una migració per afegir un camp &lt;code&gt;escut&lt;/code&gt; a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration add_escut_to_equips_table
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica la migració &lt;code&gt;add_escut_to_equips_table&lt;/code&gt; per incloure el camp &lt;code&gt;escut&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;string(&#39;escut&#39;)-&amp;gt;nullable();
    });
}
public function down()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;dropColumn(&#39;escut&#39;);
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Aplicar la migració&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Equip&lt;/code&gt; per incloure el camp &lt;code&gt;escut&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected $fillable = [&#39;nom&#39;, &#39;estadi_id&#39;, &#39;titols&#39;, &#39;escut&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.create&lt;/code&gt; per incloure un camp d&#39;arxiu per pujar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;escut&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Escut:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;escut&amp;quot; id=&amp;quot;escut&amp;quot;
        class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.edit&lt;/code&gt; per incloure un camp d&#39;arxiu per actualitzar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;escut&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Escut:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;escut&amp;quot; id=&amp;quot;escut&amp;quot; 
        class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
    @if ($equip-&amp;gt;escut)
        &amp;lt;p class=&amp;quot;mt-2 text-sm text-gray-500&amp;quot;&amp;gt;Escut actual:&amp;lt;/p&amp;gt;
        &amp;lt;img src=&amp;quot;{{ asset(&#39;storage/&#39; . $equip-&amp;gt;escut) }}&amp;quot; alt=&amp;quot;Escut de {{ $equip-&amp;gt;nom }}&amp;quot; class=&amp;quot;h-16 mt-2&amp;quot;&amp;gt;
    @endif
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Afegeix enctype=&amp;quot;multipart/form-data&amp;quot; al dos formularis:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form action=&amp;quot;{{ route(&#39;equips.store&#39;) }}&amp;quot; method=&amp;quot;POST&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Crea un enllaç simbòlic a la carpeta storage&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan storage:link
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Actualitza el mètode store del controlador&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function store(Request $request)
{
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips&#39;,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;escut&#39; =&amp;gt; &#39;nullable|image|mimes:jpeg,png,jpg|max:2048&#39;, // Validació del fitxer
    ]);

    if ($request-&amp;gt;hasFile(&#39;escut&#39;)) {
        $path = $request-&amp;gt;file(&#39;escut&#39;)-&amp;gt;store(&#39;escuts&#39;, &#39;public&#39;);
        $validated[&#39;escut&#39;] = $path;
    }

    Equip::create($validated);

    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip creat correctament!&#39;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;Actualitza el mètode update del controlador&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function update(Request $request, $id)
{
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips,nom,&#39; . $id,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;escut&#39; =&amp;gt; &#39;nullable|image|mimes:jpeg,png,jpg|max:2048&#39;,
    ]);

    $equip = Equip::findOrFail($id);

    if ($request-&amp;gt;hasFile(&#39;escut&#39;)) {
        if ($equip-&amp;gt;escut) {
            Storage::disk(&#39;public&#39;)-&amp;gt;delete($equip-&amp;gt;escut); // Esborra l&#39;escut antic
        }
        $path = $request-&amp;gt;file(&#39;escut&#39;)-&amp;gt;store(&#39;escuts&#39;, &#39;public&#39;);
        $validated[&#39;escut&#39;] = $path;
    }

    $equip-&amp;gt;update($validated);

    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip actualitzat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;Crea el mètode delete per esborrar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function delete(Equip $equip)
{
    if ($equip-&amp;gt;escut) {
        Storage::disk(&#39;public&#39;)-&amp;gt;delete($equip-&amp;gt;escut);
    }
    $equip-&amp;gt;delete();
    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip esborrat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;Modificat el component de la vista &lt;code&gt;equips.show&lt;/code&gt; per mostrar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&amp;quot;equip border rounded-lg shadow-md p-4 bg-white&amp;quot;&amp;gt;
      @if ($escut)
          &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;
              &amp;lt;img src=&amp;quot;{{ asset(&#39;storage/&#39; . $escut) }}&amp;quot; alt=&amp;quot;Escut de {{ $nom }}&amp;quot; class=&amp;quot;h-8 w-8 object-cover rounded-full&amp;quot;&amp;gt;
          &amp;lt;/td&amp;gt;
      @endif
    &amp;lt;h2 class=&amp;quot;text-xl font-bold text-blue-800&amp;quot;&amp;gt;{{ $nom }}&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Estadi:&amp;lt;/strong&amp;gt; {{ $estadi }}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Títols:&amp;lt;/strong&amp;gt; {{ $titols }}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-utilitzar-factories-per-a-dades-d-exemple-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Utilitzar Factories per a Dades d&#39;Exemple&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crea un factory per a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:factory EquipFactory --model=Equip
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica el factory &lt;code&gt;EquipFactory&lt;/code&gt; per generar dades aleatòries:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function definition()
{
       return [
           &#39;nom&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;unique()-&amp;gt;company,
           &#39;titols&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;numberBetween(0, 50),
           &#39;estadi_id&#39; =&amp;gt; &#92;App&#92;Models&#92;Estadi::factory(),
           &#39;escut&#39; =&amp;gt; &#39;escuts/dummy.png&#39;, // Imatge de prova predefinida
        ];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Actualitza el seeder &lt;code&gt;EquipsSeeder&lt;/code&gt; per utilitzar el factory:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    ...
    Equip::factory()-&amp;gt;count(10)-&amp;gt;create();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Equip&lt;/code&gt; per permetre els factories:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Illuminate&#92;Database&#92;Eloquent&#92;Factories&#92;HasFactory;
use Illuminate&#92;Database&#92;Eloquent&#92;Model;

class Estadi extends Model
{
    use HasFactory;
 ...  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Crea el factory per a la taula &lt;code&gt;estadis&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:factory EstadiFactory --model=Estadi
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Modifica el factory &lt;code&gt;EstadiFactory&lt;/code&gt; per generar dades aleatòries:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function definition()
{
    return [
        &#39;nom&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;unique()-&amp;gt;city.&#39; Stadium&#39;,
        &#39;capacitat&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;numberBetween(10000, 100000),
    ];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Executa els seeders per omplir la taula &lt;code&gt;equips&lt;/code&gt; amb dades generades pel factory:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:fresh --seed
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/8-exercici-practic-guia-d-equips-de-futbol-femeni-amb-base-de-dades/" >
        </entry>
        <entry>
            <title>
                7. Requests, Responses i Validació en Laravel
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/7-requests-responses-i-validacio-en-laravel/</id>
            <content type="html">
                &lt;h2 id=&quot;strong-1-requests-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;1. Requests&lt;/strong&gt;&lt;/h2&gt;
&lt;h4 id=&quot;strong-introduccio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Introducció&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un &lt;em&gt;Request&lt;/em&gt; en Laravel és un objecte que encapsula la informació sobre la petició HTTP, incloent dades, capçaleres, paràmetres i fitxers.&lt;/p&gt;
&lt;h4 id=&quot;strong-acces-a-dades-del-request-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Accés a dades del Request&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$input = $request-&amp;gt;all(); //Accedir a tots els inputs.
$name = $request-&amp;gt;input(&#39;name&#39;); //Obtenir un input específic.
$age = $request-&amp;gt;input(&#39;age&#39;, 18); //Especificar valors per defecte.
$id = $request-&amp;gt;route(&#39;id&#39;); //Accedir a paràmetres de ruta.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-validacio-de-presencia-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació de presència&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($request-&amp;gt;has(&#39;email&#39;)) {
    // Input &#39;email&#39; present
}
if ($request-&amp;gt;filled(&#39;name&#39;)) {
    // Input &#39;name&#39; no està buit
}
$filtered = $request-&amp;gt;only([&#39;name&#39;, &#39;email&#39;]); //Filtrar inputs específics.
$excluded = $request-&amp;gt;except([&#39;password&#39;]); //Excloure certs inputs.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-tractament-de-fitxers-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Tractament de fitxers&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($request-&amp;gt;hasFile(&#39;photo&#39;)) { //Comprovar si hi ha un fitxer.
    $file = $request-&amp;gt;file(&#39;photo&#39;);
}
$path = $request-&amp;gt;file(&#39;photo&#39;)-&amp;gt;store(&#39;photos&#39;); //Emmagatzemar un fitxer.
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;strong-2-responses-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;2. Responses&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;strong-creacio-de-respostes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Creació de respostes&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;return response(&#39;Hello World&#39;, 200); //Crear una resposta bàsica.
return response()-&amp;gt;json([
    &#39;name&#39; =&amp;gt; &#39;John&#39;,
    &#39;status&#39; =&amp;gt; &#39;success&#39;
]); //Crear una resposta JSON.
return redirect(&#39;dashboard&#39;); //Redirecció .
return redirect(&#39;login&#39;)-&amp;gt;with(&#39;status&#39;, &#39;Sessió iniciada&#39;); //Redirecció amb dades de sessió.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-manipular-capcaleres-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Manipular capçaleres&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;//Afegeix una o múltiples capçaleres.
return response(&#39;Hello&#39;)-&amp;gt;header(&#39;Content-Type&#39;, &#39;text/plain&#39;);
return response(&#39;Hello&#39;)
-&amp;gt;header(&#39;Content-Type&#39;, &#39;application/json&#39;)
-&amp;gt;header(&#39;Cache-Control&#39;, &#39;no-cache&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-respostes-de-fitxers-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Respostes de fitxers&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
return response()-&amp;gt;download($pathToFile); //Descàrrega de fitxers.
return response()-&amp;gt;file($pathToFile); //Mostrar fitxers.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;strong-3-validacio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;3. Validació&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;strong-introduccio-strong-1&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Introducció&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Laravel ofereix un sistema potent i senzill per validar dades d&#39;inputs.&lt;/p&gt;
&lt;h3 id=&quot;strong-validacio-basica-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació bàsica&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Validar dades amb un Request.
$request-&amp;gt;validate([
    &#39;name&#39; =&amp;gt; &#39;required|string|max:255&#39;,
    &#39;email&#39; =&amp;gt; &#39;required|email&#39;,
    &#39;password&#39; =&amp;gt; &#39;required|min:8&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Validar manualment.
$validator = Validator::make($request-&amp;gt;all(), [
    &#39;title&#39; =&amp;gt; &#39;required|max:255&#39;,
    &#39;body&#39; =&amp;gt; &#39;required&#39;,
]);

if ($validator-&amp;gt;fails()) {
    return redirect(&#39;/form&#39;)-&amp;gt;withErrors($validator);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-regles-comunes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Regles comunes&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;required&lt;/code&gt;: Camp obligatori.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Validació d&#39;un correu electrònic.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min:value&lt;/code&gt;: Mínim de caràcters o valor numèric.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max:value&lt;/code&gt;: Màxim de caràcters o valor numèric.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique:table,column&lt;/code&gt;: Ha de ser únic en una taula/columna.&lt;br /&gt;
&lt;a href=&quot;https://laravel.com/docs/11.x/validation#available-validation-rules&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Llista sencera de regles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;strong-missatges-personalitzats-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Missatges personalitzats&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Es poden definir missatges personalitzats per a les regles de validació.

$request-&amp;gt;validate([
    &#39;name&#39; =&amp;gt; &#39;required&#39;,
], [
    &#39;name.required&#39; =&amp;gt; &#39;El nom és obligatori.&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-validacio-condicional-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació condicional&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; // Validació basada en altres camps o condicions.
$request-&amp;gt;validate([
    &#39;password&#39; =&amp;gt; &#39;required_if:is_admin,true&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-validacio-personalitzada-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació personalitzada&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Es poden afegir regles personalitzades mitjançant extensions del Validator.

Validator::extend(&#39;uppercase&#39;, function ($attribute, $value, $parameters, $validator) {
    return strtoupper($value) === $value;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-errors-de-validacio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Errors de validació&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Obtenir tots els errors en la vista
@if ($errors-&amp;gt;any())
    &amp;lt;ul&amp;gt;
        @foreach ($errors-&amp;gt;all() as $error)
            &amp;lt;li&amp;gt;{{ $error }}&amp;lt;/li&amp;gt;
        @endforeach
    &amp;lt;/ul&amp;gt;
@endif
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Mostrar errors per camp específic
@error(&#39;name&#39;)
    &amp;lt;div&amp;gt;{{ $message }}&amp;lt;/div&amp;gt;
@enderror
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/7-requests-responses-i-validacio-en-laravel/" >
        </entry>
        <entry>
            <title>
                6. Seeders i Factories en Laravel
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/6-seeders-i-factories-en-laravel/</id>
            <content type="html">
                &lt;p&gt;Els &lt;strong&gt;seeders&lt;/strong&gt; i &lt;strong&gt;factories&lt;/strong&gt; permeten generar dades de prova de manera fàcil i ràpida, útils durant el desenvolupament per simular dades inicials en una aplicació.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;strong-seeders-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Seeders&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Els seeders són classes especials que permeten &amp;quot;sembrar&amp;quot; dades a la base de dades.&lt;/p&gt;
&lt;h4 id=&quot;strong-crear-un-seeder-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear un Seeder&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:seeder NomSeeder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Això crea un fitxer a la carpeta database/seeders. Per exemple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BooksSeeder extends Seeder
{
    public function run()
    {
        // Exemple: Crear un llibre
        $book = new Book();
        $book-&amp;gt;title = &amp;quot;Laravel for Beginners&amp;quot;;
        $book-&amp;gt;author = &amp;quot;John Doe&amp;quot;;
        $book-&amp;gt;save();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;afegir-seeders-al-seeder-general&quot; tabindex=&quot;-1&quot;&gt;Afegir Seeders al Seeder General&lt;/h4&gt;
&lt;p&gt;Inclou els seeders al fitxer DatabaseSeeder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class DatabaseSeeder extends Seeder
{
    public function run()
    {
        $this-&amp;gt;call([
            BooksSeeder::class,
            AuthorsSeeder::class,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;executar-seeders&quot; tabindex=&quot;-1&quot;&gt;Executar Seeders&lt;/h4&gt;
&lt;p&gt;Executar tots els seeders:&lt;br /&gt;
Executar un seeder específic:&lt;br /&gt;
Reiniciar les migracions i executar els seeders:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan db:seed
php artisan db:seed --class=BooksSeeder
php artisan migrate:fresh --seed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;factories&quot; tabindex=&quot;-1&quot;&gt;Factories&lt;/h3&gt;
&lt;p&gt;Els factories permeten crear grans quantitats de dades de manera ràpida i dinàmica mitjançant Faker.&lt;/p&gt;
&lt;h4 id=&quot;crear-un-factory&quot; tabindex=&quot;-1&quot;&gt;Crear un Factory&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:factory NomFactory -m Model
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per exemple, per al model Author:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace Database&#92;Factories;

use App&#92;Models&#92;Author;
use Illuminate&#92;Database&#92;Eloquent&#92;Factories&#92;Factory;

class AuthorFactory extends Factory
{
protected $model = Author::class;

    public function definition()
    {
        return [
            &#39;name&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;name,
            &#39;birth_year&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;year,
        ];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;utilitzar-un-factory&quot; tabindex=&quot;-1&quot;&gt;Utilitzar un Factory&lt;/h4&gt;
&lt;p&gt;Per generar dades amb un factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use App&#92;Models&#92;Author;

// Crear un únic autor
Author::factory()-&amp;gt;create();

// Crear diversos autors
Author::factory()-&amp;gt;count(10)-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;integracio-amb-seeders&quot; tabindex=&quot;-1&quot;&gt;Integració amb Seeders&lt;/h4&gt;
&lt;p&gt;Combina factories amb seeders per generar dades dinàmiques:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class AuthorsSeeder extends Seeder
{
    public function run()
    {
        Author::factory()-&amp;gt;count(10)-&amp;gt;create();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;dades-relacionades&quot; tabindex=&quot;-1&quot;&gt;Dades Relacionades&lt;/h4&gt;
&lt;p&gt;Els factories permeten generar dades relacionades. Per exemple, llibres amb els seus autors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BooksSeeder extends Seeder
{
    public function run()
    {
        $authors = Author::factory()-&amp;gt;count(5)-&amp;gt;create();

        $authors-&amp;gt;each(function ($author) {
            Book::factory()-&amp;gt;count(2)-&amp;gt;create([&#39;author_id&#39; =&amp;gt; $author-&amp;gt;id]);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exemples-avancats&quot; tabindex=&quot;-1&quot;&gt;Exemples Avançats&lt;/h4&gt;
&lt;p&gt;Podem cercar com construir factories més complexes a la &lt;a href=&quot;https://fakerphp.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;utilitzar-factories-per-relacions&quot; tabindex=&quot;-1&quot;&gt;Utilitzar Factories per Relacions&lt;/h5&gt;
&lt;p&gt;Definir relacions dins d’un factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BookFactory extends Factory
{
    public function definition()
    {
        return [
            &#39;title&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;sentence,
            &#39;author_id&#39; =&amp;gt; Author::factory(),
        ];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Llançar el factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Book::factory()-&amp;gt;count(10)-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;factories-amb-estats&quot; tabindex=&quot;-1&quot;&gt;Factories amb Estats&lt;/h5&gt;
&lt;p&gt;Els estats permeten definir configuracions personalitzades per un model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BookFactory extends Factory
{
    public function withDiscount()
    {
        return $this-&amp;gt;state([
        &#39;price&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;numberBetween(5, 10),
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ús d&#39;un estat:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Book::factory()-&amp;gt;withDiscount()-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;avantatges-dels-factories&quot; tabindex=&quot;-1&quot;&gt;Avantatges dels Factories&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Faciliten la generació massiva de dades.&lt;/li&gt;
&lt;li&gt;Simplifiquen les proves i el desenvolupament amb dades fictícies realistes.&lt;/li&gt;
&lt;li&gt;Redueixen el temps d&#39;inicialització de les aplicacions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/6-seeders-i-factories-en-laravel/" >
        </entry>
        <entry>
            <title>
                5. Laravel Eloquent
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/5-laravel-eloquent/</id>
            <content type="html">
                &lt;p&gt;Eloquent és l&#39;ORM (Object-Relational Mapping) de Laravel. Proporciona una interfície senzilla i elegant per treballar amb bases de dades relacionals mitjançant models.&lt;/p&gt;
&lt;h3 id=&quot;strong-definicio-de-models-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Definició de Models&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Els models es defineixen dins de la carpeta &lt;code&gt;app/Models&lt;/code&gt; i es poden crear mitjançant Artisan:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:model Movie
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exemple-basic&quot; tabindex=&quot;-1&quot;&gt;Exemple bàsic:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace App&#92;Models;

use Illuminate&#92;Database&#92;Eloquent&#92;Model;

class Movie extends Model
{
    // Taula associada al model
    protected $table = &#39;movies&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per defecte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El model s&#39;associa a una taula plural (&lt;code&gt;movies&lt;/code&gt; per al model &lt;code&gt;Movie&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Utilitza &lt;code&gt;id&lt;/code&gt; com a clau primària.&lt;/li&gt;
&lt;li&gt;Assumeix l&#39;ús de camps &lt;code&gt;created_at&lt;/code&gt; i &lt;code&gt;updated_at&lt;/code&gt; gestionats automàticament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;strong-us-basic-d-un-model-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Ús bàsic d&#39;un model&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;recuperar-dades&quot; tabindex=&quot;-1&quot;&gt;Recuperar dades:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tots els registres:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movies = Movie::all();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Registres filtrats:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movies = Movie::where(&#39;rating&#39;, &#39;&amp;gt;&#39;, 4)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Registre únic:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = Movie::findOrFail($id);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;inserir-dades&quot; tabindex=&quot;-1&quot;&gt;Inserir dades:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = new Movie();
$movie-&amp;gt;title = &amp;quot;Inception&amp;quot;;
$movie-&amp;gt;director = &amp;quot;Christopher Nolan&amp;quot;;
$movie-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;actualitzar-dades&quot; tabindex=&quot;-1&quot;&gt;Actualitzar dades:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = Movie::find($id);
$movie-&amp;gt;title = &amp;quot;Updated Title&amp;quot;;
$movie-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;esborrar-dades&quot; tabindex=&quot;-1&quot;&gt;Esborrar dades:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = Movie::find($id);
$movie-&amp;gt;delete();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;propietats-comuns-dels-models-eloquent&quot; tabindex=&quot;-1&quot;&gt;Propietats comuns dels Models Eloquent&lt;/h3&gt;
&lt;p&gt;Els models d&#39;Eloquent ofereixen diverses propietats que permeten configurar el comportament de la interacció amb la base de dades. A continuació es detallen les més importants:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace App&#92;Models;

use Illuminate&#92;Database&#92;Eloquent&#92;Model;

class Example extends Model
{
    // Especifica el nom de la taula si no segueix la convenció per defecte
    protected $table = &#39;custom_table_name&#39;;

    // Defineix la clau primària de la taula
    protected $primaryKey = &#39;custom_id&#39;;

    // Indica si la clau primària és autoincremental
    public $incrementing = false;

    // Especifica el tipus de la clau primària (per exemple, string si no és integer)
    protected $keyType = &#39;string&#39;;

    // Defineix quins camps poden ser assignats massivament
    protected $fillable = [&#39;name&#39;, &#39;email&#39;, &#39;password&#39;];

    // Defineix quins camps no poden ser assignats massivament
    protected $guarded = [&#39;is_admin&#39;];

    // Oculta camps quan es converteix a JSON o arrays
    protected $hidden = [&#39;password&#39;, &#39;remember_token&#39;];

    // Defineix quins camps són visibles quan es converteix a JSON o arrays
    protected $visible = [&#39;name&#39;, &#39;email&#39;];

    // Transformació automàtica de camps a un tipus específic
    protected $casts = [
        &#39;is_admin&#39; =&amp;gt; &#39;boolean&#39;,
        &#39;settings&#39; =&amp;gt; &#39;array&#39;,
    ];

    // Indica si la taula té els camps `created_at` i `updated_at`
    public $timestamps = true;

    // Defineix la connexió a la base de dades
    protected $connection = &#39;mysql&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-relacions-en-eloquent-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Relacions en Eloquent&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;1-strong-un-a-un-one-to-one-strong&quot; tabindex=&quot;-1&quot;&gt;1. &lt;strong&gt;Un a un (One-to-One):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un usuari té un perfil:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class User extends Model
{
    public function profile()
    {
        return $this-&amp;gt;hasOneclass;
    }
}

$user = User::find(1);
$profile = $user-&amp;gt;profile;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;2-strong-un-a-molts-one-to-many-strong&quot; tabindex=&quot;-1&quot;&gt;2. &lt;strong&gt;Un a molts (One-to-Many):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un autor té molts llibres:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class Author extends Model
{
    public function books()
    {
        return $this-&amp;gt;hasManyclass;
    }
}

$author = Author::find(1);
$books = $author-&amp;gt;books;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;3-strong-molts-a-molts-many-to-many-strong&quot; tabindex=&quot;-1&quot;&gt;3. &lt;strong&gt;Molts a molts (Many-to-Many):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un usuari té molts rols:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class User extends Model
{
    public function roles()
    {
        return $this-&amp;gt;belongsToManyclass;
    }
}

$user = User::find(1);
$roles = $user-&amp;gt;roles;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;4-strong-has-many-through-relacions-transitives-strong&quot; tabindex=&quot;-1&quot;&gt;4. &lt;strong&gt;Has Many Through (Relacions transitives):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Permet accedir a dades relacionades a través d&#39;un altre model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class Country extends Model
{
    public function posts()
    {
        return $this-&amp;gt;hasManyThroughclass, User::class;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-eager-loading-carrega-eficient-de-relacions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Eager Loading (Càrrega eficient de relacions)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Per evitar múltiples consultes a la base de dades, pots carregar relacions amb &lt;code&gt;with&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$authors = Author::with(&#39;books&#39;)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-col-leccions-i-agrupacions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Col·leccions i Agrupacions&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Eloquent retorna col·leccions per defecte, que permeten treballar amb &lt;a href=&quot;https://laravel.com/docs/11.x/eloquent-collections#available-methods&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;mètodes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;strong-mutators-i-accessors-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Mutators i Accessors&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Els &lt;strong&gt;mutators&lt;/strong&gt; permeten transformar dades abans de guardar-les, i els &lt;strong&gt;accessors&lt;/strong&gt; les transformen en recuperar-les.&lt;/p&gt;
&lt;h4 id=&quot;exemple&quot; tabindex=&quot;-1&quot;&gt;Exemple:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class User extends Model
{
    // Accessor
    public function getFullNameAttribute()
    {
        return &amp;quot;{$this-&amp;gt;first_name} {$this-&amp;gt;last_name}&amp;quot;;
    }

    // Mutator
    public function setPasswordAttribute($value)
    {
        $this-&amp;gt;attributes[&#39;password&#39;] = bcrypt($value);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;us&quot; tabindex=&quot;-1&quot;&gt;Ús:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$user = User::find(1);
$fullName = $user-&amp;gt;full_name;

$user-&amp;gt;password = &#39;new_password&#39;;
$user-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;strong-paginacio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Paginació&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Laravel facilita la paginació:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movies = Movie::paginate(10);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En la vista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;{{ $movies-&amp;gt;links() }}
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/5-laravel-eloquent/" >
        </entry>
        <entry>
            <title>
                4. Laravel Query Builder
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/4-laravel-query-builder/</id>
            <content type="html">
                &lt;p&gt;El &lt;strong&gt;Query Builder&lt;/strong&gt; de Laravel proporciona una interfície fluida per construir i executar consultes de bases de dades. Permet treballar amb diverses bases de dades de manera senzilla sense escriure SQL brut.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;strong-exemples-d-us-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Exemples d&#39;ús&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;obtenir-tots-els-registres&quot; tabindex=&quot;-1&quot;&gt;Obtenir tots els registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;filtrar-registres&quot; tabindex=&quot;-1&quot;&gt;Filtrar registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;where(&#39;active&#39;, 1)
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;seleccionar-columnes-especifiques&quot; tabindex=&quot;-1&quot;&gt;Seleccionar columnes específiques:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;select(&#39;name&#39;, &#39;email&#39;)
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;ordenar-resultats&quot; tabindex=&quot;-1&quot;&gt;Ordenar resultats:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;orderBy(&#39;name&#39;, &#39;asc&#39;)
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;comptar-registres&quot; tabindex=&quot;-1&quot;&gt;Comptar registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$count = DB::table(&#39;users&#39;)-&amp;gt;count();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;consultes-amb-agregats&quot; tabindex=&quot;-1&quot;&gt;Consultes amb agregats:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$maxSalary = DB::table(&#39;employees&#39;)-&amp;gt;max(&#39;salary&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;consultes-amb-subconsultes&quot; tabindex=&quot;-1&quot;&gt;Consultes amb subconsultes:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;whereExists(function ($query) {
        $query-&amp;gt;selectraw(1)
              -&amp;gt;from(&#39;orders&#39;)
              -&amp;gt;whereColumn(&#39;orders.user_id&#39;, &#39;users.id&#39;);
    })
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;unions&quot; tabindex=&quot;-1&quot;&gt;Unions:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$first = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;type&#39;, &#39;admin&#39;);
$second = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;type&#39;, &#39;customer&#39;);

$users = $first-&amp;gt;union($second)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;inserir-un-registre&quot; tabindex=&quot;-1&quot;&gt;Inserir un registre:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)-&amp;gt;insert([
    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,
    &#39;email&#39; =&amp;gt; &#39;john@example.com&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;actualitzar-un-registre&quot; tabindex=&quot;-1&quot;&gt;Actualitzar un registre:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)
    -&amp;gt;where(&#39;id&#39;, 1)
    -&amp;gt;update([&#39;name&#39; =&amp;gt; &#39;Updated Name&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;esborrar-un-registre&quot; tabindex=&quot;-1&quot;&gt;Esborrar un registre:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)
    -&amp;gt;where(&#39;id&#39;, 1)
    -&amp;gt;delete();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;esborrar-tots-els-registres&quot; tabindex=&quot;-1&quot;&gt;Esborrar tots els registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)-&amp;gt;truncate();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-avantatges-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Avantatges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;El Query Builder és ideal per a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consultes personalitzades on el rendiment és una prioritat.&lt;/li&gt;
&lt;li&gt;Consultes complexes que no es poden expressar fàcilment amb Eloquent.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/4-laravel-query-builder/" >
        </entry>
        <entry>
            <title>
                3. Migracions en Laravel
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/3-migracions-en-laravel/</id>
            <content type="html">
                &lt;h3 id=&quot;strong-introduccio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Introducció&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Les migracions són un sistema de control de versions per a bases de dades que permet treballar de manera col·laborativa, mantenint un històric dels canvis realitzats en l&#39;esquema. Amb migracions, pots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear, modificar i esborrar taules.&lt;/li&gt;
&lt;li&gt;Gestionar l&#39;esquema de manera programàtica utilitzant Artisan i el &lt;strong&gt;Schema Builder&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Revertir canvis mitjançant &lt;code&gt;rollback&lt;/code&gt; o tornar a aplicar tots els canvis amb &lt;code&gt;refresh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Laravel proporciona un conjunt d&#39;eines intuïtives per gestionar migracions, com Artisan i la classe &lt;strong&gt;Schema&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;strong-estructura-de-les-migracions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Estructura de les migracions&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Totes les migracions es guarden a la carpeta &lt;code&gt;database/migrations&lt;/code&gt; i segueixen una estructura predefinida amb dos mètodes principals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;up&lt;/code&gt;&lt;/strong&gt;: Defineix les operacions que s&#39;han d&#39;aplicar a la base de dades (crear taules, afegir columnes, etc.).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;down&lt;/code&gt;&lt;/strong&gt;: Defineix les operacions inverses per revertir els canvis aplicats per &lt;code&gt;up&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemple bàsic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::create(&#39;usuarios&#39;, function (Blueprint $tabla) {
        $tabla-&amp;gt;id();
        $tabla-&amp;gt;string(&#39;nombre&#39;);
        $tabla-&amp;gt;string(&#39;email&#39;)-&amp;gt;unique();
        $tabla-&amp;gt;timestamps();
    });
}

public function down()
{
    Schema::dropIfExists(&#39;usuarios&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per defecte, Laravel afegeix un camp autonumèric &lt;code&gt;id&lt;/code&gt; i dues columnes &lt;code&gt;timestamps&lt;/code&gt; (&lt;code&gt;created_at&lt;/code&gt; i &lt;code&gt;updated_at&lt;/code&gt;) gestionades automàticament.&lt;/p&gt;
&lt;h3 id=&quot;strong-crear-una-migracio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear una migració&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Utilitza Artisan per crear una nova migració:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration nom_migracio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest comando genera un fitxer amb un nom que inclou un &lt;strong&gt;timestamp&lt;/strong&gt; per assegurar l&#39;ordre cronològic.&lt;/p&gt;
&lt;h3 id=&quot;strong-exemples-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Exemples&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crear una taula:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration crear_tabla_usuarios --create=usuarios
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Modificar una taula existent:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration afegir_camp_a_usuarios --table=usuarios
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Laravel pot inferir accions del nom de la migració gràcies a la classe &lt;strong&gt;TableGuesser&lt;/strong&gt;. Per exemple, si el nom conté &lt;code&gt;create&lt;/code&gt; o &lt;code&gt;to&lt;/code&gt;, Artisan deduirà si és per crear o modificar taules.&lt;/p&gt;
&lt;h3 id=&quot;strong-schema-builder-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Schema Builder&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;La classe &lt;strong&gt;Schema&lt;/strong&gt; és el nucli per definir i modificar l&#39;esquema de les bases de dades. Inclou constructors per crear, modificar i eliminar taules i columnes.&lt;/p&gt;
&lt;h4 id=&quot;strong-crear-una-taula-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear una taula&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::create(&#39;users&#39;, function (Blueprint $table) {
    $table-&amp;gt;id();
    $table-&amp;gt;string(&#39;username&#39;, 32);
    $table-&amp;gt;timestamps();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-eliminar-una-taula-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Eliminar una taula&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::dropIfExists(&#39;users&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-afegir-columnes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Afegir columnes&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::table(&#39;usuarios&#39;, function (Blueprint $table) {
    $table-&amp;gt;string(&#39;telefono&#39;)-&amp;gt;after(&#39;email&#39;)-&amp;gt;nullable();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-eliminar-columnes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Eliminar columnes&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::table(&#39;usuarios&#39;, function (Blueprint $table) {
    $table-&amp;gt;dropColumn(&#39;telefono&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-tipus-de-columnes-disponibles-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Tipus de columnes disponibles&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Laravel ofereix una àmplia varietat de tipus de columnes per satisfer diferents &lt;a href=&quot;https://laravel.com/docs/11.x/migrations#available-column-types&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;necessitats&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;strong-indexs-i-claus-foranies-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Índexs i claus forànies&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;strong-crear-indexs-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear índexs&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$table-&amp;gt;unique(&#39;email&#39;);
$table-&amp;gt;index(&#39;state&#39;);
$table-&amp;gt;primary([&#39;first_name&#39;, &#39;last_name&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-definir-claus-foranies-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Definir claus forànies&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$table-&amp;gt;foreignId(&#39;user_id&#39;)-&amp;gt;constrained()-&amp;gt;onDelete(&#39;cascade&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-executar-i-revertir-migracions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Executar i revertir migracions&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Executar migracions pendents:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Revertir l&#39;última migració:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Revertir totes les migracions:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:reset
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Refrescar totes les migracions:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:refresh
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Comprovar l&#39;estat de les migracions:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest conjunt de comandes permet un control complet sobre l&#39;estat de les migracions durant el desenvolupament.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/3-migracions-en-laravel/" >
        </entry>
        <entry>
            <title>
                2. Configuració inicial
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/2-configuracio-inicial/</id>
            <content type="html">
                &lt;p&gt;Laravel suporta diversos motors de bases de dades com MySQL, PostgreSQL, SQLite i SQL Server. La configuració principal es fa al fitxer &lt;code&gt;.env&lt;/code&gt; i &lt;code&gt;config/database.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemple de configuració al fitxer &lt;code&gt;.env&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-env&quot;&gt;DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=nom_base_de_dades
DB_USERNAME=usuari
DB_PASSWORD=contrasenya
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Comprovació de connexió:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Després de configurar el &lt;code&gt;.env&lt;/code&gt;, utilitza el comandament:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest comandament confirma si Laravel pot connectar-se a la base de dades configurada.&lt;/p&gt;
&lt;h4 id=&quot;strong-deteccio-de-problemes-comuns-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Detecció de problemes comuns&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Comprovar que l&#39;extensió del driver de la base de dades (com &lt;code&gt;pdo_mysql&lt;/code&gt; o &lt;code&gt;pdo_pgsql&lt;/code&gt;) estigui habilitada al &lt;code&gt;php.ini&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Utilitzar &lt;code&gt;php artisan config:clear&lt;/code&gt; per esborrar la memòria cau de configuracions si els canvis al &lt;code&gt;.env&lt;/code&gt; no es reflecteixen.&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/2-configuracio-inicial/" >
        </entry>
        <entry>
            <title>
                1. Introducció
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/1-introduccio/</id>
            <content type="html">
                &lt;p&gt;Laravel és un framework PHP modern que simplifica el desenvolupament d&#39;aplicacions web, incloent-hi la gestió de bases de dades. La integració amb Eloquent, el seu ORM (Object-Relational Mapping), permet treballar amb bases de dades de forma intuïtiva i eficient.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/8-gestio-de-dades-amb-laravel/1-introduccio/" >
        </entry>
        <entry>
            <title>
                7. Web Scraping
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/7-web-scraping/</id>
            <content type="html">
                &lt;p&gt;Consisteix a navegar a una pàgina web i extraure informació automàticament, a partir del codi HTML generat, i organitzar la informació pública disponible en Internet.&lt;br /&gt;
Aquesta pràctica requereix l&#39;ús d&#39;una llibreria que facilite la descàrrega de la informació desitjada imitant la interacció d&#39;un navegador web. Aquest &amp;quot;robot&amp;quot; pot accedir a diverses pàgines simultàniament.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question] &amp;quot;¿És legal?&amp;quot;&lt;br /&gt;
Si el lloc web indica que té el contingut protegit per drets d&#39;autor o en les normes d&#39;accés via usuari/contrasenya ens avisa de la seua prohibició, estaríem incorrent en un delicte.&lt;br /&gt;
És recomanable estudiar l&#39;arxiu &lt;code&gt;robots.txt&lt;/code&gt; que es troba en l&#39;arrel de cada lloc web.&lt;br /&gt;
Més informació en l&#39;article &lt;a href=&quot;https://ichi.pro/es/el-manual-completo-para-el-web-scraping-legal-y-etico-en-2021-69178542830388&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El manual complet per al web scraping legal i ètic en 2021&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;goutte&quot; tabindex=&quot;-1&quot;&gt;Goutte&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FriendsOfPHP/Goutte&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Goutte&lt;/a&gt; és un senzill client HTTP per a PHP creat específicament per a fer web scraping. Ho va desenvolupar el mateix autor del framework &lt;em&gt;Symfony&lt;/em&gt; i ofereix un API senzilla per a extraure dades de les respostes HTML/XML dels llocs web.&lt;/p&gt;
&lt;p&gt;Els components principals que abstrau &lt;em&gt;Goutte&lt;/em&gt; sobre &lt;em&gt;Symfony&lt;/em&gt; són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BrowserKit&lt;/code&gt;: simula el comportament d&#39;un navegador web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CssSelector&lt;/code&gt;: tradueix consultes CSS en consultes XPath.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DomCrawler&lt;/code&gt;: facilita l&#39;ús del DOM i XPath.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per a poder utilitzar &lt;em&gt;Goutte&lt;/em&gt; en el nostre projecte, executarem el següent comando en el terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require fabpot/goutte
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;goutte-con-selectores-css&quot; tabindex=&quot;-1&quot;&gt;Goutte con selectores CSS&lt;/h3&gt;
&lt;p&gt;A continuació farem un exemple molt senzill utilitzant els selectors CSS, extraient informació de la web &lt;code&gt;https://books.toscrape.com/&lt;/code&gt;, la qual és una pàgina per a proves que no rebutjarà les nostres peticions.&lt;/p&gt;
&lt;p&gt;Després de crear un client amb &lt;em&gt;Goutte&lt;/em&gt;, hem de realitzar un petició a una URL. Amb la resposta obtinguda, podem utilitzar el mètode &lt;code&gt;filter&lt;/code&gt; per a indicar-li la ruta CSS que volem recórrer i iterar sobre els resultats mitjançant una funció anònima. Una vegada estem dins d&#39;un determinat node, el mètode &lt;code&gt;text()&lt;/code&gt; ens retornarà el contingut del propi node.&lt;/p&gt;
&lt;p&gt;En concret, ficarem en un array associatiu el títol i el preu de tots els llibres de la categoria &lt;em&gt;Classics&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;../vendor/autoload.php&#39;;

$httpClient = new &#92;Goutte&#92;Client();
$response = $httpClient-&amp;gt;request(&#39;GET&#39;, &#39;https://books.toscrape.com/catalogue/category/books/classics_6/index.html&#39;);
// colocamos los precios en un array
$precios = [];
$response-&amp;gt;filter(&#39;.row li article div.product_price p.price_color&#39;)-&amp;gt;each(
    // le pasamos $precios por referencia para poder editarla dentro del closure
    function ($node) use (&amp;amp;$precios) {
        $precios[] = $node-&amp;gt;text();
    }
);

// colocamos el nombre y el precio en un array asociativo
$contadorPrecios = 0;
$libros = [];
$response-&amp;gt;filter(&#39;.row li article h3 a&#39;)-&amp;gt;each(
    function ($node) use ($precios, &amp;amp;$contadorPrecios, &amp;amp;$libros) {
        $libros[$node-&amp;gt;text()] = $precios[$contadorPrecios];
        $contadorPrecios++;
    }
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crawler&quot; tabindex=&quot;-1&quot;&gt;Crawler&lt;/h3&gt;
&lt;p&gt;Un cas molt comú és obtindre la informació d&#39;una pàgina que té els resultats paginados, de manera que anem recorrent els enllaços i accedint a cadascun dels resultats.&lt;/p&gt;
&lt;p&gt;En aquest cas agafarem tots els preus dels llibres de fantasia, i els sumarem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;../vendor/autoload.php&#39;;

use Goutte&#92;Client;
use Symfony&#92;Component&#92;HttpClient&#92;HttpClient;

$client = new Clientcreate([&#39;timeout&#39; =&amp;gt; 60]);
$crawler = $client-&amp;gt;request(&#39;GET&#39;, &#39;https://books.toscrape.com/catalogue/category/books/fantasy_19/index.html&#39;);

$salir = false;

$precios = [];
while (!$salir) {
    $crawler-&amp;gt;filter(&#39;.row li article div.product_price p.price_color&#39;)-&amp;gt;each(
        function ($node) use (&amp;amp;$precios) {
            $texto = $node-&amp;gt;text();
            $cantidad = substr($texto, 2); // Le quitamos las libras ¿2 posiciones?
            $precios[] = floatval($cantidad);
        }
    );

    $enlace = $crawler-&amp;gt;selectLink(&#39;next&#39;);
    if ($enlace-&amp;gt;count() != 0) {
        // el enlace next existe
        $sigPag = $crawler-&amp;gt;selectLink(&#39;next&#39;)-&amp;gt;link();
        $crawler = $client-&amp;gt;click($sigPag); // hacemos click
    } else {
        // ya no hay enlace next
        $salir = true;
    }
}

$precioTotal = array_sum($precios);
echo $precioTotal;
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/7-web-scraping/" >
        </entry>
        <entry>
            <title>
                6. Accès a fitxers
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/6-acces-a-fitxers/</id>
            <content type="html">
                &lt;p&gt;Gràcies a la funció fopen() des de PHP podem obrir arxius que es troben en els nostres servidor o una URL.&lt;/p&gt;
&lt;p&gt;A aquesta funció cal passar-li 2 paràmetres; el nom de l&#39;arxiu que volem obrir i la manera en què s&#39;obrirà&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$fp = fopen(&amp;quot;miarchivo.txt&amp;quot;, &amp;quot;r&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moltes vegades no podem obrir l&#39;arxiu perquè aquest no es troba o no tenim accés a ell, per això és recomanable comprovar que podem fer-ho&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (!$fp = fopen(&amp;quot;miarchivo.txt&amp;quot;, &amp;quot;r&amp;quot;)){
    echo &amp;quot;No se ha podido abrir el archivo&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;maneres-d-obertura-de-fitxers&quot; tabindex=&quot;-1&quot;&gt;Maneres d&#39;obertura de fitxers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Manera lectura. Punter al principi de l&#39;arxiu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r+&lt;/code&gt;: Obertura per a lectura i escriptura. Punter al principi de l&#39;arxiu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;: Obertura per a escriptura. Punter al principi de l&#39;arxiu i el sobreescriu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w+&lt;/code&gt;: Obertura per a lectura i escriptura. Punter al principi de l&#39;arxiu i el sobreescriu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: Obertura per a escriptura. Punter al final de l&#39;arxiu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a+&lt;/code&gt;: Obertura per a lectura i escriptura. Punter al final de l&#39;arxiu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: Creació i obertura per a només escriptura. Punter al principi de l&#39;arxiu. Si l&#39;arxiu ja existeix donarà error E_*WARNING. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x+&lt;/code&gt;: Creació i obertura per a lectura i escriptura. Mateix comportament que x.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: Obertura per a escriptura. Si no existeix es crea. Si existeix no se sobreescriu ni dona cap error. Punter al principi de l&#39;arxiu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c+&lt;/code&gt;: Obertura per a lectura i escriptura. Mateix comportament que C.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: Quan es treballa amb arxius binaris com *jpg, pdf, *png i altres. Se sol col·locar al final de la manera, és a dir *rb, r+b, x+b, *wb...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;operacions-amb-arxius&quot; tabindex=&quot;-1&quot;&gt;Operacions amb arxius&lt;/h3&gt;
&lt;p&gt;Per a poder &lt;strong&gt;llegir&lt;/strong&gt; un arxiu necessitem usar la funció &lt;em&gt;fread()&lt;/em&gt; de &lt;em&gt;PHP&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;//  ▒▒▒▒▒▒▒▒ Abriendo un archivo y leyendo su contenido ▒▒▒▒▒▒▒▒

$file = &amp;quot;miarchivo.txt&amp;quot;;
$fp = fopen($file, &amp;quot;r&amp;quot;);

// filesize() nos devuelve el tamaño del archivo en cuestión
$contents = fread($fp, filesize($file));

// Cerramos la conexión con el archivo
fclose();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el que volem és &lt;strong&gt;escriure&lt;/strong&gt; en un arxiu, haurem de fer ús de la funció &lt;em&gt;fwrite()&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;//  ▒▒▒▒▒▒▒▒ Escribiendo en un archivo ▒▒▒▒▒▒▒▒

$file = &amp;quot;miarchivo.txt&amp;quot;;
$texto = &amp;quot;Hola que tal&amp;quot;;

$fp = fopen($file, &amp;quot;w&amp;quot;);

fwrite($fp, $texto);
fclose($fp);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;informacio-d-un-fitxer&quot; tabindex=&quot;-1&quot;&gt;Informació d&#39;un fitxer&lt;/h3&gt;
&lt;p&gt;Amb PHP i el seu mètode &lt;em&gt;stat()&lt;/em&gt; podem obtindre informació sobre els arxius que li indiquem. Aquest mètode retorna fins a un total de 12 elements amb &lt;em&gt;informació&lt;/em&gt; sobre el nostre arxiu.&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;em&gt;dev&lt;/em&gt;	 número de dispositiu&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ino&lt;/em&gt;	 número d&#39;i-node&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mode&lt;/em&gt;	 manera de protecció de l&#39;i-node&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nlink&lt;/em&gt;	 nombre d&#39;enllaços&lt;/li&gt;
&lt;li&gt;&lt;em&gt;uid&lt;/em&gt;	 ID d&#39;usuari del propietari&lt;/li&gt;
&lt;li&gt;&lt;em&gt;gid&lt;/em&gt;	 ID de grup del propietari&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rdev&lt;/em&gt;	 tipus de dispositiu, si és un dispositiu i-node&lt;/li&gt;
&lt;li&gt;&lt;em&gt;size&lt;/em&gt;	 grandària en bytes&lt;/li&gt;
&lt;li&gt;&lt;em&gt;atime&lt;/em&gt;	 moment de l&#39;últim accés (temps Unix)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mtime&lt;/em&gt;	 moment de l&#39;última modificació (temps Unix)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ctime&lt;/em&gt;	 moment de l&#39;última modificació de l&#39;i-node (temps Unix)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;blksize&lt;/em&gt;	 grandària del bloc E/S del sistema de fitxers&lt;/li&gt;
&lt;li&gt;&lt;em&gt;blocks&lt;/em&gt;	 nombre de blocs de 512 bytes assignats&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Uns exemples...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

//  ▒▒▒▒▒▒▒▒ Información del archivo ▒▒▒▒▒▒▒▒

$file = &amp;quot;miarchivo.txt&amp;quot;;
$texto = &amp;quot;Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.&amp;quot;;

$fp = fopen($file, &amp;quot;w&amp;quot;);
fwrite($fp, $texto);

$datos = stat($file);

echo $datos[3] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Número de enlaces, 1
echo $datos[7] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Tamaño en bytes, 85
echo $datos[8] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Momento de último acceso, 1444138104
echo $datos[9] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Momento de última modificación, 1444138251

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dona una ullada a &lt;a href=&quot;https://www.php.net/manual/es/book.dir.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;les funcions de directoris&lt;/a&gt; que té &lt;strong&gt;PHP&lt;/strong&gt;, és molt interessant.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/6-acces-a-fitxers/" >
        </entry>
        <entry>
            <title>
                5. QueryBuilder
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/5-query-builder/</id>
            <content type="html">
                &lt;p&gt;Un Query Builder (Constructor de Consultes) és una eina o classe que facilita la creació, execució i manipulació de consultes SQL en un programa. L&#39;objectiu principal és proporcionar una interfície més intuïtiva i segura per interactuar amb bases de dades, sense haver d&#39;escriure consultes SQL en brut.&lt;/p&gt;
&lt;p&gt;A continuació, detallo algunes de les principals avantatges i característiques d&#39;un Query Builder com el que has compartit anteriorment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Abstracció de la Base de Dades:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;El Query Builder proporciona una capa d&#39;abstracció que permet interactuar amb diferents tipus de bases de dades (MySQL, PostgreSQL, SQLite, etc.) sense canviar el codi de la teva aplicació. Això facilita la portabilitat i l&#39;escalabilitat del codi.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Seguretat:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Prevé injeccions SQL: Gràcies a l&#39;ús de sentències preparades i enllaçament de paràmetres, el Query Builder ajuda a prevenir atacs d&#39;injecció SQL, una de les amenaces més comunes en desenvolupament web.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Sintaxi Més Neta i Més Fàcil:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Els Query Builders solen proporcionar una sintaxi més neta i fàcil d&#39;entendre que les cadenes SQL pures. Això fa que el codi sigui més llegible i fàcil de mantenir.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Reutilització de Codi:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Les funcions del Query Builder es poden reutilitzar a tot el projecte, reduint la duplicació de codi i facilitant el manteniment.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Flexibilitat:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Permet realitzar consultes complexes amb una sintaxi simplificada, facilitant l&#39;adaptació del codi a canvis en els requeriments de l&#39;aplicació.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Desenvolupament Més Ràpid:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Ajuda a accelerar el procés de desenvolupament, ja que els desenvolupadors no necessiten recordar la sintaxi SQL exacta per a cada tipus de base de dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Fàcil de Depurar:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;El codi generat pel Query Builder és més fàcil de depurar en comparació amb les llargues cadenes SQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Suport per a Operacions CRUD:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Els Query Builders solen incloure suport integrat per a operacions CRUD (Crear, Llegir, Actualitzar, Esborrar), fent més fàcil la manipulació de dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En resum, un Query Builder serveix per simplificar la interacció amb bases de dades, proporcionant una interfície més segura, neta i fàcil d&#39;utilitzar que les cadenes SQL pures. Ajuda a accelerar el desenvolupament, facilita el manteniment i millora la seguretat de l&#39;aplicació.&lt;br /&gt;
Ací en tenim un exemple de construcció casera:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace BatBook;

use PDO;

class QueryBuilder
{
    // Aquesta funció serveix per a construir i executar consultes SQL de tipus SELECT.
    // Es pot filtrar per valors, limitar la quantitat de resultats i establir un offset.
    public static function sql($class, $values=null, $limit = null, $offset = null)
    {
        // Obté el nom de la taula a partir de la propietat estàtica $nameTable de la classe passada com argument.
        $table = $class::$nameTable;
        
        // Obté una connexió a la base de dades.
        $conn = Connection::get();
        
        // Construeix la consulta SQL bàsica.
        $sql = &amp;quot;SELECT * FROM $table&amp;quot;;
        
        // Afegeix condicions WHERE si es proporcionen valors per a filtrar.
        if ($values) {
            $sql .= &amp;quot; WHERE &amp;quot;;
            foreach (array_keys($values) as $key =&amp;gt; $id) {
                if ($key != 0) {
                    $sql .= &amp;quot; AND $id=:$id&amp;quot;;
                } else {
                    $sql .= &amp;quot;$id=:$id&amp;quot;;
                }
            }
        }
        
        // Afegeix les clàusules LIMIT i OFFSET si són necessàries.
        if (isset($limit) &amp;amp;&amp;amp; isset($offset)) {
            $sql .= &amp;quot; LIMIT $limit OFFSET $offset&amp;quot;;
        }
        
        // Prepara la sentència SQL.
        $sentence = $conn-&amp;gt;prepare($sql);
        
        // Enllaça els valors a la sentència.
        foreach ($values??[] as $key =&amp;gt; $value) {
            $sentence-&amp;gt;bindValue(&amp;quot;:$key&amp;quot;, $value);
        }
        
        // Estableix el mode de recuperació a objectes de la classe especificada.
        $sentence -&amp;gt; setFetchModeFETCH_CLASS | PDO::FETCH_PROPS_LATE , $class;
        
        // Executa la consulta.
        $sentence -&amp;gt; execute();
        
        // Retorna tots els resultats obtinguts.
        return  $sentence-&amp;gt;fetchAll();
    }

    // Aquesta funció serveix per a trobar una fila en una taula basant-se en el seu ID.
    public static function find($class, $id)
    {
        //TODO
    }

    // Aquesta funció serveix per a insertar una fila en una taula.
    public static function insert($class, $values)
    {
        $table = $class::$nameTable;
        $conn = Connection::get();
        $sql = &amp;quot;INSERT INTO $table (&amp;quot;;
        foreach (array_keys($values) as $key =&amp;gt; $id) {
            if ($key != 0) {
                $sql .= &#39;,&#39;.$id;
            } else {
                $sql .= $id;
            }
        }
        $sql .= &amp;quot;) VALUES (&amp;quot;;
        foreach (array_keys($values) as $key =&amp;gt; $id) {
            if ($key != 0) {
                $sql .= &#39;,:&#39;.$id;
            } else {
                $sql .= &#39;:&#39;.$id;
            }
        }
        $sql .= &amp;quot;)&amp;quot;;
        $sentence = $conn-&amp;gt;prepare($sql);
        foreach ($values as $key =&amp;gt; $value) {
            $sentence-&amp;gt;bindValue(&amp;quot;:$key&amp;quot;, $value);
        }
        $sentence -&amp;gt; execute();
        return $conn-&amp;gt;lastInsertId();
    }

    // Aquesta funció serveix per a actualitzar una fila en una taula.
    public static function update($class, $values, $id)
    {
        $table = $class::$nameTable;
        $conn = Connection::get();
        $sql = &amp;quot;UPDATE $table SET &amp;quot;;
        foreach (array_keys($values) as $key =&amp;gt; $value) {
            if ($key != 0) {
                $sql .= &#39;,&#39;.$value.&#39;=:&#39;.$value;
            } else {
                $sql .= $value.&#39;=:&#39;.$value;
            }
        }
        $sql .= &amp;quot; WHERE id=:id&amp;quot;;
        $sentence = $conn-&amp;gt;prepare($sql);
        foreach ($values as $key =&amp;gt; $value) {
            $sentence-&amp;gt;bindValue(&amp;quot;:$key&amp;quot;, $value);
        }
        $sentence-&amp;gt;bindValue(&amp;quot;:id&amp;quot;, $id);  
        $sentence -&amp;gt; execute();
        return $id;
    }

    // Aquesta funció serveix per a eliminar una fila en una taula basant-se en el seu ID.
    public static function delete($class, $id)
    {
        //TODO
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En resum, aquesta classe proporciona funcions estàtiques per a la construcció i execució de consultes SQL bàsiques com SELECT, INSERT, UPDATE, i DELETE. Utilitza l&#39;extensió PDO per a la connexió a bases de dades i la preparació de sentències SQL, la qual cosa ajuda a prevenir injeccions SQL. També permet la manipulació fàcil de files en bases de dades, tot retornant objectes de la classe especificada.&lt;/p&gt;
&lt;h3 id=&quot;respotes-d-error&quot; tabindex=&quot;-1&quot;&gt;Respotes d&#39;error&lt;/h3&gt;
&lt;p&gt;Quan no trebem un recurs en al nostra web, podem mostrar a l&#39;usuari una pàgina específica d&#39;error utilitzant la funció header. Una típica seria:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;!-- not-found.php --&amp;gt;
&amp;lt;?php http_response_code(404); ?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;No trobat&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;404 - Pàgina no trobada&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Ho sentim, la pàgina que estàs buscant no s&#39;ha pogut trobar.&amp;lt;/p&amp;gt;
    &amp;lt;a href=&amp;quot;index.php&amp;quot;&amp;gt;Torna a l&#39;inici&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I per a utilitzar-la:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
header(&amp;quot;Location: not-found.php&amp;quot;);
exit;
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/5-query-builder/" >
        </entry>
        <entry>
            <title>
                4. Login &amp; Password
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/4-login-and-password/</id>
            <content type="html">
                &lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/PHP%20Teoria%20Batoi/imagenes/06/06-login-password.gif&quot; alt=&quot;06-login-password.gif&quot; /&gt;&lt;br /&gt;
Per a manejar un sistema complet de login i password amb contrasenyes xifrades, necessitem un mètode que xifre aqueixos &lt;em&gt;strings&lt;/em&gt; que l&#39;usuari introdueix com a contrasenya; tant en el formulari de registre com en el del &lt;em&gt;login&lt;/em&gt;, ja que en codificar una contrasenya, després hem de descodificar-la per a comprovar que totes dues *contrasenyes (la que introdueix l&#39;usuari en el login i la que tenim en la base de dades) coincidisquen.&lt;/p&gt;
&lt;p&gt;Necessitem doncs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;password_hash()&lt;/code&gt; per a emmagatzemar la contrasenya en la base de dades a l&#39;hora de fer el &lt;em&gt;INSERT&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PASSWORD_DEFAULT&lt;/code&gt; emmagatzemem la contrasenya usant el mètode d&#39;encriptació bcrypt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt; emmagatzemem la contrasenya usant l&#39;algorisme CRYPT_BLOWFISH compatible amb crypt()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;password_verify()&lt;/code&gt; per a verificar l&#39;usuari i la contrasenya&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Almacenando usuario y password en BD ▒▒▒▒▒▒▒▒

    $usu = $_POST[&amp;quot;usuario&amp;quot;];
    $pas = $_POST[&amp;quot;password&amp;quot;];

    $sql = &amp;quot;INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);

    $isOk = $sentencia -&amp;gt; execute([
        &amp;quot;usuario&amp;quot; =&amp;gt; $usu,
        &amp;quot;password&amp;quot; =&amp;gt; password_hash($pas,PASSWORD_DEFAULT)
    ]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ara que tenim l&#39;usuari codificat i guardat en la base de dades, el recuperarem per a poder loguejar-lo correctament.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Recuperando usuario y password en BD ▒▒▒▒▒▒▒▒

    $usu = $_POST[&amp;quot;login&amp;quot;] ?? &amp;quot;&amp;quot;;

    $sql = &amp;quot;select * from usuarios where usuario = ?&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; execute([$usu]);

    $usuario = $sentencia -&amp;gt; fetch();

    if($usuario &amp;amp;&amp;amp; password_verify($_POST[&#39;pass&#39;], $usuario[&#39;password&#39;])) {
        echo&amp;quot;OK!&amp;quot;;
    } else {
        echo&amp;quot;KO&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/4-login-and-password/" >
        </entry>
        <entry>
            <title>
                3. PHP Data Objects  PDO
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/3-php-data-objects-pdo/</id>
            <content type="html">
                &lt;p&gt;La classe PDO de PHP s&#39;utilitza per connectar-se a una base de dades i executar consultes SQL de manera segura. Quan construeixes una instància de PDO, pots passar-li diferents atributs en el constructor i opcions per configurar el comportament de la connexió. Aquí tens els atributs principals i el seu propòsit:&lt;/p&gt;
&lt;h3 id=&quot;constructor-de-la-classe-pdo&quot; tabindex=&quot;-1&quot;&gt;Constructor de la classe PDO&lt;/h3&gt;
&lt;p&gt;El constructor de la classe PDO accepta tres paràmetres obligatoris i un opcional:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $pdo = new PDO(string $dsn, string $username, string $password, array $options);

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;$dsn (Data Source Name): És una cadena que especifica el tipus de base de dades i la informació necessària per connectar-s&#39;hi.
&lt;ul&gt;
&lt;li&gt;Format per tipus de base de dades i configuració, per exemple:
&lt;ul&gt;
&lt;li&gt;Mysql:host=localhost;dbname=testdb (per a MySQL).&lt;/li&gt;
&lt;li&gt;pgsql:host=localhost;port=5432;dbname=testdb (per a PostgreSQL).&lt;/li&gt;
&lt;li&gt;sqlite:/path/to/database.db (per a SQLite).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$username: El nom d&#39;usuari per a la connexió a la base de dades.&lt;/li&gt;
&lt;li&gt;$password: La contrasenya associada al nom d&#39;usuari.&lt;/li&gt;
&lt;li&gt;$options (Opcional): Un array d&#39;opcions per definir el comportament de la connexió. Aquests són alguns dels valors més comuns que es poden definir en aquest array:
&lt;ul&gt;
&lt;li&gt;PDO::ATTR_ERRMODE: Controla com es gestionen els errors. Alguns valors comuns són:
&lt;ul&gt;
&lt;li&gt;PDO::ERRMODE_SILENT: Els errors no generen cap missatge.&lt;/li&gt;
&lt;li&gt;PDO::ERRMODE_WARNING: Els errors generen un avís.&lt;/li&gt;
&lt;li&gt;PDO::ERRMODE_EXCEPTION: Els errors generen una excepció, que és el més recomanable per controlar errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PDO::ATTR_DEFAULT_FETCH_MODE: Defineix el mode de recuperació de dades per defecte, com ara:
&lt;ul&gt;
&lt;li&gt;PDO::FETCH_ASSOC: Retorna les dades com un array associatiu.&lt;/li&gt;
&lt;li&gt;PDO::FETCH_OBJ: Retorna les dades com un objecte.&lt;/li&gt;
&lt;li&gt;PDO::FETCH_BOTH: Retorna les dades com un array associatiu i numèric.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PDO::ATTR_PERSISTENT: Habilita connexions persistents. Una connexió persistent pot millorar el rendiment mantenint la connexió activa per múltiples peticions en lloc de crear-ne una nova cada vegada.&lt;/li&gt;
&lt;li&gt;PDO::ATTR_TIMEOUT: Defineix un temps límit per a la connexió en segons.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;exemple-de-connexio-amb-pdo&quot; tabindex=&quot;-1&quot;&gt;Exemple de connexió amb PDO&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dsn = &amp;quot;mysql:host=localhost;dbname=testdb&amp;quot;;
$username = &amp;quot;usuari&amp;quot;;
$password = &amp;quot;contrasenya&amp;quot;;
$options = [
    PDO::ATTR_ERRMODE =&amp;gt; PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE =&amp;gt; PDO::FETCH_ASSOC,
    PDO::ATTR_PERSISTENT =&amp;gt; true,
    PDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; &amp;quot;SET NAMES utf8&amp;quot;
];

try {
    $pdo = new PDO($dsn, $username, $password, $options);
    echo &amp;quot;Connexió establerta amb èxit!&amp;quot;;
} catch (PDOException $e) {
    echo &amp;quot;Error de connexió: &amp;quot; . $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest codi estableix una connexió a una base de dades MySQL amb un joc de caràcters utf8, una connexió persistent, i llança excepcions en cas d&#39;errors.&lt;/p&gt;
&lt;p&gt;Qualsevol error que es llance a través de &lt;strong&gt;PDO&lt;/strong&gt;, el sistema llançarà una  &lt;strong&gt;PDOException&lt;/strong&gt; .&lt;/p&gt;
&lt;h3 id=&quot;fitxer-de-configuracio-de-la-bd&quot; tabindex=&quot;-1&quot;&gt;Fitxer de configuració de la BD&lt;/h3&gt;
&lt;p&gt;De la mateixa manera que podem tenir el nostre arxiu de funcions &lt;code&gt;funciones.php&lt;/code&gt; i alberguem totes les funcions que s&#39;usen de manera global en l&#39;aplicació, podem establir un arxiu de constants on definim els paràmetres de connexió amb la base de dades.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

    //  ▒▒▒▒▒▒▒▒ conexion.php ▒▒▒▒▒▒▒▒

    constDSN = &amp;quot;mysql:host=localhost;dbname=dwes&amp;quot;;
    constUSUARIO = &amp;quot;dwes&amp;quot;;
    constPASSWORD = &amp;quot;abc123&amp;quot;;

    /*  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

        ▒▒▒▒▒▒▒▒ NO SUBAS ESTE ARCHIVO A git ▒▒▒▒▒

        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ */

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest arxiu conté informació &lt;span class=&quot;alert&quot;&gt;&lt;strong&gt;molt sensible&lt;/strong&gt;&lt;/span&gt; així que no és recomanable que puges aquest arxiu a &lt;strong&gt;git&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sentencies-preparades&quot; tabindex=&quot;-1&quot;&gt;Sentències preparades&lt;/h3&gt;
&lt;p&gt;Es tracta de sentències que s&#39;estableixen com si foren plantilles de la SQL que llançarem, acceptant paràmetres que són establits a posteriori de la declaració de la sentència preparada.&lt;/p&gt;
&lt;p&gt;Les sentències preparades eviten la &lt;strong&gt;injecció&lt;/strong&gt; de SQL (SQL Injection) i milloren el rendiment de nostres &lt;em&gt;aplicacions&lt;/em&gt; o pàgines web.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $sql = &amp;quot;INSERT INTO Clientes VALUES (?, ?, ?, ?)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada interrogant és un paràmetre que establirem després, unes quantes línies més a baix.&lt;/p&gt;
&lt;p&gt;Una vegada tenim la plantilla de la nostra consulta, hem de seguir amb la preparació juntament amb 3 mètodes més de &lt;strong&gt;PHP&lt;/strong&gt; per a la seua completa execució:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prepare:&lt;/code&gt; prepara la &lt;strong&gt;sentencia&lt;/strong&gt; abans de ser executada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;: el tipus d&#39;unió (*&lt;em&gt;bind&lt;/em&gt;^) de dada que pot ser mitjançant &#39; ? &#39; o &#39; :parametre &#39;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute&lt;/code&gt; s&#39;executa la consulta unint la plantilla amb les &lt;em&gt;variables&lt;/em&gt; o paràmetres que hem establit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;exemple-parametros&quot; tabindex=&quot;-1&quot;&gt;Exemple paràmetros&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
     

    include &amp;quot;config/database.inc.php&amp;quot;;

    $conexion = null;

    try { 
        $cantidad = $_GET[&amp;quot;cantidad&amp;quot;];

        $conexion = new PDO(DSN, USUARIO, PASSWORD);
        $conexion -&amp;gt; setAttributeATTR_ERRMODE, PDO::ERRMODE_EXCEPTION;

        $sql = &amp;quot;DELETE FROM stock WHERE unidades = ?&amp;quot;;
        $sentencia = $conexion -&amp;gt; prepare($sql);

        $isOk = $sentencia -&amp;gt; execute([$cantidad]);
        $cantidadAfectada = $sentencia -&amp;gt; rowCount();

        echo $cantidadAfectada;
    } catch (PDOException $e) {
        echo $e -&amp;gt; getMessage();
    }

    $conexion = null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;exemple-bind-param&quot; tabindex=&quot;-1&quot;&gt;Exemple bindParam&lt;/h3&gt;
&lt;p&gt;Molt semblant a utilitzar paràmetres però aquesta vegada la variable està dins de la sentència SQL, en aquest cas l&#39;hem anomenada &lt;code&gt;:cant&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    include &amp;quot;config/database.inc.php&amp;quot;;

    $conexion=null;

    try {
        $cantidad = $_GET[&amp;quot;cantidad&amp;quot;] ?? 0;

        $conexion = new PDO(DSN, USUARIO, PASSWORD);
        $conexion -&amp;gt; setAttributeATTR_ERRMODE, PDO::ERRMODE_EXCEPTION;

        $sql = &amp;quot;DELETE FROM stock WHERE unidades = :cant&amp;quot;;

        $sentencia = $conexion -&amp;gt; prepare($sql);
        $sentencia -&amp;gt; bindParam(&amp;quot;:cant&amp;quot;, $cantidad);
        
        $isOk = $sentencia -&amp;gt; execute();
        
        $cantidadAfectada = $sentencia -&amp;gt; rowCount();
        
        echo $cantidadAfectada;
    } catch (PDOException $e) {
        echo $e -&amp;gt; getMessage();
    }

    $conexion = null;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;bind-param-vs-bind-value&quot; tabindex=&quot;-1&quot;&gt;bindParam VS bindValue&lt;/h3&gt;
&lt;p&gt;Utilitzarem &lt;code&gt;bindValue()&lt;/code&gt; quan hàgem d&#39;inserir dades només una vegada, en canvi, haurem d&#39;usar &lt;code&gt;bindParam()&lt;/code&gt; quan hàgem de passar dades múltiples, com per exemple, un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    // se asignan nombre a los parámetros
    $sql = &amp;quot;DELETE FROM stock WHERE unidades = :cant&amp;quot;;
    $sentencia = $conexion -&amp;gt; prepare($sql);

    // bindParam enlaza por referencia
    $cantidad = 0;

    $sentencia -&amp;gt; bindParam(&amp;quot;:cant&amp;quot;, $cantidad);
    $cantidad = 1;

    // se eliminan con cant = 1
    $isOk = $sentencia -&amp;gt; execute();

    // bindValue enlaza por valor
    $cantidad = 0;

    $sentencia -&amp;gt; bindValue(&amp;quot;:cant&amp;quot;, $cantidad);
    $cantidad = 1;

    // se eliminan con cant = 0
    $isOk = $sentencia-&amp;gt;execute();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per a més informació i ús de les variables &lt;em&gt;PDO&lt;/em&gt; &lt;a href=&quot;https://www.php.net/manual/es/pdo.constants.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;consulta el manual de PHP&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;inserint-registres&quot; tabindex=&quot;-1&quot;&gt;Inserint registres&lt;/h3&gt;
&lt;p&gt;A l&#39;hora d&#39;inserir registres en una base de dades, hem de tindre en compte que en la taula pot haver-hi valors autoincrementats. Per a salvaguardar açò, el que hem de fer és deixar aqueix camp autoincrementat buit, però a l&#39;hora de fer la connexió, hem de recuperar-ho amb el mètode &lt;code&gt;lastInsertId()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $nombre = $_GET[&amp;quot;nombre&amp;quot;] ?? &amp;quot;SUCURSAL X&amp;quot;;
    $telefono = $_GET[&amp;quot;telefono&amp;quot;] ?? &amp;quot;636123456&amp;quot;;

    $sql=&amp;quot;INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; bindParam(&amp;quot;:nombre&amp;quot;, $nombre);
    $sentencia -&amp;gt; bindParam(&amp;quot;:telefono&amp;quot;, $telefono);

    $isOk = $sentencia -&amp;gt; execute();
    $idGenerado = $conexion -&amp;gt; lastInsertId();

    echo $idGenerado;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consultant-registres&quot; tabindex=&quot;-1&quot;&gt;Consultant registres&lt;/h3&gt;
&lt;p&gt;A l&#39;hora de recuperar els resultats d&#39;una consulta, bastarà amb invocar al mètode &lt;code&gt;PDOStatement::fetch&lt;/code&gt; per a llistar les files generades per la consulta.&lt;/p&gt;
&lt;p&gt;Però hem de triar el tipus de dada que volem rebre entre els 3 que hi ha disponibles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PDO::FETCH_ASSOC:&lt;/code&gt; array indexat que els seus keys són el nom de les columnes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PDO::FETCH_NUM:&lt;/code&gt; array indexat que els seus keys són números.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PDO::FETCH_BOTH:&lt;/code&gt; valor per defecte. Retorna un array indexat que els seus keys són tant el nom de les columnes com números.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/PHP%20Teoria%20Batoi/imagenes/06/06-pdo-listado-fetch.png&quot; alt=&quot;06-pdo-listado-fetch.png&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ consulta con array asociativo.php ▒▒▒▒▒▒▒▒

    include &amp;quot;config/database.inc.php&amp;quot;;

    $conexion = null;

    try{
        $conexion = new PDO(DSN, USUARIO, PASSWORD);
        $conexion -&amp;gt; setAttributeATTR_ERRMODE, PDO::ERRMODE_EXCEPTION;

        $sql = &amp;quot;select * from tienda&amp;quot;;

        $sentencia = $conexion -&amp;gt; prepare($sql);
        $sentencia -&amp;gt; setFetchModeFETCH_ASSOC;
        $sentencia -&amp;gt; execute();
        
        while($fila = $sentencia -&amp;gt; fetch()){
            echo &amp;quot;Codigo:&amp;quot; . $fila[&amp;quot;cod&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
            echo &amp;quot;Nombre:&amp;quot; . $fila[&amp;quot;nombre&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
            echo &amp;quot;Teléfono:&amp;quot; . $fila[&amp;quot;tlf&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        }

    }catch(PDOException $e) {
        echo $e -&amp;gt; getMessage();
    }

    $conexion = null;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuperant dades amb una matriu com a resultat de la nostra consulta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ consulta con array asociativo ▒▒▒▒▒▒▒▒

    $sql=&amp;quot;SELECT * FROM tienda&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_ASSOC;
    $sentencia -&amp;gt; execute();

    $tiendas = $sentencia -&amp;gt; fetchAll();

    foreach($tiendasas$tienda) {
        echo&amp;quot;Codigo:&amp;quot; . $tienda[&amp;quot;cod&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo&amp;quot;Nombre:&amp;quot; . $tienda[&amp;quot;nombre&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Però si el que volem és llegir dades amb forma d&#39;objecte utilitzant &lt;code&gt;PDO::FETCH_OBJ&lt;/code&gt;, hem de crear un objecte amb propietats públiques amb el mateix nom que les columnes de la taula que anem a consultar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ consulta con formato de objeto ▒▒▒▒▒▒▒▒

    $sql=&amp;quot;SELECT * FROM tienda&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_OBJ;
    $sentencia -&amp;gt; execute();

    while($t = $sentencia -&amp;gt; fetch()) {
        echo&amp;quot;Codigo:&amp;quot; . $t -&amp;gt; cod . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo&amp;quot;Nombre:&amp;quot; . $t -&amp;gt; nombre . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo&amp;quot;Teléfono:&amp;quot; . $t -&amp;gt; tlf . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consultes-amb-models&quot; tabindex=&quot;-1&quot;&gt;Consultes amb models&lt;/h3&gt;
&lt;p&gt;Portem temps creant classes en PHP i les consultes també admeten aquest tipus de dades mitjançant l&#39;ús de &lt;code&gt;PDO::FETCH_CLASS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Si usem aquest mètode, hem de tindre en compte que els noms dels atributs privats han de coincidir amb els noms de les columnes de la taula que anem a manejar.&lt;/p&gt;
&lt;p&gt;Així doncs, si pel que siga canviem l&#39;estructura de la taula &lt;span class=&quot;alert&quot;&gt;&lt;strong&gt;HEM DE CANVIAR&lt;/strong&gt;&lt;/span&gt; la nostra classe perquè tot continue funcionant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ clase Tienda ▒▒▒▒▒▒▒▒

    classTienda {
        private int $cod;
        private string $nombre;
        private ? string $tlf;
        
        public function getCodigo() : int {
            return $this -&amp;gt; cod;
        }
        
        public function getNombre() : string {
            return $this -&amp;gt; nombre;
        }
        
        public function getTelefono() : ?string {
            return $this -&amp;gt; tlf;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Consultando a través de la clase Tienda ▒▒▒▒▒▒▒▒

    $sql = &amp;quot;SELECT * FROM tienda&amp;quot;;
    $sentencia = $conexion -&amp;gt; prepare($sql);

    // Aquí &#39;Tienda&#39; es el nombre de nuestra clase
    $sentencia -&amp;gt; setFetchModeFETCH_CLASS, Tienda::class;
    $sentencia -&amp;gt; execute();

    while($t = $sentencia -&amp;gt; fetch()) {
        echo &amp;quot;Codigo: &amp;quot; . $t -&amp;gt; getCodigo() . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo &amp;quot;Nombre: &amp;quot; . $t -&amp;gt; getNombre() . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo &amp;quot;Teléfono: &amp;quot; . $t -&amp;gt; getTelefono() . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        
        var_dump($t);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Però què passa si les nostres classes tenen constructor? doncs que hem d&#39;indicar-li, al mètode FECTH, que emplene les propietats després de cridar al constructor i per a això fem ús de &lt;code&gt;PDO::FETCH_PROPS_LATE&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Consulta para una clase con constructor ▒▒▒▒▒▒▒▒

    $sql = &amp;quot;SELECT * FROM tienda&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class;
    $sentencia -&amp;gt; execute();

    $tiendas = $sentencia -&amp;gt; fetchAll();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consultes-amb-like&quot; tabindex=&quot;-1&quot;&gt;Consultes amb LIKE&lt;/h3&gt;
&lt;p&gt;Per a utilitzar el comodí &lt;em&gt;LIKE&lt;/em&gt; o altres comodins, hem d&#39;associar-lo a la dada i MAI en la pròpia consulta.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Utilizando comodines :: LIKE ▒▒▒▒▒▒▒▒

    $sql = &amp;quot;SELECT * FROM tienda where nombre like :nombre or tlf like :tlf&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class;

    $cadBuscar = &amp;quot;%&amp;quot; . $busqueda . &amp;quot;%&amp;quot;;

    $sentencia -&amp;gt; execute([&amp;quot;nombre&amp;quot; =&amp;gt; $cadBuscar,&amp;quot;tlf&amp;quot; =&amp;gt; $cadBuscar]);

    $result = $sentencia -&amp;gt; fetchAll();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Teniu una llista d&#39;exemples molt completa en la &lt;a href=&quot;https://phpdelusions.net/pdo/objects&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/php-teoria-batoi/5-acceso-a-datos/3-php-data-objects-pdo/" >
        </entry>
        <entry>
            <title>
                Indice
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/</id>
            <content type="html">
                &lt;p&gt;&lt;strong&gt;Asignaturas:&lt;/strong&gt;&lt;br /&gt;
Acceso a datos&lt;br /&gt;
Desarrollo de interfaces&lt;br /&gt;
Digitalizacion aplicada el sistema productivo GS&lt;br /&gt;
Itinerario personal para la empleabilidad II&lt;br /&gt;
Módulo optativo&lt;br /&gt;
Programación de servicios y procesos&lt;br /&gt;
Programación multimedia y dispositivos móviles&lt;br /&gt;
Proyecto intermodular 2 de Desarrollo de aplicaciones multiplataforma&lt;br /&gt;
Sistemas de gestión empresarial&lt;br /&gt;
Sostenibilidad aplicada al sistema productivo&lt;br /&gt;
Tutoria&lt;br /&gt;
&lt;strong&gt;Horario:&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Hora&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Lunes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Martes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Miercoles&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Jueves&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Viernes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14:55 - 15:50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Desarrollo de interfaces&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Programación multimedia y dispositivos móviles&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Programación de servicios y procesos&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Proyecto intermodular 2 de Desarrollo de aplicaciones multiplataforma&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Itinerario personal para la empleabilidad II&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15:50 - 16:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Desarrollo de interfaces&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Programación multimedia y dispositivos móviles&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Programación de servicios y procesos&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Proyecto intermodular 2 de Desarrollo de aplicaciones multiplataforma&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Itinerario personal para la empleabilidad II&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16:45 - 17:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Desarrollo de interfaces&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Tutoria&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Desarrollo de interfaces&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Módulo optativo&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sostenibilidad aplicada al sistema productivo&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;17:40 - 18:00&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18:00 - 18:55&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Itinerario personal para la empleabilidad II&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Proyecto intermodular 2 de Desarrollo de aplicaciones multiplataforma&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Desarrollo de interfaces&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acceso a datos&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Programación multimedia y dispositivos móviles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18:55 - 19:50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Módulo optativo&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sistemas de gestión empresarial&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acceso a datos&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acceso a datos&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Programación multimedia y dispositivos móviles&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19:50 - 20:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Módulo optativo&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sistemas de gestión empresarial&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Acceso a datos&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sistemas de gestión empresarial&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Sistemas de gestión empresarial&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20:45 - 21:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Digitalizacion aplicada el sistema productivo GS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

            </content>
            <link href="https://pedroporo.github.io/" >
        </entry>
        <entry>
            <title>
                90-tdd
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/90-tdd/</id>
            <content type="html">
                &lt;h1 id=&quot;desarrollo-guiado-por-pruebas-tdd&quot; tabindex=&quot;-1&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/h1&gt;
&lt;p&gt;Es una forma de programar que consiste en escribir primero las pruebas que deba pasar el código (Test Dirve Development) y después refactorizarlo (&lt;a href=&quot;https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Refactoring&lt;/a&gt;). Para escribir las pruebas generalmente se utilizan las &lt;a href=&quot;https://es.wikipedia.org/wiki/Prueba_unitaria&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pruebas unitarias&lt;/a&gt; (unit test en inglés).&lt;/p&gt;
&lt;p&gt;El ciclo de programación usando TDD tiene tres fases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fase &lt;em&gt;roja&lt;/em&gt;: escribimos el test que cumpla los requerimientos y lo pasamos. Fallará ya que nuestro código no pasa el est (de hecho la primera vez no tenemos ni código)&lt;/li&gt;
&lt;li&gt;Fase &lt;em&gt;verde&lt;/em&gt;: conseguimos que nuestro código pase el test. Ya funciona aunque seguramente no estará muy bien escrito&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactorización&lt;/em&gt;: mejoramos nuestro código&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente y seguidamente se refactoriza el código escrito. El propósito del desarrollo guiado por pruebas es lograr un código limpio que funcione. La idea es que los requisitos sean traducidos a pruebas, de este modo, cuando las pruebas pasen se garantizará que el software cumple con los requisitos que se han establecido.&lt;/p&gt;
&lt;p&gt;Para ello debemos en primer lugar se debe definir una lista de requisitos y después se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elegir un requisito: Se elige de una lista el requisito que se cree que nos dará mayor conocimiento del problema y que a la vez sea fácilmente implementable.&lt;/li&gt;
&lt;li&gt;Escribir una prueba: Se comienza escribiendo una prueba para el requisito. Para ello el programador debe entender claramente las especificaciones y los requisitos de la funcionalidad que está por implementar. Este paso fuerza al programador a tomar la perspectiva de un cliente considerando el código a través de sus interfaces.&lt;/li&gt;
&lt;li&gt;Verificar que la prueba falla: Si la prueba no falla es porque el requisito ya estaba implementado o porque la prueba es errónea.&lt;/li&gt;
&lt;li&gt;Escribir la implementación: Escribir el código más sencillo que haga que la prueba funcione. Se usa la expresión &amp;quot;Déjelo simple&amp;quot; (&amp;quot;Keep It Simple, Stupid!&amp;quot;), conocida como principio KISS.&lt;/li&gt;
&lt;li&gt;Ejecutar las pruebas automatizadas: Verificar si todo el conjunto de pruebas funciona correctamente.&lt;/li&gt;
&lt;li&gt;Eliminación de duplicación: El paso final es la refactorización, que se utilizará principalmente para eliminar código duplicado. Se hace un pequeño cambio cada vez y luego se corren las pruebas hasta que funcionen.&lt;/li&gt;
&lt;li&gt;Actualización de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado. Asimismo se agregan requisitos que se hayan visto como necesarios durante este ciclo y se agregan requisitos de diseño (P. ej que una funcionalidad esté desacoplada de otra).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tener un único repositorio universal de pruebas facilita complementar TDD con otra práctica recomendada por los procesos ágiles de desarrollo, la &amp;quot;Integración Continua&amp;quot;. Integrar continuamente nuestro trabajo con el del resto del equipo de desarrollo permite ejecutar toda batería de pruebas y así descubrir si nuestra última versión es compatible con el resto del sistema. Es recomendable y menos costoso corregir pequeños problemas cada pocas horas que enfrentarse a problemas enormes cerca de la fecha de entrega fijada.&lt;/p&gt;
&lt;p&gt;(Fuente &lt;a href=&quot;https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;usar-tdd-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Usar TDD en Javascript&lt;/h2&gt;
&lt;p&gt;Lo más sencillo es usar alguna librería como &lt;strong&gt;Mocha&lt;/strong&gt;. Se trata de un gramework que se ejecuta sobre &lt;em&gt;Node.js&lt;/em&gt; y permite crear tests tanto síncronos como asíncronos. Para usarlo necesitaremos tener &lt;strong&gt;npm&lt;/strong&gt; instalado. Luego creamos una carpeta para nuestro proyecto y dentro ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g mocha    # lo instalamos globalmente para que esté disponible para todos los proyectos
npm init                # crea en el directorio el package.json
npm install chai     # en vez de chai podríamos usar assert, should, etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La librería &lt;em&gt;Chai&lt;/em&gt; permite 3 tipos de sentencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts&lt;/li&gt;
&lt;li&gt;expects&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros vamos a usar &lt;em&gt;asserts&lt;/em&gt; por lo que es lo que deberemos importar en los ficheros de tests.&lt;/p&gt;
&lt;p&gt;Dentro de nuestro proyecto crearemos una carpeta donde guardaremos los ficheros JS de los tests (podemos llamarla &#39;&lt;em&gt;tests&lt;/em&gt;&#39;) y en cada fichero importaremos &lt;em&gt;chai&lt;/em&gt; y los ficheros necesarios. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;tests/store.specs.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const Store = require(&#39;../store.class.js&#39;);

describe(&#39;Store&#39;, () =&amp;gt; {

	it(&#39;should had an integer id&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.id, &#39;integer&#39;, &#39;La id no es un entero&#39;)
	});

	it(&#39;should had an empty array of products&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.products, &#39;array&#39;, &#39;Products no es un array&#39;)
		assert.lengthOf(foo.products, 0, &#39;Products no es un array vacío&#39;)
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder importar un módulo con &lt;em&gt;require&lt;/em&gt; debemos haberlo exprtado previamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;store.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Store {
    constructor (id) {
        this.id=id;
        this.products=[];
    }
    ...
}
 module.exports = Store;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ejecutar todos los tests de nuestro proyecto ejecutaremos desde la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si sólo queremos pasar uno lo indicamos en el comando: &lt;code&gt;mocha tests/store.specs.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos hacer que &lt;em&gt;mocha&lt;/em&gt; escuche en segundo plano y se ejecute automáticamente cada vez que hacemos algún cambio en un fichero con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;el-fichero-de-tests&quot; tabindex=&quot;-1&quot;&gt;El fichero de tests&lt;/h2&gt;
&lt;p&gt;Debemos importar le librería &lt;em&gt;Chai&lt;/em&gt; y el fichero con el código a testear como hemov visto antes. El fichero con el código que debe exportar la clase o función que contiene con &lt;code&gt;module.exports&lt;/code&gt;. Si queremos exportar varias funciones exportaremos un objeto con todas ellas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;module.exports = {
    addItem,
    removeItem
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras importar los ficheros pondremos el &lt;em&gt;describe&lt;/em&gt; y los bloques &lt;em&gt;it&lt;/em&gt; que queramos y dentro de cada uno los &lt;em&gt;aasert&lt;/em&gt; necesarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const index = require(&#39;../index.js&#39;);

describe(&#39;manage items&#39;, () =&amp;gt; {
	it(&#39;add a new item&#39;, function() {
		let myItem = ...;
		assert.typeOf(item, &#39;object&#39;, &#39;No crea un objeto sino &#39;+typeof(item) );
		assert.equal(item.units, 0);
	});
	
	if (&#39;change an item () =&amp;gt; {
	...
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;algunas-sentecias-em-assert-em&quot; tabindex=&quot;-1&quot;&gt;Algunas sentecias &lt;em&gt;assert&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Estas&lt;br /&gt;
Aquí tenéis un pequeño resumen de algunas de las sentencias que podemos usar. Recordad que todas pueden tener un último parámetro opcional que es un mensaje a mostrar en caso de que falle esta comprobación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.equal(actual, esperado): comprueba que sea el mismo valor, pero sin comprobar los tupos (usa ==, no ===)&lt;/li&gt;
&lt;li&gt;.notEqual(actual, esperado)&lt;/li&gt;
&lt;li&gt;.strictEqual, .notStrictEqual: igual pero hace la compribaciónestricta (===)&lt;/li&gt;
&lt;li&gt;.deepEqual, notDeepEqual: hace una comprobación de cada propiedad del objeto pasado&lt;/li&gt;
&lt;li&gt;.match(valor, regexp), .notMatch: comprueba si el valor cumple o no la expresión regular pasada&lt;/li&gt;
&lt;li&gt;.isAbove(actual, esperado): comprueba que actual &amp;gt; esperado&lt;/li&gt;
&lt;li&gt;.isAtLeast(actual, esperado): comprueba que actual &amp;gt;= esperado&lt;/li&gt;
&lt;li&gt;.isBelow, .isAtMost: comprueba que sea &amp;lt; o &amp;lt;= respectivamente&lt;/li&gt;
&lt;li&gt;.isTrue, .isNotTrue, .isFalse, .isNotFalse, .isNull, .isNotNull, .isUndefined, .isDefined, .isNaN, .isNotNaN, .isFunction, .isNotFunction, .isObject, .isNotObject, .isArray, .isNotArray, .isString, .isNotString, .isNumber, .isNotNumber, .isBoolean, .isNotBoolean, .isFinite&lt;/li&gt;
&lt;li&gt;.exists(valor), .notExists: comprueba que valor no sea (o sea) &lt;em&gt;null&lt;/em&gt; o &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;.typeOf(valor, tipo), .notTypeOf: indica si valor es o no del tipo indicado, que puede ser &#39;string&#39;, &#39;number&#39;, boolean&#39;, &#39;array&#39;, &#39;object&#39;, &#39;null&#39;, &#39;undefined&#39;, &#39;regexp&#39;, ...&lt;/li&gt;
&lt;li&gt;.instanceOf(objeto, Clase), .notInstanceOf: indica si un objeto es o no una instancia de la clase indicada&lt;/li&gt;
&lt;li&gt;.include(string/array/objeto, substring/elemento/propiedad:valor): comprueba si la subcadena existe en el string o el elemento se encuentra en el array (usa =&lt;mark&gt;) o si existe la propiedad o propiedades pasadas y su valor es estrictamente (&lt;/mark&gt;=) igual al indicado.&lt;/li&gt;
&lt;li&gt;.notInclude&lt;/li&gt;
&lt;li&gt;.property(objeto, propiedad), .notProperty: comprueba si el objeto posee o no la propiedad pasada&lt;/li&gt;
&lt;li&gt;.lengthOf(string/array, num): comprueba que la longitud de la cadena o el array sea la indicada&lt;/li&gt;
&lt;li&gt;.isEmpty(string/array/object), .isNotEmpty: comprueba que la cadena sea &#39;&#39;, el array [] o el objeto {}, o no.&lt;/li&gt;
&lt;li&gt;.throws(funcion, [errorLike/string], [string]): para comprobar que la función lanza un error del tipo indicado (TypeError, RangeError, ...) e incluso con el mensaje indicado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la [página de &lt;em&gt;Chai&lt;/em&gt;])&lt;a href=&quot;https://www.chaijs.com/api/assert/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.chaijs.com/api/assert/&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tests-de-funciones-asincronas-con-promesas&quot; tabindex=&quot;-1&quot;&gt;Tests de funciones asíncronas con promesas&lt;/h2&gt;
&lt;p&gt;Si hacemos llamadas asíncronas Mocha permite testearlas tras el .then o el .catch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;API de artículos&#39;, () =&amp;gt; {
	it(&#39;should return the article 3&#39;, function() {
		return getArticulo(3)
			.then(art =&amp;gt; {
				assert.instanceOf(art, Articulos);
				assert.equal(art.id, 3);
			})
	});
	it(&#39;should return an error&#39;, function() {
		return getArticulo(undefined)
			.catch(err =&amp;gt; {
				...
			})
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-hooks-em-de-mocha&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Hooks&lt;/em&gt; de Mocha&lt;/h2&gt;
&lt;p&gt;Nos permiten ejecutar código en momentos puntuales. Reciben como parámetro la función a ejecutar. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before(): el código se ejecutará una vez antes del primer test del bloque &lt;em&gt;describe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;beforeEach(): se ejecutará antes de cada test&lt;/li&gt;
&lt;li&gt;after(), afterEach(): lo mismo pero tras ejecutar los tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tests-para-la-ui&quot; tabindex=&quot;-1&quot;&gt;Tests para la UI&lt;/h2&gt;
&lt;p&gt;Necesitaremos alguna librería que nos permita contruir escenarios de navegación como &lt;em&gt;CasperJS&lt;/em&gt; y otra que imite al navegador como &lt;em&gt;PhantomJS&lt;/em&gt; (para WebKit) o &lt;em&gt;SlimerJS&lt;/em&gt; (para Gecko).&lt;/p&gt;
&lt;p&gt;Hay muchas páginas que nos enseñan a usar Mocha para testear la UI como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/ykyuen/web-ui-testing-in-nodejs--kda&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web UI Testing in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/nilayshah/2018/01/21/ui-test-automation-with-node-js-typescript-mocha-and-selenium/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UI Test Automation with Node.js, TypeScript, Mocha and Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itnext.io/automated-ui-testing-with-selenium-and-javascript-90bbe7ca13a3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI Testing with Selenium and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tariqul.islam.rony/automated-ui-ux-testing-with-puppeteer-mocha-and-chai-800cfb028ab9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI/UX Testing with Puppeteer Mocha and Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/90-tdd/" >
        </entry>
        <entry>
            <title>
                21-typescript
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/21-typescript/</id>
            <content type="html">
                &lt;h1 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;Typescript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript en Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos de datos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#definir-variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Definir variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-custom-types&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear &lt;em&gt;custom types&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#interfaces&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;interfaces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creaci%C3%B3n-autom%C3%A1tica-de-interfaces&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creación automática de interfaces&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-gen%C3%A9ricos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos genéricos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#clases&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#decoradores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Decoradores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Es un lenguaje basado el Javascript al que le ha añadido definiciones de tipos estáticas y alguna característica más.&lt;/p&gt;
&lt;p&gt;El hecho de que Javascript permite cambiar dinámicamente el tipo de datos de una variable da lugar a veces a resultados inesperados y dificulta la localización de errores derivados de un uso no adecuado de esto.&lt;/p&gt;
&lt;p&gt;Typescript obliga a definir el tipo de datos de una variable e impide cambiarlo (como sucede en la mayoría de lenguajes de programación) lo que nos obliga a escribir un código más consistente. Esto es especialmente importante en proyectos grandes o en los que colaboran muchos programadores.&lt;/p&gt;
&lt;h2 id=&quot;typescript-en-vue&quot; tabindex=&quot;-1&quot;&gt;Typescript en Vue&lt;/h2&gt;
&lt;p&gt;El soporte de Typescript en Vue 3 es total ya que este framework ha sido totalmente reescrito en este lenguaje. Cuando creamos un nuevo proyecto una de las opciones que podemos marcar es &lt;em&gt;Typescript&lt;/em&gt; con lo que ya tendremos todo preparado para utilizar este lenguaje en nuestro proyecto. Veremos que al crearse el proyecto el fichero &lt;code&gt;main.js&lt;/code&gt; ahora se llama &lt;strong&gt;&lt;code&gt;main.ts&lt;/code&gt;&lt;/strong&gt;. Además se crea un nuevo fichero llamado &lt;code&gt;tsconfig.json&lt;/code&gt; con configuraciones por defecto para Typescript.&lt;/p&gt;
&lt;p&gt;Si queremos añadir Typescript a un proyecto ya existente lo añadiremos como &lt;em&gt;plugin&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vue add typescript
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al hacerlo nos pregunta, entre otras cosas, si queremos convertir todos nuestros ficheros &lt;em&gt;.js&lt;/em&gt; a &lt;em&gt;.ts&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para usar TS en un componente tenemos que indicarlo en la etiqueta &amp;lt;script&amp;gt; e importar &lt;em&gt;defineComponent&lt;/em&gt; para transformar el objeto que exportamos. Con Javascript definimos un SFC con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
  name: ...,
  ...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto con Typescript se haría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script lang=&amp;quot;ts&amp;quot;&amp;gt;
import { defineComponent } from &#39;vue&#39;

export default defineComponent({
  name: ...,
  ...
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No es necesario que todos los componentes estén en Typescript(o Javascript) sino que cada uno puede ser diferente.&lt;/p&gt;
&lt;h2 id=&quot;tipos-de-datos&quot; tabindex=&quot;-1&quot;&gt;Tipos de datos&lt;/h2&gt;
&lt;p&gt;Los tipos de datos que podemos encontrar en Javascript son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Tuple (como un array con un número fijo de elementos)&lt;/li&gt;
&lt;li&gt;Enum (permite asignar nombres &lt;em&gt;amigables&lt;/em&gt; a conjuntos de números)&lt;/li&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Any (puede ser de cualquier tipo)&lt;/li&gt;
&lt;li&gt;Void (se aplica a funciones que no devuelven nada)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;definir-variables&quot; tabindex=&quot;-1&quot;&gt;Definir variables&lt;/h2&gt;
&lt;p&gt;El tipo de datos de una variable lo indicamos al definirla con el caràcter &lt;code&gt;:&lt;/code&gt; (dos puntos):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let title: string = &#39;Aprende Typescript&#39;
let numPages: number = 100
let isFree: boolean = true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En los arrays debemos indicar el tipo de datos de los elementos del array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let lenguajes: string[] = [&#39;Typescript&#39;, &#39;Javascript&#39;, &#39;PHP&#39;]
let notes: number[] = [3, 4.5, 7, 4, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Respecto a los objetos hay que definir el tipo de cada propiedad y a continuación asignarles su valor&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let Student: {
  name: string;
  age: number;
  modules: string[];
} = {
  name: &#39;Peter Parker&#39;,
  age: 20,
  modules: [&#39;DWEC&#39;, &#39;DWES&#39;, &#39;DAW&#39;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en las funciones debemos indicar el tipo de datos de sus parámetros y de la propia función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let getFullName = (firstName: string, lastName: string): string =&amp;gt; {
  return firstName + &#39; &#39; + lastName
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crear-em-custom-types-em&quot; tabindex=&quot;-1&quot;&gt;Crear &lt;em&gt;custom types&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Podemos definir nuestros propios tipos de datos. Por ejemplo crearemos un tipo para los valores permitidos para la clase de un botón:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type buttonType = &#39;primary&#39; | &#39;secondary&#39; | &#39;success&#39; | &#39;danger&#39;

let myBtnStyle: buttonType = &#39;danger&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si le asigno un valor que no es uno de los definidos en su tipo se producirá un error.&lt;/p&gt;
&lt;h3 id=&quot;interfaces&quot; tabindex=&quot;-1&quot;&gt;interfaces&lt;/h3&gt;
&lt;p&gt;Una interface es la definición de los tipos de datos de un objeto, para evitar definirlo como hemos visto antes que es demasiado &lt;em&gt;verbose&lt;/em&gt;. Por tanto es como definir nu nuevo tipo de datos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type Modules = &#39;DWEC&#39; | &#39;DWES&#39; |&#39;DIW&#39; |&#39;DAW&#39; | &#39;EIE&#39; | &#39;Inglés&#39;

interface Student {
  name: string;
  age: number;
  modules: Modules[];   // o también modules: Array&amp;lt;Modules&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos centralizar todas las &lt;em&gt;interfaces&lt;/em&gt; que se usan en más de un componente en un fichero al que podemos llamar &lt;code&gt;src/types.ts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;type Modules = &#39;DWEC&#39; | &#39;DWES&#39; |&#39;DIW&#39; |&#39;DAW&#39; | &#39;EIE&#39; | &#39;Inglés&#39;

export interface Student {
  name: string;
  age: number;
  modules: Modules[];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A veces definimos un objeto vacío pero que cuando tenga datos será de cierto tipo. Para que Typescript no piense que se trata de un objeto sin propiedades lo definiremos con &lt;code&gt;as&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;let futureStudent = {} as Student
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos permitirá hacer cosas como &lt;code&gt;futureStudent.name = &#39;Peter Parker&#39;&lt;/code&gt; sin que se produzcan errores de tipo. A esto se llama &lt;strong&gt;&lt;em&gt;type assertions&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Si se quiere aplicar un tipo propio a una variable pasada por &lt;em&gt;props&lt;/em&gt; debemos importar el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;&lt;em&gt;PropType&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;import { defineComponent, PropType } from &#39;vue&#39;

export default defineComponent({
  props: {
    Student: {
      type: Object as PropType&amp;lt;Student&amp;gt;,
      required: true
    }
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para centralizar la definición de tipos se suelen incluir todos los tipos e interfaces en un fichero que llamaremos &lt;code&gt;src/types.ts&lt;/code&gt;. Deberemos exportar los tipos y/o interfaces.&lt;/p&gt;
&lt;p&gt;Visual Studio Code incluye la extensión &lt;strong&gt;VueDX&lt;/strong&gt; que nos informa al escribir código si un objeto tiene o no la propiedad que estamos escribiendo. Es muy recomendable instalarla cuando trabajamos con Typescript.&lt;/p&gt;
&lt;h3 id=&quot;creacion-automatica-de-interfaces&quot; tabindex=&quot;-1&quot;&gt;Creación automática de interfaces&lt;/h3&gt;
&lt;p&gt;Tenemos utilidades que nos permiten generar automáticamente las interfaces de nuestra aplicación a partir de la documentación de la API o incluso a partir del fichero JSON de los datos.&lt;/p&gt;
&lt;p&gt;Un ejemplo es &lt;a href=&quot;https://quicktype.io/typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Quicktype&lt;/a&gt; donde pegamos nuestros datos en formato JSON y genera automáticamente las interfaces y &lt;em&gt;types&lt;/em&gt; necesarios en &lt;em&gt;typescript&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;tipos-genericos&quot; tabindex=&quot;-1&quot;&gt;Tipos genéricos&lt;/h2&gt;
&lt;p&gt;A veces nos gustaría que una función pudiera trabajar con distintos tipos de datos. Por ejemplo, una función para añadir un item a una lista podría ser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;function addItemToNumberList(item: number, list: number[]): number[] {
    list.push(item)
  
    return list
}

const numberList = addItemToNumberList(123, [])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos  algo similar para listas de cadenas habría que crear otra función pero de tipo &lt;em&gt;string&lt;/em&gt;. En lugar de eso podemos decir que el tipo de los parámetros y de la función sea genérico:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;function addItemToList&amp;lt;T&amp;gt;(item: T, list: T[]): T[] {
    list.push(item)
  
    return list
}

const numberList = addItemList&amp;lt;number&amp;gt;(123, [])
const stringList = addItemList&amp;lt;string&amp;gt;(&#39;manzanas&#39;, [])
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;clases&quot; tabindex=&quot;-1&quot;&gt;Clases&lt;/h2&gt;
&lt;p&gt;Son muy similares a las de otros lenguajes. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;class Student {
    public name : string;     // atributo accesible desde fuera de la clase
    protected age: number;    // accesible desde clases que hereden de Student
    private nia : string;  // accesible sólo desde la clase Student

    constructor(name:string ,age:number, nia:string){
        this.name = name;
        this.age = age;
        this.nia = nia;
    }
    getName(){
       return this.name;
    }

    setName(name:string){
       this.name = name;
    }
    getAge(){
       return this.age;
    }

    setAge(age:number){
       this.age = age;
    }

    getNia(nia:string){
       this.nia = nia;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los &lt;em&gt;getters&lt;/em&gt; y &lt;em&gt;setters&lt;/em&gt; también pueden definirse como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;    ...
    get name(){
       return this.name;
    }

    set name(name:string){
       this.name = name;
    }
    ...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sería conveniente definir una interfaz para el objeto Student:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-typescript&quot;&gt;interface IStudent {
  name: string;
  age: number;
  nia: string

  greeting: () =&amp;gt; void
}

class Student implements IStudent {
    constructor(name:string ,age:number, nia:string){
        this.name = name;
        this.age = age;
        this.nia = nia;
    }
    ...
    function greetings () {
      console.log(&#39;Hi &#39; + this.name)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La interfaz obliga a las clases que la implementen a definir, al menos, todas las propiedades y todos los métodos de la interfaz.&lt;/p&gt;
&lt;h2 id=&quot;decoradores&quot; tabindex=&quot;-1&quot;&gt;Decoradores&lt;/h2&gt;
&lt;p&gt;Otra utilidad importante de Typescript son los decoradores que permiten &amp;quot;decorar&amp;quot; un constructor o método, es decir, personalizarlo para que haga algo ligeramente diferente a lo que hace el genérico.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/21-typescript/" >
        </entry>
        <entry>
            <title>
                10-vue3_composition_api
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/10-vue3-composition-api/</id>
            <content type="html">
                &lt;h1 id=&quot;la-em-composition-api-em-de-vue3&quot; tabindex=&quot;-1&quot;&gt;La &lt;em&gt;Composition API&lt;/em&gt; de Vue3&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#la-composition-api-de-vue3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;La &lt;em&gt;Composition API&lt;/em&gt; de Vue3&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-b%C3%A1sico&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo básico&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#setup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;setup&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#script-setup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;script setup&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#reactividad-en-vue3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Reactividad en Vue3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#configuraciones-b%C3%A1sicas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Configuraciones básicas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#props&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Props&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#components&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#computed&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Computed&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#hooks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#watcheffect-y-watch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;watchEffect y watch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pinia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#reusabilidad-composables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Reusabilidad: &lt;em&gt;composables&lt;/em&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#valores-devueltos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Valores devueltos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-de-par%C3%A1metros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso de parámetros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-el-c%C3%B3digo-con-composables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar el código con &lt;em&gt;composables&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Vue3 incluye una importante novedad, la &lt;em&gt;Composition API&lt;/em&gt;, aunque podemos seguir usando la &lt;em&gt;Options API&lt;/em&gt; clásica de Vue2 donde cada elemento (data, computed, methods, ...) es una opción del componente.&lt;/p&gt;
&lt;p&gt;La forma de trabajar hasta Vue 2 es mediante la &lt;em&gt;Options API&lt;/em&gt; donde definíamos un componente mediante una serie de opciones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  name: &amp;quot;ComponentName&amp;quot;,
  props: { ... },
  data() { return {...} },
  computed: { ... },
  methods: { ... },
  mounted() { ... },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto es ideal para pequeñas aplicaciones porque mantiene el código ordenado según su funcionalidad: variables en &lt;em&gt;data&lt;/em&gt;, funciones en &lt;em&gt;methods&lt;/em&gt;, .... Pero en grandes aplicaciones donde un componente necesita hacer varias cosas (como mostrar datos en una tabla pero que esté paginada y con posibilidad de filtrar, ...) el código crece y esta forma de organizarlo se vuelve algo confusa.&lt;/p&gt;
&lt;p&gt;Vue3 permite seguir trabajando así pero incorpora una nueva forma de trabajar con nuestros componentes, la &lt;em&gt;Composition API&lt;/em&gt;. En ella se define un &lt;em&gt;hook&lt;/em&gt; llamado &lt;code&gt;setup()&lt;/code&gt; donde escribimos el código que inicializa el componente y devuelve un objeto con las variables y métodos que podrá usar el resto del componente (por ejemplo el &lt;em&gt;template&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
import { defineProps } from &amp;quot;vue&amp;quot;;

export default {
  name: &amp;quot;ComponentName&amp;quot;,
  props: defineProps({ ... }),     // Props
  setup(props, context) {
    // Init logic, lifecycle hooks, etc...

    return {
      // Data, methods, computed, etc...
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La &lt;em&gt;composition API&lt;/em&gt; es especialmente útil en aplicaciones grandes ya que va a permitir que nuestros componentes sean mucho más reutilizables. Además nos va a permitir organizar el código por funcionalidades y no por &lt;em&gt;opciones&lt;/em&gt;. Por ejemplo si un componente muestra una serie de datos y tiene filtrado de datos y paginación de los mismos en el &lt;code&gt;data()&lt;/code&gt; definiré variables para los datos, variables para el filtrado y variables para la paginación. En &lt;code&gt;computed&lt;/code&gt; puede que también tenga métodos para las 3 cosas y el &lt;code&gt;methods&lt;/code&gt; tendré varios métodos para cada una de las 3 funcionalidades. La &lt;em&gt;composition API&lt;/em&gt; me va a permitir que todo el código (&lt;em&gt;data&lt;/em&gt;, &lt;em&gt;computed&lt;/em&gt;, &lt;em&gt;methods&lt;/em&gt;, ...) referente a la funcionalidad de mostrar los datos esté junto y lo mismo para las funcionalidades de filtrar y de paginar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/composition-api-after.e3f2c350.png&quot; alt=&quot;composition api vs options api&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Cuándo es recomendable usarla:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si queremos soporte total de Typescript&lt;/li&gt;
&lt;li&gt;si nuestro componente es demasiado largo y queremos organizarlo por características (&lt;em&gt;features&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;para mejorar la reutilización de código entre componentes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ejemplo-basico&quot; tabindex=&quot;-1&quot;&gt;Ejemplo básico&lt;/h2&gt;
&lt;p&gt;Por ejemplo, un componente que muestra un contador y un botón para incrementarlo, con la &lt;em&gt;Options API&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  // Properties returned from data() becomes reactive state
  // and will be exposed on `this`.
  props: [&#39;title&#39;],
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  },
  mounted() {
    console.log(`The initial count is ${this.count}.`)
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este ejemplo con la &lt;em&gt;Composition API&lt;/em&gt; quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
import { ref, onMounted } from &amp;quot;vue&amp;quot;;

export default {
  name: &amp;quot;ComponentName&amp;quot;,
  props: [&#39;title&#39;],
  
  setup(props, context) {
    const count = ref(0)

    function increment() {
      count.value++
    }

    onMounted(() =&amp;gt; {
      console.log(`${props.title}: the initial count is ${count.value}.`)
    })

    return {
      count,
      increment,
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que para hacer reactiva una variable hemos de declararla con &lt;code&gt;ref&lt;/code&gt; y su valor lo obtenemos dentro de la propiedad &lt;code&gt;.value&lt;/code&gt;, aunque en el &lt;em&gt;&amp;lt;template&amp;gt;&lt;/em&gt; no es necesario poner el &lt;em&gt;.value&lt;/em&gt;. En el caso de objetos (incluidos arrays) se hacen reactivos con &lt;code&gt;reactive&lt;/code&gt; como veremos al hablar de la &lt;a href=&quot;https://pedroporo.github.io/#reactividad-en-vue3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;reactividad&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Las funciones podemos ponerlas como &lt;em&gt;arrow functions&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    const increment = () =&amp;gt; {
      count.value++
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;setup&quot; tabindex=&quot;-1&quot;&gt;setup&lt;/h2&gt;
&lt;p&gt;Lo primero que hace un componente que usa esta API es ejecutar su método &lt;em&gt;setup&lt;/em&gt;, antes de evaluar ninguna otra característica (&lt;em&gt;data&lt;/em&gt;, &lt;em&gt;computed&lt;/em&gt;, &lt;em&gt;hooks&lt;/em&gt;, ...). Por tanto este método no tiene acceso a &lt;em&gt;this&lt;/em&gt; como el resto. Para que pueda acceder a datos que pueda necesitar recibe 2 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt;: aquí recibe los parámetros pasados al componente. Todos ellos son reactivos y se pueden observar con un &lt;em&gt;watch&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;context&lt;/strong&gt;: es un objeto con las propiedades &lt;em&gt;attrs&lt;/em&gt;, &lt;em&gt;slots&lt;/em&gt;, &lt;em&gt;parent&lt;/em&gt; y &lt;em&gt;emit&lt;/em&gt;. Nos permite acceder a lo que antes accedíamos desde &lt;em&gt;this&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El &lt;em&gt;hook&lt;/em&gt; &lt;strong&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/strong&gt; se encarga de:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tareas de inicialización del componente: todo lo que antes se hacía en &lt;em&gt;created()&lt;/em&gt; o &lt;em&gt;mounted()&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;tareas de definición: aquí se definen las variables (que antes estaban en &lt;em&gt;data&lt;/em&gt;), variables calculadas (antes &lt;em&gt;computed&lt;/em&gt;), funciones (antes &lt;em&gt;methods&lt;/em&gt;) o los &lt;em&gt;watchers&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;devolver los elementos que se puedan usar en el &lt;em&gt;&amp;lt;template&amp;gt;&lt;/em&gt; (variables y funciones)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;and-lt-script-setup-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;script setup&amp;gt;&lt;/h3&gt;
&lt;p&gt;Además de la sintaxis que hemos visto arriba existe una forma &#39;reducida&#39; de escribir la parte de &amp;lt;script&amp;gt; que es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { ref, defineProps, onMounted } from &amp;quot;vue&amp;quot;;

const props = defineProps([&#39;title&#39;])
const count = ref(0)

const increment = () =&amp;gt; {
  count.value++
}

onMounted(() =&amp;gt; {
  console.log(`${props.title}: the initial count is ${count.value}.`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso no es necesario exportar nada (por defecto se exportan las variables y funciones definidas).&lt;/p&gt;
&lt;p&gt;Esta es la &lt;strong&gt;sintaxis recomendada&lt;/strong&gt; cuando usamos SFC por simplicidad y rendimiento tal y como se indica en la &lt;a href=&quot;https://vuejs.org/api/sfc-script-setup.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;reactividad-en-vue3&quot; tabindex=&quot;-1&quot;&gt;Reactividad en Vue3&lt;/h2&gt;
&lt;p&gt;En la &lt;em&gt;composition API&lt;/em&gt; de Vue3 sólo las variables recogidas en &lt;em&gt;props&lt;/em&gt; son reactivas. Cualquier otra declarada en el &lt;em&gt;setup&lt;/em&gt; que queramos que lo sea debemos declararla con &lt;code&gt;ref&lt;/code&gt; si es un tipo primitivo o &lt;code&gt;reactive&lt;/code&gt; si es un objeto.&lt;/p&gt;
&lt;p&gt;La función &lt;code&gt;ref&lt;/code&gt; envuelve la variable en un Proxy reactivo. El valor de la variable estará en su propiedad &lt;code&gt;.value&lt;/code&gt;, aunque desde el template podemos usarla directamente como hemos visto en el código anterior.&lt;/p&gt;
&lt;p&gt;En el caso de variables de tipos no primitivos (objetos, arrays, ...) se declaran con &lt;em&gt;reactive&lt;/em&gt; pero en este caso no es necesario usar la propiedad &lt;code&gt;.value&lt;/code&gt; (es lo mismo que hace el método &lt;code&gt;data()&lt;/code&gt; en la &lt;em&gt;options API&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { reactive, defineProps, onMounted } from &amp;quot;vue&amp;quot;;

const props = defineProps([&#39;title&#39;])
const counter = reactive({ count: 0})

const increment = () =&amp;gt; {
  counter.count++
}

onMounted(() =&amp;gt; {
  console.log(`${props.title}: the initial count is ${counter.count}.`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;El valor del contador es: { { counter.count }}&amp;lt;p&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo si cambiamos la referencia del objeto (por ejemplo si lo desestructuramos) pierde su reactividad.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &amp;quot;vue&amp;quot;;

const counter = reactive({ count: 0})
let { count } = counter   // count no es reactivo
count++   // no afecta a counter.count
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para hacerlo reactivo deberíamos usar el método &lt;code&gt;toRef()&lt;/code&gt; o &lt;code&gt;toRefs()&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &amp;quot;vue&amp;quot;;

const counter = reactive({ count: 0})
let { count } = toRefs(counter)   // count SÍ es reactivo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O bien, si queremos trabajar con las propiedades de un objeto podemos declararlas con &lt;code&gt;ref&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ref } from &amp;quot;vue&amp;quot;;

const counter = { count: ref(0) }
let { count } = counter   // count SÍ es reactivo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También hay métodos para ver si una variable es reactiva:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isRef(variable)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isReactive(variable)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis ver esto con más detalle en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://escuelavue.es/tips/ref-vs-reactive-vue-3/?utm_source=newsletter&amp;amp;utm_medium=email&amp;amp;utm_campaign=cuando_usar_ref_vs_reactive_en_vue_3&amp;amp;utm_term=2022-05-29&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Escuela VUE&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vuejs.org/api/reactivity-core.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentación de Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;configuraciones-basicas&quot; tabindex=&quot;-1&quot;&gt;Configuraciones básicas&lt;/h2&gt;
&lt;h3 id=&quot;em-props-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Props&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Para tener acceso a las &lt;em&gt;props&lt;/em&gt; hay que hacerlas accesibles con &lt;code&gt;defineProps&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { defineProps } from &amp;quot;vue&amp;quot;;

defineProps([&#39;title&#39;])
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si necesitamos acceder a ellas desde el código las asignamos a una variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { onMounted, defineProps } from &amp;quot;vue&amp;quot;;

const props = defineProps([&#39;title&#39;])

onMounted(() =&amp;gt; {
  console.log(`El parámetro pasado en &#39;title&#39; es ${props.title}`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{ { title }}&amp;lt;/h1&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;em-components-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Components&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;No necesitamos registrarlos, basta con importarlos y ya se pueden usar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import ErrorMessages from &amp;quot;./components/ErrorMessages.vue&amp;quot;;
import AppNav from &amp;quot;./components/AppNav.vue&amp;quot;;
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;app-nav&amp;gt;&amp;lt;/app-nav&amp;gt;
    &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
      &amp;lt;error-messages&amp;gt;&amp;lt;/error-messages&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;em-computed-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Computed&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El uso de &lt;em&gt;computed&lt;/em&gt; cambia ya que ahora es una función en lugar de un objeto.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;# Options API
data(): {
  return {
    productPrice: 100
  }
},
computed: {
  offerPrice() {
    return this.productPrice * 50%
  },
  originalPrice() {
    return this.productPrice
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Composition API
import { ref, computed } from &amp;quot;vue&amp;quot;;

const productPrice = ref(100)

const offerPrice = computed(() =&amp;gt; productPrice.value * 50%)
const originalPrice = computed(() =&amp;gt; productPrice.value)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Todas las variables definidas como &lt;em&gt;computed&lt;/em&gt; son automáticamente reactivas.&lt;/p&gt;
&lt;h3 id=&quot;hooks&quot; tabindex=&quot;-1&quot;&gt;hooks&lt;/h3&gt;
&lt;p&gt;Se les antepone &lt;em&gt;on&lt;/em&gt; (ej, &lt;code&gt;onMounted&lt;/code&gt;). Ya no son necesarios ni &lt;em&gt;beforeCreated&lt;/em&gt; ni &lt;em&gt;created&lt;/em&gt; que son sustituidas por el &lt;code&gt;setup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podéis ver esto con más detalle en la &lt;a href=&quot;https://vuejs.org/api/composition-api-lifecycle.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;router&quot; tabindex=&quot;-1&quot;&gt;router&lt;/h3&gt;
&lt;p&gt;Para acceder al &lt;em&gt;router&lt;/em&gt; y a la variable &lt;em&gt;route&lt;/em&gt; en &lt;em&gt;composition API&lt;/em&gt; tenemos que importarlas de &lt;em&gt;vue-router&lt;/em&gt; e instanciarlas, ya que no tenemos acceso a &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { useRouter, useRoute } from &#39;vue-router&#39;

const router = useRouter()
const route = useRoute()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;watch-effect-y-watch&quot; tabindex=&quot;-1&quot;&gt;watchEffect y watch&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;watch&lt;/em&gt; funciona como en &lt;em&gt;Vue2&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;# Vue 3
import { ref, watch } from &amp;quot;vue&amp;quot;;
setup(props) {
  const productPrice = ref(props.price);
  watch(productPrice, (current, prev) =&amp;gt; {
    console.log(&#39;productPrice current: &#39; + current + &#39;, prev: &#39; + prev)
  })
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;watchEffect&lt;/em&gt; es una función que se ejecuta inmediatamente y cada vez que cambie alguna de sus dependencias reactivas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ref, watchEffect } from &amp;quot;vue&amp;quot;;
setup(props) {
  const productPrice = ref(props.price);
  watchEffect(() =&amp;gt; {
    console.log(&#39;productPrice current: &#39; + productPrice.value)
  })
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos obtener más información sobre cuándo usar un u otro método en &lt;a href=&quot;https://escuelavue.es/tips/vue-3-watch-vs-watcheffect/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Escuela VUE&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pinia&quot; tabindex=&quot;-1&quot;&gt;Pinia&lt;/h3&gt;
&lt;p&gt;Los ficheros de &lt;em&gt;store&lt;/em&gt; no cambian pero sí la forma de usarlos en el componente. Allí se importa el &lt;em&gt;store&lt;/em&gt; y cada variable, &lt;em&gt;getter&lt;/em&gt; o &lt;em&gt;action&lt;/em&gt; que queramos usar en el componente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { useCounterStore } from &#39;../stores/counterStore&#39;;
import { computed } from &#39;vue&#39;;

   // store
   const counterStore = useCounterStore();

   //state &amp;amp; getters
   const count = computed(() =&amp;gt; counterStore.count);  // state
   const lastOperation = computed(() =&amp;gt; counterStore.lastOperation);  // getter

   //actions
   const increment = () =&amp;gt; counterStore.increment();
   const decrement = () =&amp;gt; counterStore.decrement();
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;p&amp;gt;Counter: { { count }}&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Last: { { lastOperation }}&amp;lt;/p&amp;gt;
        &amp;lt;button @click=&amp;quot;increment()&amp;quot;&amp;gt;Add&amp;lt;/button&amp;gt;
        &amp;lt;button @click=&amp;quot;decrement()&amp;quot;&amp;gt;Subtract&amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;reusabilidad-em-composables-em&quot; tabindex=&quot;-1&quot;&gt;Reusabilidad: &lt;em&gt;composables&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;La principal razón de ser de la &lt;em&gt;composition API&lt;/em&gt; es que permite usar funciones &lt;strong&gt;&lt;em&gt;composables&lt;/em&gt;&lt;/strong&gt;, que son funciones donde podemos poner código &lt;em&gt;con estado&lt;/em&gt; (es decir, que usa variables reactivas). El nombre de las funciones &lt;em&gt;composables&lt;/em&gt; por convenio comienza por &lt;em&gt;use&lt;/em&gt; y se usan para encapsular código que podrá usar cualquier componente.&lt;/p&gt;
&lt;p&gt;Por ejemplo podemos hacer una &lt;em&gt;composable&lt;/em&gt; que nos proporcione la posición actual del ratón:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// mouse.js

import { ref, onMounted, onUnmounted } from &#39;vue&#39;

export function useMouse() {
  const x = ref(0)
  const y = ref(0)

  function update(event) {
    x.value = event.pageX
    y.value = event.pageY
  }

  onMounted(() =&amp;gt; window.addEventListener(&#39;mousemove&#39;, update))
  onUnmounted(() =&amp;gt; window.removeEventListener(&#39;mousemove&#39;, update))

  return { x, y }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función &lt;em&gt;useMouse&lt;/em&gt; proporciona a quien la importe 2 variables reactivas (&lt;em&gt;x&lt;/em&gt; e &lt;em&gt;y&lt;/em&gt;) donde se encuentra la posición actual del ratón, actualizada por la función &lt;em&gt;update&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En cualquier componente donde necesitemos conocer la posición del ratón sólo necesitamos importar esta función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
  import { useMouse } from &#39;./useMouse&#39;;
  const { x, y } = useMouse();
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  X: { { x }} Y: { { y }}
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Siempre que pongamos un escuchador en una &lt;em&gt;composable&lt;/em&gt; (como hemos hecho en el &lt;code&gt;onMounted&lt;/code&gt;) debemos quitarlo cuando ya no se utilice (en el &lt;code&gt;unMounted&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;valores-devueltos&quot; tabindex=&quot;-1&quot;&gt;Valores devueltos&lt;/h3&gt;
&lt;p&gt;Como se ve la &lt;em&gt;composable&lt;/em&gt; devuelve un objeto formado por variables reactivas (&lt;em&gt;refs&lt;/em&gt;) en lugar de un objeto reactivo. Se hace así por convención, lo que permite desestructurar las variables en el componente que las vaya a usar sin perder su reactividad (al desestructurar un &lt;em&gt;reactive&lt;/em&gt; deja de serlo).&lt;/p&gt;
&lt;p&gt;Si lo hubiéramos hecho con un &lt;em&gt;reactive&lt;/em&gt; NO funcionaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// mouse.js MAL

import { reactive, onMounted, onUnmounted } from &#39;vue&#39;

export function useMouse() {
  const x = 0
  const y = 0

  ...
  return reactive({ x, y })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;porque entonces al hacer en el componente&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  const { x, y } = useMouse();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;las variables &lt;em&gt;x&lt;/em&gt; e &lt;em&gt;y&lt;/em&gt; dejarían de ser reactivas.&lt;/p&gt;
&lt;p&gt;Podría hacerse no desestructurando el objeto, pero se prefiere así por claridad, para tener claras qué variables nos proporciona la función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
  import { useMouse } from &#39;./useMouse&#39;;
  const position = useMouse();
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  X: { { position.x }} Y: { { position.y }}
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto sí funcionaría pero se recomienda la otra forma: una &lt;em&gt;composable&lt;/em&gt; devuelve un array de variables reactivas que se importan (desestructurando el objeto) en el componente que las vaya a usar.&lt;/p&gt;
&lt;h3 id=&quot;paso-de-parametros&quot; tabindex=&quot;-1&quot;&gt;Paso de parámetros&lt;/h3&gt;
&lt;p&gt;Podemos pasar parámetros a las funciones &lt;em&gt;composables&lt;/em&gt; en el momento de usarlas y dichos parámetros los recibirá directamente la &lt;em&gt;composable&lt;/em&gt; como cualquier otra función.&lt;/p&gt;
&lt;p&gt;Por ejemplo podemos crear &lt;em&gt;useFetch&lt;/em&gt; a la que le pasamos una &lt;em&gt;url&lt;/em&gt; y hace un &lt;em&gt;fetch&lt;/em&gt; para hacer la llamada a esa url y devolver los datos o el error devueltos por el servidor.&lt;br /&gt;
El componente que quiera usarla haría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
  import { useFetch } from &#39;./useFetch&#39;;
  const { data, error } = useFetch(&#39;https://jsonplaceholder.typicode.com/users/3&#39;)
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;div v-if=&amp;quot;error&amp;quot;&amp;gt;{{ error }}&amp;lt;/div&amp;gt;
  &amp;lt;div v-else&amp;gt;
    // Aquí mostramos los datos recibidos en la variable &#39;data&#39;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y nuestra función haría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// useFetch.js
import { ref } from &#39;vue&#39;

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  fetch(url)
    .then((res) =&amp;gt; res.json())
    .then((json) =&amp;gt; (data.value = json))
    .catch((err) =&amp;gt; (error.value = err))

  return { data, error }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el parámetro recibido es reactivo podemos hacer que la función se ejecute cada vez que cambie observándolo con &lt;em&gt;watch&lt;/em&gt; o &lt;em&gt;watchEffect&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fetch.js
import { ref, watch } from &#39;vue&#39;

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  function doFetch() {
    fetch(url.value)
      .then((res) =&amp;gt; res.json())
      .then((json) =&amp;gt; (data.value = json))
      .catch((err) =&amp;gt; (error.value = err))
  }

  watch(url, () =&amp;gt; doFetch())
  
  return { data, error }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si nuestras &lt;em&gt;composables&lt;/em&gt; pueden recibir parámetros reactivos siempre es una buena práctica que puedan recibir también parámetros primitivos (en el caso anterior daría un error al hacer &lt;code&gt;fetch(url.value)&lt;/code&gt; porque url es un &lt;em&gt;string&lt;/em&gt;). La forma más correcta de hacerlo sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fetch.js
import { ref, isRef, unref, watchEffect } from &#39;vue&#39;

export function useFetch(url) {
  const data = ref(null)
  const error = ref(null)

  function doFetch() {
    // reset state before fetching..
    data.value = null
    error.value = null
    // unref() unwraps potential refs
    fetch(unref(url))
      .then((res) =&amp;gt; res.json())
      .then((json) =&amp;gt; (data.value = json))
      .catch((err) =&amp;gt; (error.value = err))
  }

  if (isRef(url)) {
    // setup reactive re-fetch if input URL is a ref
    watchEffect(doFetch)
  } else {
    // otherwise, just fetch once
    // and avoid the overhead of a watcher
    doFetch()
  }

  return { data, error }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso se ha hecho una función que va a funcionar tanto si se le pasa un url estática como si se le pasa una reactiva. Lo que ha cambiado es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isRef&lt;/code&gt;: nos dice si el parámetro pasado es o no reactivo. Si no lo es llama directamente a la función. Si lo es hace&lt;/li&gt;
&lt;li&gt;&lt;code&gt;watchEffect&lt;/code&gt;: cada vez que cambie el valor de &lt;em&gt;url&lt;/em&gt; llamará a la función&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unref&lt;/code&gt;: devuelve el &lt;code&gt;.value&lt;/code&gt; de una variable si es reactiva o la variable si no lo es. Si &lt;em&gt;url&lt;/em&gt; es reactiva devuelve &lt;code&gt;url.value&lt;/code&gt; y si no devuelve &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;organizar-el-codigo-con-em-composables-em&quot; tabindex=&quot;-1&quot;&gt;Organizar el código con &lt;em&gt;composables&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Además de para que el código sea fácilmente reutilizable, las &lt;em&gt;composables&lt;/em&gt; se usan para sacar código de un componente cuando este es demasiado grande o se encarga de varias funcionalidades. Una vez creadas las funciones se usan en el componente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script setup&amp;gt;
import { useFeatureA } from &#39;./featureA.js&#39;
import { useFeatureB } from &#39;./featureB.js&#39;
import { useFeatureC } from &#39;./featureC.js&#39;

const { foo, bar } = useFeatureA()
const { baz } = useFeatureB(foo)
const { qux } = useFeatureC(baz)
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tenemos que usar una función &lt;em&gt;composable&lt;/em&gt; en un componente escrito en modo &lt;em&gt;Options API&lt;/em&gt; simplemente añadimos el &lt;em&gt;hook&lt;/em&gt; &lt;code&gt;setup&lt;/code&gt; y allí la llamamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { useMouse } from &#39;./mouse.js&#39;
import { useFetch } from &#39;./fetch.js&#39;

export default {
  setup() {
    const { x, y } = useMouse()
    const { data, error } = useFetch(&#39;...&#39;)
    return { x, y, data, error }
  },
  mounted() {
    // setup() exposed properties can be accessed on `this`
    console.log(this.x)
  }
  // ...other options
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Algunos enlaces útiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.sitepoint.com/vue-composition-api-reusable-components/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to Create Reusable Components with the Vue 3 Composition API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mokkapps.de/blog/why-i-love-vue-3-s-composition-api/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Why I Love Vue 3&#39;s Composition API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos encontrar infinidad de &lt;em&gt;composables&lt;/em&gt; que podemos usar en nuestro código en la página &lt;a href=&quot;https://vueuse.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VueUse&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/10-vue3-composition-api/" >
        </entry>
        <entry>
            <title>
                0x-testing
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/0x-testing/</id>
            <content type="html">
                &lt;h1 id=&quot;testear-nuestros-componentes&quot; tabindex=&quot;-1&quot;&gt;Testear nuestros componentes&lt;/h1&gt;
&lt;p&gt;La librería que incluye Vue para testear las aplicaciones el &lt;strong&gt;vue-test_utils&lt;/strong&gt; que proporciona herramientas para montar e interactuar con componentes. Para los tests unitarios usaremos &lt;a href=&quot;https://jestjs.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Jest&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Tras instalar la librería con npm (será una dependencia de desarrollo) indicaremos al &lt;em&gt;linter&lt;/em&gt; que vamos a usar jest para que no genere advertencias al usar sus comandos para lo que modificaremos el fichero &lt;em&gt;.eslintrc.js&lt;/em&gt; y añadiremos al apartado &lt;em&gt;env&lt;/em&gt; una línea indicando que vamos a usar jest. Dicho apartado quedará:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  env: {
    node: true,
    jest: true,
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si usamos librerías como Vue-Material o Vuetify y debemos importar ficheros .css de las mismas en nuestros componentes es posible que falle Jest a la hora de pasar los test y nos dará un error de que no puede procesar el fichero porque no es Javascript. Podemos solucionarlo instalando para desarrollo el paquete &lt;em&gt;identuty-obj-proxy&lt;/em&gt; y añadiendo una entrada para &lt;em&gt;moduleNameMapper&lt;/em&gt; al fichero de configuración de Jest &lt;strong&gt;jest.config.js&lt;/strong&gt; que quedará:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
  preset: &#39;@vue/cli-plugin-unit-jest&#39;,
  moduleNameMapper: {
    &amp;quot;&#92;&#92;.(css|less|scss|sass)$&amp;quot;: &amp;quot;identity-obj-proxy&amp;quot;
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(fuente: &lt;a href=&quot;https://stackoverflow.com/questions/46177148/how-to-exclude-css-module-files-from-jest-test-suites&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/46177148/how-to-exclude-css-module-files-from-jest-test-suites&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;tests-unitarios&quot; tabindex=&quot;-1&quot;&gt;Tests unitarios&lt;/h2&gt;
&lt;p&gt;A la hora de crear el proyecto no escogeremos &lt;em&gt;preset&lt;/em&gt; sino que seleccionaremos manualmente las características a instalar y marcaremos la de tests unitarios con &lt;em&gt;Jest&lt;/em&gt; que es la librería que usamos en el bloque de Javascript.&lt;/p&gt;
&lt;p&gt;Para ejecutar los tests ejecutaremos en la terminal&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run test:unit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El projecto está configurado para ejecutar los ficheros de pruebas cuyo nombre acabe por &lt;strong&gt;.spec.js&lt;/strong&gt;. Por defecto se guardan en la carpeta &lt;strong&gt;/tests&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;primer-test-hello-world-vue&quot; tabindex=&quot;-1&quot;&gt;Primer test: HelloWorld.vue&lt;/h3&gt;
&lt;p&gt;En primer lugar vamos a analizar el test que hay hecho en &lt;strong&gt;@/tests/exemple.spec.js&lt;/strong&gt; para testear el componente HelloWorld.vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;
import HelloWorld from &#39;@/components/HelloWorld.vue&#39;

describe(&#39;HelloWorld.vue&#39;, () =&amp;gt; {
  it(&#39;renders props.msg when passed&#39;, () =&amp;gt; {
    const msg = &#39;new message&#39;
    const wrapper = shallowMount(HelloWorld, {
      propsData: { msg }
    })
    expect(wrapper.text()).toMatch(msg)
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo primero que hay que hacer es importar el plugin de tests de vue y el componente a testear. Dentro de la prueba se monta el componente (&lt;code&gt;shallowMount&lt;/code&gt;) y se le pasan las props que necesite (msg). A esta función se le pasa un componente y devuelve la instancia de Vue creada para él y su nodo del DOM.&lt;/p&gt;
&lt;p&gt;Como segundo parámetro se le puede pasar un objeto con opciones a montar en el componente (por ejemplo un &lt;em&gt;data&lt;/em&gt; que sustituirá al del componente) o, como en el ejemplo anterior, los parámetros que se le pasan al componente (en &lt;em&gt;propsData&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Además de &lt;code&gt;shallowMount&lt;/code&gt; podemos usar (si lo importamos) el método &lt;code&gt;mount&lt;/code&gt; que hace lo mismo pero también renderiza los subcomponentes que tenga el componente.&lt;/p&gt;
&lt;p&gt;Por último se comprueba que el texto renderizado por el &lt;em&gt;template&lt;/em&gt; del componente incluye el mensaje pasado. La variable &lt;em&gt;wrapper&lt;/em&gt; es el nodo DOM raíz del componente y podemos obtener su &lt;em&gt;textContent&lt;/em&gt; (&lt;code&gt;.text()&lt;/code&gt;), su &lt;em&gt;innerHTML&lt;/em&gt; (&lt;code&gt;.html()&lt;/code&gt;), sus atributos (&lt;code&gt;.attributes()&lt;/code&gt;, y para acceder a uno, por ejemplo la id haríamos &lt;code&gt;.attributes().id&lt;/code&gt; ), sus clases (&lt;code&gt;.classes()&lt;/code&gt;), etc.Podemos ver todos sus métodos en la &lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue test utils&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También podríamos haber hecho la siguiente comprobación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    expect(wrapper.html()).toMatch(&#39;&amp;lt;h1&amp;gt;&#39;+msg+&#39;&amp;lt;/h1&amp;gt;&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o bien comprobar directamente el valor de &lt;em&gt;prop&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    expect(wrapper.props().msg).toBe(msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-atributos-clases-y-estilos-en-linea&quot; tabindex=&quot;-1&quot;&gt;Comprobar atributos, clases y estilos en línea&lt;/h3&gt;
&lt;p&gt;El componente que vamos a probar es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;Testing dom attributes&amp;lt;/h1&amp;gt;
    &amp;lt;a href=&amp;quot;https://google.com&amp;quot; class=&amp;quot;link&amp;quot; style=&amp;quot;color:green&amp;quot;&amp;gt;Google&amp;lt;/a&amp;gt;  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el test es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import App from &#39;../src/App.vue&#39;
import { shallowMount } from &#39;@vue/test-utils&#39;;

describe(&#39;Testing dom attributes&#39;, () =&amp;gt; {
    it(&#39;checks href to google &#39;, () =&amp;gt; {
        const wrapper = shallowMount(App);
        const a = wrapper.find(&#39;a&#39;); //finds an `a` element
        expect(a.attributes().href).toBe(&#39;https://google.com&#39;)
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si lo que queremos comprobar son las clases, estas tienen su propio método:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;Testing class&#39;, () =&amp;gt; {
    it(&#39;checks the class to be link&#39;, () =&amp;gt; {
        const wrapper = shallowMount(App);
        const a = wrapper.find(&#39;a&#39;); //finds an `a` element
        expect(a.classes()).toContain(&#39;link&#39;)
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y lo mismo ocurre para comprobar un estilo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;Testing style&#39;, () =&amp;gt; {
    it(&#39;checks the inline style color to be green&#39;, () =&amp;gt; {
        const wrapper = shallowMount(App);
        const a = wrapper.find(&#39;a&#39;); //finds an `a` element
        expect(a.style.color).toBe(&#39;green&#39;)
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-un-metodo-de-un-componente&quot; tabindex=&quot;-1&quot;&gt;Comprobar un método de un componente&lt;/h3&gt;
&lt;p&gt;El componente que vamos a probar es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;    &amp;lt;button @click=&amp;quot;changeTitle&amp;quot;&amp;gt;Change title&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data: function() {
    return {
      title: &amp;quot;Hello&amp;quot;    };
  },
  methods: {
    changeTitle() {
      this.title = &amp;quot;Hi&amp;quot;;    }
  }
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el test es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;;
import Post from &#39;../src/components/Welcome.vue&#39;
describe(&#39;Testing Component Methods&#39;, () =&amp;gt; {
    const wrapper = shallowMount(Post);

    it(&#39;correctly updates the title when changeTitle is called&#39;, () =&amp;gt; {
        expect(wrapper.vm.title).toBe(&#39;Hello&#39;); //initial title Hello
        wrapper.vm.changeTitle();  // calling component method
        expect(wrapper.vm.title).toBe(&#39;Hi&#39;); // title updates to Hi
    })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-que-un-metodo-es-llamado-al-producirse-un-evento&quot; tabindex=&quot;-1&quot;&gt;Comprobar que un método es llamado al producirse un evento&lt;/h3&gt;
&lt;p&gt;El componente que vamos a probar es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h1&amp;gt;{{count}}&amp;lt;/h1&amp;gt;
    &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data: function() {
    return {
      count:0
    };
  },
  methods: {
    increment() {
      this.count++;
    }
  }
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y el test es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;;
import Post from &#39;../src/components/Counter.vue&#39;

describe(&#39;Testing native dom events&#39;, () =&amp;gt; {
    const wrapper = shallowMount(Post);

    it(&#39;calls increment method when button is clicked&#39;, () =&amp;gt; {
        const increment = jest.fn(); // mock function
        // updating method with mock function
        wrapper.setMethods({ increment });
        //find the button and trigger click event
        wrapper.find(&#39;button&#39;).trigger(&#39;click&#39;);
        expect(increment).toBeCalled();
    })

})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://reactgo.com/vue-test-dom-events/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Dom events in Vue.js using Jest and vue-test-utils. Sai gowtham&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;comprobar-que-el-dom-reacciona-a-cambios-en-una-variable-reactiva&quot; tabindex=&quot;-1&quot;&gt;Comprobar que el DOM reacciona a cambios en una variable reactiva&lt;/h3&gt;
&lt;p&gt;Dado que Vue realiza las actualizaciones de DOM de forma asíncrona, las comprobaciones sobre las actualizaciones de DOM resultantes del cambio de estado, deberán realizarse en un callback &lt;code&gt;Vue.nextTick&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;it(&#39;button click should increment the count text&#39;, async () =&amp;gt; {
  expect(wrapper.text()).toContain(&#39;0&#39;)
  const button = wrapper.find(&#39;button&#39;)
  button.trigger(&#39;click&#39;)
  await Vue.nextTick()
  expect(wrapper.text()).toContain(&#39;1&#39;)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comprobar-peticiones-asincronas-a-servicios-ajenos-a-vue&quot; tabindex=&quot;-1&quot;&gt;Comprobar peticiones asíncronas a servicios ajenos a Vue&lt;/h3&gt;
&lt;p&gt;En muchos casos hacemos peticiones asíncronas, como peticiones a una API. Podéis obtener información en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vue-test-utils.vuejs.org/guides/testing-async-components.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Doc Vue test utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jestjs.io/docs/es-ES/mock-functions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Jest: Mock Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nuestro-primer-test-todo-item-vue&quot; tabindex=&quot;-1&quot;&gt;Nuestro primer test: TodoItem.vue&lt;/h3&gt;
&lt;p&gt;En primer lugar vamos a testear que la propiedad &#39;done&#39; tiene el valor que se le pasa y que cambia al llamar a la función &#39;toogleDone&#39;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { shallowMount } from &#39;@vue/test-utils&#39;
import Usuario from &#39;@/components/Usuario.vue&#39;

describe(&#39;componente Usuario.vue&#39;, () =&amp;gt; {
 it(&#39;debe cambiar el valor a true&#39;, () =&amp;gt; {
  /// Crea una instancia del componente
  const wrapper = shallowMount(Usuario);

  /// Evalúa que el valor por defecto sea &amp;quot;false&amp;quot;
  expect(wrapper.vm.usuarioActivo).toBe(false);

  /// Ejecuta el metodo que cambia el valor de la variable a &amp;quot;true&amp;quot;
  wrapper.vm.activarUsuario();

  /// Evalúa que el nuevo valor usuarioActivo sea &amp;quot;true&amp;quot;
  expect(wrapper.vm.usuarioActivo).toBe(true);
 })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;testear-vuex&quot; tabindex=&quot;-1&quot;&gt;Testear Vuex&lt;/h3&gt;
&lt;p&gt;Normalmente nuestros componentes usaran Vuex para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hacer un &lt;em&gt;commit&lt;/em&gt; a una &lt;em&gt;mutation&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;hacer un &lt;em&gt;dispatch&lt;/em&gt; a una &lt;em&gt;action&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;acceder a los datos mediante &lt;em&gt;state&lt;/em&gt; o &lt;em&gt;getters&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;testear-mutations&quot; tabindex=&quot;-1&quot;&gt;Testear mutations&lt;/h4&gt;
&lt;p&gt;Es sencillo porque sólo son llamadas Javascript. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// store.js
...
mutations: {
      addPost(state, post) {
        state.posts.push(post);
      },
}
...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// store.spec.js
import { mutations } from &amp;quot;@/store/index.js&amp;quot;

describe(&amp;quot;addPost&amp;quot;, () =&amp;gt; {
  it(&amp;quot;adds a post to the state&amp;quot;, () =&amp;gt; {
    const post = { id: 1, title: &amp;quot;Primer post&amp;quot; }
    const state = {
      posts: [],
    }

    mutations.addPost(state, post)

    expect(state).toEqual({
      posts: [ { id: 1, title: &#39;Primer post&#39; } ]
    })
  })
})

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;testear-actions&quot; tabindex=&quot;-1&quot;&gt;Testear actions&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejemplo&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;Podéis encontrar un completo ejemplo de cómo testear una aplicación &lt;em&gt;ToDo&lt;/em&gt; en &lt;a href=&quot;https://www.adictosaltrabajo.com/2018/10/25/testing-en-componentes-de-vue-js/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Adictos al trabajo - Testing en componentes de Vue.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podéis encontrar ejemplos más completos en muchas páginas, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Testing Vue]&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lmiller1990.github.io/vue-testing-handbook/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Testing Handbook&lt;/a&gt;: completo tutorial de cómo testear todo en nuestros componentes Vue (props, computed, Vuex, router, ...)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lmiller1990.github.io/vue-testing-handbook/testing-vuex.html#testing-vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://livebook.manning.com/book/testing-vue-js-applications/about-this-book/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Vue.js Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fuentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vue-test-utils.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue test utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es.vuejs.org/v2/guide/unit-testing.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentación oficial de Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://reactgo.com/vue-test-dom-events/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ReactGo: Vue tutorials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://carlossolis.mobi/pruebas-unitarias-en-vue-js-setup-y-primeros-pasos-7255788f3e3b&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pruebas unitarias en Vue.js: Setup y primeros pasos. Carlos Solis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-e2e&quot; tabindex=&quot;-1&quot;&gt;Test e2e&lt;/h2&gt;
&lt;p&gt;No comprueban un componente sino un &lt;em&gt;workflow&lt;/em&gt; completo, por ejemplo, que el usuario introduce algo como nombre de nueva tarea, pulsa enviar y se añade la tarea a la lista.&lt;/p&gt;
&lt;p&gt;Al pasar los tests arranca un servidor de tests (&lt;em&gt;selenium&lt;/em&gt;) y un navegador donde hace las pruebas y luego los cierra.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/0x-testing/" >
        </entry>
        <entry>
            <title>
                0x-quasar
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/0x-quasar/</id>
            <content type="html">
                &lt;h1 id=&quot;quasar&quot; tabindex=&quot;-1&quot;&gt;Quasar&lt;/h1&gt;
&lt;p&gt;Es un framwork basado en Vue que permite crear aplicaciones multiplataforma (web/desktop/mobile) con un sólo código fuente. Para usarlo podemos integrarlo desde n CDN, añadirlo como un plugin a Vue-cli o utilizar su propio entorno, &lt;em&gt;Quasar CLI&lt;/em&gt;, lo que nos permitirá obtener las máximas prestaciones de este framework. Tenéis una comparativa sobre los 3 métodos en la &lt;a href=&quot;https://quasar.dev/start/pick-quasar-flavour&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Quasar&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;instalar-quasar-cli&quot; tabindex=&quot;-1&quot;&gt;Instalar Quasar cli&lt;/h2&gt;
&lt;p&gt;Necesitamos tener NodeJs instalado y haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install -S @quasar/cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;code&gt;-g&lt;/code&gt; es para que se instale globalmente y así poder tenerlo disponible para cualquier proyecto.&lt;/p&gt;
&lt;h2 id=&quot;crear-un-proyecto&quot; tabindex=&quot;-1&quot;&gt;Crear un proyecto&lt;/h2&gt;
&lt;p&gt;Se crea mendiante&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;quasar createnombre-proyecto
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;deteccion-de-plataforma&quot; tabindex=&quot;-1&quot;&gt;Detección de plataforma&lt;/h3&gt;
&lt;p&gt;Quasar nos permite saber en qué plataforma se está mostrando mediante &lt;code&gt;$q.plataform&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div v-if=&amp;quot;$q.plataform.is.desktop&amp;quot;&amp;gt;
  Esto se muestra en un escritorio
&amp;lt;/div&amp;gt;
&amp;lt;div v-if=&amp;quot;$q.plataform.is.mobile&amp;quot;&amp;gt;
  Esto se muestra en un móvil
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otros posibles valores de plataforma son &lt;em&gt;electron&lt;/em&gt;, &lt;em&gt;cordova&lt;/em&gt;, ... Para usarlo debemos importar esta característica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Plataform } from &#39;quasar&#39;
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/0x-quasar/" >
        </entry>
        <entry>
            <title>
                09-cosas
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/09-cosas/</id>
            <content type="html">
                &lt;h1 id=&quot;siguientes-cosas-a-aprender-en-vue&quot; tabindex=&quot;-1&quot;&gt;Siguientes cosas a aprender en Vue&lt;/h1&gt;
&lt;p&gt;Algunas cosas interesantes que nos pueden ser útiles en nuestros proyectos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#siguientes-cosas-a-aprender-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Siguientes cosas a aprender en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#autenticaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Autenticación&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#store&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#loginvue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Login.vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-a-producci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso a producción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vuetify&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuetify&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-el-layout&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear el layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saber-m%C3%A1s&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saber más&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ssr-server-side-rendering&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;SSR (Server Side Rendering)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-aplicaciones-m%C3%B3viles-con-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear aplicaciones móviles con Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#quasar&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Quasar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-native&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Native&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ionic-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ionic Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#nuxt&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nuxt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#conclusi%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Conclusión&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#angular&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-con-laravel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue con Laravel&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creaci%C3%B3n-del-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creación del proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#configuramos-el-proyecto-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Configuramos el proyecto en Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#configuramos-laravel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Configuramos Laravel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#compilamos-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Compilamos Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creamos-la-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creamos la API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saber-m%C3%A1s-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saber más&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;autenticacion&quot; tabindex=&quot;-1&quot;&gt;Autenticación&lt;/h2&gt;
&lt;p&gt;Una parte importante de cualquier aplicación es la autenticación de usuarios. Una de las formas más usadas y sencillas de autenticarnos frente a una API es el uso de &lt;em&gt;tokens&lt;/em&gt;: cuando nos logueamos la API nos pasa un token y en cada petición que le hagamos debemos adjuntar dicho token en las cabeceras de la petición, tal y como vimos al final del tema de &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/04-axios.html#a%C3%B1adir-cabeceras-a-la-petici%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;axios&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aparte de eso, que es lo básico, hay muchas más cosas que podemos incluir en nuestras aplicaciones. Por ejemplo vamos a hacer una aplicación que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;al loguearnos la API nos pasa un token que guardaremos en el &lt;em&gt;store&lt;/em&gt; y también en el &lt;em&gt;localStorage&lt;/em&gt; para poder continuar logueados si se recarga la página (recuerda que al recargar se borran todas las variables de nuestro código)&lt;/li&gt;
&lt;li&gt;interceptaremos todas las peticiones a la API para incluir en las cabeceras el token, si tenemos&lt;/li&gt;
&lt;li&gt;interceptaremos todas las respuestas a la API y si en alguna el servidor responde con un error 401 (Unauthenticated) reenviaremos al usuario a la página de login para que se loguee pero pasándole como parámetro la página a la que quería ir para que una vez logueado vaya automáticamente a dicha página&lt;/li&gt;
&lt;li&gt;el login hará varias cosas
&lt;ul&gt;
&lt;li&gt;si hay token en el &lt;em&gt;localStorage&lt;/em&gt; es que ya está logueado (posiblemente se haya recargado la página y al interceptar la respuesta era un 401 porque iba sin token y se ha redireccionado aquí). En este caso simplemente se guarda el token en el &lt;em&gt;store&lt;/em&gt; y se vuelve a la página de donde venía la petición. OJO: si el token caduca (que es lo más normal) deberemos mirar si ya ha expirado y en ese caso no se guarda en el &lt;em&gt;store&lt;/em&gt; sino que se elimina del &lt;em&gt;localStorage&lt;/em&gt; y se hace un login normal&lt;/li&gt;
&lt;li&gt;si no hay token es que debemos loguearnos así que se muestra el formulario para que el usuario introduzca sus credenciales y se le envían al servidor. Este contestará con un token que deberemos guardar en el &lt;em&gt;store&lt;/em&gt; y en el &lt;em&gt;localStorage&lt;/em&gt; antes de redireccionar a la página de la que venía la petición o a la página de inicio&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;en el &lt;em&gt;router&lt;/em&gt; indicaremos para qué rutas hay que estar autentificado y antes de cargar cualquiera de ellas (usaremos el &lt;em&gt;hook&lt;/em&gt; &lt;em&gt;beforeEach&lt;/em&gt;) comprobamos si estamos autenticados y en caso de no estarlo redireccionamos al login, pero pasándole como parámetro la ruta a la que queríamos ir para que se cargue tras loguearse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Veamos el código para hacer todo esto:&lt;/p&gt;
&lt;h3 id=&quot;store&quot; tabindex=&quot;-1&quot;&gt;Store&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero &#39;@/store/index.js&#39;
...
mutations: {
    loginUser(state, token) {
        state.token = token
        localStorage.token = token
    },
    logoutUser(state) {
        state.token = null
        localStorage.removeItem(&#39;token&#39;)
    },
},
actions: {
    login(context, user) {
        return new Promise ((resolve, reject) =&amp;gt; {
            API.users.login(user)
            .then((response) =&amp;gt; {
                context.commit(&#39;login&#39;, response.data)
                resolve(response.data)
            })
            .catch((err) =&amp;gt; reject(err))
        })
    },
    ...
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La acción que envía las credenciales del usuario al servidor es una promesa porque el componente &lt;em&gt;Login.vue&lt;/em&gt; tiene que saber cuándo se obtiene el token para redireccionar a la página correspondiente.&lt;/p&gt;
&lt;p&gt;Las &lt;em&gt;mutaciones&lt;/em&gt; almacenan el &lt;em&gt;token&lt;/em&gt; en el &lt;em&gt;store&lt;/em&gt; y también en el &lt;em&gt;localStorage&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;api&quot; tabindex=&quot;-1&quot;&gt;API&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero &#39;@/services/API.js&#39;
import axios from &#39;axios&#39;
import store from &#39;@/store&#39;
import router from &#39;@/router&#39;

const API_URL = process.env.VUE_APP_API

const users = {
    login: (item) =&amp;gt; axios.post(`${API_URL}/auth/login`, item),
    register: (user) =&amp;gt; axios.post(`${API_URL}/auth/signup`, user),
}
...

axios.interceptors.request.use((config) =&amp;gt; {
    const token = store.state.user.access_token
    if (token) {
        config.headers[&#39;Authorization&#39;] = &#39;Bearer &#39; + token
    }
    return config;
}, (error) =&amp;gt; {
    return Promise.reject(error)
})

axios.interceptors.response.use((response) =&amp;gt; {
    return response
}, (error) =&amp;gt; {
    if (error.response) {
        switch (error.response.status) {
            case 401:
                store.commit(&#39;logout&#39;)
                if (router.currentRoute.path !== &#39;login&#39;) {
                    router.replace({
                        path: &#39;login&#39;,
                        query: { redirect: router.currentRoute.path },
                    })
                }
        }
    }
    return Promise.reject(error)
})

export default {
    users,
    ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Interceptamos las peticiones para incluir el &lt;em&gt;token&lt;/em&gt; si lo tenemos.Y también las respuestas porque si es un error 401 hay que loguearse por lo que se cambia el router al &lt;em&gt;login&lt;/em&gt; pero se le pasa la dirección de la página en la que se estaba para que tras loguearse se cargue esa página y no la de inicio.&lt;/p&gt;
&lt;h3 id=&quot;login-vue&quot; tabindex=&quot;-1&quot;&gt;Login.vue&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;// script de la vista &#39;Login.vue&#39;
...
  mounted() {
    if (localStorage.token) {
      // Si el token caduca debemos comprobar que no haya expirado
      this.$store.commit(&amp;quot;login&amp;quot;, localStorage.token)
      this.loadPage()
    }
  },
  methods: {
    submit() {
      this.$store.dispatch(&amp;quot;login&amp;quot;, this.user)
        .then(() =&amp;gt; this.loadPage())
        .catch((err) =&amp;gt; alert(err))
    },
    loadPage() {
      const redirect = decodeURIComponent(this.$route.query.redirect || &#39;/&#39;)
      this.$router.push({ path: redirect })
    }
  },
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;router&quot; tabindex=&quot;-1&quot;&gt;Router&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;
import VueRouter from &#39;vue-router&#39;
import store from &#39;../store&#39;

import Datos from &#39;../views/Datos.vue&#39;
...

Vue.use(VueRouter)

router.beforeEach((to, from, next) =&amp;gt; {
  if (to.meta.requireAuth) {
    if (store.token) {
      next();
    }
    else {
      next({
        path: &#39;/login&#39;,
        query: { redirect: to.fullPath }
      })
    }
  }
  else {
    next();
  }
})

const routes = [
  {
    path: &#39;/datos&#39;,
    name: &#39;Datos&#39;,
    component: Datos,
    meta: {
      requireAuth: true,
    },
  },
  ...
]

export default router = new VueRouter({
  mode: &#39;history&#39;,
  base: process.env.BASE_URL,
  routes
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ver algunos ejemplos de cómo gestionar la autenticación en nuestros proyectos Vue podemos consultar cualquiera de estos enlaces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sqreen.io/authentication-best-practices-vue/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Authentication Best Practices for Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://scotch.io/tutorials/vue-authentication-and-route-handling-using-vue-router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Authentication And Route Handling Using Vue-router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;paso-a-produccion&quot; tabindex=&quot;-1&quot;&gt;Paso a producción&lt;/h2&gt;
&lt;p&gt;Una vez acabada nuestra aplicación debemos general el &lt;em&gt;build&lt;/em&gt; que pasaremos a producción. El &lt;em&gt;build&lt;/em&gt; es el conjunto de ficheros compilados, minificados, etc que subiremos al servidor de producción. Para ello tenemos un script en el &lt;em&gt;package.json&lt;/em&gt; que se encarga de todo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crea un directorio &lt;strong&gt;&lt;em&gt;dist&lt;/em&gt;&lt;/strong&gt; con lo qie hay que subir a producción:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;: HTML&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ficheros que hay en &lt;code&gt;/public&lt;/code&gt;&lt;/strong&gt;: imágenes, CSS y cualquier otro fichero estático que hubiera en la carpeta &lt;code&gt;/public&lt;/code&gt;, como &lt;em&gt;favicon.ico&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;assets&lt;/strong&gt;: todo lo que ha compilado &lt;em&gt;Vite&lt;/em&gt; optimizado y minimizado:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index-xxxx.js&lt;/strong&gt;: fichero con todo nuestro código Javascript más el de las librerías usadas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;index-xxxx-css&lt;/strong&gt;:  fichero con todo nuestro CSS&lt;/li&gt;
&lt;li&gt;imágenes y otros archivos que hubiera en &lt;em&gt;assets&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vuetify&quot; tabindex=&quot;-1&quot;&gt;Vuetify&lt;/h2&gt;
&lt;p&gt;Son varias las librerías para Vue que nos facilitan enormemente la creación de nuestros componentes ya que nos dan un código para los mismos (tanto el &lt;em&gt;template&lt;/em&gt; como el Javascript) de manera que simplemente personalizando ese código con nuestros datos ya tenemos un componente totalmente funcional. Entre ellas están &lt;a href=&quot;https://material.io/design&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Material Design&lt;/a&gt;, &lt;a href=&quot;https://element.eleme.io/#/es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ElementUI&lt;/a&gt;, &lt;a href=&quot;https://vuetifyjs.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuetify&lt;/a&gt; y muchas otras.&lt;/p&gt;
&lt;p&gt;Podemos ver la utilidad de estas librerías consultando, por ejemplo, como crear una &lt;a href=&quot;https://vuetifyjs.com/en/components/data-tables/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Datatable&lt;/em&gt;&lt;/a&gt; con Vuetify. Vuetify sigue el diseño de &lt;em&gt;Material Design&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Podemos obtener toda la información sobre esta librería en &lt;a href=&quot;https://vuetifyjs.com/en/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;su página web&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;instalacion&quot; tabindex=&quot;-1&quot;&gt;Instalación&lt;/h3&gt;
&lt;p&gt;Vue se instala como cualquier otro plugin:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vue add vuetify
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crear-el-layout&quot; tabindex=&quot;-1&quot;&gt;Crear el layout&lt;/h3&gt;
&lt;p&gt;En &lt;strong&gt;App.vue&lt;/strong&gt; borramos todo su contenido y lo sustituimos por el código de &lt;a href=&quot;https://vuetifyjs.com/en/getting-started/wireframes/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;layout&lt;/a&gt; que deseemos de Vuetify. Para ver el código pinchamos en la imagen del layout deseada y lo copiamos.&lt;/p&gt;
&lt;p&gt;A continuación ponemos el &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; donde corresponda.&lt;/p&gt;
&lt;p&gt;Cada elemento del menú es una etiqueta &lt;code&gt;&amp;lt;v-list-tile&amp;gt;&lt;/code&gt; dentro del &lt;code&gt;&amp;lt;v-navigation-drawer&amp;gt;&lt;/code&gt;. Para modificar el menú vamos a &lt;em&gt;Vuetify -&amp;gt; UI components -&amp;gt; Navigation drawers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para cada elemento que queramos añadir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Su icono está dentro de &lt;code&gt;&amp;lt;v-icon&amp;gt;&lt;/code&gt; y para elegirlo vamos a &lt;a href=&quot;https://material.io/tools/icons/?style=baseline&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Material Design&lt;/a&gt; y elegimos el que queramos. Para modificar su aspecto vamos a &lt;em&gt;Vuetify -&amp;gt; UI components -&amp;gt; Icons&lt;/em&gt; y copiamos el código que queramos&lt;/li&gt;
&lt;li&gt;Para que enlace a la ruta que queramos añadimos a la etiqueta &lt;code&gt;&amp;lt;v-list-tile-title&amp;gt;&lt;/code&gt; una etiqueta &lt;code&gt;&amp;lt;router-link :to=&amp;quot;{ name: nombre_de_la_ruta }&amp;gt;&lt;/code&gt;, ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;v-list-tile-title&amp;gt;
  &amp;lt;routerlink :to=&amp;quot;{ name: &#39;perfil&#39; }&amp;quot;&amp;gt;Perfil&amp;lt;/router-link&amp;gt;
&amp;lt;/v-list-tile-title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si no nos gusta Material Dessign tenemos alternativas como &lt;em&gt;&lt;strong&gt;Buefy&lt;/strong&gt;&lt;/em&gt; (que proporciona componentes Vue basados en &lt;em&gt;Bulma&lt;/em&gt;) y muchas otras.&lt;/p&gt;
&lt;h3 id=&quot;saber-mas&quot; tabindex=&quot;-1&quot;&gt;Saber más&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vuetifyjs.com/es-MX/getting-started/quick-start&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VuetifyJS.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=GeUhmMJUFZQ&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuetify Material Framework in 60 minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=5GfpGaHKfyo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Intro and Overview of Vuetify.js (Build a CRUD client with Vue.js)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;Typescript&lt;/h2&gt;
&lt;p&gt;Es Javascript al que se le ha incorporado tipado de datos y otras utilidades. En los &lt;a href=&quot;https://pedroporo.github.io/21-typescript.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;apuntes&lt;/a&gt; puedes ver una introducción a cómo usarlo en Vue y en Internet tienes infinidad de recursos para aprender más.&lt;/p&gt;
&lt;h2 id=&quot;ssr-server-side-rendering&quot; tabindex=&quot;-1&quot;&gt;SSR (Server Side Rendering)&lt;/h2&gt;
&lt;p&gt;Esta tecnología permite que al obtener la página un robot (haciendo &lt;code&gt;curl miURL&lt;/code&gt;) no devuelva sólo la &amp;lt;app&amp;gt; sino el HTML para que los robots la puedan indexar correctamente.&lt;/p&gt;
&lt;p&gt;El problema que tiene una SPA es que las rutas no existen realmente sino sólo en el front y se generan asíncronamente, lo que dificulta a los robots obtener las páginas de las distintas rutas.&lt;/p&gt;
&lt;p&gt;SSR hace que la primera vez que un usuario accede a la web se sirve entera desde el servidor y el resto de veces ya se sirve desde el front. Eso permite que a un robot se le sirva toda desde el servidor y la puede indexar. Esto no es algo que nos interese en todos los proyectos, sólo en aquellos en que sea importante que estén bien posicionados en los buscadores.&lt;/p&gt;
&lt;p&gt;Más info: &lt;a href=&quot;https://vuejs.org/v2/guide/ssr.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Server-Side Rendering&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Explicación de qué es y cómo funciona en Angular: &lt;a href=&quot;http://app.getresponse.com/click.html?x=a62b&amp;amp;lc=BmvXkb&amp;amp;mc=CL&amp;amp;s=mh7Vjl&amp;amp;u=B71jy&amp;amp;y=T&amp;amp;&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Angular &amp;amp; SEO&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;crear-aplicaciones-moviles-con-vue&quot; tabindex=&quot;-1&quot;&gt;Crear aplicaciones móviles con Vue&lt;/h2&gt;
&lt;p&gt;Diferentes librerías nos permiten que nuestras aplicaciones puedan ejecutarse en móviles tanto Android como iOS. La mayoría utilizan la librería &lt;strong&gt;&lt;em&gt;Cordova&lt;/em&gt;&lt;/strong&gt; de Apache2 para tener acceso a los elementos del móvil como notificaciones, cámara, geolocalización, ...&lt;/p&gt;
&lt;p&gt;Existen muchos pero las más utilizadas hoy en día son &lt;em&gt;Quasar&lt;/em&gt;, &lt;em&gt;Vue native&lt;/em&gt; e &lt;em&gt;Ionic&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;quasar&quot; tabindex=&quot;-1&quot;&gt;Quasar&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://quasar.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Quasar&lt;/a&gt; es un framework basado en VueJS que te permite generar la aplicación de escritorio y la aplicación móvil tanto para Android como para iOS.&lt;/p&gt;
&lt;p&gt;Tiene licencia MIT y su UI sigue las guías de Material. Su ventaja sobre los otros es que está creado en Vue y pensado para este framework.&lt;/p&gt;
&lt;h3 id=&quot;vue-native&quot; tabindex=&quot;-1&quot;&gt;Vue Native&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vue-native.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue native&lt;/a&gt; es otro framework que permite generar aplicaciones móviles nativas usando Vue. En realidad es una capa sobre &lt;strong&gt;&lt;em&gt;React Native&lt;/em&gt;&lt;/strong&gt; que permite a Vue usar su API.&lt;/p&gt;
&lt;p&gt;Con ella podemos acceder a los diferentes &lt;a href=&quot;https://vue-native.io/docs/device-apis.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;dispositivos&lt;/a&gt; del móvil como la cámara, la geolocalización, el acelerómetro, ... Podemos encontrar en Internet muchos ejemplos de cómo hacer nuestra App con este framework, como &lt;a href=&quot;https://scotch.io/tutorials/how-to-setup-build-and-deploy-native-apps-with-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este&lt;/a&gt; de &lt;a href=&quot;http://scotch.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;scotch.io&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;ionic-vue&quot; tabindex=&quot;-1&quot;&gt;Ionic Vue&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://ionicframework.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ionic&lt;/a&gt; es posiblemente el Framework más utilizado para crear aplicaciones móviles nativas a partir de nuestra aplicación web. Está basado en Angular pero desde diciembre de 2020 puede usarse directamente en Vue, y es compatible con Vue3 y su &lt;em&gt;Composition API&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;nuxt&quot; tabindex=&quot;-1&quot;&gt;Nuxt&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nuxtjs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nuxt&lt;/a&gt; es un framework basado en Vue que crea un &lt;em&gt;scaffolding&lt;/em&gt; de Vue con todo lo necesario para una aplicación media-grande (incluye rutas, &lt;em&gt;Vuex&lt;/em&gt;,...) lo que nos facilita el desarrollo de nuestros proyectos.&lt;/p&gt;
&lt;p&gt;También hay otras librerías que nos pueden ser de utilidad como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://framework7.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Framework7&lt;/a&gt;&lt;/em&gt; para crear una aplicación web que use&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&quot;https://weex.apache.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Weex&lt;/a&gt;&lt;/em&gt; para crear aplicaciones nativas para iOS y Android&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusión&lt;/h2&gt;
&lt;p&gt;Como vés existen infinidad de librerías alrededor de Vue para ofrecernos nuevas funcionalidades. Son tantas que el equipo de Vue ha creado &lt;a href=&quot;https://github.com/vuejs/awesome-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;AwesomeVue&lt;/a&gt; donde se registran parte de estas librerías y a donde podemos acceder en busca de cualquier cosa que necesitemos.&lt;/p&gt;
&lt;h2 id=&quot;angular&quot; tabindex=&quot;-1&quot;&gt;Angular&lt;/h2&gt;
&lt;p&gt;Aunque el crecimiento de Vue es muy importante, Angular sigue siendo aún el framework Javascript más demandado por las empresas. Si quieres aprender aquí tienes algunos enlaces de utilidad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://angular.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentación oficial de Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.djamware.com/post/5e435e84a8d0ef4300ffc5f6/angular-9-tutorial-learn-to-build-a-crud-angular-app-quickly&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo de CRUD con Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;vue-con-laravel&quot; tabindex=&quot;-1&quot;&gt;Vue con Laravel&lt;/h2&gt;
&lt;p&gt;Es sencillo crear una SPA completa usando Vue en el Front-end y Laravel para crear el Back-end que sirva la API. Podemos hacerlo como dos proyectos independientes o integrando Vue en Laravel.&lt;/p&gt;
&lt;p&gt;Como proyectos independientes es la forma más sencilla. Simplemente nuestro proyecto Vue hará peticiones a la API desarrollada en Laravel.&lt;/p&gt;
&lt;p&gt;Si queremos integrar Vue dentro del proyecto Laravel el funcionamiento es el siguiente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La primera petición le llega al router de Laravel que renderiza el diseño de la SPA&lt;/li&gt;
&lt;li&gt;Las demás peticiones usan la API &lt;em&gt;history.pushState&lt;/em&gt; para navegar sin recargar la página y las gestiona el enrutador Vue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a ver en detalle cómo gestionarlo.&lt;/p&gt;
&lt;h3 id=&quot;creacion-del-proyecto&quot; tabindex=&quot;-1&quot;&gt;Creación del proyecto&lt;/h3&gt;
&lt;p&gt;Creamos el proyecto Laravel. Dentro del mismo instalamos los paquetes que necesitemos para Vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;laravel new laravue
cd laravue
npm install
npm i -S vue-router
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configuramos-el-proyecto-en-vue&quot; tabindex=&quot;-1&quot;&gt;Configuramos el proyecto en Vue&lt;/h3&gt;
&lt;p&gt;Configuramos el router de Vue en un nuevo fichero JS (por ejemplo &lt;strong&gt;/resources/js/router.js&lt;/strong&gt;) y lo importamos en el fichero principal, &lt;strong&gt;/resources/js/app.js&lt;/strong&gt; (el equivalente al &lt;strong&gt;main.js&lt;/strong&gt; de un proyecto con &lt;em&gt;vue-cli&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero app.js
...
import App from &#39;./views/App&#39;
import router from &#39;./router&#39;

const app = new Vue({
    el: &#39;#app&#39;,
    components: {
        App
    },
    router,
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creamos el fichero &lt;strong&gt;/resources/js/App.vue&lt;/strong&gt; que será el equivalente al &lt;strong&gt;App.vue&lt;/strong&gt; de los proyectos &lt;em&gt;vue-cli&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
        &amp;lt;h1&amp;gt;Vue Router Demo App&amp;lt;/h1&amp;gt;

        &amp;lt;p&amp;gt;
            &amp;lt;router-link to=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
            ...
            &amp;lt;router-link to=&amp;quot;/about&amp;quot;&amp;gt;Sobre nosotros...&amp;lt;/router-link&amp;gt;
        &amp;lt;/p&amp;gt;

        &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
            &amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;configuramos-laravel&quot; tabindex=&quot;-1&quot;&gt;Configuramos Laravel&lt;/h3&gt;
&lt;p&gt;Creamos la vista principal en &lt;strong&gt;/resources/views/spa.blade.php&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-HTML&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;{{ str_replace(&#39;_&#39;,&#39;-&#39;, app()-&amp;gt;getLocale()) }}&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;csrf-token&amp;quot; content=&amp;quot;{{ csrf_token() }}&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Vue SPA Demo&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
        &amp;lt;app&amp;gt;&amp;lt;/app&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script src=&amp;quot;{{ mix(&#39;js/app.js&#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: la línea del &lt;em&gt;&amp;lt;meta CSRF-TOKEN&amp;gt;&lt;/em&gt; es para evitar los errores de la consola por no pasar el token csrf.&lt;/p&gt;
&lt;p&gt;Configuramos &lt;strong&gt;/routes/web.php&lt;/strong&gt; para que sirva siempre esa página:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::get(&#39;/{any}&#39;, &#39;SpaController@index&#39;)-&amp;gt;where(&#39;any&#39;, &#39;.*&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;para lo que creamos el controlador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:controller SpaController
https://vuex.vuejs.org/guide/forms.html```
y lo editamos:
```php
&amp;lt;?php
namespace App&#92;Http&#92;Controllers;
use Illuminate&#92;Http&#92;Request;

class SpaController extends Controller
{
    public function index()
    {
        return view(&#39;spa&#39;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;compilamos-vue&quot; tabindex=&quot;-1&quot;&gt;Compilamos Vue&lt;/h3&gt;
&lt;p&gt;Ahora simplemente ejecutamos en la terminal&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y ya tenemos la aplicación en marcha. Si aparece un error de &lt;em&gt;&amp;quot;The Mix manifest does not exist&amp;quot;&lt;/em&gt; ejecutaremos &lt;code&gt;npm run prod&lt;/code&gt;  que crea el fichero &lt;em&gt;mix-manifest.json&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para que se compilen automáticamente los cambios que vayamos haciendo en Vue mientras desarrollamos el proyecto ejecutamos &lt;code&gt;npm run watch-poll&lt;/code&gt; en una terminal.&lt;/p&gt;
&lt;h3 id=&quot;creamos-la-api&quot; tabindex=&quot;-1&quot;&gt;Creamos la API&lt;/h3&gt;
&lt;p&gt;Para obtener datos de una API debemos en primer lugar crear la ruta en &lt;strong&gt;/routes/api.php&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::namespace(&#39;Api&#39;)-&amp;gt;group(function () {
    Route::get(&#39;/alumnos&#39;, &#39;AlumnosController@index&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos crea sólo la ruta para el verbo GET. Una opción mejor es crear todas las rutas del recurso con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::resource(&#39;alumnos&#39;,’AlumnosController’,[&#39;only&#39;=&amp;gt;[&#39;index&#39;,&#39;store&#39;,&#39;show&#39;,&#39;update&#39;,&#39;destroy&#39; ]]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;em&gt;only&lt;/em&gt; es opcional y permite restringir las rutas que se crearán para que no se muestren las que no utilizaremos (podemos comprobarlo con un &lt;code&gt;php artisan route:list&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Otra opción es usar &lt;code&gt;apiResources&lt;/code&gt; que crea sólo funciones para los métodos API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::apiResource(&#39;alumnos&#39;,’AlumnosController’);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos crear las rutas para varios controladores a la vez con &lt;code&gt;resources&lt;/code&gt; en vez de &lt;code&gt;resource&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Route::resources(
  [
    &#39;alumnos&#39; =&amp;gt; &#39;Api&#92;AlumnosController&#39;,
    &#39;profes&#39; =&amp;gt; &#39;Api&#92;ProfesoresController&#39;,
  ],
  [&#39;only&#39;=&amp;gt;[&#39;index&#39;,&#39;store&#39;,&#39;show&#39;,&#39;update&#39;,&#39;destroy&#39; ]]
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luego creamos el controlador y el recurso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;php artisan make:controller Api/AlumnosController --api
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;code&gt;--resource&lt;/code&gt; (o &lt;code&gt;-r&lt;/code&gt;) crea automáticamente los puntos de entrada para los métodos indicados. La opción &lt;code&gt;--api&lt;/code&gt; es igual pero no crea funciones para los métodos &lt;em&gt;create&lt;/em&gt; ni &lt;em&gt;edit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;y el recurso:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;php artisan make:resource AlumnoResource
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un recurso es un modelo que se debe transformar a un objeto JSON (lo que necesitamos en una API).&lt;/p&gt;
&lt;p&gt;y editamos el controlador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace App&#92;Http&#92;Controllers&#92;Api;

use App&#92;Alumno;
use Illuminate&#92;Http&#92;Request;
use App&#92;Http&#92;Controllers&#92;Controller;
use App&#92;Http&#92;Resources&#92;AlumnoResource;

class AlumnosController extends Controller {
    public function index()  {
        return AlumnoResource::collectionpaginate(10);
        // Esto devuelve, además del data información para paginar la salida

        // lo anterior equivaldría, sin usar el recurso, a
        $alumnos=Alumno::all()-&amp;gt;toArray();
        return response()-&amp;gt;json($alumnos);        
    }

    public function show($id)  {
       return new AlumnoResourcefind($id);
    }
    
    public function store(Request $request)  {
    
        $alumno = Alumno::create([
            &#39;alumno_id&#39; =&amp;gt; $request-&amp;gt;alumno()-&amp;gt;id,
            &#39;nombre&#39; =&amp;gt; $request-&amp;gt;nombre,
            &#39;apellidos&#39; =&amp;gt; $request-&amp;gt;apellidos,
            ...
        ]);

      return new AlumnoResource($alumno);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;saber-mas-1&quot; tabindex=&quot;-1&quot;&gt;Saber más&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://laravel-news.com/using-vue-router-laravel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Building a Vue SPA with Laravel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@weehong/laravel-5-7-vue-vue-router-spa-5e07fd591981&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Laravel 5.7 + Vue + Vue Router = SPA&lt;/a&gt;. Igual pero usando la librería Vuetify&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/09-cosas/" >
        </entry>
        <entry>
            <title>
                08-forms
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/08-forms/</id>
            <content type="html">
                &lt;h1 id=&quot;formularios-en-vue&quot; tabindex=&quot;-1&quot;&gt;Formularios en Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#formularios-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Formularios en Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#utilizar-diferentes-tipos-de-inputs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Utilizar diferentes tipos de inputs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#input-normal&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;input normal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#radio-button&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;radio button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#checkbox&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;checkbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#checkbox-m%C3%BAltiple&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;checkbox múltiple&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#generar-los-checkbox-autom%C3%A1ticamente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Generar los checkbox automáticamente&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#select&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;select&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar formularios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-con-veevalidate&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar con VeeValidate&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-otros-inputs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar otros inputs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-un-schema&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar un &lt;em&gt;schema&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validar-con-vee-validate-y-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validar con vee-validate y yup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#personalizar-los-mensajes-de-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Personalizar los mensajes de yup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-personalizada-con-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación personalizada con yup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#inputs-en-subcomponentes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Inputs en subcomponentes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#v-model-en-subcomponente-input&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;v-model en subcomponente input&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-con-vee-validate&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación con Vee Validate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slots&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Slots&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h1&gt;
&lt;p&gt;Para poder tener sincronizado el formulario con nuestros datos utilizamos la directiva &lt;strong&gt;v-model&lt;/strong&gt; en cada campo. Algunos modificadores útiles de &lt;em&gt;v-model&lt;/em&gt; son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.lazy&lt;/strong&gt;: hace que &lt;em&gt;v-model&lt;/em&gt; sincronice al producirse el evento &lt;em&gt;change&lt;/em&gt; en vez del &lt;em&gt;input&lt;/em&gt;, es decir, que no sincroniza con cada tecla que pulsemos sino cuando acabamos de escribir y salimos del input.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.number&lt;/strong&gt;: convierte automáticamente el valor introducido (que se considera siempre String) a Number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.trim&lt;/strong&gt;: realiza un trim() sobre el texto introducido&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vamos a ver cómo usar los diferentes tipos de campos con Vue.&lt;/p&gt;
&lt;h2 id=&quot;utilizar-diferentes-tipos-de-inputs&quot; tabindex=&quot;-1&quot;&gt;Utilizar diferentes tipos de inputs&lt;/h2&gt;
&lt;p&gt;Podemos probar el resultado en la &lt;a href=&quot;https://v3.vuejs.org/guide/forms.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;input-normal&quot; tabindex=&quot;-1&quot;&gt;input normal&lt;/h3&gt;
&lt;p&gt;En este caso simplemente añadimos la directiva &lt;strong&gt;v-model&lt;/strong&gt; al input:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;Nombre:&amp;lt;/label&amp;gt;
&amp;lt;input type=&amp;quot;text&amp;quot; v-model=&amp;quot;user.nombre&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;radio-button&quot; tabindex=&quot;-1&quot;&gt;radio button&lt;/h3&gt;
&lt;p&gt;Ponemos en todos los radiobuttons el &lt;strong&gt;v-model&lt;/strong&gt; y a cada uno el &lt;strong&gt;value&lt;/strong&gt; que se guardará al escoger dicha opción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;label&amp;gt;Sexo:&amp;lt;/label&amp;gt;
&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;H&amp;quot; name=&amp;quot;sexo&amp;quot; v-model=&amp;quot;user.sexo&amp;quot;&amp;gt;Hombre
&amp;lt;input type=&amp;quot;radio&amp;quot; value=&amp;quot;M&amp;quot; name=&amp;quot;sexo&amp;quot; v-model=&amp;quot;user.sexo&amp;quot;&amp;gt;Mujer
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;checkbox&quot; tabindex=&quot;-1&quot;&gt;checkbox&lt;/h3&gt;
&lt;p&gt;Igual que cualquier input, le ponemos el &lt;strong&gt;v-model&lt;/strong&gt;. Si no ponemos un &lt;em&gt;value&lt;/em&gt; los valores que se guardarán serán &lt;em&gt;true&lt;/em&gt; si está marcado y &lt;em&gt;false&lt;/em&gt; si no lo está:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.acepto&amp;quot;&amp;gt;Acepto las condiciones
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;checkbox-multiple&quot; tabindex=&quot;-1&quot;&gt;checkbox múltiple&lt;/h3&gt;
&lt;p&gt;Se trata de varios checkbox pero cuyos valores se guardan en el mismo campo, que debe ser un &lt;strong&gt;array&lt;/strong&gt;. Le ponemos el &lt;strong&gt;v-model&lt;/strong&gt; y el &lt;strong&gt;value&lt;/strong&gt; que queramos que se guarde. La variable (en este ejemplo &lt;em&gt;user.ciclos&lt;/em&gt; será un array y guardará el value de cada checkbox marcado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;smx&amp;quot;&amp;gt;Sistemas Microinformáticos y Redes&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;asix&amp;quot;&amp;gt;Administración de Sistemas Informáticos y Redes&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;dam&amp;quot;&amp;gt;Desarrollo de Aplicaciones Multiplataforma&amp;lt;br&amp;gt;
&amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; value=&amp;quot;daw&amp;quot;&amp;gt;Desarrollo de Aplicaciones Web&amp;lt;br&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tenemos marcadas las casillas 1 y 3 el valor de &lt;em&gt;user.ciclos&lt;/em&gt; será [&#39;smx&#39;, &#39;dam&#39;].&lt;/p&gt;
&lt;h4 id=&quot;generar-los-checkbox-automaticamente&quot; tabindex=&quot;-1&quot;&gt;Generar los checkbox automáticamente&lt;/h4&gt;
&lt;p&gt;Muchas veces las opciones a mostrar las tendremos en algún objeto (una tabla de la BBDD, ...). En ese caso podemos generar automáticamente un checkbox para cada elemento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;ciclos: [
  {cod: &#39;smx&#39;, desc: &#39;Sist. Microinformáticos y Redes&#39;},
  {cod: &#39;asix&#39;, desc: &#39;Adm. de Sistemas Informáticos y Redes&#39;},
  {cod: &#39;dam&#39;, desc: &#39;Desar. de Aplicaciones Multiplataforma&#39;},
  {cod: &#39;daw&#39;, desc: &#39;Desar. de Aplicaciones Web&#39;},
]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div v-for=&amp;quot;ciclo in ciclos&amp;quot; :key=&amp;quot;ciclo.cod&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;user.ciclos&amp;quot; :value=&amp;quot;ciclo.cod&amp;quot;&amp;gt;{ { ciclo.desc }}&amp;lt;br&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;select&quot; tabindex=&quot;-1&quot;&gt;select&lt;/h3&gt;
&lt;p&gt;Lo único que hay que hacer es poner al select la directiva &lt;strong&gt;v-model&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;select v-model=&amp;quot;user.tutor&amp;quot;&amp;gt;
  &amp;lt;option value=&#39;&#39;&amp;gt;No es tutor&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;smx&amp;quot;&amp;gt;Sistemas Microinformáticos y Redes&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;asix&amp;quot;&amp;gt;Administración de Sistemas Informáticos y Redes&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;dam&amp;quot;&amp;gt;Desarrollo de Aplicaciones Multiplataforma&amp;lt;/option&amp;gt;
  &amp;lt;option value=&amp;quot;daw&amp;quot;&amp;gt;Desarrollo de Aplicaciones Web&amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos generar las opciones automáticamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;select v-model=&amp;quot;user.tutor&amp;quot;&amp;gt;
  &amp;lt;option value=&#39;&#39;&amp;gt;No es tutor&amp;lt;/option&amp;gt;
  &amp;lt;option  v-for=&amp;quot;ciclo in ciclos&amp;quot; :key=&amp;quot;ciclo.cod&amp;quot; :value=&amp;quot;ciclo.cod&amp;quot;&amp;gt;
    { { ciclo.desc }}
  &amp;lt;/option&amp;gt;
&amp;lt;/select&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos que sea un select múltiple sólo tenemos que ponerle el atributo &lt;em&gt;multiple&lt;/em&gt; a la etiqueta &lt;em&gt;&amp;lt;select&amp;gt;&lt;/em&gt; y hacer que la variable &lt;em&gt;user.tutor&lt;/em&gt; sea un array, que se comportará como en los checkbox múltiples.&lt;/p&gt;
&lt;h3 id=&quot;ejemplo&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/09f59xqe/embed/&quot;&gt;&lt;/script&gt;
&lt;h1 id=&quot;validar-formularios&quot; tabindex=&quot;-1&quot;&gt;Validar formularios&lt;/h1&gt;
&lt;p&gt;Podemos validar el formulario &amp;quot;a mano&amp;quot; como hemos visto en JS:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/qmg5btx2/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Además deberíamos poner clase de error a los inputs con errores para destacarlos, poner el cursor en el primer input erróneo, etc.&lt;/p&gt;
&lt;p&gt;Todo esto es incómodo y poco productivo. Para mejorarlo podemos usar una de las muchísimas librerías para validación de formularios como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://logaretm.github.io/vee-validate/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VeeValidate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vuelidate.js.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;vuelidate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vue-generators/vue-form-generator&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VueFormGenerator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;validar-con-vee-validate&quot; tabindex=&quot;-1&quot;&gt;Validar con VeeValidate&lt;/h2&gt;
&lt;p&gt;Tenéis toda la información así como un tutorial de cómo usar este librería en la &lt;a href=&quot;https://vee-validate.logaretm.com/v4/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de VeeValidate&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;La forma de instalarla es&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-[bash]&quot;&gt;npm install vee-validate -S
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y para usarla simplemente cambiaremos la etiqueta &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; por el componente &lt;code&gt;&amp;lt;Field&amp;gt;&lt;/code&gt; y la etiqueta &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; por el componente &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; pero quitándole el modificador &lt;code&gt;.prevent&lt;/code&gt; del escuchador &lt;code&gt;@submit&lt;/code&gt; y haciendo que la función manejadora reciba un parámetro llamado &lt;em&gt;values&lt;/em&gt; que es un objeto con los valores de los &lt;em&gt;inputs&lt;/em&gt; del formulario.&lt;/p&gt;
&lt;p&gt;Cada componente &lt;em&gt;Field&lt;/em&gt; necesitará un atributo &lt;code&gt;name&lt;/code&gt; que es el nombre del campo con el valor de ese &lt;em&gt;input&lt;/em&gt; dentro del objeto &lt;em&gt;values&lt;/em&gt;. Si el formulario es sólo para recoger datos, no para modificar datos existentes no necesitamos la directiva &lt;code&gt;v-model&lt;/code&gt; porque sus valores se guardarán en el objeto &lt;em&gt;values&lt;/em&gt; que recibe la función manejadora del &lt;code&gt;@submit&lt;/code&gt;. Sin embargo si debe mostrar datos que pueden cambiar tras la carga del componente mantendremos el atributo &lt;code&gt;v-model&lt;/code&gt; (como en la práctica que estamos haciendo, que si nos pasan una &lt;em&gt;id&lt;/em&gt; cargamos el libro con dicha id y lo mostramos en el formlario para editarlo).&lt;/p&gt;
&lt;p&gt;Para validar un campo se le añade al componente un atributo &lt;code&gt;:rules&lt;/code&gt; con la función a ejecutar, que devolverá el mensaje a mostrar en caso de error o &lt;em&gt;true&lt;/em&gt; si es correcto. El mensaje se mostrará en un componente llamado &lt;code&gt;ErrorMessage&lt;/code&gt; (que deberemos importar y registrar) cuyo atributo &lt;code&gt;name&lt;/code&gt; debe ser igual al del campo a validar. Si alguna de las funciones de validación no devuelve &lt;em&gt;true&lt;/em&gt; no se ejecuta la función manejadora del &lt;em&gt;submit&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Habrá que importar los componentes de&lt;code&gt;&#39;vee-validate&#39;&lt;/code&gt; que se usen (&lt;em&gt;Form&lt;/em&gt;, &lt;em&gt;Field&lt;/em&gt;, &lt;em&gt;ErrorMessage&lt;/em&gt;) y registrarlos.&lt;/p&gt;
&lt;p&gt;Si no usamos &lt;code&gt;v-model&lt;/code&gt; podemos darle un valor por defecto a los inputs (por ejemplo, si estamos editando un objeto que ya tiene valores) pasándole el objeto con los valores al componente &lt;code&gt;&amp;lt;Form&amp;gt;&lt;/code&gt; en un atributo llamado &lt;code&gt;initial-values&lt;/code&gt;. Pero si cambien esos valores tras cargar el componente no se reflejarán los cambios (para ello debemos usar &lt;code&gt;v-model&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Por ejemplo si estamos editando el objeto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;product = {
  name: &#39;Ratón óptico&#39;,
  price: &#39;8.95&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;el formulario sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;Form :initial-values=&amp;quot;product&amp;quot; @submit=&amp;quot;onSubmit&amp;quot;&amp;gt;
    &amp;lt;Field name=&amp;quot;name&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
    &amp;lt;ErrorMessage name=&amp;quot;name&amp;quot; /&amp;gt;

    &amp;lt;Field name=&amp;quot;price&amp;quot; type=&amp;quot;text&amp;quot; /&amp;gt;
    &amp;lt;ErrorMessage name=&amp;quot;price&amp;quot; /&amp;gt;
    
    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Guardar&amp;lt;/button&amp;gt;
  &amp;lt;/Form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el objeto &lt;em&gt;product&lt;/em&gt; está vacío el formulario aparecerá en blanco pero si contiene datos se mostrarán en el formulario. Sin embargo si modificamos los datos de &lt;em&gt;product&lt;/em&gt; esos cambios no se reflejan en el formlario a menos que usemos &lt;code&gt;v-model&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A continuación tenéis un ejemplo completo de un formulario para validar un email y una contraseña (Fuente &lt;a href=&quot;https://codesandbox.io/s/vee-validate-basic-example-nc7eh?from-embed=&amp;amp;file=/src/App.vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://codesandbox.io/s/vee-validate-basic-example-nc7eh?from-embed=&amp;amp;file=/src/App.vue&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;Form @submit=&amp;quot;onSubmit&amp;quot;&amp;gt;
      &amp;lt;Field name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; :rules=&amp;quot;validateEmail&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;email&amp;quot; /&amp;gt;

      &amp;lt;Field name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; :rules=&amp;quot;validatePassword&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;password&amp;quot; /&amp;gt;

      &amp;lt;button&amp;gt;Sign up&amp;lt;/button&amp;gt;
    &amp;lt;/Form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Form, Field, ErrorMessage } from &amp;quot;vee-validate&amp;quot;;

export default {
  components: {
    Form,
    Field,
    ErrorMessage,
  },
  methods: {
    onSubmit(values) {
      console.log(values);
    },
    validateEmail(value) {
      // if the field is empty
      if (!value) {
        return &amp;quot;This field is required&amp;quot;;
      }

      // if the field is not a valid email
      const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+&#92;.[A-Z]{2,4}$/i;
      if (!regex.test(value)) {
        return &amp;quot;This field must be a valid email&amp;quot;;
      }

      // All is good
      return true;
    },
    validatePassword(value) {
      // if the field is empty
      if (!value) {
        return &amp;quot;This field is required&amp;quot;;
      }

      // if the length is less than 8 characters
      if (value.length &amp;lt; 8) {
        return &amp;quot;The length of this field must be at least 8 characters&amp;quot;;
      }

      // All is good
      return true;
    }
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos encontrar más información sobre vee-validate en su &lt;a href=&quot;https://vee-validate.logaretm.com/v4/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;validar-otros-inputs&quot; tabindex=&quot;-1&quot;&gt;Validar otros inputs&lt;/h3&gt;
&lt;p&gt;Para validar un &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; simplemente lo cambiamos por un &lt;code&gt;&amp;lt;Field as=&amp;quot;select&amp;quot;&amp;gt;&lt;/code&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;Field as=&amp;quot;select&amp;quot; name=&amp;quot;autor&amp;quot; class=&amp;quot;form-control&amp;quot; required&amp;gt;
  &amp;lt;option value=&amp;quot;&amp;quot;&amp;gt;--- Selecciona autor ---&amp;lt;/option&amp;gt;
  &amp;lt;option v-for=&amp;quot;autor in autores&amp;quot; :key=&amp;quot;autor.id&amp;quot;
  :value=&amp;quot;autor.id&amp;quot;&amp;gt;
    {{ autor.nombre + &#39; &#39; + autor.apellidos }}
  &amp;lt;/option&amp;gt;
&amp;lt;/Field&amp;gt;
&amp;lt;ErrorMessage name=&amp;quot;autor&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para un &lt;em&gt;textarea&lt;/em&gt; pondremos un &lt;code&gt;&amp;lt;Field as=&amp;quot;textarea&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el caso de un &lt;em&gt;checkbox&lt;/em&gt; o un &lt;em&gt;radiobutton&lt;/em&gt; simplemente añadimos al &lt;code&gt;Field&lt;/code&gt; un atributo &lt;code&gt;type&lt;/code&gt; indicando su tipo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;Field name=&amp;quot;drink&amp;quot; type=&amp;quot;radio&amp;quot; value=&amp;quot;Water&amp;quot; /&amp;gt; Water
&amp;lt;Field name=&amp;quot;drink&amp;quot; type=&amp;quot;radio&amp;quot; value=&amp;quot;Tea&amp;quot; /&amp;gt; Tea
&amp;lt;Field name=&amp;quot;drink&amp;quot; type=&amp;quot;radio&amp;quot; value=&amp;quot;Coffee&amp;quot; /&amp;gt; Coffee
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si se trata de varios &lt;em&gt;checkbox&lt;/em&gt; con el mismo atributo &lt;em&gt;name&lt;/em&gt; en &lt;em&gt;values&lt;/em&gt; se recibirá un array con los &lt;em&gt;values&lt;/em&gt; de los elementos marcados.&lt;/p&gt;
&lt;h3 id=&quot;usar-un-em-schema-em&quot; tabindex=&quot;-1&quot;&gt;Usar un &lt;em&gt;schema&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El problema de validar los datos así es que tenemos varias funciones independientes que validan los distintos &lt;em&gt;inputs&lt;/em&gt; lo que dispersa el código de la vaidación.&lt;/p&gt;
&lt;p&gt;Podemos ponerlas todas como propiedades de un objeto que le pasamos como atributo al &lt;code&gt;Form&lt;/code&gt;, evitando además tener que poner los atributos &lt;code&gt;rules&lt;/code&gt; en cada &lt;code&gt;Field&lt;/code&gt; a validar.&lt;/p&gt;
&lt;p&gt;El ejemplo anterior quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;Form :validation-schema=&amp;quot;mySchema&amp;quot; @submit=&amp;quot;onSubmit&amp;quot;&amp;gt;
      &amp;lt;Field name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;email&amp;quot; /&amp;gt;

      &amp;lt;Field name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;password&amp;quot; /&amp;gt;

      &amp;lt;button&amp;gt;Sign up&amp;lt;/button&amp;gt;
    &amp;lt;/Form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Form, Field, ErrorMessage } from &amp;quot;vee-validate&amp;quot;;

export default {
  components: {
    Form,
    Field,
    ErrorMessage,
  },
  data() {
    return {
      mySchema = {
        email: (value) =&amp;gt; {
          if (!value) return &amp;quot;This field is required&amp;quot;;
          const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+&#92;.[A-Z]{2,4}$/i;
          if (!regex.test(value)) return &amp;quot;This field must be a valid email&amp;quot;;
          return true;
        },
        password: (value) =&amp;gt; {
          if (!value) return &amp;quot;This field is required&amp;quot;;
          if (value.length &amp;lt; 8) return &amp;quot;The length of this field must be at least 8 characters&amp;quot;;
          return true;
        }
      }
    }
  },
  methods: {
    onSubmit(values) {
      console.log(values);
    },
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;validar-con-vee-validate-y-yup&quot; tabindex=&quot;-1&quot;&gt;Validar con vee-validate y yup&lt;/h3&gt;
&lt;p&gt;Vee-validate 4 también permite usar librerías como &lt;a href=&quot;https://www.npmjs.com/package/yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;yup&lt;/strong&gt;&lt;/a&gt;. En este caso la validación es casi automática como se muestra en la documentación de &lt;a href=&quot;https://vee-validate.logaretm.com/v4/guide/components/validation#validating-fields-with-yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;vee-validate&lt;/a&gt;. El ejemplo anterior quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;Form @submit=&amp;quot;onSubmit&amp;quot; :validation-schema=&amp;quot;mySchema&amp;quot;&amp;gt;
      &amp;lt;Field name=&amp;quot;email&amp;quot; type=&amp;quot;email&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;email&amp;quot; /&amp;gt;

      &amp;lt;Field name=&amp;quot;password&amp;quot; type=&amp;quot;password&amp;quot; /&amp;gt;
      &amp;lt;ErrorMessage name=&amp;quot;password&amp;quot; /&amp;gt;

      &amp;lt;button&amp;gt;Sign up&amp;lt;/button&amp;gt;
    &amp;lt;/Form&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import { Form, Field, ErrorMessage } from &amp;quot;vee-validate&amp;quot;;
import * as yup from &#39;yup&#39;;

export default {
  components: {
    Form,
    Field,
    ErrorMessage,
  },
  data() {
    const mySchema = yup.object({
      email: yup.string().required().email(),
      password: yup.string().required().min(8),
    })
    return {
      mySchema
    }
  },
  methods: {
    onSubmit(values) {
      console.log(values);
    },
  },
};
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;personalizar-los-mensajes-de-yup&quot; tabindex=&quot;-1&quot;&gt;Personalizar los mensajes de yup&lt;/h3&gt;
&lt;p&gt;Para personalizar un mensaje de error de un campo sólo tenemos que indicar el mensaje al definir la regla del campo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const mySchema = yup.object({
  email: yup.string().required(&#39;El email es obligatorio&#39;).email(),
  password: yup.string().required().min(8, &#39;La contraseña debe tener al menos 8 caracteres&#39;),
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso hemos personalizado el mensaje del &lt;em&gt;email&lt;/em&gt; si no contiene nada y del &lt;em&gt;password&lt;/em&gt; si no cumple el &lt;em&gt;min&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos personalizar todos los mensajes de error debemos definir un objeto con los nuevos mensajes. Las validaciones no incluidas mantendrán el mensaje original. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as yup from &#39;yup&#39;;
import { setLocale } from &#39;yup&#39;;
setLocale({
  mixed: {
    default: &#39;Campo no válido&#39;,
    required: &#39;El campo ${path} no puede estar vacío&#39;
  },
  string: { // sólo las reglas &#39;min&#39; de campos &#39;string&#39;
    min: &#39;El campo ${path} debe tener al menos ${max} caracteres&#39;
  },
  number: { // sólo las reglas &#39;min&#39; de campos &#39;number&#39;
    min: &#39;El valor del campo debe ser mayor que ${min}&#39;,
  },
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;validacion-personalizada-con-yup&quot; tabindex=&quot;-1&quot;&gt;Validación personalizada con yup&lt;/h3&gt;
&lt;p&gt;Si lo que queremos validar no lo hace ningún validador de &lt;em&gt;yup&lt;/em&gt; podemos crear nuestra propia regla usando el validador &lt;code&gt;test()&lt;/code&gt; que como 1º parámetro recibe el nombre de la regla, como 2º el mensaje de error a mostrar y como 3º una función que recibe el valor del campo y devolverá &lt;em&gt;true/false&lt;/em&gt; indicando si es válido o no. Por ejemplo el campo &lt;em&gt;seed&lt;/em&gt; debe ser múltiplo de 7:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascipt&quot;&gt;const mySchema = yup.object({
  seed: yup.number().required().test(&#39;seven-multiplo&#39;, &#39;El valor debe ser múltiplo de 7&#39;, (value) =&amp;gt; {
    return !(value % 7)
  },
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;inputs-en-subcomponentes&quot; tabindex=&quot;-1&quot;&gt;Inputs en subcomponentes&lt;/h1&gt;
&lt;p&gt;La forma enlazar cada input con su variable correspondiente es mediante la directiva &lt;em&gt;v-model&lt;/em&gt; que hace un enlace bidireccional: al cambiar la variable Vue cambia el valor del input y si el usuario cambia el input Vue actualiza la variable automáticamente.&lt;/p&gt;
&lt;p&gt;El problema lo tenemos si hacemos que los inputs estén en subcomponentes. Si ponemos allí el &lt;em&gt;v-model&lt;/em&gt; al escribir en el &lt;em&gt;input&lt;/em&gt; se modifica el valor de la variable en el subcomponente (que es donde está el &lt;em&gt;v-model&lt;/em&gt;) pero no en el padre.&lt;/p&gt;
&lt;p&gt;Para solucionar este problema tenemos 2 opciones: imitar nosotros en el subcomponente lo que hace &lt;em&gt;v-model&lt;/em&gt; o utilizar &lt;em&gt;slots&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;v-model-en-subcomponente-input&quot; tabindex=&quot;-1&quot;&gt;v-model en subcomponente input&lt;/h2&gt;
&lt;p&gt;Como los cambios en el subcomponente no se transmiten al componente padre hay que emitir un evento desde el subcomponente que escuche el padre y que proceda a hacer el cambio en la variable.&lt;/p&gt;
&lt;p&gt;La solución es imitar lo que hace un &lt;em&gt;v-model&lt;/em&gt; que en realidad está formado por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un &lt;em&gt;v-bind&lt;/em&gt; para mostrar el valor inicial en el input&lt;/li&gt;
&lt;li&gt;un _v-on:input que se encarga de avisar para que se modifique la variable al cambiar el valor del &lt;em&gt;input&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Así que lo que haremos es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;en el componente del formulario ponemos un &lt;em&gt;v-model&lt;/em&gt; que se encargue de actualizar la variable&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form-input v-model=&amp;quot;campo&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;en el subcomponente del inpit ponemos
&lt;ul&gt;
&lt;li&gt;un &lt;em&gt;v-bind&lt;/em&gt; que muestre el valor inicial&lt;/li&gt;
&lt;li&gt;un &lt;em&gt;v-on:input&lt;/em&gt; que emita un evento &lt;em&gt;input&lt;/em&gt; al padre pasándole el valor actual&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;control-group&amp;quot;&amp;gt;
    &amp;lt;!-- id --&amp;gt;
    &amp;lt;label class=&amp;quot;control-label&amp;quot; :for=&amp;quot;nombre&amp;quot;&amp;gt;{ { titulo }}&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
      &amp;lt;input :value=&amp;quot;value&amp;quot; @input=&amp;quot;$emit(&#39;input&#39;, $event.target.value)&amp;quot; type=&amp;quot;text&amp;quot; :id=&amp;quot;nombre&amp;quot; :name=&amp;quot;nombre&amp;quot; placeholder=&amp;quot;Escribe el nombre&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;	
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: [&#39;value&#39;],
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejemplo-1&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Componente padre: formulario&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;form class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
	&amp;lt;form-input v-model=&amp;quot;user.id&amp;quot; titulo=&amp;quot;Id&amp;quot; nombre=&amp;quot;id&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
	&amp;lt;form-input v-model=&amp;quot;user.name&amp;quot; titulo=&amp;quot;Nombre&amp;quot; nombre=&amp;quot;name&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.username&amp;quot; titulo=&amp;quot;Username&amp;quot; nombre=&amp;quot;username&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.email&amp;quot; titulo=&amp;quot;E-mail&amp;quot; nombre=&amp;quot;email&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.phone&amp;quot; titulo=&amp;quot;Teléfono&amp;quot; nombre=&amp;quot;phone&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.website&amp;quot; titulo=&amp;quot;URL&amp;quot; nombre=&amp;quot;website&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input v-model=&amp;quot;user.companyName&amp;quot; titulo=&amp;quot;Nombre de la empresa&amp;quot; nombre=&amp;quot;nomEmpresa&amp;quot;&amp;gt;&amp;lt;/form-input&amp;gt;
    &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Subcomponente: form-input&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;control-group&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;control-label&amp;quot; :for=&amp;quot;nombre&amp;quot;&amp;gt;{ { titulo }}&amp;lt;/label&amp;gt;
    &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
      &amp;lt;input :value=&amp;quot;value&amp;quot; @input=&amp;quot;updateValue($event.target.value)&amp;quot; type=&amp;quot;text&amp;quot; :id=&amp;quot;nombre&amp;quot; :name=&amp;quot;nombre&amp;quot; placeholder=&amp;quot;&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/div&amp;gt;	
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;user-form-input&#39;,
  props: [&#39;value&#39;, &#39;titulo&#39;, &#39;nombre&#39;],
  methods: {
    updateValue(value) {
	this.$emit(&#39;input&#39;, value)
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;validacion-con-vee-validate&quot; tabindex=&quot;-1&quot;&gt;Validación con Vee Validate&lt;/h3&gt;
&lt;p&gt;Esto mismo podemos hacer si estamos usando &lt;em&gt;VeeValidate&lt;/em&gt; para validar nuestro formulario. Tenemos toda la información en la &lt;a href=&quot;https://vee-validate.logaretm.com/v3/advanced/refactoring-forms.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;slots&quot; tabindex=&quot;-1&quot;&gt;Slots&lt;/h2&gt;
&lt;p&gt;Ya vimos al hablar de la &lt;a href=&quot;https://pedroporo.github.io/03_1-comunicar_componentes.html#slots&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;comunicación entre componentes&lt;/a&gt; que un &lt;em&gt;slot&lt;/em&gt; es una ranura en un subcomponente que, al renderizarse, se rellena con lo que le pasa el padre.&lt;/p&gt;
&lt;p&gt;Esto podemos usarlo en los formularios de forma que el &amp;lt;input&amp;gt; con el v-model lo pongamos en un &lt;em&gt;slot&lt;/em&gt; de forma que está enlazado correctamente en el padre.&lt;/p&gt;
&lt;h3 id=&quot;ejemplo-2&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Componente padre: formulario&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;    &amp;lt;form class=&amp;quot;form-horizontal&amp;quot;&amp;gt;
	&amp;lt;form-input titulo=&amp;quot;Id&amp;quot;&amp;gt;
            &amp;lt;input v-model=&amp;quot;user.id&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;id&amp;quot; name=&amp;quot;id&amp;quot; class=&amp;quot;form-control&amp;quot; disabled&amp;gt;
	&amp;lt;/form-input&amp;gt;
	&amp;lt;form-input titulo=&amp;quot;Nombre&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.name&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;name&amp;quot; name=&amp;quot;name&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;Username&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.username&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;username&amp;quot; name=&amp;quot;username&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;E-mail&amp;quot;&amp;gt;
            &amp;lt;input v-model=&amp;quot;user.email&amp;quot; type=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;Teléfono&amp;quot;&amp;gt;
            &amp;lt;input v-model=&amp;quot;user.phone&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;phone&amp;quot; name=&amp;quot;phone&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;URL&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.website&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;website&amp;quot; name=&amp;quot;website&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
 	&amp;lt;form-input titulo=&amp;quot;Nombre de la empresa&amp;quot;&amp;gt;
	    &amp;lt;input v-model=&amp;quot;user.companyName&amp;quot; type=&amp;quot;text&amp;quot; id=&amp;quot;nomEmpresa&amp;quot; name=&amp;quot;nomEmpresa&amp;quot; class=&amp;quot;form-control&amp;quot;&amp;gt;
	&amp;lt;/form-input&amp;gt;
    &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Subcomponente: form-input&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;control-group&amp;quot;&amp;gt;
    &amp;lt;label class=&amp;quot;control-label&amp;quot;&amp;gt;{ { titulo }}&amp;lt;/label&amp;gt;
        &amp;lt;div class=&amp;quot;controls&amp;quot;&amp;gt;
	    &amp;lt;slot&amp;gt;Aquí va un INPUT&amp;lt;/slot&amp;gt;
        &amp;lt;/div&amp;gt;
    &amp;lt;/div&amp;gt;	
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;user-form-input&#39;,
  props: [&#39;value&#39;, &#39;titulo&#39;, &#39;nombre&#39;],
  methods: {
    updateValue(value) {
      this.$emit(&#39;input&#39;, value)
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/08-forms/" >
        </entry>
        <entry>
            <title>
                07-vuex
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/07-vuex/</id>
            <content type="html">
                &lt;h1 id=&quot;vuex&quot; tabindex=&quot;-1&quot;&gt;Vuex&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuex&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-y-configurar-vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar y configurar Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-vuex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Vuex&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceder-al-state-desde-un-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceder al State desde un componente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#getters&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Getters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mutations&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mutations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#actions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#state-en-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;state en formularios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saber-m%C3%A1s&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saber más&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Es un &#39;&lt;em&gt;State Management Pattern&lt;/em&gt;&#39; basado en el patrón &lt;strong&gt;Flux&lt;/strong&gt; que sirve para controlar el flujo de datos en una aplicación.&lt;/p&gt;
&lt;p&gt;En Vue la comunicación entre componentes se hace hacia abajo mediante &lt;em&gt;props&lt;/em&gt; y hacia arriba emitiendo eventos. Ya vimos que cuando distintos componentes que no son padre-hijo tenían que compartir un mismo estado (acceder a los mismos datos) surgían problemas e intentamos solucionarlos con &lt;em&gt;event Bus&lt;/em&gt; o &lt;em&gt;store pattern&lt;/em&gt;. Estas soluciones pueden servir para pequeñas aplicaciones pero cuando crecen se hace difícil seguir los cambios con estos patrones. Para esos casos debemos usar &lt;em&gt;Vuex&lt;/em&gt;, que proporciona un almacén de datos centralizado para todos los componentes de la aplicación y asegura que los datos sólo puedan cambiarse de forma controlada.&lt;/p&gt;
&lt;p&gt;El uso de Vuex implica mayor complejidad en nuestra aplicación por lo que es recomendable su uso en aplicaciones de tamaño medio o grande (para aplicaciones pequeñas basta con un &lt;em&gt;eventBus&lt;/em&gt; o un &lt;em&gt;store  pattern&lt;/em&gt; hecho por nosotros). Como dijo &lt;em&gt;Dan Abramov&lt;/em&gt;, el creador de &lt;em&gt;Redux&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Las librerías &lt;em&gt;Flux&lt;/em&gt; son como las gafas: lo sabrás cuando las necesites&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vuex se integra con las &lt;em&gt;DevTools&lt;/em&gt; por lo que es muy sencillo depurar los datos del almacén y los cambios que se producen en ellos. Sin embargo no debemos almacenar todos los datos en Vuex, sólo los que necesitan varios componentes (los datos privados de un componente deben permanecer en él).&lt;/p&gt;
&lt;p&gt;El flujo de datos de una aplicación podemos verlo (de manera muy simplificada) en el siguiente esquema:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuex.vuejs.org/flow.png&quot; alt=&quot;one-way data flow&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;strong&gt;estado&lt;/strong&gt; es el conjunto de datos de nuestra aplicación&lt;/li&gt;
&lt;li&gt;La &lt;strong&gt;vista&lt;/strong&gt; representa el estado al usuario&lt;/li&gt;
&lt;li&gt;Las &lt;strong&gt;acciones&lt;/strong&gt; son las formas en que podemos cambiar el estado, normalmente en respuesta a entradas del usuario desde la vista&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El &lt;strong&gt;estado&lt;/strong&gt; de los datos se representa en la &lt;strong&gt;vista&lt;/strong&gt;, donde el usuario tiene herramientas que provocan &lt;strong&gt;acciones&lt;/strong&gt; que modifican el &lt;strong&gt;estado&lt;/strong&gt;. Este esquema funciona perfectamente cuando cada componente tiene su propio estado, pero empieza a dar problemas cuando el estado debe compartirse entre varios componentes. Para ese caso ya vimos soluciones como el &lt;em&gt;Event Bus&lt;/em&gt; o el &lt;em&gt;state management pattern&lt;/em&gt; pero son soluciones difícilmente mantenibles cuando nuestra aplicación crece. En aplicaciones medias o grandes es conveniente usar &lt;em&gt;Vuex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vuex centraliza la forma en que nuestros componentes se comunican entre ellos. Con Vuex el flujo de datos podemos verlo de la siguiente manera:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuex.vuejs.org/vuex.png&quot; alt=&quot;Vuex data flow&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Los componentes de Vue pueden renderizar datos de Vuex y es reactivo frente a ellos (si se modifican se volverá a renderizar el componente). Si el componente quiere modificar estos datos debe enviar (&lt;strong&gt;dispatch&lt;/strong&gt;) acciones que ejecutan un proceso (que puede ser asíncrono, por ejemplo una petición a una API). Cuando se resuelve la acción realiza una confirmación (&lt;strong&gt;commit&lt;/strong&gt;) que &lt;strong&gt;muta&lt;/strong&gt; el &lt;em&gt;estado&lt;/em&gt; de la aplicación (aquí podemos depurar con las &lt;em&gt;DevTools&lt;/em&gt;) por lo que se renderiza de nuevo el componente para mostrar el nuevo estado. En &lt;em&gt;Vuex&lt;/em&gt; almacenaremos tanto datos (accesibles desde cualquier componente) como métodos que se utilicen en más de un componente.&lt;/p&gt;
&lt;h2 id=&quot;instalar-y-configurar-vuex&quot; tabindex=&quot;-1&quot;&gt;Instalar y configurar Vuex&lt;/h2&gt;
&lt;p&gt;Si al crear nuestro proyecto Vue marcamos en las opciones que incluya Vuex la instalación y configuración de la herramienta se hará automáticamente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;se instala el paquete &lt;strong&gt;vuex&lt;/strong&gt;. Si no marcamos &lt;em&gt;vuex&lt;/em&gt; al crear el proyecto debemos instalarlo nosotros&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -S vuex
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;se crea el fichero de vuex en &lt;strong&gt;/src/store/index.js&lt;/strong&gt;. Es nuestro almacén donde se guardan todas las variables que vaya a usar más de un componente y los métodos para acceder a ellas y modificarlas. Su contenido en Vue2 es&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
  },
  mutations: {
  },
  actions: {
  },
  modules: {
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en Vue3&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createStore } from &#39;vuex&#39;

export default createStore({
  state: {
  },
  mutations: {
  },
  actions: {
  },
  modules: {
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;se importa dicho fichero en el &lt;strong&gt;main.js&lt;/strong&gt; para que el almacén esté disponible para todos los componentes en la variable &lt;code&gt;this.$store&lt;/code&gt;. Es igual que pasaba con &lt;em&gt;vue-router&lt;/em&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
import router from &#39;./router&#39;
import store from &#39;./store&#39;

new Vue({
  router,	
  store,
  render: h =&amp;gt; h(App)
}).$mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si no hemos seleccionado &lt;em&gt;vuex&lt;/em&gt; al crear el proyecto deberemos hacer estos 3 pasos nosotros manualmente. También tenemos la opción de no importar el &lt;em&gt;store&lt;/em&gt; en el fichero &lt;em&gt;main.js&lt;/em&gt; sino importarlo únicamente en cada componente que vaya a utilizarlo.&lt;/p&gt;
&lt;h2 id=&quot;usar-vuex&quot; tabindex=&quot;-1&quot;&gt;Usar Vuex&lt;/h2&gt;
&lt;p&gt;El corazón de Vuex es el &lt;strong&gt;&lt;em&gt;store&lt;/em&gt;&lt;/strong&gt; que es un objeto donde almacenar &lt;strong&gt;&lt;em&gt;states&lt;/em&gt;&lt;/strong&gt; (datos globales) de la aplicación pero se diferencia de un objeto normal en que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es reactivo&lt;/li&gt;
&lt;li&gt;sólo se puede modificar haciendo &lt;em&gt;commits&lt;/em&gt; de mutaciones&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Desde la consola del navegador podemos usar las &lt;em&gt;DevTools&lt;/em&gt; para ver nuestro almacén. Para ello vamos a Vue y elegimos la segunda opción (Vuex):&lt;/p&gt;
&lt;p&gt;![DevTools - Vuex](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/DevTools-Vuex.png)&lt;/p&gt;
&lt;p&gt;Al crear el almacén (normalmente en el fichero &lt;strong&gt;src/store/index.js&lt;/strong&gt;) pondremos en &lt;em&gt;state&lt;/em&gt; nuestras variables globales y en &lt;em&gt;mutations&lt;/em&gt; los métodos que se pueden usar para cambiarlas, ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;
import Vuex from &#39;vuex&#39;

Vue.use(Vuex)

export default new Vuex.Store({
  state: {
    count: 0
  },
  mutations: {
    increment (state) {
      state.count++
    },
    decrement (state) {
      state.count--
    },
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada mutación recibe como primer parámetro el &lt;em&gt;state&lt;/em&gt; del almacén para que pueda modificarlo y el componente lo llama mediante el método &lt;code&gt;commit&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.commit(&#39;increment&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo hemos creado un almacén que tiene un dato (&lt;em&gt;count&lt;/em&gt;) y dos mutaciones para cambiar su valor (&lt;em&gt;increment&lt;/em&gt; y &lt;em&gt;decrement&lt;/em&gt;). Lo usa un componente que muestra el valor del contador e incluye un botón para incrementar su valor y otro para decrementarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;p&amp;gt;Valor del contador: { { contador }}&amp;lt;/p&amp;gt;
    &amp;lt;button @click=&amp;quot;incrementa&amp;quot;&amp;gt;Incrementar&amp;lt;/button&amp;gt;
    &amp;lt;button @click=&amp;quot;decrementa&amp;quot;&amp;gt;Decrementar&amp;lt;/button&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  computed: {
    contador() {
      return this.$store.state.count
    }
  },
  methods: {
    incrementa() {
      this.$store.commit(&#39;increment&#39;)
    },
    decrementa() {
      this.$store.commit(&#39;decrement&#39;)
    },
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si no hemos importado el almacén en el &lt;code&gt;main.js&lt;/code&gt; lo tendremos que importar en cada componente que lo necesite (no es lo habitua):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import store from &#39;@/store&#39;

export default {
  computed: {
    contador() {
      return store.state.count
    }
  },
  methods: {
    incrementa() {
      store.commit(&#39;increment&#39;)
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;acceder-al-state-desde-un-componente&quot; tabindex=&quot;-1&quot;&gt;Acceder al State desde un componente&lt;/h3&gt;
&lt;p&gt;La mejor forma de acceder a propiedades del almacén es creando métodos &lt;em&gt;computed&lt;/em&gt; que cambiarán al cambiar el estado del mismo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  computed: {
    count () {
      return this.$store.state.count
    },
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos usar varias propiedades del &lt;em&gt;store&lt;/em&gt; en un componente en vez de hacer un método &lt;em&gt;computed&lt;/em&gt; para cada una podemos usar el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;mapState&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { mapState } from &#39;vuex&#39;

  computed: mapState([
    &#39;count&#39;	    // map this.count to store.state.count
  ])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;getters&quot; tabindex=&quot;-1&quot;&gt;Getters&lt;/h3&gt;
&lt;p&gt;En ocasiones no necesitamos una variable del &lt;em&gt;state&lt;/em&gt; sino cierta información sobre ella (por ejemplo no todas las tareas del array &lt;em&gt;todos&lt;/em&gt; sino sólo las tareas pendientes). En ese caso podemos filtrarlas en cada componente que las necesite o podemos hacer un &lt;em&gt;getter&lt;/em&gt; en el almacén que nos devuelva directamente las tareas filtradas. Estos &lt;em&gt;getters&lt;/em&gt; funcionan como las variables  &lt;em&gt;computed&lt;/em&gt; (sólo se ejecutan de nuevo si cambian los datos de que dependen):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default new Vuex.Store({
  state: {
    todos: [
      { id: 1, text: &#39;...&#39;, done: true },
      { id: 2, text: &#39;...&#39;, done: false }
    ]
  },
  getters: {
    pendingTodos: state =&amp;gt; {
      return state.todos.filter(todo =&amp;gt; !todo.done)
    },
    doneTodos: state =&amp;gt; {
      return state.todos.filter(todo =&amp;gt; todo.done)
    },
    pendingTodosCount: (state, getters) =&amp;gt; {
      return getters.pendingTodos.length
    }
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada &lt;em&gt;getter&lt;/em&gt; recibe como primer parámetro el &lt;em&gt;state&lt;/em&gt; del almacén.&lt;/p&gt;
&lt;p&gt;Dentro de los componentes se usan como cualquier variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;computed: {
  pendingTodos () {
    return this.$store.getters.pendingTodos
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y también podemos usar varios con el &lt;em&gt;helper&lt;/em&gt; &lt;strong&gt;mapGetters&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { mapGetters } from &#39;vuex&#39;

export default {
  // ...
  computed: {
    // mix the getters into computed with object spread operator
    ...mapGetters([
      &#39;pendingTodos&#39;,
      &#39;pendingTodosCount&#39;,
      // ...
    ])
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos podemos hacer getters también para los states y así no necesitamos mapState sino que accedemos a todo con mapGetters.&lt;/p&gt;
&lt;p&gt;Los getters pueden recibir parámetros, por ejemplo, para hacer búsquedas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getters: {
  // ...
  getTodoById: (state) =&amp;gt; (id) =&amp;gt; {
    return state.todos.find((todo) =&amp;gt; todo.id === id)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y lo llamaremos con &lt;code&gt;this.$store.getters.getTodoById(2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;mutations&quot; tabindex=&quot;-1&quot;&gt;Mutations&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Una mutación no puede hacer una llamada asíncrona (por ejemplo llamar a &lt;em&gt;axios&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;La única manera de cambiar los datos del almacén es llamando a las mutaciones que hayamos definido, pero no se llaman como si fueran métodos sino que se lanzan (como si fueran eventos) con &lt;strong&gt;commit&lt;/strong&gt;: &lt;code&gt;this.$store.commit(&#39;increment&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Las mutaciones reciben como primer parámetro el &lt;em&gt;store&lt;/em&gt; pero pueden recibir otro parámetro adicional, llamado &lt;strong&gt;&lt;em&gt;payload&lt;/em&gt;&lt;/strong&gt;, donde incluyamos los datos a pasarle a la mutación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;mutations: {
  addTodo (state, toDo) {
    state.todos.push(toDo)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al llamar a la mutación le pasamos el valor esperado: &lt;code&gt;this.$store.commit(&#39;addTodo&#39;, this.newTodo)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cada vez que se llama a una mutación se registra en las &lt;em&gt;DevTools&lt;/em&gt; y podemos ver la mutación llamada y los datos que se le han pasado:&lt;/p&gt;
&lt;p&gt;![DevTools - Mutations](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/DevTools-Vuex-mutations.png)&lt;/p&gt;
&lt;p&gt;Si queremos pasar varios parámetros el &lt;em&gt;payload&lt;/em&gt; deberá ser un objeto. En ese caso podemos pasar el nombre de la mutación como propiedad &lt;em&gt;type&lt;/em&gt; del objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.commit({
  type: &#39;incrementBy&#39;,
  amount: 10
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos llamar a las mutaciones desde un componente, aunque lo habitual es llamar a acciones que ejecuten esas mutaciones. Recuerda que el código de las mutaciones &lt;strong&gt;NO puede ser asíncrono&lt;/strong&gt;, por lo que no pueden, por ejemplo, hacer una llamada a &lt;em&gt;axios&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para llamar a la mutación desde un componente haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.commit(&#39;increment&#39;):
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al igual con con el estado o los &lt;em&gt;getters&lt;/em&gt; podemos &lt;em&gt;mapear&lt;/em&gt; las mutaciones a métodos locales para poder hacer &lt;code&gt;this.increment()&lt;/code&gt; en lugar de &lt;code&gt;this.$store.commit(&#39;increment&#39;)&lt;/code&gt; con el &lt;em&gt;helper&lt;/em&gt; &lt;em&gt;mapMutatios&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { mapMutations } from &#39;vuex&#39;

export default {
  // ...
  methods: {
    ...mapMutations([
      &#39;increment&#39;, // map `this.increment()` to `this.$store.commit(&#39;increment&#39;)`
      &#39;incrementBy&#39; // map `this.incrementBy(amount)` 
                    // to `this.$store.commit(&#39;incrementBy&#39;, amount)`
    ]),
    // Y podemos hacer &#39;alias&#39; de las mutaciones
    ...mapMutations({
      add: &#39;increment&#39; // map `this.add()` to `this.$store.commit(&#39;increment&#39;)`
    })
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;actions&quot; tabindex=&quot;-1&quot;&gt;Actions&lt;/h3&gt;
&lt;p&gt;Son métodos del almacén como las mutaciones pero que &lt;strong&gt;SÍ pueden hacer llamadas asíncronas&lt;/strong&gt;. Por tanto es aquí donde haremos las llamadas a la BBDD y cuando el servidor responda modificaremos los datos del &lt;em&gt;store&lt;/em&gt;. Lo mejor es no cambiarlos directamente en la &lt;em&gt;action&lt;/em&gt; (aunque podría hacerse) sino que la &lt;em&gt;action&lt;/em&gt; debería llamar a una &lt;em&gt;mutation&lt;/em&gt; que la cambie y así se registra en las &lt;em&gt;DevTools&lt;/em&gt;. Las acciones reciben como parámetro un objeto &lt;em&gt;context&lt;/em&gt; con las mismas propiedades y métodos que el almacén, lo que permite:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lanzar una mutación con &lt;code&gt;context.commit(&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;acceder a los datos con &lt;code&gt;context.state.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;acceder a los getters con &lt;code&gt;context.getters.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;llamar a otras acciones con &lt;code&gt;context.dispatch(&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
import axios from &#39;axios&#39;

export default new Vuex.Store({
  state: {
    todos: []
  },
  mutations: {
    addTodo(state, todo) {
      state.todos.push(todo);
    },
  },
  actions: {
    addTodo(context, item) {
      axios.post(`${baseURL}/todos`, item)
      .then((response) =&amp;gt; context.commit(&#39;addTodo&#39;, response.data))
      .catch((error) =&amp;gt; alert(error))
    },
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para llamarla desde un componente hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.dispatch(&#39;addTodo&#39;, this.newTodo)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos usar la desestructuración de objetos de ES2015 para obtener sólo la parte del contexto que nos interesa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  actions: {
    addTodo({ commit }, item) {
      axios.post(`${baseURL}/todos`, item)
      .then((response) =&amp;gt; commit(&#39;addTodo&#39;, response.data))
      .catch((error) =&amp;gt; alert(error))
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Igual que antes podemos usar el &lt;em&gt;helper&lt;/em&gt; &lt;em&gt;mapActions&lt;/em&gt; para mapear acciones y no tener que llamarlas en el componente con &lt;code&gt;this.$store.dispatch(&#39;...&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si la acción realiza una llamada asíncrona y el componente que la llama tiene que enterarse de cuándo finaliza debe devolver una promesa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  actions: {
    addTodo(context, item) {
      return new Promise((resolve, reject) =&amp;gt; {
        addTodo(context, item) {
          axios.post(`${baseURL}/todos`, item)
          .then((response) =&amp;gt; {
            context.commit(&#39;addTodo&#39;, response.data)
            resolve(response.data)
          })
          .catch((error) =&amp;gt; reject(error))
        }
    },
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso en el componente tenemos los métodos &lt;em&gt;then&lt;/em&gt; y &lt;em&gt;catch&lt;/em&gt; para saber cuándo ha acabado la acción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$store.dispatch(&#39;addTodo&#39;, this.newTodo)
.then((todo) =&amp;gt; {   	      // se ejecutará si la acción ha hecho un resolve()
  alert(&#39;Añadida la tarea &#39; + todo.id)
  this.$router.push(&#39;/todos&#39;)
})
.catch((error) =&amp;gt; alert(error))	// se ejecutará si la acción ha hecho un reject()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: si quien llama a una acción no necesita saber cuándo termina la acción ni su resultado la acción no es necesario que devuelva una promesa&lt;/p&gt;
&lt;h2 id=&quot;state-en-formularios&quot; tabindex=&quot;-1&quot;&gt;state en formularios&lt;/h2&gt;
&lt;p&gt;Si queremos usar un formulario para modificar un state del store no podemos asociarlo al input con la directiva &lt;strong&gt;v-model&lt;/strong&gt; porque cuando el usuario cambie el valor del input estaría escribiendo directamente sobre un state, lo que no puede hacerse más que por medio de una mutación.&lt;/p&gt;
&lt;p&gt;Tenemos 2 soluciones al problema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;podemos no usar el v-model sino descomponerlo en un &lt;em&gt;:value&lt;/em&gt; y un &lt;em&gt;@input&lt;/em&gt; como vimos al hablar de poner un input en un subcomponente&lt;/li&gt;
&lt;li&gt;podemos ponerle al computed de ese state un setter y un getter como vimos en el capítulo de &lt;a href=&quot;https://pedroporo.github.io/06-profundizando.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Profundizando en Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la &lt;a href=&quot;https://vuex.vuejs.org/guide/forms.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt; de Vuex.&lt;/p&gt;
&lt;h2 id=&quot;saber-mas&quot; tabindex=&quot;-1&quot;&gt;Saber más&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vuex.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.tutsplus.com/es/tutorials/how-to-build-complex-large-scale-vuejs-applications-with-vuex--cms-30952&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cómo Construir Aplicaciones Complejas y a Gran Escala Vue.js con Vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vueschool.io/courses/vuex-for-everyone&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vuex for Everyone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://elabismodenull.wordpress.com/2017/05/29/vuejs-introduccion-a-vuex/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;VueJS: Introducción a vuex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/fullstackio/managing-state-in-vue-js-23a0352b1c87&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Managing State in Vue.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/07-vuex/" >
        </entry>
        <entry>
            <title>
                07-pinia
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/07-pinia/</id>
            <content type="html">
                &lt;h1 id=&quot;pinia&quot; tabindex=&quot;-1&quot;&gt;Pinia&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pinia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-y-configurar-pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar y configurar Pinia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-store&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Pinia&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#getters&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Getters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#actions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Actions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#state-en-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;state en formularios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Es un &#39;&lt;em&gt;State Management Pattern&lt;/em&gt;&#39; basado en el patrón &lt;strong&gt;Flux&lt;/strong&gt; que sirve para controlar el flujo de datos en una aplicación. Sustituye a la anterior librería usada en &lt;em&gt;Vue 2&lt;/em&gt; llamada &lt;em&gt;Vuex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Según la filosofía de &lt;em&gt;Vue&lt;/em&gt; cada componente es una unidad funcional que contiene 3 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;estado&lt;/strong&gt;: los datos o &lt;em&gt;source of truth&lt;/em&gt; que maneja en componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vista&lt;/strong&gt;: la representación del &lt;em&gt;estado&lt;/em&gt; que se ve en la aplicación&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;acciones&lt;/strong&gt;: la forma en que el &lt;em&gt;estado&lt;/em&gt; puede cambiar para reaccionar a entradas del usuario en  la &lt;em&gt;vista&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo, el componente &lt;em&gt;contador&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
  // state
  data() {
    return {
      count: 0
    }
  },
  // actions
  methods: {
    increment() {
      this.count++
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;!-- view --&amp;gt;
&amp;lt;template&amp;gt;
  {{ count }}
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Increment&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto es lo que se llama &lt;strong&gt;&lt;em&gt;one-way data flow&lt;/em&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/state-flow.a8bc738e.png&quot; alt=&quot;one-way data flow&quot; /&gt;&lt;/p&gt;
&lt;p&gt;El problema lo tenemos cuando un componente necesita acceder a datos (&lt;em&gt;state&lt;/em&gt;) de otro componente.&lt;/p&gt;
&lt;p&gt;En Vue la comunicación entre componentes padre-hijo se hace hacia abajo mediante &lt;code&gt;props&lt;/code&gt; y hacia arriba emitiendo eventos. Y vimos que si distintos componentes que no son padre-hijo tenían que compartir un mismo estado (acceder a los mismos datos) surgían problemas e intentamos solucionarlos con el patrón &lt;em&gt;store pattern&lt;/em&gt;. Esto puede servir para pequeñas aplicaciones pero cuando crecen se hace difícil seguir los cambios. Para esos casos debemos usar &lt;em&gt;Pinia&lt;/em&gt;, que proporciona un almacén de datos centralizado para todos los componentes de la aplicación y asegura que los datos sólo puedan cambiarse de forma controlada.&lt;/p&gt;
&lt;p&gt;El uso de &lt;em&gt;Pinia&lt;/em&gt; es imprescindible en aplicaciones de tamaño medio o grande pero incluso para aplicaciones pequeñas nos ofrece ventajas frente a un &lt;em&gt;store pattern&lt;/em&gt; hecho por nosotros como soporte para las &lt;em&gt;DevTools&lt;/em&gt; y para &lt;em&gt;Server Side Rendering&lt;/em&gt; o uso de Typescript.&lt;/p&gt;
&lt;p&gt;Como ya dijimos, no debemos almacenar todos los datos en el &lt;em&gt;store centralizado&lt;/em&gt; sino sólo los que necesitan varios componentes (los datos privados de un componente deben permanecer en él).&lt;/p&gt;
&lt;h2 id=&quot;instalar-y-configurar-pinia&quot; tabindex=&quot;-1&quot;&gt;Instalar y configurar Pinia&lt;/h2&gt;
&lt;p&gt;La forma más sencilla de utilizar &lt;em&gt;Pinia&lt;/em&gt; es incluirla a la hora de crear nuestro proyecto cuando nos pregunta si queremos usarla. Esto hace que la instalación y configuración de la herramienta se haga automáticamente.&lt;/p&gt;
&lt;p&gt;Al entrar en nuestro nuevo proyecto vemos que dentro de &lt;code&gt;/src&lt;/code&gt; se ha creado una carpeta llamada &lt;code&gt;stores/&lt;/code&gt; donde crearemos los distintos almacenes de datos (podemos tener sólo uno o varios).&lt;/p&gt;
&lt;p&gt;Para poder usar &lt;em&gt;Pinia&lt;/em&gt; en los distintos componentes vemos que en el fichero &lt;code&gt;main.js&lt;/code&gt; se importa la función &lt;code&gt;createPinia()&lt;/code&gt; y se indica que se use en la instancia de Vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createApp } from &#39;vue&#39;
import { createPinia } from &#39;pinia&#39; // &amp;lt;---
import App from &#39;./App.vue&#39;
import router from &#39;./router&#39;

createApp(App).use(createPinia()).use(router).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos usar &lt;em&gt;Pinia&lt;/em&gt; en un proyecto existente donde no la seleccionamos al crear el proyecto deberemos instalar la librería como dependencia de producción y modificar el fichero &lt;code&gt;main.js&lt;/code&gt; para que pueda usarse, como hemos visto arriba. Luego crearemos la carpeta &lt;code&gt;/src/stores/&lt;/code&gt; y en ella los almacenes que queramos usar.&lt;/p&gt;
&lt;h2 id=&quot;crear-un-store&quot; tabindex=&quot;-1&quot;&gt;Crear un store&lt;/h2&gt;
&lt;p&gt;Ahora hay que crear el fichero del store. Podemos tener todos los datos en un único fichero o, si son muchos, hacer ficheros diferentes. Por ejemplo para la aplicación de &#39;ToDo&#39; podemos crear su store en &lt;strong&gt;/src/stores/toDo.js&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Al crear un almacén pondremos en él todas las variables que vaya a usar más de un componente (dentro de &lt;strong&gt;&lt;code&gt;state&lt;/code&gt;&lt;/strong&gt;) y los métodos para acceder a ellas y modificarlas (dentro de &lt;strong&gt;&lt;code&gt;actions&lt;/code&gt;&lt;/strong&gt;), por ejemplo, para compartir un contador haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { defineStore } from &#39;pinia&#39;

export const useCounterStore = defineStore(&#39;counter&#39;, {
  state() {
    return {
      count: 0
    }
  },
  // o usando arrow functions
  // state: () =&amp;gt; ({
  //  count: 0
  // }),

  actions: {
    increment () {
      this.count++
    },
    decrement () {
      this.count--
    },
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo hemos creado un almacén que tiene un dato (&lt;em&gt;count&lt;/em&gt;) y dos métodos para cambiar su valor (&lt;em&gt;increment&lt;/em&gt; y &lt;em&gt;decrement&lt;/em&gt;). El primer parámetro de &lt;code&gt;defineStore&lt;/code&gt; es el nombre con el que veremos el almacén desde las &lt;em&gt;DevTools&lt;/em&gt; (por si tenemos varios).&lt;/p&gt;
&lt;p&gt;Desde la consola del navegador podemos usar las &lt;em&gt;DevTools&lt;/em&gt; para ver nuestro almacén. Para ello vamos a la pestaña de Vue y desde el &lt;em&gt;Inspector&lt;/em&gt; buscamos &lt;em&gt;Pinia&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;![DevTools - Pinia](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/DevTools-Pinia.png)&lt;/p&gt;
&lt;p&gt;Si al crear el proyecto hemos incorporado &lt;em&gt;Pinia&lt;/em&gt; nos ha creado un almacén de ejemplo como el anterior, pero escrito con la sintaxis de &lt;em&gt;Compositon API&lt;/em&gt; que sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { ref } from &#39;vue&#39;
import { defineStore } from &#39;pinia&#39;

export const useCounterStore = defineStore(&#39;counter&#39;, () =&amp;gt; {
  const count = ref(0)
  function increment() {
    count.value++
  }
  function increment() {
    count.value--
  }

  return { count, increment, decrement }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;usar-pinia&quot; tabindex=&quot;-1&quot;&gt;Usar Pinia&lt;/h2&gt;
&lt;p&gt;En cada componente que lo necesitemos podemos usar el almacén de datos. Para ello lo importamos y luego definimos en &lt;em&gt;computed&lt;/em&gt; las variables del &lt;em&gt;state&lt;/em&gt; a que queramos acceder y en &lt;em&gt;methods&lt;/em&gt; las &lt;em&gt;actions&lt;/em&gt; que deseemos. Para ello debemos usar los &lt;em&gt;helpers&lt;/em&gt; &lt;code&gt;mapState&lt;/code&gt; y &lt;code&gt;mapActions&lt;/code&gt; en los que indicaremos las variables y métodos del &lt;em&gt;store&lt;/em&gt; que queremos usar en este componente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;//MyComponent.vue
import { useCounterStore } from &#39;../stores/conterStore&#39;;
import { mapState, mapActions } from &#39;pinia&#39;;

export default {
  ...
  computed: {
    ...mapState(useCounterStore, {
      count: &#39;count&#39;,
    })
  },
  methods: {
    ...mapActions(useCounterStore, [&#39;increment&#39;, &#39;decrement&#39;])
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con esto se &lt;em&gt;mapean&lt;/em&gt; las variables, &lt;em&gt;getters&lt;/em&gt; y &lt;em&gt;actions&lt;/em&gt; a variables y métodos locales a los que podemos acceder desde &lt;strong&gt;&lt;code&gt;this.&lt;/code&gt;&lt;/strong&gt; (por ejemplo &lt;code&gt;this.count&lt;/code&gt; o &lt;code&gt;this.increment()&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;getters&quot; tabindex=&quot;-1&quot;&gt;Getters&lt;/h3&gt;
&lt;p&gt;En ocasiones no necesitamos una variable del &lt;em&gt;state&lt;/em&gt; sino cierta información sobre ella (por ejemplo no todas las tareas del array &lt;em&gt;todos&lt;/em&gt; sino sólo las tareas pendientes). En ese caso podemos filtrarlas en cada componente que las necesite o podemos hacer un método en el almacén (dentro de &lt;strong&gt;&lt;code&gt;getters&lt;/code&gt;&lt;/strong&gt;) que nos devuelva directamente las tareas filtradas. Estos &lt;em&gt;getters&lt;/em&gt; funcionan como las variables  &lt;em&gt;computed&lt;/em&gt; (sólo se ejecutan de nuevo si cambian los datos de que dependen):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { defineStore } from &#39;pinia&#39;

export const useToDoStore = defineStore(&#39;todo&#39;, {
  state: () =&amp;gt; ({
      /** @type { { title: string, id: number, done: boolean }[]} */
      todos: [
        { id: 1, title: &#39;...&#39;, done: true },
        { id: 2, title: &#39;...&#39;, done: false }
      ],
      nextId: 3,
  }),
  getters: {
    // reciben como primer parámetro el &#39;state&#39;
    finishedTodos: (state) =&amp;gt; state.todos.filter((todo) =&amp;gt; todo.done),
    unfinishedTodos: (state) =&amp;gt; state.todos.filter((todo) =&amp;gt; !todo.done),
    /**
     * @returns { { title: string, id: number, done: boolean }[]}
     */
  },
  actions: {
    // any amount of arguments, return a promise or not
    addTodo(title) {
        this.todos.push({
          title,
          id: this.nextId,
          done: false
        })
        this.nextId++
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada &lt;em&gt;getter&lt;/em&gt; recibe como primer parámetro el &lt;em&gt;state&lt;/em&gt; del almacén.&lt;/p&gt;
&lt;p&gt;Dentro de los componentes se usan como cualquier variable del &lt;em&gt;state&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  ...
  computed: {
    ...mapState(useToDoStore, {
      todos: &#39;todos&#39;,
      finishedTodos: &#39;finishedTodos&#39;,
    })
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los getters pueden recibir parámetros, por ejemplo, para hacer búsquedas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;getters: {
  getTodoById: (state) =&amp;gt; (id) =&amp;gt; state.todos.find((todo) =&amp;gt; todo.id === id)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde el componente lo llamaremos con &lt;code&gt;this.getTodoById(2)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;actions&quot; tabindex=&quot;-1&quot;&gt;Actions&lt;/h3&gt;
&lt;p&gt;La manera de cambiar los datos del almacén es llamando a las acciones que hayamos definido, y que hemos &lt;em&gt;mapeado&lt;/em&gt; al componente como métodos locales. Estas acciones pueden recibir tantos parámetros como se desee.&lt;/p&gt;
&lt;p&gt;Cada vez que se llama a una acción se registra en las &lt;em&gt;DevTools&lt;/em&gt; y podemos ver la acción llamada y los datos que se le han pasado:&lt;/p&gt;
&lt;p&gt;![DevTools - Actions](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/DevTools-Pinia-actions.png)&lt;/p&gt;
&lt;p&gt;Las acciones pueden hacer llamadas asíncronas. Lo normal es llamar a la BBDD y cuando el servidor responda modificaremos los datos del &lt;em&gt;store&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { defineStore } from &#39;pinia&#39;
import TodoService from &#39;../services/TodoService.js&#39;

export const useToDoStore = defineStore(&#39;todo&#39;, {
  state: () =&amp;gt; {
    return {
      todos: [],
      nextId: 0,
    }
  },
  actions: {
    async addTodo(title) {
      try {
        const newToDo = await TodoService.addTodo({ 
          title, 
          id: this.nextId + 1, 
          isFinished: false 
        });
        this.nextId++
        this.todos.push(newToDo)
      } catch(error) {
        throw error;
      }
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si la acción realiza una llamada asíncrona y el componente que la llama tiene que enterarse de cuándo finaliza debe devolver una promesa (debe declararse con &lt;code&gt;async&lt;/code&gt; o &lt;em&gt;envolverse&lt;/em&gt; en un &lt;code&gt;return new Promise(...)&lt;/code&gt;). En el componente podemos usar &lt;code&gt;await&lt;/code&gt; o &lt;code&gt;then / catch&lt;/code&gt; para saber cuándo ha acabado la acción:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  await this.addTodo(this.newTodo)
  alert(&#39;Añadida la tarea &#39; + this.newTodo.title)
  this.$router.push(&#39;/todos&#39;)
} catch(error) {
  alert(error)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: si quien llama a una acción no necesita saber cuándo termina la acción ni su resultado no es necesario llamarla con &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;state-en-formularios&quot; tabindex=&quot;-1&quot;&gt;state en formularios&lt;/h2&gt;
&lt;p&gt;Aunque no es lo habitual, si queremos usar un formulario para modificar un &lt;em&gt;state&lt;/em&gt; del &lt;em&gt;store&lt;/em&gt; no podemos asociarlo al input con la directiva &lt;strong&gt;v-model&lt;/strong&gt; porque cuando el usuario cambie el valor del input estaría escribiendo directamente sobre un &lt;em&gt;state&lt;/em&gt;, lo que debe hacerse por medio de una acción.&lt;/p&gt;
&lt;p&gt;Tenemos 2 soluciones al problema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;podemos no usar el v-model sino descomponerlo en un &lt;em&gt;:value&lt;/em&gt; y un &lt;em&gt;@input&lt;/em&gt; como vimos al hablar de poner un input en un subcomponente&lt;/li&gt;
&lt;li&gt;podemos ponerle al computed de ese state un setter y un getter como vimos en el capítulo de &lt;a href=&quot;https://pedroporo.github.io/06-profundizando.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Profundizando en Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la &lt;a href=&quot;https://pinia.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Pinia&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/07-pinia/" >
        </entry>
        <entry>
            <title>
                06-profundizando
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/06-profundizando/</id>
            <content type="html">
                &lt;h1 id=&quot;profundizando-en-vue&quot; tabindex=&quot;-1&quot;&gt;Profundizando en Vue&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#profundizando-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Profundizando en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#computed&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Computed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#watchers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Watchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceder-al-dom-ref&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceder al DOM: &#39;ref&#39;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#nexttick&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;nextTick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#clases-html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clases HTML&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sintaxis-de-objeto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sintaxis de objeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sintaxis-de-array&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sintaxis de array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#asignar-clases-a-un-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Asignar clases a un componente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#asignar-estilos-directamente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Asignar estilos directamente&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ciclo-de-vida-del-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ciclo de vida del componente&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-ciclo-de-vida-de-un-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El ciclo de vida de un componente&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#componentes-as%C3%ADncronos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Componentes asíncronos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#custom-directives&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Custom Directives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#im%C3%A1genes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Imágenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#transiciones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Transiciones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#entornos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Entornos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#guards-del-router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Guards del router&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;computed&quot; tabindex=&quot;-1&quot;&gt;Computed&lt;/h2&gt;
&lt;p&gt;Cuando se crea un componente de Vue (o el componente raíz) se le pasa como parámetro un objeto con las opciones con que se creará. Entre ellas tenemos &lt;em&gt;props&lt;/em&gt;, _ data_, &lt;em&gt;methods&lt;/em&gt;, y también otras como &lt;em&gt;computed&lt;/em&gt; y &lt;em&gt;watch&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Hemos visto que en una interpolación o directiva podemos poner una expresión javascript. Pero si la expresión es demasiado compleja hace que nuestro HTML sea más difícil de leer. La solución es crear una expresión calculada que nos permite tener &amp;quot;limpio&amp;quot; el HTML. Por ejemplo un código con expresiones complejas como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Autor: { { author.name + &#39; &#39; + author.surname }}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Ha publicado libros: { { author.books.length &amp;gt; 0 ? &#39;Sí&#39; : &#39;No&#39; }}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;author-item&#39;,
  data() {
    return {
      author: {
        name: &#39;John&#39;,
        surname: &#39;Doe&#39;,
        books: [
          &#39;Vue 2 - Advanced Guide&#39;,
          &#39;Vue 3 - Basic Guide&#39;,
          &#39;Vue 4 - The Mystery&#39;
        ]
      }
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se puede simplificar creando propiedades calculadas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Autor: { { fullName }}&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;Ha publicado libros: { { hasPublished }}&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  name: &#39;author-item&#39;,
  data() {
    return {
      author: {
        name: &#39;John&#39;,
        surname: &#39;Doe&#39;,
        books: [
          &#39;Vue 2 - Advanced Guide&#39;,
          &#39;Vue 3 - Basic Guide&#39;,
          &#39;Vue 4 - The Mystery&#39;
        ]
      }
    }
  },
  computed: {
    fullName() {
      return this.name + &#39; &#39; + this.surname;
    },
    hasPublished() {
      return this.author.books.length &amp;gt; 0 ? &#39;Sí&#39; : &#39;No&#39;
    }
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En lugar de definir &lt;em&gt;computed&lt;/em&gt; podríamos haber obtenido el mismo resultado usando métodos, pero la ventaja de las propiedades calculadas es que se cachean por lo que si se vuelven a tener que renderizar en el DOM no vuelven a evaluarse, a menos que cambie el valor de alguna de las variables reactivas que use.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por defecto las propiedades &lt;em&gt;computed&lt;/em&gt; sólo hacen un &lt;em&gt;getter&lt;/em&gt;, por lo que no se puede cambiar su valor. Pero podemos si queremos hacerlo definir métodos &lt;em&gt;getter&lt;/em&gt; y &lt;em&gt;setter&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  computed: {
    fullName:
      // getter
      get() {
        return this.name + &#39; &#39; + this.surname;
      },
      // setter
      set(newValue) {
        const names = newValue.split(&#39; &#39;);
        this.name = names[0];
        this.surname = names[names.length - 1];
      }
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si hacemos &lt;code&gt;this.fullName = &#39;John Doe&#39;&lt;/code&gt; estaremos asignando los valores adecuados a las variables &lt;em&gt;name&lt;/em&gt; y &lt;em&gt;surname&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;watchers&quot; tabindex=&quot;-1&quot;&gt;Watchers&lt;/h2&gt;
&lt;p&gt;Vue proporciona una forma genérica de controlar cuándo cambia el valor de una variable reactiva para poder ejecutar código en ese momento poniéndole un &lt;em&gt;watch&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  data() {
    return {
      name: &#39;John&#39;,
      surname: &#39;Doe&#39;,
      fullName: &#39;John Doe&#39;,
    }
  },
  watch: {
    name(newValue, oldValue) {
      this.fullName = newValue + &#39; &#39; + this.surname;
    },
    surname(newValue, oldValue) {
      this.fullName = this.name + &#39; &#39; + newValue;
    },
  },
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso no tiene mucho sentido y es más fácil (y más eficiente) usar una propiedad &lt;em&gt;computed&lt;/em&gt; como hemos visto antes, pero hay ocasiones en que necesitamos ejecutar código al cambiar una variable y es así donde se usan. Veremos su utilidad cuando trabajemos con &lt;em&gt;vue-router&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;NOTA: los &lt;em&gt;watcher&lt;/em&gt; son costosos por lo que no debemos abusar de ellos&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-10&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;acceder-al-dom-ref&quot; tabindex=&quot;-1&quot;&gt;Acceder al DOM: &#39;ref&#39;&lt;/h2&gt;
&lt;p&gt;Aunque Vue se encarga de la vista por nosotros en alguna ocasión podemos tener que acceder a un elemento del DOM. En ese caso no haremos un &lt;code&gt;document.getElement...&lt;/code&gt; sino que le ponemos una referencia al elemento con el atributo &lt;code&gt;ref&lt;/code&gt; para poder acceder al mismo desde nuestro script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;form ref=&amp;quot;myForm&amp;quot;&amp;gt;
    ...
  &amp;lt;/form&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  mounted() {
    this.$refs.myForm.setAttribute(&#39;novalidate&#39;, true)
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde el código tenemos acceso a todas las referencias desde &lt;code&gt;this.$refs&lt;/code&gt;. Hay que tener en cuenta que sólo se puede acceder a un elemento después de montarse el componente (en el &lt;em&gt;hook&lt;/em&gt; &lt;strong&gt;mounted()&lt;/strong&gt; o después).&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;next-tick&quot; tabindex=&quot;-1&quot;&gt;nextTick&lt;/h3&gt;
&lt;p&gt;Si modificamos una variable reactiva el cambio se refleja automáticamente en el DOM, pero no inmediatamente sino que se espera hasta el evento &lt;em&gt;nextTick&lt;/em&gt; en el ciclo de modificación para asegurarse de no cambiar algo que quizá va a volverse a cambiar en este ciclo.&lt;/p&gt;
&lt;p&gt;Si accedemos al DOM antes de que se produzca este evento el valor aún será el antiguo. Para obtener el nuevo valor hemos de esperar al &lt;em&gt;nextTick&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p&amp;gt;Contador: &amp;lt;span ref=&amp;quot;contador&amp;quot;&amp;gt;{ { count }}&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Incrementa&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      count.value++
      console.log(&#39;Contador en el DOM: &#39; + this.$refs.contador.textContent)
      // Devolverá el valor sin actualizar aún
      nextTick(() =&amp;gt; {
        console.log(&#39;Contador en el DOM tras nextTick: &#39; + this.$refs.contador.textContent)
        // Devolverá el valor actualizado
      })
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Realmente es algo que seguramente nunca necesitemos pero así conocemos un poco más cómo funciona Vue internamente.&lt;/p&gt;
&lt;h2 id=&quot;clases-html&quot; tabindex=&quot;-1&quot;&gt;Clases HTML&lt;/h2&gt;
&lt;p&gt;Ya hemos visto que en Javascript usamos las clases con mucha frecuencia, normalmente para asignar a elementos estilos definidos en el CSS, pero también para identificar elementos sin usar una &lt;em&gt;id&lt;/em&gt; (como hacíamos poniendo a los botones de acciones de los productos las clases &lt;em&gt;subir&lt;/em&gt;, &lt;em&gt;bajar&lt;/em&gt;, &lt;em&gt;editar&lt;/em&gt; o &lt;em&gt;borrar&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;En Vue tenemos diferentes formas de asignar clases. La más simple sería &lt;em&gt;bindear&lt;/em&gt; el atributo &lt;em&gt;class&lt;/em&gt; y gestionarlas directamente en el código, pero no es lo más cómodo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :class=&amp;quot;clasesDelDiv&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso tendríamos que asignar a la variables &lt;em&gt;clasesDelDiv&lt;/em&gt; las diferentes clases separadas por espacio, lo que es engorroso de mantener.&lt;/p&gt;
&lt;h3 id=&quot;sintaxis-de-objeto&quot; tabindex=&quot;-1&quot;&gt;Sintaxis de objeto&lt;/h3&gt;
&lt;p&gt;Una forma más sencilla es &lt;em&gt;bindear&lt;/em&gt; un objeto donde cada propiedad es el nombre de una posible clase y su valor es un booleano que indica si tendrá o no dicha clase, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div 
    class=&amp;quot;static&amp;quot;
    :class=&amp;quot;{ active: isActive, &#39;text-danger&#39;: hasError }&amp;quot;
&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso el &amp;lt;DIV&amp;gt; tendrá las clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static: siemrpe tendrá esta clase. Como véis puede coexistir la directiva &lt;em&gt;:class&lt;/em&gt; con el atributo &lt;em&gt;class&lt;/em&gt; y se suman ambos&lt;/li&gt;
&lt;li&gt;active: tendrá esta clase si el valor de la variable &lt;em&gt;isActive&lt;/em&gt; es &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;text-danger: ídem para la variable &lt;em&gt;hasError&lt;/em&gt;. Si el nombre de una clase tiene más de una palabra hay que entrecomillarla&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para mejorar la legibilidad del HTML podemos poner el objeto de las clases en el Javascript&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div 
    class=&amp;quot;static&amp;quot;
    :class=&amp;quot;classObject&amp;quot;
&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    classObject: {
      active: true,
      &#39;text-danger&#39;: false
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sintaxis-de-array&quot; tabindex=&quot;-1&quot;&gt;Sintaxis de array&lt;/h3&gt;
&lt;p&gt;Podemos indicar las clases en forma de array de variables que contienen la clase a asignar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :class=&amp;quot;[activeClass, errorClass]&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    activeClass: &#39;active&#39;,
    errorClass: &#39;text-danger&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso el &amp;lt;DIV&amp;gt; tendrá las clases &lt;code&gt;active&lt;/code&gt; y &lt;code&gt;text-danger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Y es posible incluir sintaxis de objeto dentro de la sintaxis de array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :class=&amp;quot;[{ active: isActive}, errorClass]&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;asignar-clases-a-un-componente&quot; tabindex=&quot;-1&quot;&gt;Asignar clases a un componente&lt;/h3&gt;
&lt;p&gt;En la etiqueta de un componente podemos ponerle un atributo &lt;em&gt;class&lt;/em&gt; que le asignará las clases incluidas y que se sumaran a las que se le asignen dentro del propio componente. Por ejemplo, si el &amp;lt;DIV&amp;gt; del ejemplo anterior es el &lt;em&gt;template&lt;/em&gt; de un componente llamado MyComponent puedo poner:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component class=&amp;quot;main highligth&amp;quot;&amp;gt;&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso el &amp;lt;DIV&amp;gt; tendrá las clases &lt;code&gt;main&lt;/code&gt;, &lt;code&gt;highligth&lt;/code&gt;, &lt;code&gt;active&lt;/code&gt; si la variable &lt;em&gt;isActive&lt;/em&gt; vale &lt;em&gt;true&lt;/em&gt; y &lt;code&gt;text-danger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En Vue3 el &lt;em&gt;template&lt;/em&gt; de un componente puede tener varios elementos raíz. En ese caso para indicar a cuál se aplicarán las clases definidas en el padre se usa la propiedad &lt;code&gt;$attr.class&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;p :class=&amp;quot;$attrs.class&amp;quot;&amp;gt;Hi!&amp;lt;/p&amp;gt;
    &amp;lt;span&amp;gt;This is a child component&amp;lt;/span&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;asignar-estilos-directamente&quot; tabindex=&quot;-1&quot;&gt;Asignar estilos directamente&lt;/h3&gt;
&lt;p&gt;Aunque no es lo recomendable, podemos asignar directamente estilos CSS igual que asignamos clases y también podemos usar la sintaxis de objeto o la de array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div :style=&amp;quot;{ color: activeColor, fontSize: fontSize + &#39;px&#39; }&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    activeColor: &#39;red&#39;,
    fontSize: 30&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ciclo-de-vida-del-componente&quot; tabindex=&quot;-1&quot;&gt;Ciclo de vida del componente&lt;/h2&gt;
&lt;h3 id=&quot;el-ciclo-de-vida-de-un-componente&quot; tabindex=&quot;-1&quot;&gt;El ciclo de vida de un componente&lt;/h3&gt;
&lt;p&gt;Al crearse la instancia de Vue o un componente la aplicación debe realizar unas tareas como configurar la observación de variables, compilar su plantilla (&lt;em&gt;template&lt;/em&gt;), montarla en el DOM o reaccionar ante cambios en las variables volviendo a renderizar las partes del DOM que han cambiado. Además ejecuta funciones definidas por el usuario cuando sucede alguno de estos eventos, llamadas &lt;em&gt;hooks&lt;/em&gt; del ciclo de vida.&lt;/p&gt;
&lt;p&gt;En la siguiente imagen podéis ver el ciclo de vida de la instancia Vue (y de cualquier componente) y los eventos que se generan y que podemos interceptar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/lifecycle.16e4c08e.png&quot; alt=&quot;Ciclo de vida de Vue&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En &lt;strong&gt;Vue2&lt;/strong&gt;: los métodos &lt;strong&gt;&lt;em&gt;beforeDestroyed&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;destroyed&lt;/em&gt;&lt;/strong&gt; se usan en lugar de &lt;em&gt;&lt;strong&gt;beforeUnmounted&lt;/strong&gt;&lt;/em&gt; y &lt;em&gt;&lt;strong&gt;unmounted&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: no debemos definir estas funciones como &lt;em&gt;arrow functions&lt;/em&gt; porque en estas funciones se enlaza en la variable &lt;em&gt;this&lt;/em&gt; el componente donde se definen y si hacemos una &lt;em&gt;arrow function&lt;/em&gt; no tendríamos &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MAL, NO HACER ASÍ
created: () =&amp;gt; {
    console.log(&#39;instancia creada&#39;); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// BIEN, HACER ASÍ
created() {
    console.log(&#39;instancia creada&#39;); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los principales &lt;em&gt;hooks&lt;/em&gt; son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;beforeCreate&lt;/strong&gt;: aún no se ha creado el componente (sí la instancia de Vue) por lo que no tenemos acceso a sus variables, etc&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;created&lt;/strong&gt;: se usa por ejemplo para realizar peticiones a servicios externos lo antes posible&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeMount&lt;/strong&gt;: ya se ha generado el componente y compilado su &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mounted&lt;/strong&gt;: ahora ya tenemos acceso a todas las propiedades del componete. Es el sitio donde hacer una patición externa si el valor devuelto queremos asignarlo a una variable del componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeUpdate&lt;/strong&gt;: se ha modificado el componente pero aún no se han renderizado los cambios&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;updated&lt;/strong&gt;: los cambios ya se han renderizado en la página&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeUnmount&lt;/strong&gt;: antes de que se destruya el componente (en versiones anteriores a Vue3 &lt;strong&gt;beforeDestroy&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unmounted&lt;/strong&gt;: ya se ha destruido el componente (en versiones anteriores a Vue3 &lt;strong&gt;destroyed&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;componentes-asincronos&quot; tabindex=&quot;-1&quot;&gt;Componentes asíncronos&lt;/h2&gt;
&lt;p&gt;En proyectos grandes con centenares de componentes podemos hacer que en cada momento se carguen sólo los componentes necesarios de manera que se ahorra mucho tiempo de carga de la página.&lt;/p&gt;
&lt;p&gt;Para que un componente se cargue asíncronamente al registrarlo se hace como un objeto que será una función que importe el componente. Un componente normal (síncrono) se registraría así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
import ProductItem from &#39;./ProductItem.vue&#39;

export default {
    name: &#39;products-table&#39;,
    components: {
        ProductItem,
    },
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos que se cargue asíncronamente no lo importamos hasta se registra:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
    name: &#39;products-table&#39;,
    components: {
        ProductItem: () =&amp;gt; import(&#39;./ProductItem.vue&#39;),
    },
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos decirle que espere un tiempo a cargar el componente (delay) e incluso qué componente queremos cargar mientras está cargando el componente o cuál cargar si hay un error al cargarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
    name: &#39;products-table&#39;,
    components: {
        ProductItem: () =&amp;gt; ({
            component: import(&#39;./ProductItem.vue&#39;),
            delay: 500,       // en milisegundos
            timeout: 6000,
            loading: compLoading,   // componente que cargará mientras se está cargando
            error: compError,       // componente que cargará si hay un error,
        })
    },
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;custom-directives&quot; tabindex=&quot;-1&quot;&gt;Custom Directives&lt;/h2&gt;
&lt;p&gt;Podemos crear nuestras propias directivas para usar en los elementos que queramos. Se definen en un fichero .js con &lt;code&gt;Vue.directive&lt;/code&gt; y le pasamos su nombre y un objeto con los estados en que queremos que reaccione. Por ejemplo vamos a hacer una directiva para que se le asigne el foco al elemento al que se la pongamos, que será de tipo &lt;em&gt;input&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Vue from &#39;vue&#39;

Vue.directive(&#39;focus&#39;, {
  mounted(el) {
    el.focus();
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para usarla en un componente la importamos y ya podemos usarla en el &lt;em&gt;template&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  ...
  &amp;lt;input v-focus type=&amp;quot;text&amp;quot; name=&amp;quot;nombre&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
import focus from &#39;./focus.js&#39;
...
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos utilizarla en muchos componentes podemos importarla en el &lt;em&gt;main.js&lt;/em&gt; y así estará disponible para todos los componentes.&lt;/p&gt;
&lt;p&gt;Los estados de la directiva en los que podemos actuar son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;mounted&lt;/strong&gt; (en Vue2 &lt;strong&gt;inserted&lt;/strong&gt;): cuando se inserte la directiva&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;updated&lt;/strong&gt; (en Vue2 &lt;strong&gt;componentUpdated&lt;/strong&gt;): cuando se actualice el componente que contiene la directiva&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeMount&lt;/strong&gt; (en Vue2 &lt;strong&gt;bind&lt;/strong&gt;): cuando se enlaza la directiva al componente por primera vez, antes de montar el componente&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;imagenes&quot; tabindex=&quot;-1&quot;&gt;Imágenes&lt;/h2&gt;
&lt;p&gt;Si se trata de imágenes estáticas lo más sencillo es ponerlas dentro de la carpeta &lt;code&gt;public&lt;/code&gt; y hacer referencia a ellas usando &lt;strong&gt;ruta absoluta&lt;/strong&gt;. Todo lo que está en &lt;em&gt;public&lt;/em&gt; se referencia como si estuviera en la raíz de nuestra aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;img src=&amp;quot;/img/elPatitoFeo.jpeg&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos poner las imágenes en la carpeta &lt;code&gt;assets&lt;/code&gt;, pero antes de usarlas deberemos imnportarlas. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
  import imgUrl from &#39;./assets/img/elPatitoFeo.jpeg&#39;
  ...
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  ...
  &amp;lt;img :src=&amp;quot;imgUrl&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: Si usamos &lt;em&gt;webpack&lt;/em&gt; en lugar de &lt;em&gt;Vite&lt;/em&gt;, en lugar de importarlas usaremos en su atributo &lt;code&gt;src&lt;/code&gt; la función &lt;code&gt;require&lt;/code&gt; con la URL de la imagen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;img :src=&amp;quot;require(&#39;../assets/img/elPatitoFeo.jpeg&#39;)&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;em&gt;Vite&lt;/em&gt; también podemos importarlas usando &lt;code&gt;import.meta.url&lt;/code&gt; (más información en la &lt;a href=&quot;https://vitejs.dev/guide/assets.html#new-url-url-import-meta-url&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vite&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      imgUrl = new URL(&#39;./assets/elPatitoFeo.png&#39;, import.meta.url).href
    }
  },
  ...
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  ...
  &amp;lt;img :src=&amp;quot;imgUrl&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;El Patito Feo&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos permite también importar las imágenes dinámicamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script&amp;gt;
export default {
  methods: {
    function getImageUrl(name) {
      return new URL(`./dir/${name}`, import.meta.url).href
    }
  }
  ...
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  ...
  &amp;lt;img :src=&amp;quot;getImageUrl(imgName)&amp;quot; height=&amp;quot;100px&amp;quot;&amp;gt;
  ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto permitiría mostrar también imágenes obtenidas de una API.&lt;/p&gt;
&lt;h2 id=&quot;transiciones&quot; tabindex=&quot;-1&quot;&gt;Transiciones&lt;/h2&gt;
&lt;p&gt;Vue permite controlar transiciones en nuestra aplicación poniendo el código CSS correspondiente y añadiéndole al elemento el atributo &lt;em&gt;transition&lt;/em&gt;. Podemos encontrar más información en la &lt;a href=&quot;https://vuejs.org/v2/guide/transitions.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;entornos&quot; tabindex=&quot;-1&quot;&gt;Entornos&lt;/h2&gt;
&lt;p&gt;En Vue tenemos normalmente 3 entornos o &lt;em&gt;modos&lt;/em&gt;, el de &lt;strong&gt;development&lt;/strong&gt;, el de &lt;strong&gt;test&lt;/strong&gt; y el de &lt;strong&gt;production&lt;/strong&gt;. Las variables de entorno las guardaremos en uno de los siguientes ficheros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.env&lt;/strong&gt;: se cargan en todos los modos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.env.local&lt;/strong&gt;: se cargan en todos los modos pero son ignoradas por git&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.env.[modo]&lt;/strong&gt;: se cargan sólo en el modo indicado&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.env.[modo].local&lt;/strong&gt;: ídem pero son ignordas por git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En contenido de estos ficheros son variables en forma &lt;code&gt;clave=valor&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// fichero .env
TITULO=Mi proyecto
VITE_API=https://localhost/api
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el nombre de la variable comienza por &lt;code&gt;VITE_&lt;/code&gt; será accesible desde el código a través de &lt;code&gt;import.meta.env.nombreVariable&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// &amp;lt;script&amp;gt; de componente
console.log(process.env.VITE_API);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos saber en qué entorno se está ejecutando la aplicación consultando el valor de la variable &lt;code&gt;import.meta.env.MODE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si no estamos usando &lt;em&gt;Vite&lt;/em&gt; sino &lt;em&gt;webpack&lt;/em&gt; el nombre de las variables debe comenzar por &lt;code&gt;VUE_APP_&lt;/code&gt; y será accesible desde el código con &lt;code&gt;process.env.nombreVariable&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// &amp;lt;script&amp;gt; de componente
console.log(process.env.VUE_APP_API);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;guards-del-router&quot; tabindex=&quot;-1&quot;&gt;Guards del router&lt;/h2&gt;
&lt;p&gt;Son &lt;em&gt;hooks&lt;/em&gt; que podemos controlar en distintos momentos, algunos desde el componente y otros desde el &lt;em&gt;router&lt;/em&gt;. Podemos ponerlos para todas las rutas, para una ruta en concreto o en el componente.&lt;/p&gt;
&lt;p&gt;La mayoría reciben 3 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;to&lt;/strong&gt;: ruta a la que se va a saltar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;from&lt;/strong&gt;: ruta de la que se viene&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;next&lt;/strong&gt;: función para que continue la carga del router. Siempre tras ejecutar el código que deseemos pondremos &lt;code&gt;netx()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En el router tenemos estos &lt;em&gt;guards&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;router.beforeEach(to, from, next)&lt;/strong&gt;: se ejecuta antes de que vaya a cambiarse la ruta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;router.afterEach(to, from)&lt;/strong&gt;: se ejecuta una vez cambiada la ruta (por eso no tiene next, porque ya ha acabado)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ruta.beforeEnter(to, from, next)&lt;/strong&gt;: se pone como propiedad de una ruta y se ejecuta antes de entrar a ella&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para aplicarlos en nuestro router lo asignamos a una variable que exportamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let router = new Router({
  routes: [
    {
      path: &#39;/&#39;,
      component: &#39;MyComponent&#39;,
      beforeEnter(to, from, next) {
        console.log(&#39;Vengo de &#39; + from + &#39; y voy a &#39; + to);
        next();
      },
...
})

router.beforeEach(to, from, next) {
  console.log(&#39;Vengo de &#39; + from + &#39; y voy a &#39; + to);
  next();
}

export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En un componente también puedo definir los &lt;em&gt;hooks&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;beforeRouteEnter(to, from, next)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeRouteUpdate(to, from, next)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeRouteLeave(to, from, next)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/06-profundizando/" >
        </entry>
        <entry>
            <title>
                05-vue-router
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/05-vue-router/</id>
            <content type="html">
                &lt;h1 id=&quot;vue-router&quot; tabindex=&quot;-1&quot;&gt;Vue-router&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-router&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue-router&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalación&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-vue-router-a-un-proyecto-ya-creado&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir vue-router a un proyecto ya creado&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-las-rutas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear las rutas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#rutas-din%C3%A1micas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Rutas dinámicas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#opciones-de-cada-ruta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Opciones de cada ruta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-men%C3%BA&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un menú&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#saltar-a-una-ruta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Saltar a una ruta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-de-par%C3%A1metros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso de parámetros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-objeto-route&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El objeto $route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ruta-no-encontrada-404-not-found&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ruta no encontrada: 404 Not found&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#redireccionamiento&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Redireccionamiento&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cambio-de-par%C3%A1metros-en-una-ruta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cambio de parámetros en una ruta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vistas-con-nombre-y-subvistas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vistas con nombre y Subvistas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Como comentamos al principio Vue nos va a permitir crear SPA (&lt;em&gt;Single Page Applications&lt;/em&gt;) lo que significa que sólo se cargará una pagina: &lt;em&gt;index.html&lt;/em&gt;. Sin embargo nuestra aplicación estará dividida en diferentes vistas que el usuario percibirá como si fueran páginas diferentes y el encargado de gestionar la navegación entre estas vistas/páginas es &lt;strong&gt;vue-router&lt;/strong&gt; que es otra de las librerías del &amp;quot;ecosistema&amp;quot; de Vue (en este caso realizada por los desarrolladores de Vue).&lt;/p&gt;
&lt;p&gt;En resumen, en nuestra aplicación (normalmente en el &lt;em&gt;App.vue&lt;/em&gt;) tendremos una etiqueta &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; y lo que hará &lt;em&gt;vue-router&lt;/em&gt; es cargar en esa etiqueta el componente que corresponda en función de la ruta que haya en la barra de direcciones del navegador. Por ejemplo si la URL es &lt;strong&gt;/products&lt;/strong&gt; cargará un componente llamado &lt;em&gt;ProductsTable&lt;/em&gt; (que mostrará una tabla con todos los productos de la aplicación) y si la URL es &lt;strong&gt;/newprod&lt;/strong&gt; cargará un componente llamado &lt;em&gt;ProductForm&lt;/em&gt; con un formulario para añadir un nuevo producto.&lt;/p&gt;
&lt;p&gt;Lo que hacemos para configurar &lt;em&gt;vue-router&lt;/em&gt; es definir rutas que &lt;em&gt;mapean&lt;/em&gt; componentes de nuestra aplicación a rutas URL de forma que cuando se pone determinada ruta en el navegador se carga en nuestra página el componente indicado. También permite tener subrutas que mapeen subcomponentes dentro de otros.&lt;/p&gt;
&lt;h2 id=&quot;instalacion&quot; tabindex=&quot;-1&quot;&gt;Instalación&lt;/h2&gt;
&lt;p&gt;La forma más sencilla es escoger la opción de &lt;em&gt;Vue-router&lt;/em&gt; al crear nuestro proyecto &lt;em&gt;Vue&lt;/em&gt;. En ese caso no es necesario hacer nada porque se instala y configura todo automáticamente.&lt;/p&gt;
&lt;h3 id=&quot;anadir-vue-router-a-un-proyecto-ya-creado&quot; tabindex=&quot;-1&quot;&gt;Añadir vue-router a un proyecto ya creado&lt;/h3&gt;
&lt;p&gt;Si queremos añadirlo a un proyecto ya creado previamente tendremos que instalarlo y configurarlo manualmente nosotros.&lt;/p&gt;
&lt;p&gt;Los pasos son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;se instala el paquete &lt;strong&gt;vue-router&lt;/strong&gt; como dependencia de producción:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -S vue-router
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;se crea el fichero de rutas, por ejemplo en &lt;strong&gt;/src/router/index.js&lt;/strong&gt;. Aquí se define para cada ruta de nuestra aplicación el componente que debe cargarse. Su contenido es&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createRouter, createWebHistory } from &amp;quot;vue-router&amp;quot;;
import HomeView from &amp;quot;../views/HomeView.vue&amp;quot;;

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes: [
    {
      path: &amp;quot;/&amp;quot;,
      name: &amp;quot;home&amp;quot;,
      component: HomeView,
    },
    {
      path: &amp;quot;/about&amp;quot;,
      name: &amp;quot;about&amp;quot;,
      // route level code-splitting
      // this generates a separate chunk (About.[hash].js) for this route
      // which is lazy-loaded when the route is visited.
      component: () =&amp;gt; import(&amp;quot;../views/AboutView.vue&amp;quot;),
    },
  ],
});

export default router;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;se importa dicho fichero en el &lt;strong&gt;main.js&lt;/strong&gt; para que el almacén esté disponible para todos los componentes en la variable &lt;code&gt;this.$router&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createApp } from &amp;quot;vue&amp;quot;;
import App from &amp;quot;./App.vue&amp;quot;;
import router from &amp;quot;./router&amp;quot;; // &amp;lt;---

const app = createApp(App);
app.use(router);
app.mount(&amp;quot;#app&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;en el &lt;em&gt;scaffolding&lt;/em&gt; del proyecto es recomendable crear una nueva carpeta &lt;em&gt;views&lt;/em&gt; donde guardar las distintas vistas de nuestra aplicación, que son componentes que renderizan una &amp;quot;&lt;em&gt;página&lt;/em&gt;&amp;quot; de la aplicación (es decir, nuestros componentes ahora se dividen en 2 tipos: los que renderizan una &amp;quot;página&amp;quot;, que irán a &lt;em&gt;Views&lt;/em&gt; y los que son parte de una página, que irán a &lt;em&gt;Components&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;crear-las-rutas&quot; tabindex=&quot;-1&quot;&gt;Crear las rutas&lt;/h2&gt;
&lt;p&gt;Las rutas de nuestra aplicación las definiremos en un fichero Javascript (por defecto &lt;strong&gt;&lt;em&gt;/src/router/index.js&lt;/em&gt;&lt;/strong&gt;). Allí creamos la instancia para nuestras rutas (el objeto que exportamos) y la configuramos. También debemos importar todos los componentes que definamos en el router:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createWebHistory, createRouter } from &#39;vue-router&#39;

// Importamos los componentes que se carguen en alguna ruta
import AppHome from &#39;./components/AppHome.vue&#39;
import AppAbout from &#39;./components/AppAbout.vue&#39;
import UsersTable from &#39;./components/UsersTable.vue&#39;
import UserNew from &#39;./components/UserNew.vue&#39;
import UserEdit from &#39;./components/UserEdit.vue&#39;

const routes = [
  {
    path: &#39;/&#39;,
    name: &#39;home&#39;,
    component: AppHome
  },{
    path: &#39;/about&#39;,
    name: about,
    component: AppAbout
  },{
    path: &#39;/users&#39;,
    component: UsersTable
  },{
    path: &#39;/new&#39;,
    component: UserNew
  },{
    path: &#39;/edit/:id&#39;,
    component: UserEdit
    props: true
  }
];

const router = createRouter({
  history: createWebHistory(import.meta.env.BASE_URL),
  routes
})

export default router
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada vez que cambie la URL en el navegador no cambiará todo el layout sino que sólo se cargará en la etiqueta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-view&amp;gt;&amp;lt;/router-view&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;el componente indicado para esa ruta. Dicha etiqueta estará normalmente en el fichero &lt;em&gt;App.vue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;El modo &lt;em&gt;&#39;history&#39;&lt;/em&gt; de nuestro router indica que use rutas &amp;quot;amigables&amp;quot; y que no incluyan la # (piensa que en realidad no se están cargando diferentes páginas sino partes de una única página ya que es una SPA). Esta es la opción que escogeremos siempre en las aplicaciones SPA, aunque si nuestro servidor web usa &lt;a href=&quot;http://asp.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ASP.NET&lt;/a&gt; o JSP habrá que decirle que ignore las URLs porque ya se ocupa de ellas Vue. La alternativa sería usar &lt;code&gt;createWebHashHistory()&lt;/code&gt; pero en ese caso las rutas en vez de ser algo como &lt;code&gt;http://localhost:8080/products&lt;/code&gt; serían &lt;code&gt;http://localhost:8080/#products&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;rutas-dinamicas&quot; tabindex=&quot;-1&quot;&gt;Rutas dinámicas&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;VueRouter&lt;/em&gt; permite rutas dinámicas como la indicada para el componente &lt;em&gt;UserEdit&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/edit/:id&#39;,
  component: UserEdit
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esa ruta coincidirá con cualquier URL que comience por &lt;em&gt;/edit/&lt;/em&gt; y tenga algo más. Lo que haya tras la última &lt;em&gt;/&lt;/em&gt; lo asignará el &lt;em&gt;router&lt;/em&gt; a una variable llamada &lt;em&gt;id&lt;/em&gt; (el nombre que pongamos tras el carácter &lt;code&gt;:&lt;/code&gt;) y dicha variable la recibirá el componente &lt;em&gt;UserEdit&lt;/em&gt; en un parámetro accesible desde &lt;code&gt;this.$route.params.id&lt;/code&gt;. Si añadimos a la ruta la opción &lt;code&gt;props: true&lt;/code&gt; hacemos que el componente además reciba el parámetro en sus &lt;em&gt;props&lt;/em&gt; (en este caso recibirá una variable llamada &lt;em&gt;id&lt;/em&gt; que será accesible desde &lt;code&gt;this.id&lt;/code&gt; directamente).&lt;/p&gt;
&lt;h3 id=&quot;opciones-de-cada-ruta&quot; tabindex=&quot;-1&quot;&gt;Opciones de cada ruta&lt;/h3&gt;
&lt;p&gt;Para cada ruta que queramos mapear hay que definir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: la url que hará que se cargue el componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;component&lt;/strong&gt;: el componente que se cargará donde se encuentre la etiqueta &lt;strong&gt;&amp;lt;router-view&amp;gt;&lt;/strong&gt; en el HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además de esas propiedades podemos indicar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: le damos a la ruta un nombre que luego podemos usar para referirnos a ella&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt;: se usa en rutas dinámicas e indica que el componente recibirá el parámetro de la ruta en sus &lt;em&gt;props&lt;/em&gt;. Si no se incluye esta opción el componente tendrá que acceder al parámetro &lt;em&gt;id&lt;/em&gt; desde &lt;code&gt;this.$route.params.id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;crear-un-menu&quot; tabindex=&quot;-1&quot;&gt;Crear un menú&lt;/h2&gt;
&lt;p&gt;Seguramente querremos un menú en nuestra SPA que nos permita ir a las diferentes rutas (que provocarán que se carguen los componentes). Para ello usaremos la etiqueta &lt;strong&gt;&amp;lt;router-link&amp;gt;&lt;/strong&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link to=&amp;quot;/&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
&amp;lt;router-link to=&amp;quot;/about&amp;quot;&amp;gt;Acerca de...&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando accedemos a una ruta su elemento &amp;lt;router-link&amp;gt; adquiere la clase &lt;em&gt;.router-link-active&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si le hemos puesto la propiedad &lt;em&gt;name&lt;/em&gt; a una ruta podemos hacer un enlace a ella con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link :to=&amp;quot;{name: &#39;nombre_de_la_ruta&#39;}&amp;quot;&amp;gt;Home&amp;lt;/router-link&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que hemos de &lt;em&gt;bindear&lt;/em&gt; el atributo &lt;code&gt;to&lt;/code&gt; porque ya no le pasamos texto sino una variable.&lt;/p&gt;
&lt;p&gt;Se podría hacer (aunque no es normal) una opción de menú a una ruta dinámica y pasarle el parámetro deseado. Por ejemplo para editar el usuario 5 haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-link :to=&amp;quot;{name: &#39;edit&#39;, params: {id: 5}}&amp;quot;
  &amp;gt;Editar usuario 5&amp;lt;/router-link
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso es necesario que la ruta dinámica tenga un &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;saltar-a-una-ruta&quot; tabindex=&quot;-1&quot;&gt;Saltar a una ruta&lt;/h2&gt;
&lt;p&gt;Al hacer &lt;code&gt;.use(router)&lt;/code&gt; en el fichero &lt;em&gt;main.js&lt;/em&gt; estamos declarando esa variable (&lt;em&gt;router&lt;/em&gt;) en la instancia principal de la aplicación por lo que estará disponible para todos los componentes desde &lt;code&gt;this.$router&lt;/code&gt;. Esto nos permite acceder al router desde un componente para, por ejemplo, cambiar a una ruta.&lt;/p&gt;
&lt;p&gt;El código para cambiar la ruta desde Javascript es&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$router.push(ruta);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tenemos varios métodos para navegar por código:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.push(newUrl)&lt;/code&gt;&lt;/strong&gt;: salta a la ruta &lt;em&gt;newUrl&lt;/em&gt; y la añade al historial&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.replace(newURL)&lt;/code&gt;&lt;/strong&gt;: salta a la nueva ruta pero reemplaza en el historial la ruta actual por esta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.go(num)&lt;/code&gt;&lt;/strong&gt;: permite saltar el num. de páginas indicadas adelante (ej. &lt;em&gt;this.$router.go(1)&lt;/em&gt;) o atrás (&lt;em&gt;.go(-1)&lt;/em&gt;) por el historial&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos métodos son equivalentes a los métodos &lt;em&gt;history.push()&lt;/em&gt;, &lt;em&gt;history.replace()&lt;/em&gt; y &lt;em&gt;history.go()&lt;/em&gt; de Javascript.&lt;/p&gt;
&lt;p&gt;Además podemos pasar a &lt;code&gt;push()&lt;/code&gt; y &lt;code&gt;replace()&lt;/code&gt; funciones &lt;em&gt;callback&lt;/em&gt; que se ejecutarán al cambiar la ruta si todo va bien o si hay algún error.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;this.$router.push(location, onComplete?, onAbort?)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos obtener toda la ruta con &lt;code&gt;this.$route.fullPath&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;paso-de-parametros&quot; tabindex=&quot;-1&quot;&gt;Paso de parámetros&lt;/h2&gt;
&lt;p&gt;La forma de pasar parámetros a la ruta es:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$router.push({ name: &amp;quot;users&amp;quot;, params: { id: 123 } });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;esto hace que se salte a la ruta con &lt;em&gt;name&lt;/em&gt; &amp;quot;users&amp;quot; y le pasa como parámetro una &lt;em&gt;id&lt;/em&gt; de valor 123. En el componente que se cargue en dicha ruta obtendremos el parámetro pasado con &lt;code&gt;this.$route.params.nombreparam&lt;/code&gt; (en el ejemplo en &lt;code&gt;this.$route.params.id&lt;/code&gt; obtenemos el valor &lt;code&gt;123&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Se puede pasar más de un parámetro pero para que los pueda recibir el componente hay que ponerlos todos en el &lt;em&gt;router&lt;/em&gt;. Por ejemplo para hacer un &lt;code&gt;this.$router.push({ name: &#39;books&#39;, params: { autor: 12, tema: 4 }})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;la ruta en el &lt;em&gt;router&lt;/em&gt; debería contener ambas variables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;path: &amp;quot;/books/author/:autor/topic/:tema&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos pasar también un objeto como parámetro pero antes debemos convertirlo a texto con &lt;code&gt;JSON.stringify()&lt;/code&gt;. Sin embargo no es muy conveniente porque la URL quedaría demasiado larga y &amp;quot;sucia&amp;quot;.&lt;/p&gt;
&lt;p&gt;También se puede pasar una &lt;em&gt;query&lt;/em&gt; a la ruta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.$router.push({ path: &amp;quot;/register&amp;quot;, query: { plan: &amp;quot;private&amp;quot; } });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;salta a la URL &lt;code&gt;/register?plan=private&lt;/code&gt;. En el componente que se carga obtenemos la query pasada con &lt;code&gt;this.$route.query&lt;/code&gt; (obtenemos un objeto, en el ejemplo &lt;code&gt;{ plan: &#39;private&#39; }&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: Tened en cuenta que lo que se pasa como parámetro o consulta aparecerá en la URL por lo que no debemos enviar información sensible y no se recomienda enviar algo muy largo (como un objeto o array) para evitar que la URL quede &amp;quot;sucia&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;el-objeto-route&quot; tabindex=&quot;-1&quot;&gt;El objeto $route&lt;/h2&gt;
&lt;p&gt;Es un objeto que contiene información de la ruta actual (no confundir con &lt;em&gt;$router&lt;/em&gt;). Algunas de sus propiedades son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;params&lt;/strong&gt;: el objeto con los parámetros pasados a la ruta (puede haber más de uno)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query&lt;/strong&gt;: si hubiera alguna consulta en la ruta (tras &#39;?&#39;) se obtiene aquí un objeto con ellas&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;path&lt;/strong&gt;: la ruta pasada (sin servidor ni querys, por ejemplo de &lt;code&gt;http://localhost:3000/users?company=5&lt;/code&gt; devolvería &#39;/users&#39;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fullPath&lt;/strong&gt;: la ruta pasada (con las querys, por ejemplo de &lt;code&gt;http://localhost:3000/users?company=5&lt;/code&gt; devolvería &#39;/users?company=5&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ruta-no-encontrada-404-not-found&quot; tabindex=&quot;-1&quot;&gt;Ruta no encontrada: 404 Not found&lt;/h2&gt;
&lt;p&gt;Si en nuestra aplicación cargamos una ruta que no coincide con ninguna de las definidas en el &lt;em&gt;router&lt;/em&gt; no se cargará ningún componente en el &lt;em&gt;RouterView&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Una mejora de esto es crear una vista con lo que queramos mostrar (&#39;404 - La página no existe&#39; o algo similar) y hacer una ruta que cargue dicho componente.&lt;/p&gt;
&lt;p&gt;Si llamamos a esa vista &lt;code&gt;PathNotFound.vue&lt;/code&gt; la ruta a crear sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/:pathMatch(.*)*&#39;,
  component: PathNotFound
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta ruta hay que ponerla la última ya que coincidirá con cualquier URL (usa una expresión regular y la dice que la ruta coincida con &#39;*&#39;).&lt;/p&gt;
&lt;h2 id=&quot;redireccionamiento&quot; tabindex=&quot;-1&quot;&gt;Redireccionamiento&lt;/h2&gt;
&lt;p&gt;En el &lt;em&gt;router&lt;/em&gt; puedo también poner una ruta que haga una redirección a otra en lugar de cargar un componente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/a&#39;,
  redirect: &#39;/b&#39;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que hace es que si se pone una URL &lt;code&gt;/a&lt;/code&gt; la cambia automáticamente a &lt;code&gt;/b&lt;/code&gt; y se buscará una ruta que coincida con esa.&lt;/p&gt;
&lt;p&gt;También podemos poner &lt;em&gt;alias&lt;/em&gt; a una ruta de forma que se cargue un componente tanto si la URL es una como otra (en este caso no se cambiaría la URL):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/a&#39;,
  component: A,
  alias: &#39;/b&#39;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podés obtener más información en la &lt;a href=&quot;https://v3.router.vuejs.org/guide/essentials/redirect-and-alias.html#redirect&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue-router&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;cambio-de-parametros-en-una-ruta&quot; tabindex=&quot;-1&quot;&gt;Cambio de parámetros en una ruta&lt;/h2&gt;
&lt;p&gt;Si cambiamos a la misma ruta pero con distintos parámetros Vue reutiliza la instancia del componente y no vuelve a lanzar sus &lt;em&gt;hooks&lt;/em&gt; (created, mounted, ...). Esto hará que no se ejecute el código que tengamos allí. Por ejemplo supongamos que en una ruta &#39;/edit/5&#39; al cargar el componente se pide el registro 5 y se muestra en la página. Si a continuación cargamos la ruta &#39;/edit/8&#39; seguiremos viendo los datos del registro 5).&lt;/p&gt;
&lt;p&gt;Podemos solucionar esto desde el &lt;em&gt;router&lt;/em&gt; o desde el componente.&lt;/p&gt;
&lt;p&gt;Desde el &lt;em&gt;router&lt;/em&gt; podemos usar el elemento &lt;code&gt;beforeRouteUpdate&lt;/code&gt; y realizar allí la carga de los datos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;beforeRouteUpdate (to, from, next) {
    // Código que responde al cambio. En &#39;to&#39; tenemos la ruta anterior y en &#39;from&#39; la nueva
    // antes de acabar hay que llamar a next()
    // Aquí cargamos los nuevos datos
    next();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde el componente podemos usar un &lt;em&gt;watcher&lt;/em&gt; para detectar el cambio en la ruta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascrip&quot;&gt;watch: {
    &#39;$route&#39; (to, from) {
        // Aquí cargamos los nuevos datos
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada vez que cambie el valor de &lt;em&gt;$route&lt;/em&gt; se ejecutará ese código y recibirá en el parámetro &lt;em&gt;to&lt;/em&gt; la nueva ruta y en &lt;em&gt;from&lt;/em&gt; el valor anterior de la variable. Veremos los &lt;em&gt;watchers&lt;/em&gt; más adelante o podéi consultar la &lt;a href=&quot;https://vuejs.org/guide/essentials/watchers.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;vistas-con-nombre-y-subvistas&quot; tabindex=&quot;-1&quot;&gt;Vistas con nombre y Subvistas&lt;/h2&gt;
&lt;p&gt;Podemos cargar más de un componente usando varias etiquetas &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt;. Por ejemplo si nestra página constará de 3 componentes (uno en la cabecera, otro el principal y otro en un &lt;em&gt;aside&lt;/em&gt; pondremos en el HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;router-view class=&amp;quot;cabecera&amp;quot; name=&amp;quot;top&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;router-view class=&amp;quot;main&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;
&amp;lt;router-view class=&amp;quot;aside&amp;quot; name=&amp;quot;aside&amp;quot;&amp;gt;&amp;lt;/router-view&amp;gt;```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para que se carguen los 3 componentes lo debemos indicar al definir las rutas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
    path: &#39;/&#39;,
    components: {
        default: CompMain,		// CompMain se cargará en el &amp;lt;router-view&amp;gt; sin nombre
        top: CompCabecera,
        aside: CompAside
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También un componente puede incluir su propia etiqueta &lt;code&gt;&amp;lt;router-view&amp;gt;&lt;/code&gt; que cargue dentro de él un subcomponente en función de una subruta. Por &lt;a href=&quot;http://jsfiddle.net/yyx990803/L7hscd8h/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ejemplo&lt;/a&gt; tenemos una ruta &lt;em&gt;/user/:id&lt;/em&gt; que carga un componente &lt;em&gt;User&lt;/em&gt; con el nombre y la imagen del usuario y debajo cargará, en función de la ruta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;/user/:id&lt;/em&gt;: debajo cargará el componente con el home del usuario&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/user/:id/profile&lt;/em&gt;: debajo cargará el componente con el perfil del usuario&lt;/li&gt;
&lt;li&gt;&lt;em&gt;/user/:id/posts&lt;/em&gt;: debajo cargará el componente con los posts del usuario&lt;br /&gt;
Definiremos la ruta del siguiente modo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{
  path: &#39;/&#39;,
  components: {
    {
      path: &#39;/user/:id&#39;,
      component: User,
      children: [
        { path: &#39;&#39;, component: UserHome },
        { path: &#39;profile&#39;, component: UserProfile },
        { path: &#39;posts&#39;, component: UserPosts }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos consultar toda la información referente al router de Vue en &lt;a href=&quot;https://router.vuejs.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://router.vuejs.org/&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/05-vue-router/" >
        </entry>
        <entry>
            <title>
                04-axios
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/04-axios/</id>
            <content type="html">
                &lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#axios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Axios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalación&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-axios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar &lt;em&gt;axios&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#aplicaci%C3%B3n-de-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aplicación de ejemplo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pedir-los-datos-al-cargarse&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pedir los datos al cargarse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#borrar-un-todo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Borrar un todo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-un-todo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir un todo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#actualizar-el-campo-done&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Actualizar el campo &lt;em&gt;done&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#borrar-todas-las-tareas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Borrar todas las tareas&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-las-peticiones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar las peticiones&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#api-con-varias-tablas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Api con varias tablas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#api-como-clase&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Api como clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-fichero-env&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#axios-interceptors&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Axios interceptors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h1 id=&quot;axios&quot; tabindex=&quot;-1&quot;&gt;Axios&lt;/h1&gt;
&lt;p&gt;El framework &lt;em&gt;Vue&lt;/em&gt; sólo se ocupa de la capa de vista de la aplcación pero su &amp;quot;ecosistema&amp;quot; como sus creadores le llaman, incluye multitud de herramientas para todo lo que podamos necesitar a la hora de realizar grandes proyectos.&lt;/p&gt;
&lt;p&gt;Una de las librerías más utilizadas es la que permite realizar de forma sencilla peticiones Ajax a un servidor. Existen múltiples librerías para ello y la más utilizada es &lt;a href=&quot;https://github.com/axios/axios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;axios&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Podríamos hacer peticiones Ajax como vimos en Javascript (con &lt;em&gt;fetch&lt;/em&gt; y &lt;em&gt;async/await&lt;/em&gt;) pero es más sencillo con &lt;em&gt;axios&lt;/em&gt;. Axios ya devuelve los datos transformados a JSON en una propiedad llamada &lt;em&gt;data&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;instalacion&quot; tabindex=&quot;-1&quot;&gt;Instalación&lt;/h2&gt;
&lt;p&gt;Como esta librería vamos a usarla en producción la instalaremos como dependencia del proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-[bash]&quot;&gt;npm install axios -S
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;usar-em-axios-em&quot; tabindex=&quot;-1&quot;&gt;Usar &lt;em&gt;axios&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;En el componente en que vayamos a usarla la importaremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;import axios from &#39;axios&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como es una dependencia incluida en el &lt;em&gt;package.json&lt;/em&gt; no se indica su ruta (se buscará en &lt;strong&gt;node-modules&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Ya podemos hacer peticiones Ajax en el componente. Para ello axios incluye los métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.get(url)&lt;/strong&gt;: realiza una petición GET a la url pasada como parámetro que supondrá una consulta SELECT a la base de datos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.post(url, objeto)&lt;/strong&gt;: realiza una petición POST a la url pasada como parámetro que posiblemente realizará un INSERT del objeto pasado como segundo parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.put(url, objeto)&lt;/strong&gt;: realiza una petición PUT a la url pasada como parámetro que posiblemente realizará un UPDATE sobre el registro indicado en la url que será actualizado con los datos del objeto pasado como segundo parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.delete(url)&lt;/strong&gt;: realiza una petición DELETE a la url pasada como parámetro que supondrá una consulta DELETE a la base de datos para borrar el registro indicado en la url&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos métodos devuelven una promesa por lo que al hacer la petición deberemos anteponerle el &lt;strong&gt;&lt;code&gt;await&lt;/code&gt;&lt;/strong&gt; o bien indicaremos con el método &lt;strong&gt;&lt;code&gt;.then&lt;/code&gt;&lt;/strong&gt; la función que se ejecutará cuando responda el servidor si la petición se resuelve correctamente y con el método &lt;strong&gt;&lt;code&gt;.catch&lt;/code&gt;&lt;/strong&gt; la función que se ejecutará cuando responda el servidor si ocurre algún error.&lt;/p&gt;
&lt;p&gt;Lo que devuelve es un objeto que tiene, entre otras, las propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;data&lt;/code&gt;&lt;/strong&gt;: aquí tendremos los datos devueltos por el servidor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;status&lt;/code&gt;: obtendremos el código de la respuesta del servidor (200, 404, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;statusText&lt;/code&gt;: el texto de la respuesta del servidor (&#39;Ok&#39;, &#39;Not found&#39;, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;message&lt;/code&gt;: mensaje del servidor en caso de producirse un error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;headers&lt;/code&gt;: las cabeceras HTTP de la respuesta&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La sintaxis de una petición GET a axios usando &lt;em&gt;async/await&lt;/em&gt; sería algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  const response = await axios.get(url)
  console.log(response.data)
} catch (response) {
  console.error(response.message) 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y usando promesas sería algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;axios.get(url)
  .then(response =&amp;gt; console.log(response.data))
  .catch(response =&amp;gt; console.error(response.message))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;aplicacion-de-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Aplicación de ejemplo&lt;/h2&gt;
&lt;p&gt;Vamos a seguir con la aplicación de la lista de tareas pero ahora los datos no serán un array estático sino que estarán en un servidor. Usaremos como servidor para probar la aplicación &lt;a href=&quot;https://pedroporo.github.io/#json-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;json-server&lt;/strong&gt;&lt;/a&gt; por lo que las peticiones serán a la URL &#39;localhost:3000&#39; que es el servidor web de json-server.&lt;/p&gt;
&lt;p&gt;Los cambios que debemos hacer en nuestra aplicación son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El componente principal (TodoList) pide todos los datos al cargarse&lt;/li&gt;
&lt;li&gt;Al borrar un elemento haremos una petición al servidor para que lo borre de allí y cuando sepamos que se ha borrado lo borramos del array (o recargamos los datos)&lt;/li&gt;
&lt;li&gt;Lo mismo al insertar un nuevo elemento&lt;/li&gt;
&lt;li&gt;Al marcar/desmarcar un elemento lo modificaremos en la base de datos&lt;/li&gt;
&lt;li&gt;Para borrarlos todos haremos peticiones DELETE al servidor&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Vamos a modificar los diferentes componentes para implementar os cambios requeridos:&lt;/p&gt;
&lt;h3 id=&quot;pedir-los-datos-al-cargarse&quot; tabindex=&quot;-1&quot;&gt;Pedir los datos al cargarse&lt;/h3&gt;
&lt;p&gt;Modificamos el fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt; para añadir en su sección &lt;em&gt;script&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Antes del objeto vue:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const SERVER = &#39;http://localhost:3000&#39;
// o mejor, si usamos el fichero .env como vimos en Javascript
// const SERVER = import.meta.env.VITE_URL_API
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Dentro del objeto añadimos el &lt;em&gt;hook&lt;/em&gt; &lt;strong&gt;mounted()&lt;/strong&gt; para hacer la petición Ajax al montar el componente (recordad que esa función se ejecuta automáticamente cuando se acaba de &lt;em&gt;renderizar&lt;/em&gt; el componente):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;...
  async mounted() {
    try {
      const response = await axios.get(SERVER + &#39;/todos&#39;)
      this.todos = response.data
    } catch (response) {
        alert(&#39;Error: &#39; + response.message)          
        this.todos=[]
    }
  },
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar-un-todo&quot; tabindex=&quot;-1&quot;&gt;Borrar un todo&lt;/h3&gt;
&lt;p&gt;Modificamos el método &lt;em&gt;delTodo&lt;/em&gt; del fichero &lt;strong&gt;Todo-List.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    async delTodo(index){
      const id = this.todos[index].id
      try {
        await axios.delete(SERVER + &#39;/todos/&#39; + id)
        this.todos.splice(index, 1)
      } catch (response) {
        alert(&#39;Error: no se ha borrado el registro. &#39; + response.message)
      }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;anadir-un-todo&quot; tabindex=&quot;-1&quot;&gt;Añadir un todo&lt;/h3&gt;
&lt;p&gt;Modificamos el método &lt;em&gt;addTodo&lt;/em&gt; del fichero &lt;strong&gt;Todo-List.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    async addTodo(title) {
      try {
        const response = await axios.post(SERVER + &#39;/todos&#39;, {
          title: title, 
          done: false
        })
        this.todos.push(response.data)
      } catch (response) {
        alert(&#39;Error: no se ha añadido el registro. &#39; + response.message)
      }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al servidor hay que pasarle como parámetro el objeto a añadir. En el caso de &lt;em&gt;json-server&lt;/em&gt; devolverá en el &lt;strong&gt;response.data&lt;/strong&gt; el nuevo objeto añadido al completo. Otras APIs devuelven sólo la &lt;em&gt;id&lt;/em&gt; del nuevo registro o pueden no devolver nada.&lt;/p&gt;
&lt;h3 id=&quot;actualizar-el-campo-em-done-em&quot; tabindex=&quot;-1&quot;&gt;Actualizar el campo &lt;em&gt;done&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Ahora ya no nos es útil el índice de la tarea a actualizar sino que necesitamos su id, su título y su estado así que modificamos el &lt;em&gt;template&lt;/em&gt; del fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt; para pasar el elemento entero a la función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;      &amp;lt;todo-item 
        v-for = &amp;quot;(item,index) in todos&amp;quot; 
        :key = &amp;quot;item.id&amp;quot;
        :todo = &amp;quot;item&amp;quot;
        @delItem = &amp;quot;delTodo(index)&amp;quot;
        @doneChanged = &amp;quot;toogleDone(item)&amp;quot;&amp;gt;
      &amp;lt;/todo-item&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A continuación modificamos el método &lt;em&gt;changeTodo&lt;/em&gt; del fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    async toogleDone(todo) {
      try {
        const response = await axios.patch(SERVER + &#39;/todos/&#39; + todo.id, {
          done: !todo.done
        })
        todo.done = response.data.done
      } catch (response) {
        alert(&#39;Error: no se ha modificado el registro. &#39; + response.message)
      }
    },
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;borrar-todas-las-tareas&quot; tabindex=&quot;-1&quot;&gt;Borrar todas las tareas&lt;/h3&gt;
&lt;p&gt;Modificamos el método &lt;em&gt;delTodos&lt;/em&gt; del fichero &lt;strong&gt;TodoList.vue&lt;/strong&gt;. Como el servidor no tiene una llamada para borrar todos los datos podemos recorrer el array &lt;em&gt;todos&lt;/em&gt; y borrar cada tarea usando el método &lt;strong&gt;delTodo&lt;/strong&gt; que ya tenemos hecho:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    delTodos() {
      this.todos.forEach((todo, index) =&amp;gt; this.delTodo(index))
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto no tiene mucho sentido y si necesito borrar todos los datos de la base de datos lo mejor es que la API me proporcione un método para borrarlos todos.&lt;/p&gt;
&lt;p&gt;Si lo probáis este código con muchos registros es posible que no se borren todos correctamente (en realidad sí se borran de la base de datos pero no del array). ¿Sabes por qué?. ¿Cómo lo podemos arreglar? (PISTA: el índice cambia según los elementos que haya y las peticiones asíncronas pueden no ejecutarse en el orden que esperamos).&lt;/p&gt;
&lt;h2 id=&quot;organizar-las-peticiones&quot; tabindex=&quot;-1&quot;&gt;Organizar las peticiones&lt;/h2&gt;
&lt;p&gt;Que cada componente haga llamadas a &lt;em&gt;axios&lt;/em&gt; tiene el inconveniente de que cada uno crea su propia instancia, además de que tenemos las peticiones a la API desperdigadas por el código. Para mejorar la legibilidad del código vamos a crear un fichero que será donde estén las peticiones a &lt;em&gt;axios&lt;/em&gt; de forma que nuestros componentes queden más limpios. Otra ventaja de centralizar las peticiones es que cosas como la URL a la que hacer la petición la definimos en un único sitio.&lt;/p&gt;
&lt;p&gt;Podríamos llamar al fichero &lt;em&gt;repositories/todosRepository.js&lt;/em&gt; y allí creamos las funciones que laman a la API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const apiClient = axios.create({
  // Esta parte es opcional. Estamos creando un &#39;axios&#39; personailizado con las opciones
  // que necesitemos para no tener que indicarlas cada vez. En concreto:
  // - baseURL: lo que antecederá a la ruta de cada petición
  // - headers.Accept: el tipo de datos que esperamos obtener (no es necesario
  // porque JSON es la opción por defecto)
  // - headers.Content-type: el tipo de datos que estamos pasando al servidor (no es
  // necesario porque JSON es la opción por defecto)
  // - headers.Authorization: el token que enviaremos junto a cada petición
  baseURL: &#39;http://localhost:3000&#39;,
  headers: {
    Accept: &#39;application/json&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;
    Authorization = &#39;Bearer &#39; + localStorage.token
  }
})

export default {
  getTodos() {
    return apiClient.get(&#39;/todos&#39;)
  },

  delTodo(id){
    return apiClient.delete(&#39;/todos/&#39; + id)
  },

  addTodo(newTodo) {
    return apiClient.post(&#39;/todos&#39;, newTodo)
  },

  toogleDone(todo) {
    return apiClient.put(&#39;/todos/&#39; + todo.id, {
      id: todo.id, 
      title: todo.title, 
      done: !todo.done
    })
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En primer lugar importamos &lt;em&gt;axios&lt;/em&gt; y a continuación creamos una única instancia con las opciones que necesitemos. En este ejemplo estamos enviando al servidor el &lt;em&gt;token&lt;/em&gt; del usuario con cada petición.&lt;/p&gt;
&lt;p&gt;En cada componente que tenga que hacer una llamada a la API se importa este fichero y se llama a sus funciones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import todosRepository from &#39;../repositories/todosRepository&#39;

export default {
  ...
  methods: {
    async getData() {
      try {
        const response = await todosRepository.getTodos()
        this.todos = response.data
      } catch (response) {
        console.error(&#39;Error: &#39; + response.message)
      }
    },
    ...
  },
  created() {
    this.getData()
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;api-con-varias-tablas&quot; tabindex=&quot;-1&quot;&gt;Api con varias tablas&lt;/h3&gt;
&lt;p&gt;Si trabajamos con varias tablas podemos hacer un fichero de repositorio para cada una de ellas o bien podemos escribir lo mismo de antes pero de forma más concisa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const apiClient = axios.create({
  baseURL: &#39;http://localhost:3000&#39;,
  withCredentials: false,
  headers: {
    Accept: &#39;application/json&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
})

const todos = {
    getAll: () =&amp;gt; apiClient.get(`/todos`),
    getOne: (id) =&amp;gt; apiClient.get(`/todos/${id}`),
    create: (item) =&amp;gt; apiClient.post(`/todos`, item),
    modify: (item) =&amp;gt; apiClient.put(`/todos/${item.id}`, item),
    delete: (id) =&amp;gt; apiClient.delete(`/todos/${id}`),
    toogleDone: (item) =&amp;gt; apiClient.put(`/categories/${item.id}`, {
      id: item.id,
      title: item.title, 
      done: !item.done
    }),
}

const categories = {
    getAll: () =&amp;gt; apiClient.get(`/categories`),
    getOne: (id) =&amp;gt; apiClient.get(`/categories/${id}`),
    create: (item) =&amp;gt; apiClient.post(`/categories`, item),
    modify: (item) =&amp;gt; apiClient.put(`/categories/${item.id}`, item),
    delete: (id) =&amp;gt; apiClient.delete(`/categories/${id}`),
}


export default {
    todos,
    categories,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en los componentes donde queramos usarlo importamos el fichero y llamamos a las funciones que necesitemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import apiService from &#39;../apiService&#39;

export default {
  methods: {
    async getData() {
      try {
        const response = await apiService.todos.getAll()
        this.todos = response.data
      } catch (response) {
        console.error(&#39;Error: &#39; + response.message)
      }
    },
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;api-como-clase&quot; tabindex=&quot;-1&quot;&gt;Api como clase&lt;/h3&gt;
&lt;p&gt;También podemos usar programación orientada a objetos para hacer nuestra ApiService y construir una clase que se ocupe de las peticiones a la API:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;

const apiClient = axios.create({
  baseURL: &#39;http://localhost:3000&#39;,
  withCredentials: false,
  headers: {
    Accept: &#39;application/json&#39;,
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
})

export default class APIService{
  constructor(){
  }
  getTodos() {
    return apiClient.get(&#39;/todos&#39;)
  }
  delTodo(id){
    return apiClient.delete(&#39;/todos/&#39;+id)
  },
  addTodo(newTodo) {
    return apiClient.post(&#39;/todos&#39;, newTodo)
  },
  toogleDone(todo) {
    return apiClient.put(&#39;/todos/&#39;+todo.id, {
      id: todo.id, 
      title: todo.title, 
      done: !todo.done
    })
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en los componentes donde queramos usarlo importamos la clase y creamos una instancia de la misma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import APIService from &#39;../APIService&#39;

const apiService = new APIService()

export default {
  methods: {
    async getData() {
      try {
        const response = await apiService.getAll()
        this.todos = response.data
      } catch (response) {
        console.error(&#39;Error: &#39; + response.message)
      }
    },
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;el-fichero-em-env-em&quot; tabindex=&quot;-1&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Se trata de un fichero donde guardar las configuraciones de la aplicación y la ruta del servidor es una constante que estaría mejor en este fichero que en el código como hemos hecho nosotros.&lt;/p&gt;
&lt;p&gt;Vue por medio de &lt;em&gt;Vite&lt;/em&gt; puede acceder a todas las variables de &lt;em&gt;.env&lt;/em&gt; que comiencen por VITE_ por medio del objeto &lt;code&gt;import.meta.env&lt;/code&gt; por lo que en nuestro código en vez de darle el valor a &lt;em&gt;baseURL&lt;/em&gt; podríamos haber puesto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const apiClient = axios.create({
  baseURL: import.meta.env.VITE_RUTA_API,
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el fichero &lt;strong&gt;&lt;em&gt;.env&lt;/em&gt;&lt;/strong&gt; ponemos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;VITE_RUTA_API=http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si usamos Vue con &lt;em&gt;webpack&lt;/em&gt; las variables de &lt;em&gt;.env&lt;/em&gt; deben comenzar por VUE_APP_ y accedemos a ellas por medio del objeto &lt;code&gt;process.env&lt;/code&gt; por lo que en el fichero &lt;code&gt;.env&lt;/code&gt; definiríamos la variable &lt;code&gt;VUE_APP_RUTA_API=http://localhost:3000&lt;/code&gt; y en nuestro código pondría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const apiClient = axios.create({
  baseURL: process.env.VUE_APP_RUTA_API,
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fichero &lt;em&gt;.env&lt;/em&gt; por defecto se sube al repositorio por lo que no debemos poner información sensible (como usuarios o contraseñas). Para ello tenemos un fichero &lt;strong&gt;&lt;em&gt;.env.local&lt;/em&gt;&lt;/strong&gt; que no se sube, o bien debemos añadir al &lt;em&gt;.gitignore&lt;/em&gt; dicho fichero. En cualquier caso, si el fichero con la configuración no lo subimos al repositorio es conveniente tener un fichero &lt;em&gt;.env.exemple&lt;/em&gt;, que sí se sube, con valores predeterminados para las distintas variables que deberán cambiarse por los valores adecuados en producción. Además del &lt;em&gt;.env&lt;/em&gt; y el &lt;em&gt;.env.local&lt;/em&gt; también hay distintos ficheros que son usados en desarrollo (&lt;em&gt;.env.development&lt;/em&gt;) y en producción (&lt;em&gt;.env.production&lt;/em&gt;) y que pueden tener distintos datos según el entorno en que nos encontramos. Por ejemplo en el de desarrollo el valor de VUE_APP_RUTA_API podría ser &amp;quot;&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000&lt;/a&gt;&amp;quot; si usamos &lt;em&gt;json-server&lt;/em&gt; mientras que en el de producción tendríamos la ruta del servidor de producción de la API.&lt;/p&gt;
&lt;h2 id=&quot;axios-interceptors&quot; tabindex=&quot;-1&quot;&gt;Axios interceptors&lt;/h2&gt;
&lt;p&gt;Podemos hacer que se ejecute código antes de cualquier petición a axios o tras recibir la respuesta del servidor usando los &lt;em&gt;interceptores&lt;/em&gt; de axios. Es otra forma de enviar un token que nos autentifique ante una API sin tener que ponerlo en el código de cada petición, pero también nos permite hacer cualquier cosa que necesitemos.&lt;/p&gt;
&lt;p&gt;Y podemos interceptar las respuestas para, por ejemplo, redireccionar a la página de login si el servidor nos devuelve un error 401 (no autorizado).&lt;/p&gt;
&lt;p&gt;Para interceptar las peticiones que hacemos usaremos &lt;code&gt;axios.interceptors.request.use( (config) =&amp;gt; fnAEjecutar, (error) =&amp;gt; fnAEjecutar)&lt;/code&gt; y para interceptar las respuestas del servidor &lt;code&gt;axios.interceptors.response.use( (response) =&amp;gt; fnAEjecutar, (error) =&amp;gt; fnAEjecutar)&lt;/code&gt;. Se les pasa como parámetro la función a ejecutar si todo es correcto y la que se ejecutará si ha habido algún error. El interceptor de peticiones recibe como parámetro un objeto con toda la configuración de la petición (incluyendo sus cabeceras) y el interceptor de respuestas recibe la respuesta del servidor.&lt;/p&gt;
&lt;p&gt;Veamos un ejemplo en que queremos enviar en las cabeceras de cada petición el token que tenemos almacenado en el &lt;em&gt;LocalStorage&lt;/em&gt; y queremos mostrar un alert siempre que el servidor devuelva en su respuesta un error que no sea de tipo 400. Además mostraremos por consola las peticiones y las respuestas si activamos el modo DEBUG:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import axios from &#39;axios&#39;
const baseURL = &#39;http://localhost:3000&#39;
const DEBUG = true

axios.interceptors.request.use((config) =&amp;gt; {
    if (DEBUG) {
        console.info(&#39;Request: &#39;, config)
    }

    const token = localStorage.token
    if (token) {
        config.headers[&#39;Authorization&#39;] = &#39;Bearer &#39; + localStorage.token
    }
    return config
}, (error) =&amp;gt; {
    if (DEBUG) {
        console.error(&#39;Request error: &#39;, error)
    }
    return Promise.reject(error)
})

axios.interceptors.response.use((response) =&amp;gt; {
    if (DEBUG) {
        console.info(&#39;Response: &#39;, response)
    }
    return response
}, (error) =&amp;gt; {
    if (error.response &amp;amp;&amp;amp; error.response.status !== 400) {
        alert(&#39;Response error &#39; + error.response.status + &#39;(&#39; + error.response.statusText + &#39;)&#39;)
    }
    if (DEBUG) {
        console.info(&#39;Response error: &#39;, error)
    }
    return Promise.reject(error)
})

const categories = {
    getAll: () =&amp;gt; axios.get(`${baseURL}/categories`),
    getOne: (id) =&amp;gt; axios.get(`${baseURL}/categories/${id}`),
    create: (item) =&amp;gt; axios.post(`${baseURL}/categories`, item),
    modify: (item) =&amp;gt; axios.put(`${baseURL}/categories/${item.id}`, item),
    delete: (id) =&amp;gt; axios.delete(`${baseURL}/categories/${id}`),
}

export default {
    categories,
}
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/04-axios/" >
        </entry>
        <entry>
            <title>
                03_2-comunicar_componentes
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/03-2-comunicar-componentes/</id>
            <content type="html">
                &lt;h1 id=&quot;comunicacion-entre-componentes&quot; tabindex=&quot;-1&quot;&gt;Comunicación entre componentes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#comunicaci%C3%B3n-entre-componentes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comunicación entre componentes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#props-de-padre-a-hijo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Props (de padre a hijo)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#nunca-cambiar-el-valor-de-una-prop&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nunca cambiar el valor de una prop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-de-props&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación de props&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pasar-otros-atributos-de-padre-a-hijo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pasar otros atributos de padre a hijo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#emitir-eventos-de-hijo-a-padre&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Emitir eventos (de hijo a padre)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#definir-y-validar-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Definir y validar eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#capturar-el-evento-en-el-padre&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Capturar el evento en el padre&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#compartir-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Compartir datos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#root-y-parent&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;$root y $parent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#store-pattern&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Store pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#pinia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pinia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slots&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Slots&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slots-con-nombre&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Slots con nombre&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceder-a-datos-del-hijo-desde-el-padre-con-slot&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceder a datos del hijo desde el padre con &lt;em&gt;slot&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#aplicaci%C3%B3n-de-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aplicación de ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Cada componente tiene sus propios datos que son &lt;strong&gt;datos de nivel de componente&lt;/strong&gt;, pero hay ocasiones en que varios componentes necesitan acceder a los mismos datos. Es lo que nos sucede en nuestra aplicación de ejemplo donde varios componentes necesitan acceder a la lista de tareas (variable &lt;em&gt;todos&lt;/em&gt;) para mostrarla (&lt;em&gt;todo-list&lt;/em&gt;), añadir items (&lt;em&gt;todo-add&lt;/em&gt;) o borrarla (&lt;em&gt;todo-del-all&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Estos datos se consideran &lt;strong&gt;datos de nivel de aplicación&lt;/strong&gt; y hay varias formas de tratarlos.&lt;/p&gt;
&lt;p&gt;Ya hemos visto que podemos pasar información a un componente hijo mediante &lt;em&gt;props&lt;/em&gt;. Esto permite la comunicación de padres a hijos, pero queda por resolver cómo comunicarse los hijos con sus padres para informarles de cambios o eventos producidos y cómo comunicarse otros componentes entre sí.&lt;/p&gt;
&lt;p&gt;Nos podemos encontrar las siguientes situaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comunicación de padres a hijos: paso de parámetros (&lt;strong&gt;&lt;em&gt;props&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Comunicación de hijos a padres: emitir eventos (&lt;strong&gt;&lt;em&gt;$emit&lt;/em&gt;&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;Comunicación entre otros componentes: usar el patrón &lt;strong&gt;&lt;em&gt;store pattern&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Comunicación más compleja: &lt;strong&gt;&lt;em&gt;Pinia&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;props-de-padre-a-hijo&quot; tabindex=&quot;-1&quot;&gt;Props (de padre a hijo)&lt;/h2&gt;
&lt;p&gt;Ya hemos visto que podemos pasar parámetros del padre al componente hijo. Si el valor del parámetro cambia en el padre automáticamente se reflejan esos cambios en el hijo.&lt;/p&gt;
&lt;p&gt;NOTA: Cualquier parámetro que pasemos sin &lt;em&gt;v-bind&lt;/em&gt; se considera texto. Si queremos pasar un número, booleano, array u objeto hemos de pasarlo con &lt;em&gt;v-bind&lt;/em&gt; igual que hacemos con las variables para que no se considere texto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item todo=&amp;quot;Aprender Vue&amp;quot; :done=&amp;quot;false&amp;quot; &amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos pasar varios parámetros a un componente hijo podemos pasarle un objeto en un atributo &lt;em&gt;v-bind&lt;/em&gt; sin nombre y lo que recibirá el componente hijo son sus propiedades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;ul&amp;gt;
    &amp;lt;todo-item v-bind=&amp;quot;propsObject&amp;quot; &amp;gt;&amp;lt;/todo-item&amp;gt;
  &amp;lt;/ul&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  ...
  data() {
    return {
      propsObject: { 
        todo: &#39;Aprender Vue&#39;, 
        done: false
      }
    }
  }
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en el componente se reciben sus parámetros separadamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// todo-item.vue
  ...
  props: [&#39;todo&#39;, &#39;done&#39;],
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También es posible que el nombre de un parámetro que queramos pasar sea una variable:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;child-component :[paramName]=&amp;quot;valorAPasar&amp;quot; &amp;gt;&amp;lt;/child-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-12&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;nunca-cambiar-el-valor-de-una-prop&quot; tabindex=&quot;-1&quot;&gt;Nunca cambiar el valor de una prop&lt;/h3&gt;
&lt;p&gt;Al pasar un parámetro mediante una &lt;em&gt;prop&lt;/em&gt; su valor se mantendrá actualizado en el hijo si su valor cambiara en el padre, pero no al revés por lo que no debemos cambiar su valor en el componente hijo (de hecho &lt;em&gt;Vue3&lt;/em&gt; no nos lo permite).&lt;/p&gt;
&lt;p&gt;Si tenemos que cambiar su valor porque lo que nos pasan es sólo un valor inicial podemos crear una variable local a la que le asignamos como valor inicial el parámetro pasado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: [&#39;initialValue&#39;],
data(): {
  return {
    myValue: this.initialValue
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el componente usaremos la nueva variable &lt;em&gt;myValue&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si no necesitamos cambiarla sino sólo darle determinado formato a la variable pasada lo haremos creando una nueva variable (en este caso mejor una &lt;em&gt;computed&lt;/em&gt;), que es con la que trabajaremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: [&#39;cadenaSinFormato&#39;],
computed(): {
  cadenaFormateada() {
    return this.cadenaSinFormato.trim().toLowerCase()
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: Si el parámetro es un objeto o un array éste se pasa por referencia por lo que si lo cambiamos en el componente hijo &lt;strong&gt;sí&lt;/strong&gt; se cambiará en el padre, cosa que debemos evitar.&lt;/p&gt;
&lt;h3 id=&quot;validacion-de-props&quot; tabindex=&quot;-1&quot;&gt;Validación de props&lt;/h3&gt;
&lt;p&gt;Al recibir los parámetros podemos usar &lt;em&gt;sintaxis de objeto&lt;/em&gt; en lugar de &lt;em&gt;sintaxis de array&lt;/em&gt; y en ese caso podemos indicar algunas cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;: su tipo (String, Number, Boolean, Array, Object, Date, Function, Symbol o una clase propia). Puede ser un array con varios tipos: &lt;code&gt;type: [Boolean, Number]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;default&lt;/strong&gt;: su valor por defecto si no se pasa ese parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: si es o no obligatorio&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;validator&lt;/strong&gt;: una función que recibe como parámetro el valor del parámetro y devolverá true o false en función de si el valor es o no válido&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;props: {
  nombre: String,
  apellidos: {
    type: String,
    required: true
  },
  idPropietario: {
    type: [Boolean, Number],
    default: false
  },
  products: {
    type: Object,
    default(): { 
      return {id:0, units: 0} 
    }  // Si es un objeto o array _default_ debe ser una función que devuelva el valor
  },
  nifGestor: {
    type: String,
    required: true,
    validator(value): {
      return /^[0-9]{8}[A-Z]$/.test(value)   // Si devuelve *true* será válido
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;pasar-otros-atributos-de-padre-a-hijo&quot; tabindex=&quot;-1&quot;&gt;Pasar otros atributos de padre a hijo&lt;/h3&gt;
&lt;p&gt;Además de los parámetros, que se reciben en &lt;em&gt;props&lt;/em&gt;, el componente padre puede poner cualquier otro atributo en la etiqueta del hijo, quien lo recibirá y se aplicará a su elemento raíz. A esos atributos se puede acceder a través de &lt;code&gt;$attr&lt;/code&gt;. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- componente padre --&amp;gt;
&amp;lt;date-picker id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot; class=&amp;quot;fecha&amp;quot;&amp;gt;&amp;lt;/date-picker&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;// Componente hijo date-picker.vue
&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;date-picker&amp;quot;&amp;gt;
    &amp;lt;input type=&amp;quot;datetime&amp;quot; /&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  ...
  methods: {
    showAttributes() {
      console.log(&#39;Id: &#39; + this.$attrs.id + &#39;, Data: &#39; + this.$attrs[&#39;data-status&#39;])
    }
  }
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El subcomponente se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;fecha date-picker&amp;quot; id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;datetime&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y al ejecutar el método &lt;em&gt;showAttributes&lt;/em&gt; mostrará en la consola &lt;code&gt;Id: now, Data: activated&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A veces no queremos que esos atributos se apliquen al elemento raíz del subcomponente sino a alguno interno (habitual si le pasamos escuchadores de eventos). En ese caso podemos deshabilitar la herencia de parámetros definiendo el atributo del componente &lt;code&gt;inheritAttrs&lt;/code&gt; a &lt;em&gt;false&lt;/em&gt; y aplicándolos nosotros manualmente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- componente padre --&amp;gt;
&amp;lt;date-picker id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot; @input=&amp;quot;dataChanged&amp;quot;&amp;gt;&amp;lt;/date-picker&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Componente hijo date-picker.vue
&amp;lt;template&amp;gt;
    &amp;lt;div class=&amp;quot;date-picker&amp;quot;&amp;gt;
      &amp;lt;input type=&amp;quot;datetime&amp;quot; v-bind=&amp;quot;$attrs&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
  ...
  inheritAttrs: false,
  ...
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;date-picker&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;datetime&amp;quot; class=&amp;quot;fecha&amp;quot; id=&amp;quot;now&amp;quot; data-status=&amp;quot;activated&amp;quot; @input=&amp;quot;dataChanged&amp;quot; /&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El componente padre está escuchando el evento &lt;em&gt;input&lt;/em&gt; sobre el &amp;lt;INPUT&amp;gt; del componente hijo.&lt;/p&gt;
&lt;p&gt;En Vue3, si el componente hijo tiene varios elementos raíz deberemos &lt;em&gt;bindear&lt;/em&gt; los &lt;em&gt;attrs&lt;/em&gt; a uno de ellos como acabamos de ver.&lt;/p&gt;
&lt;h2 id=&quot;emitir-eventos-de-hijo-a-padre&quot; tabindex=&quot;-1&quot;&gt;Emitir eventos (de hijo a padre)&lt;/h2&gt;
&lt;p&gt;Si un componente hijo debe pasarle un dato a su padre o informarle de algo puede emitir un evento que el padre capturará y tratará convenientemente. Para emitir el evento el hijo hace:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  this.$emit(&#39;nombreEvento&#39;, parametro)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El padre debe capturar el evento como cualquier otro. En su HTML hará:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component @nombre-evento=&amp;quot;fnManejadora&amp;quot; ... /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en su JS tendrá la función para manejar ese evento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  methods: {
    fnManejadora(param) {
      ...
    },
  }
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El componente hijo puede emitir cualquiera de los eventos estándar de JS (&#39;click&#39;, &#39;change&#39;, ...) o un evento personalizado (&#39;cambiado&#39;, ...).&lt;/p&gt;
&lt;p&gt;Igual que un componente declara las &lt;em&gt;props&lt;/em&gt; que recibe, también puede declarar los eventos que emite. Esto es opcional pero &lt;strong&gt;muy recomendable&lt;/strong&gt; ya que proporciona mayor claridad al código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// TodoItem.vue
...
props: {
  todo: Object
},
emits: [&#39;nombreEvento&#39;],
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;: continuando con la aplicación de tareas que dividimos en componentes, en el componente &lt;strong&gt;&lt;em&gt;todo-item&lt;/em&gt;&lt;/strong&gt; en lugar de hacer un alert emitiremos un evento al padre:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;delTodo() {
  this.$emit(&#39;delItem&#39;)
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y en el componente &lt;strong&gt;&lt;em&gt;todo-list&lt;/em&gt;&lt;/strong&gt; lo escuchamos y llamamos al método que borre el item:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
  template: `
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;{{ title }}&amp;lt;/h2&amp;gt;
      &amp;lt;ul&amp;gt;
       &amp;lt;todo-item 
         v-for=&amp;quot;(item, index) in todos&amp;quot; 
         :key=&amp;quot;item.id&amp;quot;
         :todo=&amp;quot;item&amp;quot;
         @del-item=&amp;quot;delTodo(index)&amp;quot;&amp;gt;
       &amp;lt;/todo-item&amp;gt;
      &amp;lt;/ul&amp;gt;
      &amp;lt;add-item&amp;gt;&amp;lt;/add-item&amp;gt;
      &amp;lt;br&amp;gt;
      &amp;lt;del-all&amp;gt;&amp;lt;/del-all&amp;gt;
    &amp;lt;/div&amp;gt;`,
  methods: {
    delTodo(index){
      this.todos.splice(index,1)
    },
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-13&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;definir-y-validar-eventos&quot; tabindex=&quot;-1&quot;&gt;Definir y validar eventos&lt;/h3&gt;
&lt;p&gt;Como hemos dicho, los eventos que emite un componente pueden (y se recomienda) definirse en la opción &lt;em&gt;emits&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// component todo-item.vue
  ...
  emits: [&#39;toogle-done&#39;, &#39;dblclick&#39;],
  props: [&#39;todo&#39;],
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es recomendable definir los argumentos que emite usando sintaxis de objeto en vez de array, similar a como hacemos con las &lt;em&gt;props&lt;/em&gt;. Para ello el evento se asigna a una función que recibe como parámetro los parámetros del evento y devuelve &lt;em&gt;true&lt;/em&gt; si es válido o &lt;em&gt;false&lt;/em&gt; si no lo es:&lt;br /&gt;
&lt;code&gt;custom-form.vue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
  emits: {
    // No validation
    click: null,
    // Validate submit event
    submit: ({ email, password }) =&amp;gt; {
      if (email &amp;amp;&amp;amp; password) {
        return true
      } else {
        console.warn(&#39;Invalid submit event payload!&#39;)
        return false
      }
    }
  },
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo el componente emite &lt;em&gt;click&lt;/em&gt; que no se valida y &lt;em&gt;submit&lt;/em&gt; donde se valida que reciba 2 parámetros.&lt;/p&gt;
&lt;h3 id=&quot;capturar-el-evento-en-el-padre&quot; tabindex=&quot;-1&quot;&gt;Capturar el evento en el padre&lt;/h3&gt;
&lt;p&gt;En ocasiones (como en este caso) el componente hijo no hace nada más que informar al padre de que se ha producido un evento sobre él. En estos casos podemos hacer que el evento se capture directamente en el padre en lugar de en el hijo:&lt;/p&gt;
&lt;p&gt;Componente &lt;strong&gt;&lt;em&gt;todo-list.vue&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;div&amp;gt;
      &amp;lt;h2&amp;gt;{{ title }}&amp;lt;/h2&amp;gt;
      &amp;lt;ul&amp;gt;
       &amp;lt;todo-item 
         v-for=&amp;quot;(item, index) in todos&amp;quot; 
         :key=&amp;quot;item.id&amp;quot;
         :todo=&amp;quot;item&amp;quot;
         @dblclick=&amp;quot;delTodo(index)&amp;quot;&amp;gt;
        &amp;lt;/todo-item&amp;gt;
    ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le estamos indicando a Vue que el evento &lt;em&gt;dblclick&lt;/em&gt; se capture en &lt;em&gt;todo-list&lt;/em&gt; directamente por lo que el componente &lt;em&gt;todo-item&lt;/em&gt; no tiene que capturarlo ni hacer nada:&lt;/p&gt;
&lt;p&gt;Componente &lt;strong&gt;&lt;em&gt;todo-item.vue&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
    &amp;lt;li&amp;gt;
      &amp;lt;label&amp;gt;
    ...
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;compartir-datos&quot; tabindex=&quot;-1&quot;&gt;Compartir datos&lt;/h2&gt;
&lt;p&gt;Una forma más sencilla de modificar datos de un componente desde otros es compartiendo los datos entre ellos. Definimos en un fichero &lt;em&gt;.js&lt;/em&gt; aparte un objeto que contendrá todos los datos a compartir entre componentes, lo importamos y lo registramos en el &lt;em&gt;data&lt;/em&gt; de cada componente que tenga que acceder a él. Ejemplo:&lt;/p&gt;
&lt;p&gt;Fichero &lt;code&gt;/src/store/index.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &#39;vue&#39;

export const store = reactive({
  message: &#39;&#39;,
  myData: [],
  ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En Vue3 para que la variable store sea reactiva (que la vista reaccione a los cambios que se produzcan en ella) hay que declararla con &lt;code&gt;reactive&lt;/code&gt; si es un objeto o con &lt;code&gt;ref&lt;/code&gt; si es un tipo primitivo (&lt;em&gt;string&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt;, ...).&lt;/p&gt;
&lt;p&gt;Fijaos que se declara el objeto &lt;em&gt;store&lt;/em&gt; como una constante porque NO puedo cambiar su valor para que pueda ser usado por todos los componentes, pero sí el de sus propiedades.&lt;/p&gt;
&lt;p&gt;En cada componente que necesite acceder a datos del &lt;em&gt;store&lt;/em&gt; lo importamos y definimos dentro de &lt;em&gt;computed&lt;/em&gt; las variables a las que queramos acceder. No lo hacemos en &lt;em&gt;data&lt;/em&gt; porque allí declaro las variables locales del componente y estas está en el &lt;em&gt;store&lt;/em&gt;.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
Componente `compA.vue`
```javascript
import { store } from &#39;../store/&#39;

export default {
  template: `&amp;lt;p&amp;gt;Mensaje: { { message}} &amp;lt;/p&amp;gt;`,
  computed: {
    message() {
      return store.message
    }
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ya puedo acceder a la variable &lt;em&gt;message&lt;/em&gt; del &lt;em&gt;store&lt;/em&gt; desde el componente con &lt;code&gt;this.message&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Esta forma de trabajar tiene un grave inconveniente: como el valor de cualquier dato puede ser modificado desde cualquier parte de la aplicación es difícilmente mantenible y se convierte en una pesadilla depurar el código y encontrar errores.&lt;/p&gt;
&lt;p&gt;Para evitarlo usaremos un patrón de programación llamado &lt;em&gt;Store pattern&lt;/em&gt; que veremos en el siguiente apartado.&lt;/p&gt;
&lt;h3 id=&quot;root-y-parent&quot; tabindex=&quot;-1&quot;&gt;$root y $parent&lt;/h3&gt;
&lt;p&gt;Todos los componentes tienen acceso a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;los parámetros que le han pasado como &lt;code&gt;props&lt;/code&gt; (que no deberían cambiarse)&lt;/li&gt;
&lt;li&gt;sus variables locales, declaradas en &lt;code&gt;data()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sus variables calculadas, declaradas en &lt;code&gt;computed&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pero además tienen acceso a los datos y métodos definidos en la instancia de Vue (donde hacemos el &lt;code&gt;Vue.createApp()&lt;/code&gt;, es decir, en el &lt;code&gt;main.js&lt;/code&gt;) a los que accede desde el objeto &lt;strong&gt;&lt;code&gt;$root&lt;/code&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue.createApp({
  data: {
    message: &#39;Hola&#39;,
  },
  methods: {
    getInfo() {
  ...
}).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Desde cualquier componente podemos hacer cosas como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(this.$root.message)
this.$root.message=&#39;Adios&#39;
this.$root.getInfo()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También es posible acceder a los datos y métodos del componente padre del actual usando &lt;code&gt;$parent&lt;/code&gt; en lugar de &lt;code&gt;$root&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;De esta manera podríamos acceder directamente a datos del padre o usar la instancia de Vue como almacén (evitando crear el objeto &lt;strong&gt;store&lt;/strong&gt; para compartir datos). Sin embargo, aunque esto puede ser útil en aplicaciones pequeñas, es difícil de mantener cuando nuestra aplicación crece por lo que se recomienda usar un &lt;strong&gt;&lt;em&gt;Store pattern&lt;/em&gt;&lt;/strong&gt; como veremos a continuación o &lt;strong&gt;Pinia&lt;/strong&gt; si nuestra aplicación va a ser grande.&lt;/p&gt;
&lt;h3 id=&quot;store-pattern&quot; tabindex=&quot;-1&quot;&gt;Store pattern&lt;/h3&gt;
&lt;p&gt;Es una mejora sobre lo que hemos visto de compartir datos. Para evitar que todos los componentes puedan modificar los datos compartidos en el almacén, las acciones que modifican dichos datos están incluidas dentro del propio almacén, lo que facilita su seguimiento:&lt;/p&gt;
&lt;p&gt;Fichero &lt;code&gt;/src/store/index.js&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { reactive } from &#39;vue&#39;

export const store = {
  debug: true,
  state: reactive({
    message: &#39;&#39;,
    ...
  }),
  setMessageAction (newValue) {
    if (this.debug) console.log(&#39;setMessageAction triggered with &#39;, newValue)
    this.state.message = newValue
  },
  clearMessageAction () {
    if (this.debug) console.log(&#39;clearMessageAction triggered&#39;)
    this.state.message = &#39;&#39;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Componente &lt;code&gt;compA.vue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { store } from &#39;../store/&#39;

export default {
  template: `&amp;lt;p&amp;gt;Mensaje: { { message}} &amp;lt;/p&amp;gt;`,
  computed: {
    message() {
      return store.state.message,
    }
  },
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que lo declaramos como &lt;code&gt;computed&lt;/code&gt; porque es una varable calculada: una variable que está en otro sitio.&lt;/p&gt;
&lt;p&gt;Componente &lt;code&gt;compB.vue&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { store } from &#39;/src/datos.js&#39;
  ...
  methods: {
    delMessage() {
      store.clearMessageAction()
    }
  },
  ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: no debemos guardar todos los datos en el &lt;em&gt;store&lt;/em&gt; sólo los datos de aplicación (aquellos que utiliza más de un componente). Los datos privados de cada componente seguiremos declarándolos en su &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;pinia&quot; tabindex=&quot;-1&quot;&gt;Pinia&lt;/h2&gt;
&lt;p&gt;Hemos visto que con un &lt;em&gt;store pattern&lt;/em&gt; se simplifica mucho la gestión de los datos de aplicación y al centralizar los métodos que modifican los datos tengo control sobre los cambios producidos. Sin embargo en un componente puedo seguir escribiendo código que manipule los datos del almacén directamente, sin usar los métodos del almacén. &lt;em&gt;Pinia&lt;/em&gt; básicamente es un &lt;em&gt;store pattern&lt;/em&gt; donde parte del trabajo de definirlo ya está hecho y que me obliga a usarlo para mainular los datos de aplicación (con él no puedo cambiarlos directamente desde un componente). Además se integra perfectamente con las &lt;em&gt;DevTools&lt;/em&gt; por lo que es muy sencillo seguir los cambios producidos.&lt;/p&gt;
&lt;p&gt;Se trata de una librería para gestionar los estados en una aplicación Vue. Ofrece un almacenamiento centralizado para todos los componentes con unas reglas para asegurar que un estado sólo cambia de determinada manera. Es el método a utilizar en aplicaciones medias y grandes y le dedicaremos todo un tema más adelante. En Vue2 y anteriores la librería que se usaba es &lt;em&gt;Vuex&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lo veremos en detalle en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/07-pinia.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad dedicada a esta librería&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;slots&quot; tabindex=&quot;-1&quot;&gt;Slots&lt;/h2&gt;
&lt;p&gt;Otra forma en que un componente hijo puede mostrar información del padre es usando &lt;em&gt;slots&lt;/em&gt;. Un &lt;em&gt;slot&lt;/em&gt; es un hueco en un componente que, al renderizarse, se rellena con lo que le pasa el padre en el innerHTML de la etiqueta del componente. El &lt;em&gt;slot&lt;/em&gt; tiene acceso al contexto del componente padre, no al del componente donde se renderiza. Los &lt;em&gt;slots&lt;/em&gt; son una herramienta muy potente. Podemos obtener toda la información en la &lt;a href=&quot;https://v3.vuejs.org/guide/component-slots.html#slot-content&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;br /&gt;
Tenemos un componente llamado &lt;em&gt;my-component&lt;/em&gt; con un slot:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div&amp;gt;
    &amp;lt;h3&amp;gt;Componente con un slot&amp;lt;/h3&amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;p&amp;gt;Esto se verá si no se pasa nada al slot&amp;lt;/p&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si llamamos al componente con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component&amp;gt;
  &amp;lt;p&amp;gt;Texto del slot&amp;lt;/p&amp;gt;
&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;h3&amp;gt;Componente con un slot&amp;lt;/h3&amp;gt;
  &amp;lt;p&amp;gt;Texto del slot&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero si lo llamamos con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;my-component&amp;gt;
&amp;lt;/my-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se renderizará como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div&amp;gt;
  &amp;lt;h3&amp;gt;Componente con un slot&amp;lt;/h3&amp;gt;
  &amp;lt;p&amp;gt;Esto se verá si no se pasa nada al slot&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-14&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Un ejemplo más util de &lt;em&gt;slot&lt;/em&gt; es el siguiente: queremos hacer un componente que renderice una fila de una tabla donde mostrar los datos de un usuario. Tendremos una última columna donde poner unos botones para realizar acciones sobre ese usuario pero esos botones variarán en función de la página donde se muestre la tabla. Para ello usaremos &lt;em&gt;slots&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;tr&amp;gt;
    &amp;lt;td&amp;gt;{{ user.name }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ user.email }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;{{ user.age }}&amp;lt;/td&amp;gt;
    &amp;lt;td&amp;gt;
      &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
    &amp;lt;/td&amp;gt;
  &amp;lt;/tr&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Donde queremos mostrar un usuario con botones para editar y borrar haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;user-row :user=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;button @click=&amp;quot;editUser&amp;quot;&amp;gt;Editar&amp;lt;/button&amp;gt;
    &amp;lt;button @click=&amp;quot;deleteUser&amp;quot;&amp;gt;Borrar&amp;lt;/button&amp;gt;
&amp;lt;/user-row&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y donde queremos mostrarlo sólo con un botón para ver más detalles haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;user-row :user=&amp;quot;user&amp;quot;&amp;gt;
    &amp;lt;button @click=&amp;quot;showDetails&amp;quot;&amp;gt;Detalles&amp;lt;/button&amp;gt;
&amp;lt;/user-row&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;slots-con-nombre&quot; tabindex=&quot;-1&quot;&gt;Slots con nombre&lt;/h3&gt;
&lt;p&gt;A veces nos interesa tener más de un slot en un componente. Para saber qué contenido debe ir a cada slot se les da un nombre.&lt;/p&gt;
&lt;p&gt;Vamos a ver un ejemplo de un componente llamado &lt;em&gt;base-layout&lt;/em&gt; con 3 &lt;em&gt;slots&lt;/em&gt;, uno para la cabecera, otro para el pie y otro principal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;slot name=&amp;quot;header&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/header&amp;gt;
  &amp;lt;main&amp;gt;
    &amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/main&amp;gt;
  &amp;lt;footer&amp;gt;
    &amp;lt;slot name=&amp;quot;footer&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
  &amp;lt;/footer&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A la hora de llamar al componente hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;base-layout&amp;gt;
  &amp;lt;template v-slot:header&amp;gt;
    &amp;lt;h1&amp;gt;Here might be a page title&amp;lt;/h1&amp;gt;
  &amp;lt;/template&amp;gt;

  &amp;lt;template v-slot:default&amp;gt;
    &amp;lt;p&amp;gt;A paragraph for the main content.&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;And another one.&amp;lt;/p&amp;gt;
  &amp;lt;/template&amp;gt;

  &amp;lt;template v-slot:footer&amp;gt;
    &amp;lt;p&amp;gt;Here&#39;s some contact info&amp;lt;/p&amp;gt;
  &amp;lt;/template&amp;gt;
&amp;lt;/base-layout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La directiva &lt;code&gt;v-slot&lt;/code&gt; tiene una abreviatura que es &lt;code&gt;#&lt;/code&gt; de forma que podríamos haber puesto &lt;code&gt;&amp;lt;template &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#header&quot;&gt;#header&lt;/a&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podría no ponerse el &lt;em&gt;template &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#default&quot;&gt;#default&lt;/a&gt;&lt;/em&gt; y funcionaría igual: lo que está dentro de un &lt;em&gt;template&lt;/em&gt; con &lt;em&gt;v-slot&lt;/em&gt; irá al &lt;em&gt;slot&lt;/em&gt; del componente con ese nombre. El resto del innerHTML irá al &lt;em&gt;slot&lt;/em&gt; por defecto (el que no tiene nombre).&lt;/p&gt;
&lt;p&gt;La directiva &lt;em&gt;v-slot&lt;/em&gt; podemos ponérsela a cualquier etiqueta (no tiene que ser &amp;lt;template&amp;gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;base-layout&amp;gt;
  &amp;lt;h1 v-slot=&amp;quot;header&amp;quot;&amp;gt;Here might be a page title&amp;lt;/h1&amp;gt;

  &amp;lt;p&amp;gt;A paragraph for the main content.&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;And another one.&amp;lt;/p&amp;gt;

  &amp;lt;p slot=&amp;quot;footer&amp;quot;&amp;gt;Here&#39;s some contact info&amp;lt;/p&amp;gt;
&amp;lt;/base-layout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;acceder-a-datos-del-hijo-desde-el-padre-con-em-slot-em&quot; tabindex=&quot;-1&quot;&gt;Acceder a datos del hijo desde el padre con &lt;em&gt;slot&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;El componente hijo puede hacer accesibles sus variables al padre declarándolas en su etiqueta &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- ChildComponent --&amp;gt;
&amp;lt;div&amp;gt;
  &amp;lt;slot :text=&amp;quot;greetingMessage&amp;quot; :count=&amp;quot;1&amp;quot;&amp;gt;&amp;lt;/slot&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!-- ParentComponent --&amp;gt;
&amp;lt;child-component v-slot={ text, count }&amp;gt;
  {{ text }}: {{ count }}
&amp;lt;/child-component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto es particularmente útil en componentes hijos que muestran un array de datos (con un &lt;code&gt;v-for&lt;/code&gt;) si queremos acceder con el padre a cada dato.&lt;/p&gt;
&lt;p&gt;Podéis profundizar en el uso de &lt;em&gt;slots&lt;/em&gt; en la &lt;a href=&quot;https://vuejs.org/guide/components/slots.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&quot;aplicacion-de-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Aplicación de ejemplo&lt;/h1&gt;
&lt;p&gt;Vamos a hacer que funcione la aplicación que tenemos hecha con &lt;em&gt;SFC&lt;/em&gt; y &lt;em&gt;Store pattern&lt;/em&gt;. Para ello vamos a crear un &lt;em&gt;store&lt;/em&gt; que contendrá el array de tareas y los métodos para añadir, borrar y cambiar el estado de las tareas, así como para borrarlas todas.&lt;/p&gt;
&lt;p&gt;En el componente &lt;em&gt;todo_list&lt;/em&gt; debemos incluir el array &lt;em&gt;todos&lt;/em&gt; lo que haremos en su &lt;em&gt;computed&lt;/em&gt;. El resto de componentes no necesitan acceder al array, pero sí llamarán a los métodos para cambiarlo.&lt;/p&gt;
&lt;p&gt;Respecto al &lt;em&gt;todo-item&lt;/em&gt; debe cambiar los datos tanto al hacer doble click (se borra la tarea) como al marcar/desmarcar el checkbox (se cambia el estado de la tarea).&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/todo-app-with-vue-cli-it-works-fnen9g?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;ToDo App with vue-cli (it works!!!)&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/03-2-comunicar-componentes/" >
        </entry>
        <entry>
            <title>
                03_1-sfc
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/03-1-sfc/</id>
            <content type="html">
                &lt;h1 id=&quot;single-file-components&quot; tabindex=&quot;-1&quot;&gt;Single File Components&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#single-file-components&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Single File Components&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#recordatorio-de-c%C3%B3mo-separar-componentes-en-ficheros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Recordatorio de cómo separar componentes en ficheros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-del-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución del ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-proyecto-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un proyecto Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#creaci%C3%B3n-de-un-nuevo-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Creación de un nuevo proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#scaffolding-creado&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Scaffolding&lt;/em&gt; creado&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#packagejson&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;package.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#indexhtml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;index.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mainjs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;main.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#appvue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;App.vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#componentshelloworldvue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;components/HelloWorld.vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#build-and-deploy-de-nuestra-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Build and Deploy&lt;/em&gt; de nuestra aplicación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#los-ficheros-sfc-single-file-component&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Los ficheros SFC (&lt;em&gt;Single File Component&lt;/em&gt;)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#secciones-de-un-single-file-component&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Secciones de un Single File Component&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#template&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;template&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#script&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;script&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#style&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;lt;style&amp;gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#custom-blocks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Custom blocks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-nuevos-paquetes-y-plugins&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir nuevos paquetes y plugins&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bootstrap&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bootstrap&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#iconos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Iconos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-nuevo-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un nuevo componente&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#depurar-el-c%C3%B3digo-en-la-consola&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Depurar el código en la consola&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#aplicaci%C3%B3n-de-ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aplicación de ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;La utilidad de separar nuestra aplicación en componentes es que cada uno de ellos puede guardarse en su propio fichero y así no tenemos un fichero con demasiado código. A estos ficheros que contienen un componente se les llama &lt;em&gt;Single File Component (SFC)&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&quot;recordatorio-de-como-separar-componentes-en-ficheros&quot; tabindex=&quot;-1&quot;&gt;Recordatorio de cómo separar componentes en ficheros&lt;/h3&gt;
&lt;p&gt;Como vimos en la unidad anterior, en el fichero en que definimos el componente exportamos un objeto con las opciones del componente (el segundo parámetro del &lt;code&gt;app.component()&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default {
    props: [&#39;todo&#39;],
    template: 
      `&amp;lt;li @dblclick=&amp;quot;delTodo&amp;quot;&amp;gt;
        &amp;lt;label&amp;gt;
          &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;todo.done&amp;quot;&amp;gt;
          &amp;lt;del v-if=&amp;quot;todo.done&amp;quot;&amp;gt;
            { { todo.title }}
          &amp;lt;/del&amp;gt;
          &amp;lt;span v-else&amp;gt;
            { { todo.title }}
          &amp;lt;/span&amp;gt;
        &amp;lt;/label&amp;gt;
      &amp;lt;/li&amp;gt;`,
    methods: {
      delTodo() {
        alert(&#39;Quiero borrar &amp;quot;&#39; + this.todo.title + &#39;&amp;quot;&#39;);
      }
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde queramos usarlo (puede ser en otro componente o en la instancia raíz de &lt;em&gt;Vue&lt;/em&gt;) debemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar el fichero del componente&lt;/li&gt;
&lt;li&gt;registrar el componente en una propiedad llamada &lt;em&gt;components&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El fichero &lt;code&gt;main.js&lt;/code&gt; de nuestra aplicación de la &lt;em&gt;Lista de tareas&lt;/em&gt; quedaba:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import TodoList from &#39;./TodoList.js&#39;
import TodoAdd from &#39;./TodoAdd.js&#39;
import TodoDellAll from &#39;./TodoDellAll.js&#39;

var myApp=Vue.createApp({
    components:  {
        TodoList,
        TodoAdd,
        TodoDellAll,
    }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuerda que para que el navegador entienda la sentencia &lt;code&gt;import&lt;/code&gt; debemos indicar que el script que lo contiene es de tipo &lt;strong&gt;module&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;solucion-del-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Solución del ejemplo&lt;/h3&gt;
&lt;p&gt;Podéis ver aquí cómo quedará nuestra aplicación de ejemplo con los componentes separados en ficheros:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/gracious-kepler-mq9ypp?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;gracious-kepler-mq9ypp&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;
&lt;h2 id=&quot;crear-un-proyecto-vue&quot; tabindex=&quot;-1&quot;&gt;Crear un proyecto Vue&lt;/h2&gt;
&lt;p&gt;Aunque puede usarse &lt;em&gt;Vue&lt;/em&gt; como hemos visto, enlazándolo directamente en el &lt;em&gt;index.html&lt;/em&gt; lo más habitual es crear un nuevo proyecto para la aplicación que vamos a desarrollar usando &lt;strong&gt;npm&lt;/strong&gt; y &lt;strong&gt;Vite&lt;/strong&gt;. Esto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crea automáticamente el &lt;em&gt;scaffolding&lt;/em&gt; básico de nuestro proyecto basándose en una serie de plantillas predefinidas&lt;/li&gt;
&lt;li&gt;Facilita el trabajo con componentes, permitiendo que cada uno de ellos esté en su propio fichero (&lt;strong&gt;SFC&lt;/strong&gt;, &lt;em&gt;Single File Components&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Incluye utilidades y herramientas como Babel, Uglify, ... que permiten
&lt;ul&gt;
&lt;li&gt;gestionar las dependencias de nuestro código&lt;/li&gt;
&lt;li&gt;empaquetar todos los ficheros &lt;em&gt;.vue&lt;/em&gt; y librerías en un único fichero JS y CSS&lt;/li&gt;
&lt;li&gt;traspilar el código ES2015/2016, SCSS, etc a ES5 y CSS3 estándar&lt;/li&gt;
&lt;li&gt;minimizar el código generado&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Incluye herramientas que facilitan el desarrollo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;creacion-de-un-nuevo-proyecto&quot; tabindex=&quot;-1&quot;&gt;Creación de un nuevo proyecto&lt;/h3&gt;
&lt;p&gt;Para crear un nuevo proyecto ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm init vue@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al ejecutar este comando se nos pregunta el nombre del proyecto a crear y si queremos usar o no determinadas herramientas (más adelante veremos qué es cada una, de momento decimos que &lt;em&gt;No&lt;/em&gt;) y se creará el directorio para el mismo con el &lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt; del proyecto en su interior con su configuración.&lt;/p&gt;
&lt;p&gt;![Nuevo Proyecto](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/npm-init-vue.png)&lt;/p&gt;
&lt;p&gt;Lo primero que haremos es entrar al directorio del proyecto e instalar las dependencias (&lt;code&gt;npm install&lt;/code&gt;) y a continuación ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este script de &lt;em&gt;Vite&lt;/em&gt; funciona como ya vismo en el bloque de Javascript: compila el código, muestra si hay errores, lanza un servidor web en el puerto 5173 y carga el proyecto en el navegador (&lt;a href=&quot;http://localhost:5173/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:5173&lt;/a&gt;). Si cambiamos cualquier fichero del directorio &lt;em&gt;src&lt;/em&gt; recompila y recarga la página automáticamente.&lt;/p&gt;
&lt;p&gt;Además nos permite acceder a una página desde donde explorar los componentes de nuestra aplicación y ver su código, propiedades, etc. igual que podemos hacer desde la consola si hemos instalado las &lt;strong&gt;Vue DevTools&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La página generada es por el proyecto es:&lt;/p&gt;
&lt;p&gt;![Proyecto de plantilla simple](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/vue-vite-sample-app.png)&lt;/p&gt;
&lt;h3 id=&quot;em-scaffolding-em-creado&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Scaffolding&lt;/em&gt; creado&lt;/h3&gt;
&lt;p&gt;Se ha creado la carpeta con el nombre del proyecto y dentro el scaffolding para nuestro proyecto:&lt;/p&gt;
&lt;p&gt;![Directorios del proyecto de plantilla simple](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/vue-vite-sample-folders.png)&lt;/p&gt;
&lt;p&gt;Los principales ficheros y directorios creados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: configuración del proyecto (nombre, autor, ...) y dependencias&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vite.config.js&lt;/code&gt;: configuración de Vite&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;: html con un div donde se cargará la app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;: librerías de las dependencias&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;: lugar donde dejar elementos estáticos que no pasarán por &lt;em&gt;vite&lt;/em&gt;. Podemos poner imágenes, CSS, etc y lo referenciaremos de forma ABSOLUTA como si estuviera en &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;: todo nuestro código
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assets/&lt;/code&gt;: nuestros CSS, imágenes, etc. Elementos que &lt;em&gt;vite&lt;/em&gt; procesará y optimizará&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components/&lt;/code&gt;: carpeta que contendrá los ficheros .vue de los diferentes componentes
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HelloWorld.vue&lt;/code&gt;: componente de ejemplo llamado por App.vue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;router/&lt;/code&gt;: carpeta con los ficheros del router si usamos _vue-&lt;em&gt;router&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;store/&lt;/code&gt;: carpeta con los ficheros del store si usamos &lt;em&gt;pinia&lt;/em&gt; o &lt;em&gt;vuex&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;views&lt;/code&gt;: si usamos &lt;em&gt;vue-router&lt;/em&gt; aquí pondremos los componentes que constituyen una vista de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;App.vue&lt;/code&gt;: es el componente principal y constituye nuestra página de inicio del proyecto. Aquí cargaremos la cabecera, el menú,... y los diferentes componentes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.js&lt;/code&gt;: JS principal que crea la instancia de Vue que carga el componente principal llamado &lt;em&gt;App.vue&lt;/em&gt; y lo renderiza en &lt;code&gt;_#app_&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;package-json&quot; tabindex=&quot;-1&quot;&gt;package.json&lt;/h4&gt;
&lt;p&gt;Aquí se configura nuestra aplicación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name, version, author, license&lt;/strong&gt;, ...: configuración general de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scripts&lt;/strong&gt;: ejecutan entornos de configuración para webpack:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dev&lt;/strong&gt;: lanza el servidor web de vite y configura vue para el entorno de desarrollo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build&lt;/strong&gt;: crea los ficheros JS y CSS dentro de &lt;strong&gt;/dist&lt;/strong&gt; con todo el código de la aplicación&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;dependences&lt;/strong&gt;: se incluyen las librerías y plugins que utiliza nuestra aplicación en producción. Todas las dependencias se instalan dentro de &lt;strong&gt;/node-modules&lt;/strong&gt;.  Para instalar una nueva dependencia de desarrollo ejecutaremos &lt;code&gt;npm install nombre-del-paquete -S&lt;/code&gt; (la opción -S la añade a package.json como dependencia de producción).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;devDependencies&lt;/strong&gt;: igual pero son paquetes que sólo se usan en desarrollo (vite, etc). También se instalan dentro de node-modules pero no estarán cuando se genere el código para producción. Para instalar una nueva dependencia de desarrollo ejecutaremos &lt;code&gt;npm install nombre-del-paquete -D&lt;/code&gt; (la opción -D la añade a package.json pero como dependencia de desarrollo).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;index-html&quot; tabindex=&quot;-1&quot;&gt;index.html&lt;/h4&gt;
&lt;p&gt;Simplemente tiene el &amp;lt;div&amp;gt; &lt;em&gt;app&lt;/em&gt; que es el que contendrá la aplicación.&lt;/p&gt;
&lt;h4 id=&quot;main-js&quot; tabindex=&quot;-1&quot;&gt;main.js&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { createApp } from &#39;vue&#39;
import App from &#39;./App.vue&#39;
import &#39;./assets/main.css&#39;

createApp(App).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es el fichero JS principal. Importa la utilidad &lt;em&gt;createApp&lt;/em&gt; de la librería &lt;em&gt;Vue&lt;/em&gt; y el componente &lt;em&gt;App.vue&lt;/em&gt;. Crea la instancia de Vue con el componente definido en &lt;em&gt;App.vue&lt;/em&gt; y lo renderiza en el elemento &lt;code&gt;_#app_.&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;app-vue&quot; tabindex=&quot;-1&quot;&gt;App.vue&lt;/h4&gt;
&lt;p&gt;Es el componente raíz de la aplicación, el que contiene el &lt;em&gt;layout&lt;/em&gt; de la página. Se trata de un &lt;em&gt;SFC (Single File Component)&lt;/em&gt; y lo que contiene dentro de la etiqueta &lt;em&gt;&amp;lt;template&amp;gt;&lt;/em&gt; es lo que se renderizará en el div &lt;em&gt;app&lt;/em&gt; que hay en &lt;em&gt;index.html&lt;/em&gt;. Si contiene algún otro componente se indica aquí dónde renderizarlo (en este caso &amp;lt;HelloWorld&amp;gt; y &amp;lt;TheWelcome&amp;gt;).&lt;/p&gt;
&lt;p&gt;En el siguiente apartado explicaremos qué es un &lt;em&gt;SFC&lt;/em&gt; y qué partes lo forman. De momento veamos qué contiene cada sección:&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;template&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;header&amp;gt;
    &amp;lt;img alt=&amp;quot;Vue logo&amp;quot; class=&amp;quot;logo&amp;quot; src=&amp;quot;./assets/logo.svg&amp;quot; width=&amp;quot;125&amp;quot; height=&amp;quot;125&amp;quot; /&amp;gt;

    &amp;lt;div class=&amp;quot;wrapper&amp;quot;&amp;gt;
      &amp;lt;HelloWorld msg=&amp;quot;You did it!&amp;quot; /&amp;gt;
    &amp;lt;/div&amp;gt;
  &amp;lt;/header&amp;gt;

  &amp;lt;main&amp;gt;
    &amp;lt;TheWelcome /&amp;gt;
  &amp;lt;/main&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muestra la imagen del logo (las imágenes y otros ficheros como ficheros .css se guardan dentro de &lt;strong&gt;/src/assets/&lt;/strong&gt;) y los subcomponentes &lt;em&gt;HelloWorld&lt;/em&gt; y &lt;em&gt;TheWelcome&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script setup&amp;gt;
import HelloWorld from &#39;./components/HelloWorld.vue&#39;
import TheWelcome from &#39;./components/TheWelcome.vue&#39;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que hace es importar los componentes que se utilizan en el template. Su sintaxis es de &lt;em&gt;Composition API&lt;/em&gt;. En sintaxis de &lt;em&gt;Options API&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
import HelloWorld from &#39;./components/HelloWorld.vue&#39;
import TheWelcome from &#39;./components/TheWelcome.vue&#39;

export default {
  components: {
    HelloWorld,
    TheWelcome
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En esta sintaxis siempre se exporta un objeto con las opciones del componente. En este caso la opción &lt;em&gt;components&lt;/em&gt; donde se registran los componentes que hemos importado.&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;style&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Aquí se definen los estilos de este componente. Como la etiqueta SÍ tiene el atributo &lt;em&gt;scoped&lt;/em&gt; (&lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt;) significa que los estilos aquí definidos se aplicarán SÓLO a este componente, y a sus subcomponentes.&lt;/p&gt;
&lt;h4 id=&quot;components-hello-world-vue&quot; tabindex=&quot;-1&quot;&gt;components/HelloWorld.vue&lt;/h4&gt;
&lt;p&gt;Es el componente que muestra el texto que aparece bajo la imagen. Recibe como parámetro el título a mostrar. Veamos qué contiene cada sección:&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;template&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;greetings&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;green&amp;quot;&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
    &amp;lt;h3&amp;gt;
      You’ve successfully created a project with
      &amp;lt;a href=&amp;quot;https://vitejs.dev/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot;&amp;gt;Vite&amp;lt;/a&amp;gt; +
      &amp;lt;a href=&amp;quot;https://vuejs.org/&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noopener&amp;quot;&amp;gt;Vue 3&amp;lt;/a&amp;gt;.
    &amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Muestra el &lt;em&gt;msg&lt;/em&gt; recibido como parámetro y varios apartados con listas.&lt;/p&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;script&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script setup&amp;gt;
defineProps({
  msg: {
    type: String,
    required: true
  }
})
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recibe el parámetro &lt;em&gt;msg&lt;/em&gt; que es de tipo String. En sintaxis &lt;strong&gt;&lt;em&gt;Options API&lt;/em&gt;&lt;/strong&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script&amp;gt;
export default {
  name: &#39;HelloWorld&#39;,
  props: {
    msg: {
      type: String,
      required: true
    }
  }
}
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sección &lt;strong&gt;&lt;em&gt;style&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;También tiene el atributo &lt;em&gt;scoped&lt;/em&gt; (&lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt;) por lo que los estilos aquí definidos se aplicarán sólo a este componente.&lt;/p&gt;
&lt;h3 id=&quot;em-build-and-deploy-em-de-nuestra-aplicacion&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Build and Deploy&lt;/em&gt; de nuestra aplicación&lt;/h3&gt;
&lt;p&gt;Normalmente trabajaremos con algún gestor de versiones como &lt;em&gt;git&lt;/em&gt;. Para subir nuestro proyecto al repositorio lo creamos (en &lt;em&gt;GitHub&lt;/em&gt;, &lt;em&gt;GitLab&lt;/em&gt; o donde queramos) y ejecutamos desde la carpeta del proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;git init
git add .
git remote add origin https://github.com/mi-usuario/mi-proyecto
git commit -m &amp;quot;Primer commit&amp;quot;
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando nuestra aplicación esté lista para subir a producción ejecutaremos el script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando genera los JS y CSS para subir a producción dentro de la carpeta &lt;em&gt;dist&lt;/em&gt;. El contenido de esta carpeta es lo único que debemos subir a nuestro servidor de producción.&lt;/p&gt;
&lt;h2 id=&quot;los-ficheros-sfc-em-single-file-component-em&quot; tabindex=&quot;-1&quot;&gt;Los ficheros SFC (&lt;em&gt;Single File Component&lt;/em&gt;)&lt;/h2&gt;
&lt;p&gt;Guardar los componentes en ficheros &lt;code&gt;.js&lt;/code&gt; como hicimos en el tema anterior genera varios problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El HTML del template está en ese fichero en medio del JS lo que lo hace menos legible y el editor no lo resalta adecuadamente (ya que espera encontrar código JS no HTML)&lt;/li&gt;
&lt;li&gt;El HTML y el JS del componente están juntos pero no su CSS&lt;/li&gt;
&lt;li&gt;No podemos usar fácilmente herramientas para convertir SCSS a CSS, ES2015 a ES5, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto eso puede ser adecuado para proyectos muy pequeños pero no lo es cuando estos empiezan a crecer.&lt;/p&gt;
&lt;p&gt;La solución es guardar cada componente en un único fichero (SFC), que tendrá extensión &lt;strong&gt;.vue&lt;/strong&gt;. Estos ficheros contienen 3 secciones diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;lt;template&amp;gt;: contiene todo el HTML del componente&lt;/li&gt;
&lt;li&gt;&amp;lt;script&amp;gt;: con el JS del mismo&lt;/li&gt;
&lt;li&gt;&amp;lt;style&amp;gt;: donde pondremos el CSS del componente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque esto va contra la norma de tener el HTML, JS y CSS en ficheros separados en realidad sí están separados en diferentes secciones y tenemos la ventaja de tener en un único fichero todo lo que necesita el componente.&lt;/p&gt;
&lt;p&gt;La mayoría de editores soportan estos ficheros instalándoles algún plugin, (como &lt;em&gt;Vue-Oficial&lt;/em&gt; para Visual Studio Code) por lo que el resaltado de las diferentes partes es correcto. Además &lt;strong&gt;Vite&lt;/strong&gt; nos permite usar ES2015 o posterior y los preprocesadores más comunes (SASS, Pug/Jade, Stylus, ...) y ya se se traducirá automáticamente el código a ES5, HTML5 y CSS3.&lt;/p&gt;
&lt;h3 id=&quot;secciones-de-un-single-file-component&quot; tabindex=&quot;-1&quot;&gt;Secciones de un Single File Component&lt;/h3&gt;
&lt;p&gt;Veamos en detalle cada una de las secciones del SFC.&lt;/p&gt;
&lt;h4 id=&quot;and-lt-template-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;template&amp;gt;&lt;/h4&gt;
&lt;p&gt;Aquí incluiremos el HTML que sustituirá a la etiqueta del componente. Recuerda que en las versiones anteriores a Vue3 dentro sólo puede haber un único elemento HTML (si queremos poner más de uno los incluiremos en otro que los englobe).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;div class=&amp;quot;greetings&amp;quot;&amp;gt;
    &amp;lt;h1 class=&amp;quot;green&amp;quot;&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
    &amp;lt;h3&amp;gt;
      You’ve successfully created a project with
      &amp;lt;a href=&amp;quot;https://vitejs.dev/&amp;quot;&amp;gt;Vite&amp;lt;/a&amp;gt; +
      &amp;lt;a href=&amp;quot;https://vuejs.org/&amp;quot;&amp;gt;Vue 3&amp;lt;/a&amp;gt;.
    &amp;lt;/h3&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el código HTML a incluir en el template es muy largo podemos ponerlo en un fichero externo y vincularlo en el template, así nuestro SFC queda más pequeño y legible:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template src=&amp;quot;./myComp.html&amp;quot;&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Respecto al lenguaje, podemos usar HTML (la opción por defecto) o &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PUG&lt;/a&gt; que es una forma sencilla de escribir HTML. Lo indicamos como atributo de &amp;lt;template&amp;gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;template lang=&amp;quot;pug&amp;quot;&amp;gt;
div.greetings
  h1.green {{ msg }}
  h3
    | You’ve successfully created a project with 
    a(href=&amp;quot;https://vitejs.dev/&amp;quot;) Vite
    |  +
    a(href=&amp;quot;https://vuejs.org/&amp;quot;) Vue 3

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;and-lt-script-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;script&amp;gt;&lt;/h4&gt;
&lt;p&gt;Aquí definimos y exportamos el componente, que será un objeto con diferentes propiedades. Si utiliza subcomponentes hay que importarlos antes de definir el objeto y registrarlos dentro de este.&lt;/p&gt;
&lt;p&gt;Entre las propiedades que puede tener el objeto están:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt;: el nombre del componente. Es recomendable ponerlo, aunque sólo es obligatorio en caso de componentes recursivos. Es el nombre con el que se referenciará al componente en la consola del navegador usando las &lt;em&gt;Dev tools&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;components&lt;/strong&gt;: aquí registramos componentes hijos que queramos usar en el &lt;em&gt;template&lt;/em&gt; de este componente (debemos haber importado previamente los ficheros &lt;em&gt;.vue&lt;/em&gt; que los contienen). En el &lt;em&gt;template&lt;/em&gt; usaremos como etiqueta el nombre con que lo registramos aquí&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;props&lt;/strong&gt;: donde registramos los parámetros que nos pasa el componente padre como atributos de la etiqueta que renderiza este componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;data()&lt;/strong&gt;: función que devuelve un objeto con todas las variables locales del componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;methods&lt;/strong&gt;: objeto con los métodos del componente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;computed&lt;/strong&gt;: aquí pondremos las variables calculadas del componente. Lo veremos en detalle en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/06-profundizando.html#computed&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;created()&lt;/strong&gt;, &lt;strong&gt;mounted()&lt;/strong&gt;, ...: funciones &lt;em&gt;hook&lt;/em&gt; que se ejecutan al crearse el componente, al montarse, ... Aquí pondremos el código que queremos que se ejecute al cargar un componente, como pedir a la BBDD los datos que necesita. Veremos los diferentes &lt;em&gt;hooks&lt;/em&gt; en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/06-profundizando.html#ciclo-de-vida-del-componente&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;watch&lt;/strong&gt;: si queremos observar manualmente cambios en alguna variable y ejecutar código como respuesta a ellos (recuerda que Vue ya se encarga de actualizar la vista al cambiar las variables y viceversa). Lo veremos en detalle en la &lt;a href=&quot;https://cipfpbatoi.github.io/materials/daw/dwc/02-vue/06-profundizando.html#watchers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;unidad 6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;and-lt-style-and-gt&quot; tabindex=&quot;-1&quot;&gt;&amp;lt;style&amp;gt;&lt;/h4&gt;
&lt;p&gt;Aquí pondremos estilos CSS que se aplicarán al componente. Podemos usar CSS, SASS o &lt;a href=&quot;https://postcss.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PostCSS&lt;/a&gt;. Si queremos importar ficheros de estilo con &lt;code&gt;@import&lt;/code&gt; deberíamos guardarlos dentro de la carpeta &lt;em&gt;assets&lt;/em&gt; de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Si la etiqueta incluye el atributo &lt;em&gt;&lt;strong&gt;scoped&lt;/strong&gt;&lt;/em&gt; estos estilos se aplicarán únicamente a este componente (y sus descendientes) y no a todos los componentes de nuestra aplicación. Si tenemos estilos que queremos que se apliquen a toda la aplicación y otros que son sólo para el componente y sus descendientes pondremos 2 etiquetas &amp;lt;style&amp;gt;, una sin el atributo &lt;em&gt;scoped&lt;/em&gt; y otra con él.&lt;/p&gt;
&lt;p&gt;La forma más común de asignar estilos a elementos es usando clases. Para conseguir que su estilo cambie fácilmente podemos asignar al elemento clases dinámicas que hagan referencia a variables del componente. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;template&amp;gt;
  &amp;lt;p :class=&amp;quot;[decoration, {weight: isBold}]&amp;quot;&amp;gt;Hi!&amp;lt;/p&amp;gt;
&amp;lt;/template&amp;gt;

&amp;lt;script&amp;gt;
export default {
  data() {
    return {
      decoration: &#39;underline&#39;,
      isBold: true
    }
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;style lang=&amp;quot;css&amp;quot;&amp;gt;
  .underline { text-decoration: underline; }
  .weight { font-weight: bold; }
&amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El párrafo tendrá la clase indicada en la variable &lt;code&gt;decoration&lt;/code&gt; (en este caso &lt;em&gt;underline&lt;/em&gt;) y además como el valor de &lt;code&gt;isBold&lt;/code&gt; es verdadero tendrá la clase &lt;em&gt;weight&lt;/em&gt;. Hacer que cambien las clases del elemento es tan sencillo como cambiar el valor de las variables.&lt;/p&gt;
&lt;p&gt;Podemos ver las diferentes maneras de asignar clases a los elementos HTML en la &lt;a href=&quot;https://vuejs.org/guide/essentials/class-and-style.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Igual que vimos en la etiqueta &amp;lt;template&amp;gt;, si el código de los estilos es demasiado largo podemos ponerlo en un fichero externo que vinculamos a la etiqueta con el atributo &lt;em&gt;src&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;custom-blocks&quot; tabindex=&quot;-1&quot;&gt;Custom blocks&lt;/h4&gt;
&lt;p&gt;Además de estos 3 bloques un SFC puede tener otros bloques definidos por el programador para, por ejemplo, incluir la documentación del componente o sus test unitarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;custom1 src=&amp;quot;./unit-test.js&amp;quot;&amp;gt;
    Aquí podríamos incluir los test unitarios del proyecto
&amp;lt;/custom1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;anadir-nuevos-paquetes-y-plugins&quot; tabindex=&quot;-1&quot;&gt;Añadir nuevos paquetes y plugins&lt;/h2&gt;
&lt;p&gt;Si queremos usar un nuevo paquete en nuestra aplicación lo instalaremos con &lt;em&gt;npm&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install nombre-paquete
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando además de instalar el paquete en &lt;em&gt;node-modules&lt;/em&gt; lo añade a las dependencias del &lt;em&gt;package.json&lt;/em&gt;. La opción &lt;strong&gt;&lt;code&gt;--save&lt;/code&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/strong&gt; lo añadirá como dependencia de producción y &lt;strong&gt;&lt;code&gt;--dev&lt;/code&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;code&gt;-D&lt;/code&gt;&lt;/strong&gt; como dependencia de desarrollo. Si no ponemos nada se añade como una dependencia de producción. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -S axios
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para usarlo en nuestros componentes debemos importarlo y registrarlo tal y como se indique en su documentación. Lo normal es hacerlo en el &lt;strong&gt;&lt;em&gt;main.js&lt;/em&gt;&lt;/strong&gt; (o en algún fichero JS que importemos en &lt;em&gt;main.js&lt;/em&gt; como en el caso de los plugins) si queremos poder usarlo en todos los componentes.&lt;/p&gt;
&lt;p&gt;Si el paquete que queremos instalar se encuentra como plugin el proceso es más sencillo ya que sólo es necesario usar &lt;code&gt;app.use(myPlugin, { /* opciones opcionales */})&lt;/code&gt; en el fichero &lt;code&gt;main.js&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;bootstrap&quot; tabindex=&quot;-1&quot;&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;Simplemente lo instalaremos como una dependencia de producción y después lo añadimos al fichero &lt;code&gt;src/main.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import &amp;quot;bootstrap/dist/css/bootstrap.css&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuerda que siempre es conveniente importar &lt;em&gt;Bootstrap&lt;/em&gt; antes de importar nuestro propio CSS (antes de la línea &lt;code&gt;import &#39;./assets/main.css&#39;&lt;/code&gt;). Si necesitamos algún componente de &lt;em&gt;Bootstrap&lt;/em&gt; que utilice Javascript importaríamos también su javascript en el fichero &lt;em&gt;main.js&lt;/em&gt; pero en este caso después de montar la aplicación vue:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// src/main.js
import { createApp } from &#39;vue&#39;
import App from &#39;./App.vue&#39;

import &amp;quot;bootstrap/dist/css/bootstrap.css&amp;quot;
import &#39;./assets/main.css&#39;

createApp(App).mount(&#39;#app&#39;)

import &amp;quot;bootstrap/dist/js/bootstrap.js&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;iconos&quot; tabindex=&quot;-1&quot;&gt;Iconos&lt;/h4&gt;
&lt;p&gt;Para usar los iconos de &lt;em&gt;Bootstrap 5&lt;/em&gt; podemos instalar el paquete &lt;em&gt;bootstrap-icons&lt;/em&gt; o bien importarlos en el CSS desde su CDN, tal y como se explica en la &lt;a href=&quot;https://icons.getbootstrap.com/#install&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Bootstrap&lt;/a&gt;. Una vez hecho ya podemos incluir los iconos en etiquetas &lt;em&gt;&amp;lt;i&amp;gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si importamos el CSS incluiremos en el &lt;em&gt;&amp;lt;style&amp;gt;&lt;/em&gt; del componente &lt;strong&gt;App.vue&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;@import url(&amp;quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y donde queramos incluir el icono de la papelera, por ejemplo, incluimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;i class=&amp;quot;bi bi-trash&amp;quot;&amp;gt;&amp;lt;/i&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos usar otras librerías de iconos como &lt;em&gt;Font Awesome&lt;/em&gt; o &lt;em&gt;Material Icons&lt;/em&gt; simplemente importaremos su CSS en el fichero &lt;em&gt;App.vue&lt;/em&gt; y usaremos las clases que nos proporcionen. Para &lt;em&gt;Material Icons&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;@import url(&#39;https://fonts.googleapis.com/icon?family=Material+Icons&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y su uso sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span class=&amp;quot;material-icons&amp;quot;&amp;gt;delete&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Respecto a los componentes de &lt;em&gt;Bootstrap&lt;/em&gt;, para que funcionen sólo tenemos que usar los atributos &lt;code&gt;data-bs-&lt;/code&gt; (recuerda que muchos de estos componenetes necesitan su Javascript por lo que deberemos importarlo como se ha explicado antes). Por ejemplo para hacer un botón colapsable haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button 
  class=&amp;quot;btn btn-primary&amp;quot; 
  data-bs-target=&amp;quot;#collapseTarget&amp;quot; 
  data-bs-toggle=&amp;quot;collapse&amp;quot;&amp;gt;
  Bootstrap collapse
&amp;lt;/button&amp;gt;
&amp;lt;div class=&amp;quot;collapse py-2&amp;quot; id=&amp;quot;collapseTarget&amp;quot;&amp;gt;
  This is the toggle-able content!
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En lugar de usar atributos &lt;em&gt;data-bs-&lt;/em&gt; podemos &lt;em&gt;envolver&lt;/em&gt; los componentes bootstrap en componentes Vue como se explica en muchas páginas, como &lt;a href=&quot;https://stackoverflow.com/questions/65547199/using-bootstrap-5-with-vue-3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Using Bootstrap 5 with Vue 3&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;crear-un-nuevo-componente&quot; tabindex=&quot;-1&quot;&gt;Crear un nuevo componente&lt;/h2&gt;
&lt;p&gt;Creamos un nuevo fichero en &lt;strong&gt;/src/components&lt;/strong&gt; (o en alguna subcarpeta dentro) con extensión &lt;em&gt;.vue&lt;/em&gt;. Donde queramos usar ese componente debemos importarlo y registrarlo como ya hemos visto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import CompName from &#39;./CompName.vue&#39;

export default {
  ...
  components: {
    &#39;comp-name&#39;: CompName
  }
  ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ya podemos incluir el componente en el HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;comp-name ...&amp;gt; ... &amp;lt;/comp-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;depurar-el-codigo-en-la-consola&quot; tabindex=&quot;-1&quot;&gt;Depurar el código en la consola&lt;/h2&gt;
&lt;p&gt;Podemos seguir depurando nuestro código, poniendo puntos de interrupción y usando todas las herramientas que nos proporciona la consola mientras estamos en modo de depuración (si hemos abierto la aplicación con &lt;code&gt;npm run dev&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Como estamos usando &lt;em&gt;Vite&lt;/em&gt; no se está ejecutando nuestro código directamente sino que se ha convertido al código que ejecuta el navegador, por eso en el depurador aparecen varios ficheros y el que usaremos para depurar es el que pone &lt;em&gt;(mapeado)&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;![Depurar en la consola](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/console-vite.png)&lt;/p&gt;
&lt;p&gt;Recordad que si hemos instalado las &lt;strong&gt;Vue DevTools&lt;/strong&gt; tenemos una nueva pestaña en la consola desde la que podemos ver todos nuestros componentes con sus propiedades y datos:&lt;/p&gt;
&lt;p&gt;![Vue DevTools](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/console-vue_devtools.png)&lt;/p&gt;
&lt;h1 id=&quot;aplicacion-de-ejemplo&quot; tabindex=&quot;-1&quot;&gt;Aplicación de ejemplo&lt;/h1&gt;
&lt;p&gt;Recordemos que la aplicación que estamos desarrollando tiene los componentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;todo-list: lista de tareas a hacer. Cada item de la lista es un componente &lt;em&gt;todo-item&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;todo-item: cada elemento de la lista de tareas a hacer&lt;/li&gt;
&lt;li&gt;todo-add: formulario para añadir una nueva tarea&lt;/li&gt;
&lt;li&gt;todo-del-all: botón para eliminar todas las tareas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para transformar esto en SFC simplemente crearemos un fichero para cada uno de estos componentes. Nuestro anterior &lt;em&gt;index.html&lt;/em&gt; será el &amp;lt;template&amp;gt; del componente principal &lt;strong&gt;App.vue&lt;/strong&gt;, que en un sección &amp;lt;script&amp;gt; deberá importar y registrar cada uno de los componentes usados en el &lt;em&gt;template&lt;/em&gt; (&lt;em&gt;todo-list&lt;/em&gt;, &lt;em&gt;todo-add&lt;/em&gt; y &lt;em&gt;todo-del-all&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Solución:&lt;/p&gt;
&lt;iframe src=&quot;https://codesandbox.io/embed/cranky-mclean-f6xwo3?fontsize=14&amp;hidenavigation=1&amp;theme=dark&quot; style=&quot;width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;&quot; title=&quot;cranky-mclean-f6xwo3&quot; allow=&quot;accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking&quot; sandbox=&quot;allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts&quot;&gt;&lt;/iframe&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/03-1-sfc/" >
        </entry>
        <entry>
            <title>
                03-componentes
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/03-componentes/</id>
            <content type="html">
                &lt;h1 id=&quot;componentes-en-vue&quot; tabindex=&quot;-1&quot;&gt;Componentes en Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#componentes-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Componentes en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#dividir-la-aplicaci%C3%B3n-en-componentes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Dividir la aplicación en componentes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#separar-los-componentes-en-ficheros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Separar los componentes en ficheros&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#par%C3%A1metros-props&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Parámetros: &lt;em&gt;props&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-de-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo de aplicación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;El sistema de componentes es un concepto importante en Vue y en cualquier framework moderno. En lugar de separar nuestra aplicación en ficheros según el tipo de información que contienen (ficheros html, css o js) es más lógico separarla según su funcionalidad. Una página web muestra una UI donde se pueden distinguir diferentes partes. En el siguiente ejemplo tenemos:&lt;/p&gt;
&lt;p&gt;![Ejemplo de página web](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/borsaTreball.png)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un menú que es una lista que contiene
&lt;ul&gt;
&lt;li&gt;(repetido) un elemento de menú, cada uno formado por un logo y un texto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;una barra de título, con un icono y 2 textos&lt;/li&gt;
&lt;li&gt;una tabla con la información a mostrar, formada por
&lt;ul&gt;
&lt;li&gt;un elemento para filtrar la información formado por un input y un botón de buscar&lt;/li&gt;
&lt;li&gt;un botón para añadir nuevos elementos a la tabla&lt;/li&gt;
&lt;li&gt;una cabecera con los nombres de cada campo&lt;/li&gt;
&lt;li&gt;(repetido) una fila para mostrar cada elemento de información, con botones para realizar diferentes acciones&lt;/li&gt;
&lt;li&gt;un pie de tabla con información sobre los datos mostrados&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;un pie de página&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pues estos elementos podrían constituir diferentes componentes: nuestras aplicaciones estarán compuestas de pequeños componentes independientes y reusables en diferentes partes de nuestra aplicación o en otras aplicaciones (podemos usar el elemento de buscar en otras páginas de nuestra aplicación o incluso en otras aplicaciones). También es habitual que un componente contenga otros subcomponentes, estableciéndose relaciones padre-hijo (por ejemplo el componente tabla tiene como subcomponentes el buscador y cada una de las filas, y el componente fila tendrá un subcomponente por cada botón que queramos poner en ella).&lt;/p&gt;
&lt;p&gt;Para saber qué debe ser un componente y que no, podemos considerar un componente como un elemento que tiene entidad propia, tanto a nivel funcional como visual, es decir, que puede ponerse en el lugar que queramos de la aplicación y se verá y funcionará correctamente. Además es algo que es muy posible que pueda aparecer en más de un lugar de la aplicación. En definitiva un componente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es una parte de la UI&lt;/li&gt;
&lt;li&gt;debe poder reutilizarse y combinarse con otros componentes para formar componentes mayores&lt;/li&gt;
&lt;li&gt;son objetos JS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El componente es un objeto con una parte de &lt;strong&gt;HTML&lt;/strong&gt; donde definimos su estructura y una parte &lt;strong&gt;JS&lt;/strong&gt; que le da su funcionalidad. Cuando trabajemos con &lt;em&gt;Single File Components (SFC)&lt;/em&gt; también se incluirá una parte &lt;strong&gt;CSS&lt;/strong&gt; para establecer su apariencia.&lt;/p&gt;
&lt;p&gt;Separar nuestra aplicación en componentes nos va a ofrecer muchas ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;encapsulamos el código de la aplicación en elementos más sencillos&lt;/li&gt;
&lt;li&gt;facilita la reutilización de código&lt;/li&gt;
&lt;li&gt;evita tener código repetido&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aunque también tiene sus inconvenientes: habrá que geationar la comunicación entre componentes.&lt;/p&gt;
&lt;p&gt;El primer paso a la hora de hacer una aplicación debe ser analizar qué componentes tendrá. Para ello podemos hacer un &lt;em&gt;mockup&lt;/em&gt; de la aplicación donde se vean los diferentes elementos que la componen y cómo se relacionan entre ellos. A partir de ahí podemos ir creando los componentes necesarios.&lt;/p&gt;
&lt;p&gt;En definitiva nuestra aplicación será como un árbol de componentes con la instancia principal de Vue como raíz.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://vuejs.org/assets/components.B1JZbf0_.png&quot; alt=&quot;Árbol de componentes&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;dividir-la-aplicacion-en-componentes&quot; tabindex=&quot;-1&quot;&gt;Dividir la aplicación en componentes&lt;/h2&gt;
&lt;p&gt;Un componente se crea con &lt;code&gt;app.component&lt;/code&gt; al que le pasamos 2 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el nombre del componente&lt;/li&gt;
&lt;li&gt;el objeto con sus opciones (&lt;code&gt;data&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, …). Además tendrá una opción &lt;strong&gt;&lt;code&gt;template&lt;/code&gt;&lt;/strong&gt; con el código HTML que se insertará donde pongamos el componente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo, vamos a crear un componente para mostrar cada elemento de la lista de tareas a hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const app = Vue.createApp({
  ...
})

app.component(&#39;TodoItem&#39;, {
  template: `
    &amp;lt;li&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;elem.done&amp;quot;&amp;gt;
      &amp;lt;del v-if=&amp;quot;elem.done&amp;quot;&amp;gt;
        { { elem.title }}
      &amp;lt;/del&amp;gt;
      &amp;lt;span v-else&amp;gt;
        { { elem.title }}
      &amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;`,
  data: ()=&amp;gt;({
    elem: { title: &#39;Cosa a hacer&#39;, done: true }
  })
})
...
app.mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: no se puede montar la aplicación hasta después de haber definido los componentes.&lt;/p&gt;
&lt;p&gt;Ahora ya podemos usar el componente en nuestro HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resultado:&lt;/strong&gt;&lt;/p&gt;
&lt;li&gt;
 &lt;input type=&quot;checkbox&quot; v-model=&quot;elem.done&quot; /&gt;
 &lt;span&gt;Cosa a hacer&lt;/span&gt;
&lt;/li&gt;
&lt;/blockquote&gt;
&lt;p&gt;Podemos utilizar la etiqueta tal (&amp;lt;todo-item&amp;gt;) o usar una etiqueta estándar y poner la nuestra como valor de su atributo &lt;em&gt;is&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;li is=&amp;quot;todo-item&amp;quot;&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma evitamos errores de validación de HTML ya que algunos elementos sólo pueden tener determinados elementos hijos (por ejemplo los hijos de un &lt;/p&gt;&lt;ul&gt; deben ser &lt;li&gt; o los de un &lt;tr&gt; deben ser &lt;td&gt;).&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ATENCIÓN&lt;/strong&gt;: El nombre de un componente puede estar en &lt;em&gt;PascalCase&lt;/em&gt; (MyComponentName) o en &lt;em&gt;kebab-case&lt;/em&gt; (my-component-name). Lo recomendado es que en Javascript lo pongamos en &lt;em&gt;PascalCase&lt;/em&gt; y en el HTML en &lt;em&gt;kebab-case&lt;/em&gt; (&lt;em&gt;Vue&lt;/em&gt; hace la traducción automáticamente). Se recomienda que el nombre de un componente tenga al menos 2 palabras para evitar que pueda llamarse como alguna futura etiqueta HTML.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: En versiones anteriores de Vue la propiedad &lt;em&gt;template&lt;/em&gt; sólo podía tener un nodo raíz. En Vue3 esta limitación no existe aunque en &lt;em&gt;dev-tools&lt;/em&gt; se depura más fácilmente si solo hay uno. Por ello, si tenemos más de 1 nodo los envolvemos en otra etiqueta (normalmente un &lt;/p&gt;&lt;div&gt;):&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// MAL en Vue2
  template: `&amp;lt;input id=&amp;quot;query&amp;quot;&amp;gt;
             &amp;lt;button id=&amp;quot;search&amp;quot;&amp;gt;Buscar&amp;lt;/button&amp;gt;`,

// BIEN en Vue2
  template: `&amp;lt;div&amp;gt;
               &amp;lt;input id=&amp;quot;query&amp;quot;&amp;gt;
               &amp;lt;button id=&amp;quot;search&amp;quot;&amp;gt;Buscar&amp;lt;/button&amp;gt;
             &amp;lt;/div&amp;gt;`,
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;separar-los-componentes-en-ficheros&quot; tabindex=&quot;-1&quot;&gt;Separar los componentes en ficheros&lt;/h2&gt;
&lt;p&gt;Declarar los componentes con &lt;code&gt;app.component()&lt;/code&gt; en el mismo fichero JS de la instancia genera varios problemas, especialmente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los componentes así declarados son globales a la aplicación por lo que sus nombres deben ser únicos&lt;/li&gt;
&lt;li&gt;Nuestro fichero crece rápidamente y nos encontramos con código &lt;em&gt;spaguetti&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto eso puede ser adecuado para proyectos muy pequeños pero no lo es cuando estos empiezan a crecer.&lt;/p&gt;
&lt;p&gt;La solución es guardar cada componente en un único fichero javascript (con extensión &lt;code&gt;.js&lt;/code&gt;), aunque cuando usemos &lt;em&gt;SFC&lt;/em&gt; usaremos ficheros &lt;code&gt;.vue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En el fichero exportaremos un objeto con las propiedades del componente (&lt;em&gt;data&lt;/em&gt;, &lt;em&gt;methods&lt;/em&gt;, ...), además de la propiedad &lt;em&gt;template&lt;/em&gt;. También podemos añadir una propiedad &lt;em&gt;name&lt;/em&gt; donde indicar el nombre del componente.&lt;/p&gt;
&lt;p&gt;Por ejemplo, vamos a crear un componente para el botón de eliminar todas las tareas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero DelAllItems.js
export default {
  template: `
    &amp;lt;button @click=&amp;quot;delAll&amp;quot;&amp;gt;Vacía lista&amp;lt;/button&amp;gt;
  `,
  methods: {
    delAll() {
      if (confirm(&#39;Vas a borrar la lista de tareas&#39;)) {
        this.todos.splice(0)
      }
    }
  },
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder usar un componente, en donde queramos usarlo (otro componente o la instancia raíz) debemos hacer 2 cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importar el fichero&lt;/li&gt;
&lt;li&gt;registrar el componente, lo que se hace en una opción llamada &lt;code&gt;components&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero main.js
import DelAllItems from &#39;./DellAllItems.js&#39;

Vue.createApp({
  components: {
    DelAllItems,
  },
  data() {
    ...
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora ya podemos usar el componente en nuestro HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;...
    &amp;lt;/form&amp;gt;
    &amp;lt;del-all-items&amp;gt;&amp;lt;/del-all-items&amp;gt;
  &amp;lt;/div&amp;gt;
  &amp;lt;script type=&amp;quot;module&amp;quot; src=&amp;quot;main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fíjate que hay que declarar el fichero &lt;em&gt;main.js&lt;/em&gt; como &lt;code&gt;module&lt;/code&gt; para que nos permita importar ficheros en él.&lt;/p&gt;
&lt;p&gt;El navegador sustituirá la etiqueta del componente (&amp;lt;del-all-items&amp;gt;) por su &lt;em&gt;template&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-11&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;parametros-em-props-em&quot; tabindex=&quot;-1&quot;&gt;Parámetros: &lt;em&gt;props&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Podemos pasar parámetros a un componente añadiendo atributos a su etiqueta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item :todo=&amp;quot;{ title: &#39;Nueva cosa&#39;, done: false }&amp;quot;&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: recuerda que si no ponemos el &lt;em&gt;v-bind&lt;/em&gt; estaríamos pasando texto y no el valor de una variable (en este caso un objeto).&lt;/p&gt;
&lt;p&gt;El parámetro lo recibimos en el componente en una opción llamada &lt;code&gt;props&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;app.component(&#39;todo-item&#39;, {
  props: {
    todo: Object
  },
  template: `
    &amp;lt;li&amp;gt;
      &amp;lt;input type=&amp;quot;checkbox&amp;quot; v-model=&amp;quot;todo.done&amp;quot;&amp;gt;
      ...`
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las &lt;em&gt;props&lt;/em&gt; son el equivalente a los parámetros que recibe una función.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-12&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Se pueden declarar las &lt;em&gt;props&lt;/em&gt; recibidas como un array de string (&lt;code&gt;props: [&#39;todo&#39;]&lt;/code&gt;), aunque es mejor declararlas como un objeto porque nos permitirá hacer ciertas comprobaciones (en el ejemplo anterior que se recibe un &lt;em&gt;Object&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: si un parámetro tiene más de 1 palabra en el HTML lo pondremos en forma kebab-case (ej.: &lt;code&gt;&amp;lt;todo-item :todo-elem=...&amp;gt;&lt;/code&gt;) pero en el Javascript irá en camelCase (&lt;code&gt;app.component(&#39;todo-item&#39;,{ props: [&#39;todoElem&#39;],...})&lt;/code&gt;). Vue hace la traducción automáticamente.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resultado:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
   &lt;input type=&quot;checkbox&quot; /&gt;
   &lt;span&gt;
     Nueva cosa a hacer
   &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;En nuestro caso queremos un componente &lt;em&gt;todo-item&lt;/em&gt; para cada elemento del array &lt;em&gt;todos&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item v-for=&amp;quot;item in todos&amp;quot; :key=&amp;quot;item.id&amp;quot; :todo=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Resultado:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
   &lt;input type=&quot;checkbox&quot; checked=&quot;&quot; /&gt;
   &lt;del&gt;
     Learn JavaScript
   &lt;/del&gt;
 &lt;/li&gt;
 &lt;li&gt;
   &lt;input type=&quot;checkbox&quot; /&gt;
   &lt;span&gt;
     Learn Vue
   &lt;/span&gt;
 &lt;/li&gt;
 ...
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: al usar &lt;code&gt;v-for&lt;/code&gt; en un componente debemos indicarle obligatoriamente en la propiedad &lt;code&gt;key&lt;/code&gt; la clave de cada elemento. Si no tuviera ninguna podemos usar como clave su índice en el array como vimos al hablar de &lt;em&gt;v-for&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;ul&amp;gt;
  &amp;lt;todo-item v-for=&amp;quot;(item, index) in todos&amp;quot; :key=&amp;quot;index&amp;quot; :todo=&amp;quot;item&amp;quot;&amp;gt;&amp;lt;/todo-item&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ejemplo-de-aplicacion&quot; tabindex=&quot;-1&quot;&gt;Ejemplo de aplicación&lt;/h2&gt;
&lt;p&gt;Para empezar a ver el uso de componentes vamos a seguir con la aplicación de la lista de cosas que hacer pero dividiéndola en componentes.&lt;/p&gt;
&lt;p&gt;La decisión de qué componentes crear es subjetiva pero en principio cuanto más descompongamos más posibilidades tendremos de reutilizar componentes. Nosotros haremos los siguientes componentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;todo-list: muestra la lista de tareas a realizar. Dentro tendrá:
&lt;ul&gt;
&lt;li&gt;todo-item: cada una de las tareas a hacer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;add-item: incluye el formulario para añadir una nueva tarea (el input y el botón)&lt;/li&gt;
&lt;li&gt;del-all: el botón para borrar toda la lista&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A continuación tienes la solución de cómo dividirla en componentes en un único fichero pero en su lugar lo que haremos es separar cada componente en su propio fichero.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: separar los componentes en ficheros que se importan donde vayan a usarse sólo funciona si abrimos la aplicación desde un servidor web, no desde local (sí &lt;em&gt;http://...&lt;/em&gt;, no &lt;em&gt;file://...&lt;/em&gt;). Si no tenéis ninguno podéis usar la extensión &lt;strong&gt;Live Server&lt;/strong&gt; de Visual Studio Code para ejecutar la aplicación.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: ahora nuestra aplicación ya no funciona porque los datos que se declaran en un componenete son locales al mismo y no son accesibles desde otros componentes. Para solucionar esto necesitamos un sistema de comunicación entre componentes que veremos en el siguiente apartado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Solución&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;wvqjJjY&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/wvqjJjY&quot;&gt;
  to-do app components&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;Pasos que he hecho&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creamos la instancia principal de Vue. No tiene &lt;em&gt;data&lt;/em&gt; ni &lt;em&gt;methods&lt;/em&gt; ni ningún otro elemento porque está todo en los componentes&lt;/li&gt;
&lt;li&gt;Creo el componente encargado de renderizar un elemento de la lista de tares, &lt;em&gt;todo-item&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;recibirá un objeto con la tarea a mostrar&lt;/li&gt;
&lt;li&gt;su template será el &lt;/li&gt;&lt;li&gt; que tenía en el HTML pero quitando el &lt;em&gt;v-for&lt;/em&gt; porque él sólo se encarga de mostrar 1 item&lt;/li&gt;
&lt;li&gt;el método para borrarlo al hacer doble click ya no puede funcionar porque el componente no tiene acceso al array de tareas. De momento sólo ponemos un &lt;em&gt;alert&lt;/em&gt; que nos diga que lo queremos borrar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creo el componente &lt;em&gt;add-item&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;su &lt;em&gt;template&lt;/em&gt; será el &amp;lt;input&amp;gt; y el &amp;lt;button&amp;gt; que teníamos en el HTML, pero como sólo puede haber un elemento en el template los incluimos dentro de un &lt;div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;no recibe ningún parámetro pero sí tiene una variable propia, &lt;em&gt;newTodo&lt;/em&gt;, que quitamos del componente principal para añadirla a este componente&lt;/li&gt;
&lt;li&gt;el método addTodo ya no funciona porque no tengo acceso al array de tareas así que de momento muestro un &lt;em&gt;alert&lt;/em&gt; con lo que querría añadir&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creo el componente &lt;em&gt;del-all&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;su &lt;em&gt;template&lt;/em&gt; es el botón&lt;/li&gt;
&lt;li&gt;ni recibe parámetros ni tiene variables propias&lt;/li&gt;
&lt;li&gt;con el método pasa lo mismo que en los otros casos así que simplemente muestro un &lt;em&gt;alert&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creo el componente que mostrará la lista: &lt;em&gt;todo-list&lt;/em&gt;.
&lt;ul&gt;
&lt;li&gt;Su &lt;em&gt;template&lt;/em&gt; es un div que incluye el título (que será una variable para poderlo reutilizar) y la lista con las tareas a mostrar. Cada una de ellas será un subcomponente llamado &lt;em&gt;todo-item&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;como parámetro recibirá el título de la lista como hemos indicado antes&lt;/li&gt;
&lt;li&gt;llama al subcomponente &lt;em&gt;todo-item&lt;/em&gt; para cada tarea (v-for) y le pasa la tarea que debe mostrar&lt;/li&gt;
&lt;li&gt;sus datos será el array de tareas&lt;/li&gt;
&lt;li&gt;Los métodos los dejamos tal cual aunque ahora no funcionan porque nadie los llama. Ya lo arreglaremos&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/li&gt;&lt;/ul&gt;
            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/03-componentes/" >
        </entry>
        <entry>
            <title>
                02-directivas
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/02-directivas/</id>
            <content type="html">
                &lt;h1 id=&quot;directivas-en-vue&quot; tabindex=&quot;-1&quot;&gt;Directivas en Vue&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#directivas-en-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Directivas en Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#directivas-b%C3%A1sicas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Directivas básicas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#condicionales-v-if&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Condicionales: v-if&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bucles-v-for&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bucles: v-for&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-v-on&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos: v-on&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#modificadores-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Modificadores de eventos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo-de-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo de aplicación&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-de-la-aplicaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución de la aplicación&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;directivas-basicas&quot; tabindex=&quot;-1&quot;&gt;Directivas básicas&lt;/h2&gt;
&lt;p&gt;Las directivas son atributos especiales que se ponen en las etiquetas HTML y que les dan cierta funcionalidad. Todas comienzan por &lt;strong&gt;v-&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Las más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-text&lt;/code&gt;: es equivalente a hacer una interpolación (&lt;strong&gt;{{ ... }}&lt;/strong&gt;). Muestra el valor en la etiqueta. Los dos ejemplos siguientes son equivalentes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p v-text=&amp;quot;mensaje&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ { mensaje }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-once&lt;/code&gt;: igual pero una vez renderizado no cambia lo mostrado en la vista aunque cambie el valor de la variable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-html&lt;/code&gt;: permite que el texto que se muestra contenga caracteres HTML que interpretará el navegador (al usar la interpolación las etiquetas HTML son escapadas). Internamente hace un &lt;code&gt;.innerHTML&lt;/code&gt; del elemento mientras que &lt;code&gt;v-text&lt;/code&gt; (y &lt;code&gt;{ {...}}&lt;/code&gt;) hacen un &lt;code&gt;.textContent&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;v-bind&lt;/code&gt;: para asignar el valor de una variable a un atributo de una etiqueta HTML (no entre la etiqueta y su cierre como hace la interpolación). Por ejemplo si tenemos la variable &lt;em&gt;estado&lt;/em&gt; cuyo valor es &lt;em&gt;error&lt;/em&gt; y queremos que un &lt;em&gt;span&lt;/em&gt; tenga como clase ese valor haremos:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span v-bind:class=&amp;quot;estado&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado será: &lt;code&gt;&amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&lt;/code&gt;. La directiva &lt;em&gt;v-bind:&lt;/em&gt; se puede abreviar simplemente como &lt;strong&gt;&lt;code&gt;:&lt;/code&gt;&lt;/strong&gt; (&lt;code&gt;&amp;lt;span :class=&amp;quot;estado&amp;quot;&amp;gt;&lt;/code&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v-model&lt;/code&gt;: permite enlazar un input a una variable (la hemos visto en el capítulo anterior). Tiene 3 modificadores útiles.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.lazy&lt;/code&gt;: em lugar de actualizar el valor al pulsar cada tecla (&lt;em&gt;onInput&lt;/em&gt;) lo hace al perder el foco (&lt;em&gt;onChange&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.number&lt;/code&gt;: convierte el contenido a Number&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.trim&lt;/code&gt;: elimina los espacios al principio y al final del texto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-if&lt;/code&gt;: renderiza o no el elemento que la contiene en función de una condición&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-show&lt;/code&gt;: similar al &lt;em&gt;v-if&lt;/em&gt; pero siempre renderiza el elemento (está en el DOM) y lo que hace es mostrarlo u ocultarlo (&lt;code&gt;display: none&lt;/code&gt;) en función de la condición. Es mejor si el elemento va a mostrarse y ocultarse a menudo porque no tiene que volver a renderizarlo cada vez&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-for&lt;/code&gt;: repite el elemento HTML que contiene esta etiqueta para cada elemento de un array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-on&lt;/code&gt;: le pone al elemento HTML un escuchador de eventos (ej &lt;code&gt;&amp;lt;button v-on:click=&amp;quot;pulsado&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;&lt;/code&gt;. La directiva &lt;code&gt;v-on:&lt;/code&gt; se puede abreviar como &lt;code&gt;@&lt;/code&gt;, por ejemplo &lt;code&gt;&amp;lt;button @click=&amp;quot;pulsado&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo que enlazamos en una directiva o una interpolación puede ser una variable o una expresión Javascript. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p&amp;gt;{ { name }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ { &#39;Cómo estás &#39; + name }}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;{ { name==&#39;root&#39;?&#39;Hola Administrador&#39;:&#39;Hola &#39; + name }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;condicionales-v-if&quot; tabindex=&quot;-1&quot;&gt;Condicionales: v-if&lt;/h2&gt;
&lt;p&gt;Esta directiva permite renderizar o no un elemento HTML en función de una variable o expresión.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/84jq5jbg/4/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;El checkbox está enlazado a la variable &lt;em&gt;marcado&lt;/em&gt; (a la que al inicio le hemos dado el valor true, por eso aparece marcado por defecto) y los párrafos se muestran o no en función del valor de dicha variable.&lt;/p&gt;
&lt;p&gt;La directiva &lt;code&gt;v-else&lt;/code&gt; es opcional (puede estar sólo el &lt;code&gt;v-if&lt;/code&gt;) pero si la ponemos el elemento con el &lt;code&gt;v-else&lt;/code&gt; debe ser el inmediatamente siguiente al del &lt;code&gt;v-if&lt;/code&gt; (su &lt;em&gt;nextElementSibling&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;NOTA: Los ejemplos de esta página son todos de Vue2. Recordad que en Vue3 es todo igual excepto la forma de crear la instancia Vue que sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const app = Vue.createApp({
  data() {
    return {
      marcado: true,
    }
  }
}).mount(&#39;#app&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se pueden enlazar varios &lt;em&gt;if&lt;/em&gt; &lt;em&gt;else&lt;/em&gt; con &lt;code&gt;v-else-if&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;div v-if=&amp;quot;type === &#39;A&#39;&amp;quot;&amp;gt;
  A
&amp;lt;/div&amp;gt;
&amp;lt;div v-else-if=&amp;quot;type === &#39;B&#39;&amp;quot;&amp;gt;
  B
&amp;lt;/div&amp;gt;
&amp;lt;div v-else-if=&amp;quot;type === &#39;C&#39;&amp;quot;&amp;gt;
  C
&amp;lt;/div&amp;gt;
&amp;lt;div v-else&amp;gt;
  Not A/B/C
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-6&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;bucles-v-for&quot; tabindex=&quot;-1&quot;&gt;Bucles: v-for&lt;/h2&gt;
&lt;p&gt;Esta directiva repite el elemento HTML en que se encuentra una vez por cada elemento del array al que se enlaza.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;ExvLZOz&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/ExvLZOz&quot;&gt;
  v-for&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;La directiva v-for recorre el array &lt;em&gt;todos&lt;/em&gt; y para cada elemento del array crea una etiqueta &amp;lt;li&amp;gt; y carga dicho elemento en la variable &lt;em&gt;elem&lt;/em&gt; a la que podemos acceder dentro del &amp;lt;li&amp;gt;.&lt;/p&gt;
&lt;p&gt;Además del elemento nos puede devolver su índice en el array: &lt;code&gt;v-for=&amp;quot;(elem, index) in todos&amp;quot; ...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Vue es más eficiente a la hora de renderizar si cada elemento que crea &lt;em&gt;v-for&lt;/em&gt; tiene su propia clave, lo que se consigue con el atributo &lt;em&gt;key&lt;/em&gt;. Podemos indicar como clave algún campo único del elemento o el índice:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;... v-for=&amp;quot;(item) in todos&amp;quot; :key=&amp;quot;item.id&amp;quot; ...&amp;gt;
o
&amp;lt;... v-for=&amp;quot;(item, index) in todos&amp;quot; :key=&amp;quot;index&amp;quot; ...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pasar una &lt;em&gt;key&lt;/em&gt; en cada &lt;em&gt;v-for&lt;/em&gt; es recomendable ahora pero será obligatorio al usarlo en componentes así que conviene usarlo siempre.&lt;/p&gt;
&lt;p&gt;También podemos usar &lt;code&gt;v-for&lt;/code&gt; para que se ejecute sobre un rango (como el típico &lt;code&gt;for (i=0; i&amp;lt;10; i++)&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;span v-for=&amp;quot;i in 10&amp;quot; :key=&amp;quot;i&amp;quot;&amp;gt;{{ i }}&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: No se recomienda usar &lt;code&gt;v-for&lt;/code&gt; y &lt;code&gt;v-if&lt;/code&gt; sobre el mismo elemento. Si se hace siempre se ejecuta primero el &lt;code&gt;v-if&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-7&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;eventos-v-on&quot; tabindex=&quot;-1&quot;&gt;Eventos: v-on&lt;/h2&gt;
&lt;p&gt;Esta directiva captura un evento y ejecuta un método como respuesta al mismo.&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;ExvLZGB&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/ExvLZGB&quot;&gt;
  v-for&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;El evento que queremos capturar se pone tras el carácter &lt;code&gt;:&lt;/code&gt; y se indica el método que se ejecutará.&lt;/p&gt;
&lt;p&gt;Fijaos en el método &lt;em&gt;delTodos()&lt;/em&gt; que para hacer referencia desde el objeto Vue a alguna variable o método se le antepone &lt;strong&gt;&lt;em&gt;this.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Se puede pasar un parámetro a la función escuchadora:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;button v-on:click=&amp;quot;pulsado(&#39;prueba&#39;)&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  pulsado(valor) {
    alert(valor);
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta directiva se usa mucho así que se puede abreviar con &lt;strong&gt;&lt;code&gt;@&lt;/code&gt;&lt;/strong&gt;. El código equivalente sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;button @click=&amp;quot;pulsado(&#39;prueba&#39;)&amp;quot;&amp;gt;Pulsa&amp;lt;/button&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;modificadores-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Modificadores de eventos&lt;/h3&gt;
&lt;p&gt;A un evento gestionado por una directiva &lt;em&gt;v-on&lt;/em&gt; podemos añadirle (separado por .) un modificador. Alguno de los más usados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.prevent&lt;/em&gt;&lt;/strong&gt;: equivale a hacer un preventDefault()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.stop&lt;/em&gt;&lt;/strong&gt;: como stopPropagation()&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.self&lt;/em&gt;&lt;/strong&gt;: sólo se lanza si el evento se produce en este elemento y no en alguno de sus hijos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;.once&lt;/em&gt;&lt;/strong&gt;: sólo se lanza la primera vez que se produce el evento (sería como hacer un &lt;em&gt;addEventListener&lt;/em&gt; y tras ejecutarse la primera vez hacer un &lt;em&gt;removeEventListener&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form @submit.prevent=&amp;quot;enviaForm&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;ejemplo-de-aplicacion&quot; tabindex=&quot;-1&quot;&gt;Ejemplo de aplicación&lt;/h2&gt;
&lt;p&gt;Vamos a hacer una aplicación para gestionar una lista de cosas a hacer. Cada cosa a hacer tiene un título y puede estar hecha o no.&lt;/p&gt;
&lt;p&gt;Debe aparecer la lista de cosas a hacer con:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un checkbox para cada cosa que nos indica si está o no hecha (y que podemos marcar/desmarcar para cambiar su estado)&lt;/li&gt;
&lt;li&gt;el título de la cosa a hacer, que aparecerá tachado si su estado es que ya está hecha&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además queremos que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;al hacer doble click en una tarea a hacer debe borrarse de la lista&lt;/li&gt;
&lt;li&gt;bajo la lista aparecerá un input con un botón para añadir nuevas cosas a la lista. Sólo se añade si hemos introducido texto y su estado al añadirla será de NO hecha&lt;/li&gt;
&lt;li&gt;debajo tendremos un botón que borrará toda la lista de cosas a hacer tras pedir confirmación al usuario&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;solucion-de-la-aplicacion&quot; tabindex=&quot;-1&quot;&gt;Solución de la aplicación&lt;/h3&gt;
&lt;p&gt;Puedes ver una solución al problema planteado en:&lt;/p&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;zYdjNgg&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/zYdjNgg&quot;&gt;
  Untitled&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Cosas a comentar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;HTML&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;linea 3: el &amp;lt;ul&amp;gt; sólo se mostrará si hay elementos en la lista (todos.length)&lt;/li&gt;
&lt;li&gt;línea 4: la directiva v-for además de crear una variable con el elemento crea otra con su posición dentro del array que usaremos para borrarla&lt;/li&gt;
&lt;li&gt;línea 4: al método que llamamos al producirse el evento &lt;em&gt;dblclick&lt;/em&gt; le pasamos el índice de dicho elemento en el array de cosas a hacer&lt;/li&gt;
&lt;li&gt;línea 6: enlazamos cada checkbox con la propiedad &lt;em&gt;done&lt;/em&gt; del elemento de forma que al marcar al checkbox la propiedad valdrá &lt;em&gt;true&lt;/em&gt; y al desmarcarlo valdrá &lt;em&gt;false&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;líneas 7 a 12: para mostrar un elemento no hecho usamos un &lt;strong&gt;&lt;em&gt;span&lt;/em&gt;&lt;/strong&gt; y para mostrar uno hecho un &lt;strong&gt;&lt;em&gt;del&lt;/em&gt;&lt;/strong&gt; para que aparezca tachado&lt;/li&gt;
&lt;li&gt;línea 16: si no se muestra el &amp;lt;ul&amp;gt; se mostrará un párrafo diciendo que no hay elementos en la lista&lt;/li&gt;
&lt;li&gt;línea 17: el input lo enlazamos a una nueva variable, &lt;em&gt;newTodo&lt;/em&gt;, donde guardaremos lo que se escriba&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Javascript&lt;/em&gt;
&lt;ul&gt;
&lt;li&gt;línea 4: creamos la nueva variable &lt;em&gt;newTodo&lt;/em&gt; para guardar el título de la nueva cosa a añadir. Lo inicializamos a una cadena vacía y así el input estará vacío de entrada&lt;/li&gt;
&lt;li&gt;línea 27: delTodo recibe como parámetro el índice del elemento a borrar así que sólo tiene que hacer un splice al array&lt;/li&gt;
&lt;li&gt;línea 30: addTodo añade al array un nuevo elemento con el texto que hay en el input y después vacía dicho texto&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/02-directivas/" >
        </entry>
        <entry>
            <title>
                01-basics
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/01-basics/</id>
            <content type="html">
                &lt;h1 id=&quot;conceptos-basicos&quot; tabindex=&quot;-1&quot;&gt;Conceptos básicos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#conceptos-b%C3%A1sicos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Conceptos básicos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Vue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estructura-de-una-aplicaci%C3%B3n-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estructura de una aplicación Vue&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estilos-de-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estilos de &lt;em&gt;API&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#binding-de-variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Binding&lt;/em&gt; de variables&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlace-unidireccional-interpolaci%C3%B3n-&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlace unidireccional: interpolación {{...}}&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlazar-a-un-atributo-v-bind&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlazar a un atributo: v-bind&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlace-bidireccional-v-model&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlace bidireccional: v-model&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vue-devtools&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue devtools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#extensiones-para-el-editor-de-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Extensiones para el editor de código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otras-utilidades&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otras utilidades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cursos-de-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cursos de Vue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;El uso de un framework nos facilita enormemente el trabajo a la hora de crear una aplicación. Vue es un framework progresivo para la construcción de interfaces de usuario y aplicaciones desde el lado del cliente. Lo de framework &amp;quot;progresivo&amp;quot; significa que su núcleo es pequeño pero está diseñado para crecer: su núcleo está enfocado sólo en la capa de visualización pero es fácil añadirle otras bibliotecas o proyectos existentes (algunos desarrollados por el mismo equipo de Vue) que nos permitan crear complejas SPA.&lt;/p&gt;
&lt;p&gt;Su código es &lt;em&gt;opensource&lt;/em&gt; y fue creado por el desarrollador independiente &lt;a href=&quot;https://evanyou.me/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Evan You&lt;/a&gt;, lo que lo diferencia de los otros 2 frameworks más utilizados: &lt;strong&gt;Angular&lt;/strong&gt; desarrollado por &lt;em&gt;Google&lt;/em&gt; y &lt;strong&gt;React&lt;/strong&gt; desarrollado por &lt;em&gt;Facebook&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Vue tiene una curva de aprendizaje menor que otros frameworks y es extremadamente rápido y ligero.&lt;/p&gt;
&lt;p&gt;Este material está basado en la &lt;a href=&quot;https://vuejs.org/guide/introduction.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;guía oficial de Vue&lt;/a&gt; y veremos además los servicios de vue-router, axios y pinia (sustituto de vuex en Vue3) entre otros.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;¿Qué framework es mejor?&lt;/strong&gt;&lt;br /&gt;
Depende de la aplicación a desarrollar y de los gustos del programador. Tenéis algunos enlaces al respecto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://vuejs.org/v2/guide/comparison.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comparativa VueJs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://openwebinars.net/blog/vuejs-vs-react/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Openwebminars: Vue vs React vs Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=jTtab_rnvic&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Carlos Azaustre: Vue vs Angular (vídeo)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codeinwp.com/blog/angular-vs-vue-vs-react/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Angular vs React vs Vue: Which Framework to Choose in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las razones de que veamos Vue en vez de Angular o React son, en resumen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Sencillez&lt;/strong&gt;: aunque Angular es el framework más demandado hoy en el mercado su curva de aprendizaje es muy pronunciada. Vue es mucho más sencillo de aprender pero su forma de trabajar es muy similar a Angular por lo que el paso desde Vue a Angular es relativamente sencillo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Uso del framework&lt;/strong&gt;: React es también muy sencillo ya que es simplemente Javascript en el que podemos codificar la vista con JSX, pero la forma de trabajar de Vue es más parecida a otros frameworks, especialmente a Angular por lo que lo aprendido nos será de gran ayuda si queremos pasar a ese framework&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendimiento&lt;/strong&gt;: Vue hace uso del concepto de &lt;em&gt;Virtual DOM&lt;/em&gt; igual que React por lo que también ofrece muy buen rendimiento&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;usar-vue&quot; tabindex=&quot;-1&quot;&gt;Usar Vue&lt;/h2&gt;
&lt;p&gt;Para utilizar Vue sólo necesitamos enlazarlo en nuestra página desde cualquier CDN como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;https://unpkg.com/vue@3/dist/vue.global.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esta no es la forma más recomendable de trabajar. Lo normal es crear un proyecto con &lt;strong&gt;&lt;em&gt;npm&lt;/em&gt;&lt;/strong&gt; que genere un completo &lt;em&gt;scaffolding&lt;/em&gt;. Esto nos permitirá trabajar con componentes (&lt;em&gt;Single File Components&lt;/em&gt; o &lt;em&gt;SFC&lt;/em&gt;) lo que nos facilitará enormemente la creación de nuestras aplicaciones.&lt;/p&gt;
&lt;p&gt;Un &lt;em&gt;SFC&lt;/em&gt; es un componente reutilizable que se guarda en un fichero con extensión &lt;em&gt;.vue&lt;/em&gt;. Para que &lt;em&gt;VSCode&lt;/em&gt; reconozca correctamente los ficheros &lt;em&gt;.vue&lt;/em&gt; debemos instalar la &lt;em&gt;extensión&lt;/em&gt; &lt;strong&gt;Volar&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;estructura-de-una-aplicacion-vue&quot; tabindex=&quot;-1&quot;&gt;Estructura de una aplicación Vue&lt;/h2&gt;
&lt;p&gt;Vamos a crear la aplicación con Vue que mostrará un contador y un botón para actualizarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue.createApp({
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment() {
      this.count++
    }
  }
}).mount(&#39;#app&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;
    &amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;
    &amp;lt;!-- Import Vue.js --&amp;gt;
    &amp;lt;script src=&amp;quot;https://unpkg.com/vue@3/dist/vue.global.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;

    &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;
      &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;
        Count is: { { count }}
      &amp;lt;/button&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;!-- Import Js --&amp;gt;
    &amp;lt;script src=&amp;quot;./main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver su funcionamiento en la &lt;a href=&quot;https://vuejs.org/guide/introduction.html#what-is-vue&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Vue&lt;/a&gt; o en &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/abYweqQ&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En este ejemplo podemos ver las 2 principales características de Vue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Renderizado declarativo&lt;/strong&gt;: Vue amplía HTML con una sintaxis que nos permite declarar en HTML una salida basada en un dato Javascript&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reactividad&lt;/strong&gt;: Vue hace un seguimiento de las variables Javascript y modifica el DOM cuando alguna cambia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para probar el funcionamiento de código tenemos el &lt;strong&gt;&lt;em&gt;Playground&lt;/em&gt;&lt;/strong&gt; de Vue al que accedemos desde su documentación en &lt;a href=&quot;https://vuejs.org/guide/quick-start.html#try-vue-online&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://vuejs.org/guide/quick-start.html#try-vue-online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vamos a ver qué estamos haciendo en cada fichero:&lt;/p&gt;
&lt;h3 id=&quot;html&quot; tabindex=&quot;-1&quot;&gt;HTML&lt;/h3&gt;
&lt;p&gt;En el HTML debemos vincular los scripts de la librería de Vue y de nuestro código.&lt;/p&gt;
&lt;p&gt;Vue se ejecutará dentro de un elemento de nuestra página (al que se le suele poner como id &lt;em&gt;app&lt;/em&gt;) que en este caso es un &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dentro de ese elemento es donde podemos usar expresiones de Vue (fuera del mismo se ignorarán). En este ejemplo se usa&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el &lt;em&gt;moustache&lt;/em&gt; &lt;strong&gt;{{ ... }}&lt;/strong&gt; que muestra en la página la variable o expresión Javascript que contiene&lt;/li&gt;
&lt;li&gt;la directiva &lt;strong&gt;@click&lt;/strong&gt; que pone al elemento un escuchador del evento &lt;em&gt;click&lt;/em&gt; que ejecuta la función indicada en el mismo&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;javascript&quot; tabindex=&quot;-1&quot;&gt;Javascript&lt;/h3&gt;
&lt;p&gt;En el fichero JS debemos crear la aplicación con el método &lt;em&gt;createApp&lt;/em&gt; (al que se le pasa un objeto con una serie de opciones) y montarla en el elemento del HTML donde se ejecutará dicha aplicación. En nuestro caso la única opción que se le pasa es &lt;strong&gt;data&lt;/strong&gt; pero hay muchas más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;data&lt;/code&gt;&lt;/strong&gt;: aquí es donde se define el &lt;em&gt;estado&lt;/em&gt; de la aplicación, es decir, los datos de la misma. Es una &lt;strong&gt;función&lt;/strong&gt; que &lt;em&gt;devuelve un objeto&lt;/em&gt; donde cada dato será una propiedad del mismo. Lo que definimos aquí sería el equivalente a las propiedades definidas en una clase que almacenan el estado de la misma. Estos datos son reactivos y accesibles desde el HTML&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue.createApp({
  data() {
    return {
      count: 0,
      msg: &#39;Hola&#39;,
      ...
    }
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;methods&lt;/code&gt;&lt;/strong&gt;: es un objeto donde cada propiedad es un método de la aplicación que puede ser llamado desde el HTML. Son el equivalente a los métodos de una clase&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fijaos que para hacer referencia desde Javascript a una variable (o a un método) hay que anteponerle &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Además de las opciones &lt;em&gt;data&lt;/em&gt; y &lt;em&gt;methods&lt;/em&gt; podemos definir otras como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;computed&lt;/strong&gt;: es un objeto con funciones que devuelven una variable cuyo valor hay que calcularlo. Por ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;data() {
  return {
    nombre: &#39;Juan&#39;,
    apellido: &#39;Segura&#39;, 
  }
},
computed: {
  nombreCompleto() {
    return this.nombre + &#39; &#39; + this.apellido;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;hooks&lt;/em&gt;&lt;/strong&gt; (eventos del ciclo de vida de la instancia): para ejecutar código en determinados momentos: &lt;strong&gt;&#39;created&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;mounted&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;updated&#39;&lt;/strong&gt;, &lt;strong&gt;&#39;destroyed&#39;&lt;/strong&gt;. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;created() {
    console.log(&#39;instancia creada&#39;); 
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;estilos-de-em-api-em&quot; tabindex=&quot;-1&quot;&gt;Estilos de &lt;em&gt;API&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;La forma en que hemos programado estos ejemplos no es la más recomendable por lo que más adelante usaremos &lt;code&gt;npm&lt;/code&gt; para crear un completo &lt;em&gt;scaffolding&lt;/em&gt; que nos facilitará enormemente la creación de nuestras aplicaciones. Con ella dividiremos nuestra aplicación en componentes llamados &lt;em&gt;Single File Components&lt;/em&gt; que incluirán en un único fichero tanto la lógica del componente (Javascript) como su presentación (HTML) y su apariencia (CSS).&lt;/p&gt;
&lt;p&gt;Vue3 proporciona 2 formas diferentes de programar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Options API&lt;/em&gt;&lt;/strong&gt;: la lógica de un componente se establece en las distintas propiedades de un objeto, a las que se accede mediante &lt;em&gt;this&lt;/em&gt; que apunta a la instancia del componente. Es la que veremos ahora ya que es la más similar a la OOP que conocemos.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script&amp;gt;
export default {
  // Properties returned from data() become reactive state
  // and will be exposed on `this`.
  data() {
    return {
      msg: &amp;quot;Hola&amp;quot;,
      count: 0
    }
  },

  // Methods are functions that mutate state and trigger updates.
  // They can be bound as event listeners in templates.
  methods: {
    increment() {
      this.count++
    },
    decrement() {
      this.count--
    }
  },

  // Lifecycle hooks are called at different stages
  // of a component&#39;s lifecycle.
  // This function will be called when the component is mounted.
  mounted() {
    console.log(`The initial count is ${this.count}.`)
  }
}
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Count is: {{ count }}&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Composition API&lt;/em&gt;&lt;/strong&gt;_: es algo más compleja pero mejora la reutilización de código y su organización por funcionalidades. Indicada para aplicaciones grandes la veremos al final del bloque&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-vue&quot;&gt;&amp;lt;script setup&amp;gt;
import { ref, onMounted } from &#39;vue&#39;

// reactive state
const count = ref(&#39;Hola&#39;)
const count = ref(0)

// functions that mutate state and trigger updates
function increment() {
  count.value++
}
function decrement() {
  count.value--
}

// lifecycle hooks
onMounted(() =&amp;gt; {
  console.log(`The initial count is ${count.value}.`)
})
&amp;lt;/script&amp;gt;

&amp;lt;template&amp;gt;
  &amp;lt;h1&amp;gt;{{ msg }}&amp;lt;/h1&amp;gt;
  &amp;lt;button @click=&amp;quot;increment&amp;quot;&amp;gt;Count is: {{ count }}&amp;lt;/button&amp;gt;
&amp;lt;/template&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-binding-em-de-variables&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Binding&lt;/em&gt; de variables&lt;/h2&gt;
&lt;p&gt;En la &lt;a href=&quot;https://vuejs.org/tutorial/#step-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Guía de la documentación oficial de Vue&lt;/a&gt; tenemos un tutorial guiado donde podemos probar cada una de las funcionalidades de Vue. En la parte superior izquierda nos pregunta por nuestras preferencias: de momento escogeremos &lt;strong&gt;Options&lt;/strong&gt; y &lt;strong&gt;HTML&lt;/strong&gt;, aunque enseguida cambiaremos a  &lt;strong&gt;Options&lt;/strong&gt; y &lt;strong&gt;SFC&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;enlace-unidireccional-interpolacion&quot; tabindex=&quot;-1&quot;&gt;Enlace unidireccional: interpolación {{...}}&lt;/h3&gt;
&lt;p&gt;Donde queramos mostrar en la vista el valor de una variable simplemente la ponemos entre dobles llaves:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;p&amp;gt;Contador: { { counter }}&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el código Javascript sólo tenemos que declarar esa variable dentro del objeto devuelto por &lt;em&gt;data()&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  data() {
    return {
      counter: 0
    }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos ver esa variable y manipularla desde la consola, y si cambiamos su valor vemos que cambia lo que muestra nuestra página. Esto es porque Vue (al igual que Angular o React) enlazan el DOM y los datos de forma que cualquier cambio en uno se refleja automáticamente en el otro.&lt;/p&gt;
&lt;h3 id=&quot;enlazar-a-un-atributo-v-bind&quot; tabindex=&quot;-1&quot;&gt;Enlazar a un atributo: v-bind&lt;/h3&gt;
&lt;p&gt;Para mostrar un dato en el DOM usamos la interpolación &lt;code&gt;**{ {  }}**&lt;/code&gt; pero si queremos nostrarlo como atributo de una etiqueta debemos usar &lt;code&gt;v-bind&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;p v-bind:title=&amp;quot;message&amp;quot;&amp;gt;
    Hover your mouse over me for a few seconds
    to see my dynamically bound title!
  &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vue incorpora estos &#39;&lt;em&gt;atributos&lt;/em&gt;&#39; que podemos usar en las etiquetas HTML y que se llaman &lt;strong&gt;directivas&lt;/strong&gt;. Todas las directivas comienzan por &lt;strong&gt;&lt;code&gt;v-&lt;/code&gt;&lt;/strong&gt; (en Angular es igual pero el prefijo es &lt;em&gt;ng-&lt;/em&gt;). Como la directiva &lt;code&gt;v-bind&lt;/code&gt; se utiliza mucho se puede abreviar símplemente como &lt;code&gt;:&lt;/code&gt; (el carácter &#39;dos puntos&#39;). El siguiente código es equivalente al de antes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;p :title=&amp;quot;message&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;enlace-bidireccional-v-model&quot; tabindex=&quot;-1&quot;&gt;Enlace bidireccional: v-model&lt;/h3&gt;
&lt;p&gt;Tanto &lt;strong&gt;&lt;code&gt;{ { }}&lt;/code&gt;&lt;/strong&gt; como &lt;code&gt;v-bind&lt;/code&gt; son un enlace unidireccional: muestran en el DOM el valor de un dato y reaccionan ante cualquier cambio en dicho valor.&lt;/p&gt;
&lt;p&gt;Pero además está la directiva &lt;code&gt;v-model&lt;/code&gt; que es un enlace bidireccional que enlaza un dato a un campo de formulario y permite cambiar el valor del campo al cambiar el dato pero también cambia el dato si se modifica lo introducido en el input.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;  &amp;lt;input v-model=&amp;quot;message&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;GRvdrqp&quot; data-user=&quot;juanseguravasco&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/juanseguravasco/pen/GRvdrqp&quot;&gt;
  v-model&lt;/a&gt; by Juan Segura (&lt;a href=&quot;https://codepen.io/juanseguravasco&quot;&gt;@juanseguravasco&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Vemos que al escribir en el &lt;em&gt;input&lt;/em&gt; automáticamente cambia lo mostrado en el primer párrafo. Esta característica nos permite ahorrar innumerables líneas de código para hacer que el DOM refleje los cambios que se producen en los datos.&lt;/p&gt;
&lt;p&gt;NOTA: toda la aplicación se monta en el elemento &lt;em&gt;app&lt;/em&gt; por lo que las directivas o interpolaciones que pongamos fuera del mismo no se interpretarán.&lt;/p&gt;
&lt;p&gt;| Haz el ejercicio del tutorial de &lt;a href=&quot;https://vuejs.org/tutorial/#step-5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue.js&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vue-devtools&quot; tabindex=&quot;-1&quot;&gt;Vue devtools&lt;/h2&gt;
&lt;p&gt;Es una extensión para Chrome y Firefox que nos permite inspeccionar nuestro objeto Vue y acceder a todos los datos de nuestra aplicación.&lt;/p&gt;
&lt;p&gt;Anteriormente había que instalarla pero ahora viene integrada en la herramienta de desarrollador de los navegadores.&lt;/p&gt;
&lt;p&gt;En ella tenemos distintos apartados, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Componentes: es la vista por defecto y nos permite inspeccionar todos los componentes Vue creados (ahora tenemos sólo 1, el principal, pero más adelante haremos componentes hijos)&lt;/li&gt;
&lt;li&gt;Pinia: es la herramienta de gestión de estado para aplicaciones medias/grandes&lt;/li&gt;
&lt;li&gt;Router: permite ver las rutas de nuestra aplicación&lt;/li&gt;
&lt;li&gt;Eventos: permite ver todos los eventos emitidos&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;![DevTools](/img/user/01 Apuntes/DAW/Vue Teoria Batoi/img/DevTools.png)&lt;/p&gt;
&lt;h2 id=&quot;extensiones-para-el-editor-de-codigo&quot; tabindex=&quot;-1&quot;&gt;Extensiones para el editor de código&lt;/h2&gt;
&lt;p&gt;Cuando empecemos a trabajar con componentes usaremos ficheros con extensión &lt;strong&gt;.vue&lt;/strong&gt; que integran el HTML, el JS y el CSS de cada componente. Para que nuestro editor los detecte correctamente es conveniente instalar la extensión para Vue.&lt;/p&gt;
&lt;p&gt;En el caso de &lt;strong&gt;&lt;em&gt;Visual Studio Code&lt;/em&gt;&lt;/strong&gt; esta extensión se llama &lt;strong&gt;Vue-Oficial&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&quot;otras-utilidades&quot; tabindex=&quot;-1&quot;&gt;Otras utilidades&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Vue 3&lt;/em&gt; permite utilizar directamente &lt;em&gt;Typescript&lt;/em&gt; en nuestros componentes simplemente indicándolo al definir el SFC (lo veremos al llegar allí).&lt;/p&gt;
&lt;p&gt;Respecto a los &lt;em&gt;tests&lt;/em&gt; se recomienda usar &lt;em&gt;Vitest&lt;/em&gt; para los test unitarios y &lt;em&gt;Cypress&lt;/em&gt; para los E2E, como se indica en la &lt;a href=&quot;https://vuejs.org/guide/scaling-up/testing.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt; aunque también puede usarse &lt;em&gt;Jest&lt;/em&gt; u otras herramientas.&lt;/p&gt;
&lt;h2 id=&quot;cursos-de-vue&quot; tabindex=&quot;-1&quot;&gt;Cursos de Vue&lt;/h2&gt;
&lt;p&gt;Podemos encontrar muchos cursos en internet, algunos de ellos gratuitos. Por ejemplo los creadores de Vue tienen la web &lt;a href=&quot;https://www.vuemastery.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vue Mastery&lt;/a&gt; donde podemos encontrar desde cursos de iniciación (gratuitos) hasta los mas avanzados.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/vue-teoria-batoi/01-basics/" >
        </entry>
        <entry>
            <title>
                PHP Teoria Batoi
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/index/</id>
            <content type="html">
                &lt;h1 id=&quot;desenvolupament-web-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;Desenvolupament Web en Entorn Servidor&lt;/h1&gt;
&lt;p&gt;Ací pots trobar les anotacions del mòdul de &lt;em&gt;Desenvolupament web en entorn servidor&lt;/em&gt;, que s&#39;imparteix en el segon curs del cicle formatiu de grau superior de Desenvolupament d&#39;Aplicacions Web.&lt;/p&gt;
&lt;p&gt;La duració del mòdul és de 160 hores lectives, a raó de &lt;strong&gt;8 hores setmanals&lt;/strong&gt;, i es desenvolupa al llarg dels &lt;strong&gt;dos primers trimestres&lt;/strong&gt; del curs. S&#39;ha &lt;a href=&quot;https://pedroporo.github.io/planning.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;planificat&lt;/a&gt; basant-se en 3 sessions de 3,3 i 2 hores lectives per setmana.&lt;/p&gt;
&lt;h2 id=&quot;que-aprendre&quot; tabindex=&quot;-1&quot;&gt;Què aprendré?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A desenvolupar aplicacions web dinàmiques, que obtenen la informació a partir d&#39;una base de dades.&lt;/li&gt;
&lt;li&gt;Analitzar l&#39;estructura d&#39;una aplicació client/servidor, separant el codi de presentació de la lògica de negoci&lt;/li&gt;
&lt;li&gt;Obtindre informació a partir de les dades emmagatzemades, així com modificar-los.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;resultats-d-aprenentatge&quot; tabindex=&quot;-1&quot;&gt;Resultats d&#39;aprenentatge&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Selecciona les arquitectures i tecnologies de programació Web en entorn servidor, analitzant les seues capacitats i característiques pròpies.&lt;/li&gt;
&lt;li&gt;Escriu sentències executables per un servidor Web reconeixent i aplicant procediments d&#39;integració del codi en llenguatges de marques.&lt;/li&gt;
&lt;li&gt;Escriu blocs de sentències embeguts en llenguatges de marques, seleccionant i utilitzant les estructures de programació.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions Web embegudes en llenguatges de marques analitzant i incorporant funcionalitats segons especificacions.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentació de la lògica de negoci.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions d&#39;accés a magatzems de dades, aplicant mesures per a mantindre la seguretat i la integritat de la informació.&lt;/li&gt;
&lt;li&gt;Desenvolupa serveis web reutilitzables i accessibles mitjançant protocols web, verificant el seu funcionament&lt;/li&gt;
&lt;li&gt;Genera pàgines web dinàmiques analitzant i utilitzant tecnologies i frameworks del servidor web que afigen codi al llenguatge de marques.&lt;/li&gt;
&lt;li&gt;Desenvolupa aplicacions Web híbrides seleccionant i utilitzant llibreries de codi i repositoris heterogenis d&#39;informació.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;unitats-didactiques-temporalitzacio&quot; tabindex=&quot;-1&quot;&gt;Unitats didàctiques / Temporalització&lt;/h2&gt;
&lt;p&gt;A continuació es mostren les unitats didàctiques i una &lt;a href=&quot;https://pedroporo.github.io/planning.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;estimació temporal&lt;/a&gt; de cadascuna d&#39;elles.&lt;br /&gt;
La primera avaluació contindria les unitats compreses entre la 1 i 6. Així doncs, des de la meitat de la unitat 6 a la unitat 9 es veuran en la segona avaluació.&lt;/p&gt;
&lt;h3 id=&quot;primera-avaluacio&quot; tabindex=&quot;-1&quot;&gt;Primera avaluació&lt;/h3&gt;
&lt;p&gt;Duració estimada: 75 hores&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/1.%20Arquitecturas%20WEB.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arquitectures Web&lt;/a&gt; (3h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client/Servidor.&lt;/li&gt;
&lt;li&gt;MVC.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/Introducci%C3%B3n%20a%20PHP.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El llenguatge PHP&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Condicions i bucles.&lt;/li&gt;
&lt;li&gt;Arrays.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/Programaci%C3%B3n%20en%20Web.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Programació Web&lt;/a&gt; (13h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Formularis.&lt;/li&gt;
&lt;li&gt;Cookies i sessió.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/phpoo.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Orientació a objectes amb PHP&lt;/a&gt; (11h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Classes i objectes&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Excepcions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/05accesoDatos.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Accés a dades&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;PDO&lt;/li&gt;
&lt;li&gt;Fitxers CSV i PDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Projecte Integrador&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;segona-avaluacio&quot; tabindex=&quot;-1&quot;&gt;Segona avaluació&lt;/h3&gt;
&lt;p&gt;Duració estimada: 85 hores&lt;/p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/07frameworks.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Frameworks PHP. Laravel.&lt;/a&gt; (29h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelRutesVistes.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Rutes i vistes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelControladors.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Controladors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelModelsDades.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Models i dades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelValidacioAutenticacio.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validacio i Autenticacio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelNotificacions.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Notificacions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07laravelBatoiBook.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Activitats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/08laravelRestFull.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Serveis Web&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Producció i consum.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;AJAX&lt;/em&gt; amb &lt;em&gt;JSON&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/01%20Apuntes/PHP%20Teoria%20Batoi/09mashup.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webs Híbrides&lt;/a&gt; (16h)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reutilització de codi i dades.&lt;/li&gt;
&lt;li&gt;OAuth2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pedroporo.github.io/01%20Apuntes/PHP%20Teoria%20Batoi/09mailLaravel.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Projecte Integrador&lt;/a&gt; (24h)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;instruments-de-qualificacio&quot; tabindex=&quot;-1&quot;&gt;Instruments de qualificació&lt;/h2&gt;
&lt;p&gt;La nota del curs es calcula mitjançant:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;30% Activitats classe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada Unitat Temàtica (excepte la primera) tindrà una sèrie d&#39;activitats avaluables que poden ser realitzades en classe i a casa.
&lt;ul&gt;
&lt;li&gt;Les activitats s&#39;avaluen mitjançant tasques de &lt;em&gt;Aules&lt;/em&gt; avaluables per rúbriques.&lt;/li&gt;
&lt;li&gt;La puntuació de cada unitat temàtica serà la del número de hores previstes per eixa unitat, descomptat les proves escrites.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;10% Qüestionaris per unitat temàtica (excepte la primera).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;20% Projecte Integrador (Final de curs)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;40% Exàmen d&#39;avaluació (Fan mitja a partir de 4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un per cada avaluació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-Dataview&quot;&gt;
list from 1. Arquitecturas Web

&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/index/" >
        </entry>
        <entry>
            <title>
                8. Exercici Pràctic, Guia d&#39;Equips de Futbol Femení amb Base de Dades
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/8-exercici-practic-guia-d-equips-de-futbol-femeni-amb-base-de-dades/</id>
            <content type="html">
                &lt;p&gt;L&#39;objectiu d&#39;aquest exercici és estendre la Guia d&#39;Equips de Futbol Femení per utilitzar una base de dades relacional. Aprendràs a crear taules amb migracions, models per gestionar les dades, i a integrar-los amb controladors i vistes.&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;strong-1-crear-la-migracio-per-a-la-taula-code-equips-code-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;1. Crear la Migració per a la Taula &lt;code&gt;equips&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;strong-migracio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Migració&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Genera una migració per a la taula &lt;code&gt;equips&lt;/code&gt; amb la següent estructura:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;: Clau primària, autoincremental.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nom&lt;/code&gt;: Nom de l&#39;equip (cadena, únic, obligatori).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;estadi&lt;/code&gt;: Nom de l&#39;estadi de l&#39;equip (cadena, obligatori).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;titols&lt;/code&gt;: Nombre de títols guanyats (entero, predeterminat 0).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;created_at&lt;/code&gt; i &lt;code&gt;updated_at&lt;/code&gt;: Camps de timestamps generats automàticament.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration create_equips_table --create=equips
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica el fitxer de migració per incloure l&#39;estructura de la taula:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::create(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;id();
        $table-&amp;gt;string(&#39;nom&#39;)-&amp;gt;unique();
        $table-&amp;gt;string(&#39;estadi&#39;);
        $table-&amp;gt;integer(&#39;titols&#39;)-&amp;gt;default(0);
        $table-&amp;gt;timestamps();
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Executa la migració per crear la taula:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-models-i-seeders-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Models i Seeders&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Genera un model anomenat &lt;code&gt;Equip&lt;/code&gt; per gestionar la taula:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:model Equip 
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica el model Equip a app/Models/Equip.php per definir els camps que es poden emplenar mitjançant assignació massiva:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected $fillable = [&#39;nom&#39;, &#39;estadi&#39;, &#39;titols&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Crea un seeder per a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:seeder EquipsSeeder
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el seeder EquipsSeeder per generar dades d&#39;exemple:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    DB::table(&#39;equips&#39;)-&amp;gt;insert([
            [&#39;nom&#39; =&amp;gt; &#39;Barça Femení&#39;, &#39;estadi&#39; =&amp;gt; &#39;Camp Nou&#39;, &#39;titols&#39; =&amp;gt; 30],
            [&#39;nom&#39; =&amp;gt; &#39;Atlètic de Madrid&#39;, &#39;estadi&#39; =&amp;gt; &#39;Cívitas Metropolitano&#39;, &#39;titols&#39; =&amp;gt; 10],
            [&#39;nom&#39; =&amp;gt; &#39;Real Madrid Femení&#39;, &#39;estadi&#39; =&amp;gt; &#39;Alfredo Di Stéfano&#39;, &#39;titols&#39; =&amp;gt; 5],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Afegeix el seeder EquipsSeeder al fitxer DatabaseSeeder:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    $this-&amp;gt;call([
        EquipsSeeder::class,
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Executa els seeders per omplir la taula &lt;code&gt;equips&lt;/code&gt; amb dades d&#39;exemple:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;   php artisan db:seed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-controladors-i-crud-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Controladors i CRUD&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Modifica el mètode &lt;code&gt;index&lt;/code&gt;,&lt;code&gt;show&lt;/code&gt;,&lt;code&gt;create&lt;/code&gt;,&lt;code&gt;edit&lt;/code&gt; i &lt;code&gt;destroy&lt;/code&gt; del controlador per obtenir els equips des de la base de dades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function index() {
     $equips = Equip::all();
     return view(&#39;equips.index&#39;, compact(&#39;equips&#39;));
 }

 public function show(Equip $equip) {
     return view(&#39;equips.show&#39;, compact(&#39;equip&#39;));
 }

 public function create() {
     return view(&#39;equips.create&#39;);
 }

 public function edit(Equip $equip) {
     return view(&#39;equips.edit&#39;, compact(&#39;equip&#39;));
 }

 public function destroy(Equip $equip) {
     $equip-&amp;gt;delete();
     return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip esborrat correctament!&#39;);
 } 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;strong-relacions-entre-taules-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Relacions entre Taules&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Anem a crear la migració, model i seeder per la taula &lt;code&gt;estadis&lt;/code&gt; i vincular-la amb la taula &lt;code&gt;equips&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration create_estadis_table
php artisan make:migration add_estadi_id_to_equips_table
php artisan make:model Estadi
php artisan make:seeder EstadisSeeder
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica la migració &lt;code&gt;create_estadis_table&lt;/code&gt; per incloure l&#39;estructura de la taula &lt;code&gt;estadis&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::create(&#39;estadis&#39;, function (Blueprint $table) {
        $table-&amp;gt;id();
        $table-&amp;gt;string(&#39;nom&#39;)-&amp;gt;unique();
        $table-&amp;gt;integer(&#39;capacitat&#39;);
        $table-&amp;gt;timestamps();
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Modifica la migració &lt;code&gt;add_estadi_id_to_equips_table&lt;/code&gt; per afegir la clau forana &lt;code&gt;estadi_id&lt;/code&gt; a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;dropColumn(&#39;estadi&#39;); // Esborra el camp estadi
        $table-&amp;gt;foreignId(&#39;estadi_id&#39;)-&amp;gt;constrained(); // Afegir la clau forana
    });
 }

public function down()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;string(&#39;estadi&#39;);
        $table-&amp;gt;dropForeign([&#39;estadi_id&#39;]);
        $table-&amp;gt;dropColumn(&#39;estadi_id&#39;);
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Equip&lt;/code&gt; per definir la relació amb l&#39;estadi:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function estadi()
{
    return $this-&amp;gt;belongsToclass;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Estadi&lt;/code&gt; per definir la relació amb els equips:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function equips()
{
    return $this-&amp;gt;hasManyclass;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Modifica el seeder &lt;code&gt;EstadisSeeder&lt;/code&gt; per generar dades d&#39;exemple per a la taula &lt;code&gt;estadis&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    DB::table(&#39;estadis&#39;)-&amp;gt;insert([
        [&#39;nom&#39; =&amp;gt; &#39;Camp Nou&#39;, &#39;capacitat&#39; =&amp;gt; 99000],
        [&#39;nom&#39; =&amp;gt; &#39;Wanda Metropolitano&#39;, &#39;capacitat&#39; =&amp;gt; 68000],
        [&#39;nom&#39; =&amp;gt; &#39;Santiago Bernabéu&#39;, &#39;capacitat&#39; =&amp;gt; 81000],
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Afegeix el seeder &lt;code&gt;EstadisSeeder&lt;/code&gt; al fitxer &lt;code&gt;DatabaseSeeder&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    $this-&amp;gt;call([
        EstadisSeeder::class,
        EquipsSeeder::class,
        
    ]);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Modifica el seeder &lt;code&gt;EquipsSeeder&lt;/code&gt; per assignar equips a estadis existents:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    $estadi = Estadi::where(&#39;nom&#39;, &#39;Camp Nou&#39;)-&amp;gt;first();
    $estadi-&amp;gt;equips()-&amp;gt;create([
        &#39;nom&#39; =&amp;gt; &#39;Barça Femení&#39;,
        &#39;titols&#39; =&amp;gt; 30,
    ]);
    $estadi = Estadi::where(&#39;nom&#39;, &#39;Wanda Metropolitano&#39;)-&amp;gt;first();
    $estadi-&amp;gt;equips()-&amp;gt;create([
        &#39;nom&#39; =&amp;gt; &#39;Atlètic de Madrid&#39;,
        &#39;titols&#39; =&amp;gt; 10,
    ]);
    $estadi = Estadi::where(&#39;nom&#39;, &#39;Santiago Bernabéu&#39;)-&amp;gt;first();
    $estadi-&amp;gt;equips()-&amp;gt;create([
        &#39;nom&#39; =&amp;gt; &#39;Real Madrid Femení&#39;,
        &#39;titols&#39; =&amp;gt; 5,
    ]);
 }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Executa els seeders per omplir les taules &lt;code&gt;equips&lt;/code&gt; i &lt;code&gt;estadis&lt;/code&gt; amb dades d&#39;exemple:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:fresh --seed 
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.index&lt;/code&gt; per mostrar l&#39;estadi de cada equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;@foreach ($equips as $equip)
    &amp;lt;tr class=&amp;quot;hover:bg-gray-100&amp;quot;&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;{{ route(&#39;equips.show&#39;, $equip-&amp;gt;id) }}&amp;quot; class=&amp;quot;text-blue-700 hover:underline&amp;quot;&amp;gt;{{ $equip-&amp;gt;nom }}&amp;lt;/a&amp;gt;
        &amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;{{ $equip-&amp;gt;estadi-&amp;gt;nom }}&amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;{{ $equip-&amp;gt;titols }}&amp;lt;/td&amp;gt;
        &amp;lt;td class=&amp;quot;border border-gray-300 p-2 flex space-x-2&amp;quot;&amp;gt;
            &amp;lt;a href=&amp;quot;{{ route(&#39;equips.show&#39;, $equip-&amp;gt;id) }}&amp;quot; class=&amp;quot;text-green-600 hover:underline&amp;quot;&amp;gt;Mostrar&amp;lt;/a&amp;gt;
            &amp;lt;a href=&amp;quot;{{ route(&#39;equips.edit&#39;, $equip-&amp;gt;id) }}&amp;quot; class=&amp;quot;text-yellow-600 hover:underline&amp;quot;&amp;gt;Editar&amp;lt;/a&amp;gt;
        &amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
@endforeach

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;Crea la vista &lt;code&gt;equips.create&lt;/code&gt; per incloure un desplegable amb els estadis disponibles:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;form action=&amp;quot;{{ route(&#39;equips.store&#39;) }}&amp;quot; method=&amp;quot;POST&amp;quot; class=&amp;quot;bg-white p-6 rounded-lg shadow-md max-w-md mx-auto&amp;quot;&amp;gt;
    @csrf
    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;nom&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Nom:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;nom&amp;quot; id=&amp;quot;nom&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;titols&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Títols:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;titols&amp;quot; id=&amp;quot;titols&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;estadi_id&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Estadi:&amp;lt;/label&amp;gt;
        &amp;lt;select name=&amp;quot;estadi_id&amp;quot; id=&amp;quot;estadi_id&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
            @foreach ($estadis as $estadi)
                &amp;lt;option value=&amp;quot;{{ $estadi-&amp;gt;id }}&amp;quot;&amp;gt;{{ $estadi-&amp;gt;nom }}&amp;lt;/option&amp;gt;
            @endforeach
        &amp;lt;/select&amp;gt;
    &amp;lt;/div&amp;gt;
    
    &amp;lt;button type=&amp;quot;submit&amp;quot;
        class=&amp;quot;w-full bg-blue-500 text-white font-medium py-2 px-4 rounded-lg shadow hover:bg-blue-600 focus:ring focus:ring-blue-300&amp;quot;&amp;gt;
        Crear Equip
    &amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cal modificar el controlador &lt;code&gt;EquipController&lt;/code&gt; per obtenir els estadis disponibles.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;Crea el mètode store en el controlador EquipController per emmagatzemar un nou equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function store(Request $request) {
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips&#39;,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
    ]);
    Equip::create($validated);
    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip creat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Cal modificat el model &lt;code&gt;Equip&lt;/code&gt; per permetre l&#39;assignació massiva de l&#39;estadi.&lt;/strong&gt;&lt;/p&gt;
&lt;ol start=&quot;13&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.edit&lt;/code&gt; per incloure un desplegable amb els estadis disponibles:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;form action=&amp;quot;{{ route(&#39;equips.update&#39;, $equip-&amp;gt;id) }}&amp;quot; method=&amp;quot;POST&amp;quot; class=&amp;quot;bg-white p-6 rounded-lg shadow-md max-w-md mx-auto&amp;quot;&amp;gt;
    @csrf
    @method(&#39;PUT&#39;)

    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;nom&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Nom:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;nom&amp;quot; id=&amp;quot;nom&amp;quot; value=&amp;quot;{{ old(&#39;nom&#39;, $equip-&amp;gt;nom) }}&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 
            @error(&#39;nom&#39;) border-red-500 @enderror&amp;quot;&amp;gt;
        @error(&#39;nom&#39;)
            &amp;lt;p class=&amp;quot;text-red-500 text-sm mt-1&amp;quot;&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
        @enderror
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;titols&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Títols:&amp;lt;/label&amp;gt;
        &amp;lt;input type=&amp;quot;number&amp;quot; name=&amp;quot;titols&amp;quot; id=&amp;quot;titols&amp;quot; value=&amp;quot;{{ old(&#39;titols&#39;, $equip-&amp;gt;titols) }}&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 
            @error(&#39;titols&#39;) border-red-500 @enderror&amp;quot;&amp;gt;
        @error(&#39;titols&#39;)
            &amp;lt;p class=&amp;quot;text-red-500 text-sm mt-1&amp;quot;&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
        @enderror
    &amp;lt;/div&amp;gt;

    &amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;estadi_id&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Estadi:&amp;lt;/label&amp;gt;
        &amp;lt;select name=&amp;quot;estadi_id&amp;quot; id=&amp;quot;estadi_id&amp;quot; required
            class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500 
            @error(&#39;estadi_id&#39;) border-red-500 @enderror&amp;quot;&amp;gt;
            @foreach ($estadis as $estadi)
                &amp;lt;option value=&amp;quot;{{ $estadi-&amp;gt;id }}&amp;quot; {{ $estadi-&amp;gt;id == $equip-&amp;gt;estadi_id ? &#39;selected&#39; : &#39;&#39; }}&amp;gt;
                    {{ $estadi-&amp;gt;nom }}
                &amp;lt;/option&amp;gt;
            @endforeach
        &amp;lt;/select&amp;gt;
        @error(&#39;estadi_id&#39;)
            &amp;lt;p class=&amp;quot;text-red-500 text-sm mt-1&amp;quot;&amp;gt;{{ $message }}&amp;lt;/p&amp;gt;
        @enderror
    &amp;lt;/div&amp;gt;

    &amp;lt;button type=&amp;quot;submit&amp;quot;
        class=&amp;quot;w-full bg-blue-500 text-white font-medium py-2 px-4 rounded-lg shadow hover:bg-blue-600 focus:ring focus:ring-blue-300&amp;quot;&amp;gt;
        Actualitzar Equip
    &amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;14&quot;&gt;
&lt;li&gt;Crea el mètode update en el controlador EquipController per actualitzar un equip existent:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function update(Request $request, $id) {
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips,nom,&#39;.$id,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
    ]);
    $equip = Equip::findOrFail($id);
    $equip-&amp;gt;update($validated);
    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip actualitzat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-afegir-un-escut-a-l-equip-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Afegir un escut a l&#39;equip&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crea una migració per afegir un camp &lt;code&gt;escut&lt;/code&gt; a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration add_escut_to_equips_table
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica la migració &lt;code&gt;add_escut_to_equips_table&lt;/code&gt; per incloure el camp &lt;code&gt;escut&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;string(&#39;escut&#39;)-&amp;gt;nullable();
    });
}
public function down()
{
    Schema::table(&#39;equips&#39;, function (Blueprint $table) {
        $table-&amp;gt;dropColumn(&#39;escut&#39;);
    });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Aplicar la migració&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Equip&lt;/code&gt; per incloure el camp &lt;code&gt;escut&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;protected $fillable = [&#39;nom&#39;, &#39;estadi_id&#39;, &#39;titols&#39;, &#39;escut&#39;];
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.create&lt;/code&gt; per incloure un camp d&#39;arxiu per pujar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;escut&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Escut:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;escut&amp;quot; id=&amp;quot;escut&amp;quot;
        class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Modifica la vista &lt;code&gt;equips.edit&lt;/code&gt; per incloure un camp d&#39;arxiu per actualitzar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&amp;quot;mb-4&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;escut&amp;quot; class=&amp;quot;block text-sm font-medium text-gray-700 mb-1&amp;quot;&amp;gt;Escut:&amp;lt;/label&amp;gt;
    &amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;escut&amp;quot; id=&amp;quot;escut&amp;quot; 
        class=&amp;quot;w-full border-gray-300 rounded-lg shadow-sm focus:ring-blue-500 focus:border-blue-500&amp;quot;&amp;gt;
    @if ($equip-&amp;gt;escut)
        &amp;lt;p class=&amp;quot;mt-2 text-sm text-gray-500&amp;quot;&amp;gt;Escut actual:&amp;lt;/p&amp;gt;
        &amp;lt;img src=&amp;quot;{{ asset(&#39;storage/&#39; . $equip-&amp;gt;escut) }}&amp;quot; alt=&amp;quot;Escut de {{ $equip-&amp;gt;nom }}&amp;quot; class=&amp;quot;h-16 mt-2&amp;quot;&amp;gt;
    @endif
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Afegeix enctype=&amp;quot;multipart/form-data&amp;quot; al dos formularis:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form action=&amp;quot;{{ route(&#39;equips.store&#39;) }}&amp;quot; method=&amp;quot;POST&amp;quot; enctype=&amp;quot;multipart/form-data&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Crea un enllaç simbòlic a la carpeta storage&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan storage:link
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;Actualitza el mètode store del controlador&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function store(Request $request)
{
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips&#39;,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;escut&#39; =&amp;gt; &#39;nullable|image|mimes:jpeg,png,jpg|max:2048&#39;, // Validació del fitxer
    ]);

    if ($request-&amp;gt;hasFile(&#39;escut&#39;)) {
        $path = $request-&amp;gt;file(&#39;escut&#39;)-&amp;gt;store(&#39;escuts&#39;, &#39;public&#39;);
        $validated[&#39;escut&#39;] = $path;
    }

    Equip::create($validated);

    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip creat correctament!&#39;);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;10&quot;&gt;
&lt;li&gt;Actualitza el mètode update del controlador&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function update(Request $request, $id)
{
    $validated = $request-&amp;gt;validate([
        &#39;nom&#39; =&amp;gt; &#39;required|unique:equips,nom,&#39; . $id,
        &#39;titols&#39; =&amp;gt; &#39;integer|min:0&#39;,
        &#39;estadi_id&#39; =&amp;gt; &#39;required|exists:estadis,id&#39;,
        &#39;escut&#39; =&amp;gt; &#39;nullable|image|mimes:jpeg,png,jpg|max:2048&#39;,
    ]);

    $equip = Equip::findOrFail($id);

    if ($request-&amp;gt;hasFile(&#39;escut&#39;)) {
        if ($equip-&amp;gt;escut) {
            Storage::disk(&#39;public&#39;)-&amp;gt;delete($equip-&amp;gt;escut); // Esborra l&#39;escut antic
        }
        $path = $request-&amp;gt;file(&#39;escut&#39;)-&amp;gt;store(&#39;escuts&#39;, &#39;public&#39;);
        $validated[&#39;escut&#39;] = $path;
    }

    $equip-&amp;gt;update($validated);

    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip actualitzat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;11&quot;&gt;
&lt;li&gt;Crea el mètode delete per esborrar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function delete(Equip $equip)
{
    if ($equip-&amp;gt;escut) {
        Storage::disk(&#39;public&#39;)-&amp;gt;delete($equip-&amp;gt;escut);
    }
    $equip-&amp;gt;delete();
    return redirect()-&amp;gt;route(&#39;equips.index&#39;)-&amp;gt;with(&#39;success&#39;, &#39;Equip esborrat correctament!&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;12&quot;&gt;
&lt;li&gt;Modificat el component de la vista &lt;code&gt;equips.show&lt;/code&gt; per mostrar l&#39;escut de l&#39;equip:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;div class=&amp;quot;equip border rounded-lg shadow-md p-4 bg-white&amp;quot;&amp;gt;
      @if ($escut)
          &amp;lt;td class=&amp;quot;border border-gray-300 p-2&amp;quot;&amp;gt;
              &amp;lt;img src=&amp;quot;{{ asset(&#39;storage/&#39; . $escut) }}&amp;quot; alt=&amp;quot;Escut de {{ $nom }}&amp;quot; class=&amp;quot;h-8 w-8 object-cover rounded-full&amp;quot;&amp;gt;
          &amp;lt;/td&amp;gt;
      @endif
    &amp;lt;h2 class=&amp;quot;text-xl font-bold text-blue-800&amp;quot;&amp;gt;{{ $nom }}&amp;lt;/h2&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Estadi:&amp;lt;/strong&amp;gt; {{ $estadi }}&amp;lt;/p&amp;gt;
    &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;Títols:&amp;lt;/strong&amp;gt; {{ $titols }}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-utilitzar-factories-per-a-dades-d-exemple-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Utilitzar Factories per a Dades d&#39;Exemple&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crea un factory per a la taula &lt;code&gt;equips&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:factory EquipFactory --model=Equip
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Modifica el factory &lt;code&gt;EquipFactory&lt;/code&gt; per generar dades aleatòries:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function definition()
{
       return [
           &#39;nom&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;unique()-&amp;gt;company,
           &#39;titols&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;numberBetween(0, 50),
           &#39;estadi_id&#39; =&amp;gt; &#92;App&#92;Models&#92;Estadi::factory(),
           &#39;escut&#39; =&amp;gt; &#39;escuts/dummy.png&#39;, // Imatge de prova predefinida
        ];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Actualitza el seeder &lt;code&gt;EquipsSeeder&lt;/code&gt; per utilitzar el factory:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function run()
{
    ...
    Equip::factory()-&amp;gt;count(10)-&amp;gt;create();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Modifica el model &lt;code&gt;Equip&lt;/code&gt; per permetre els factories:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use Illuminate&#92;Database&#92;Eloquent&#92;Factories&#92;HasFactory;
use Illuminate&#92;Database&#92;Eloquent&#92;Model;

class Estadi extends Model
{
    use HasFactory;
 ...  
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Crea el factory per a la taula &lt;code&gt;estadis&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:factory EstadiFactory --model=Estadi
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Modifica el factory &lt;code&gt;EstadiFactory&lt;/code&gt; per generar dades aleatòries:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function definition()
{
    return [
        &#39;nom&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;unique()-&amp;gt;city.&#39; Stadium&#39;,
        &#39;capacitat&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;numberBetween(10000, 100000),
    ];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Executa els seeders per omplir la taula &lt;code&gt;equips&lt;/code&gt; amb dades generades pel factory:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:fresh --seed
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/8-exercici-practic-guia-d-equips-de-futbol-femeni-amb-base-de-dades/" >
        </entry>
        <entry>
            <title>
                7. Requests, Responses i Validació en Laravel
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/7-requests-responses-i-validacio-en-laravel/</id>
            <content type="html">
                &lt;h2 id=&quot;strong-1-requests-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;1. Requests&lt;/strong&gt;&lt;/h2&gt;
&lt;h4 id=&quot;strong-introduccio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Introducció&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un &lt;em&gt;Request&lt;/em&gt; en Laravel és un objecte que encapsula la informació sobre la petició HTTP, incloent dades, capçaleres, paràmetres i fitxers.&lt;/p&gt;
&lt;h4 id=&quot;strong-acces-a-dades-del-request-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Accés a dades del Request&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$input = $request-&amp;gt;all(); //Accedir a tots els inputs.
$name = $request-&amp;gt;input(&#39;name&#39;); //Obtenir un input específic.
$age = $request-&amp;gt;input(&#39;age&#39;, 18); //Especificar valors per defecte.
$id = $request-&amp;gt;route(&#39;id&#39;); //Accedir a paràmetres de ruta.
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-validacio-de-presencia-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació de presència&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($request-&amp;gt;has(&#39;email&#39;)) {
    // Input &#39;email&#39; present
}
if ($request-&amp;gt;filled(&#39;name&#39;)) {
    // Input &#39;name&#39; no està buit
}
$filtered = $request-&amp;gt;only([&#39;name&#39;, &#39;email&#39;]); //Filtrar inputs específics.
$excluded = $request-&amp;gt;except([&#39;password&#39;]); //Excloure certs inputs.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-tractament-de-fitxers-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Tractament de fitxers&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if ($request-&amp;gt;hasFile(&#39;photo&#39;)) { //Comprovar si hi ha un fitxer.
    $file = $request-&amp;gt;file(&#39;photo&#39;);
}
$path = $request-&amp;gt;file(&#39;photo&#39;)-&amp;gt;store(&#39;photos&#39;); //Emmagatzemar un fitxer.
    
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;strong-2-responses-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;2. Responses&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;strong-creacio-de-respostes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Creació de respostes&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;return response(&#39;Hello World&#39;, 200); //Crear una resposta bàsica.
return response()-&amp;gt;json([
    &#39;name&#39; =&amp;gt; &#39;John&#39;,
    &#39;status&#39; =&amp;gt; &#39;success&#39;
]); //Crear una resposta JSON.
return redirect(&#39;dashboard&#39;); //Redirecció .
return redirect(&#39;login&#39;)-&amp;gt;with(&#39;status&#39;, &#39;Sessió iniciada&#39;); //Redirecció amb dades de sessió.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-manipular-capcaleres-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Manipular capçaleres&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;//Afegeix una o múltiples capçaleres.
return response(&#39;Hello&#39;)-&amp;gt;header(&#39;Content-Type&#39;, &#39;text/plain&#39;);
return response(&#39;Hello&#39;)
-&amp;gt;header(&#39;Content-Type&#39;, &#39;application/json&#39;)
-&amp;gt;header(&#39;Cache-Control&#39;, &#39;no-cache&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-respostes-de-fitxers-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Respostes de fitxers&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
return response()-&amp;gt;download($pathToFile); //Descàrrega de fitxers.
return response()-&amp;gt;file($pathToFile); //Mostrar fitxers.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;strong-3-validacio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;3. Validació&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&quot;strong-introduccio-strong-1&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Introducció&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Laravel ofereix un sistema potent i senzill per validar dades d&#39;inputs.&lt;/p&gt;
&lt;h3 id=&quot;strong-validacio-basica-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació bàsica&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Validar dades amb un Request.
$request-&amp;gt;validate([
    &#39;name&#39; =&amp;gt; &#39;required|string|max:255&#39;,
    &#39;email&#39; =&amp;gt; &#39;required|email&#39;,
    &#39;password&#39; =&amp;gt; &#39;required|min:8&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Validar manualment.
$validator = Validator::make($request-&amp;gt;all(), [
    &#39;title&#39; =&amp;gt; &#39;required|max:255&#39;,
    &#39;body&#39; =&amp;gt; &#39;required&#39;,
]);

if ($validator-&amp;gt;fails()) {
    return redirect(&#39;/form&#39;)-&amp;gt;withErrors($validator);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-regles-comunes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Regles comunes&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;required&lt;/code&gt;: Camp obligatori.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;email&lt;/code&gt;: Validació d&#39;un correu electrònic.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min:value&lt;/code&gt;: Mínim de caràcters o valor numèric.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max:value&lt;/code&gt;: Màxim de caràcters o valor numèric.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unique:table,column&lt;/code&gt;: Ha de ser únic en una taula/columna.&lt;br /&gt;
&lt;a href=&quot;https://laravel.com/docs/11.x/validation#available-validation-rules&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Llista sencera de regles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;strong-missatges-personalitzats-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Missatges personalitzats&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Es poden definir missatges personalitzats per a les regles de validació.

$request-&amp;gt;validate([
    &#39;name&#39; =&amp;gt; &#39;required&#39;,
], [
    &#39;name.required&#39; =&amp;gt; &#39;El nom és obligatori.&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-validacio-condicional-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació condicional&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; // Validació basada en altres camps o condicions.
$request-&amp;gt;validate([
    &#39;password&#39; =&amp;gt; &#39;required_if:is_admin,true&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-validacio-personalitzada-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Validació personalitzada&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Es poden afegir regles personalitzades mitjançant extensions del Validator.

Validator::extend(&#39;uppercase&#39;, function ($attribute, $value, $parameters, $validator) {
    return strtoupper($value) === $value;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-errors-de-validacio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Errors de validació&lt;/strong&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Obtenir tots els errors en la vista
@if ($errors-&amp;gt;any())
    &amp;lt;ul&amp;gt;
        @foreach ($errors-&amp;gt;all() as $error)
            &amp;lt;li&amp;gt;{{ $error }}&amp;lt;/li&amp;gt;
        @endforeach
    &amp;lt;/ul&amp;gt;
@endif
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    // Mostrar errors per camp específic
@error(&#39;name&#39;)
    &amp;lt;div&amp;gt;{{ $message }}&amp;lt;/div&amp;gt;
@enderror
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/7-requests-responses-i-validacio-en-laravel/" >
        </entry>
        <entry>
            <title>
                6. Seeders i Factories en Laravel
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/6-seeders-i-factories-en-laravel/</id>
            <content type="html">
                &lt;p&gt;Els &lt;strong&gt;seeders&lt;/strong&gt; i &lt;strong&gt;factories&lt;/strong&gt; permeten generar dades de prova de manera fàcil i ràpida, útils durant el desenvolupament per simular dades inicials en una aplicació.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;strong-seeders-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Seeders&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Els seeders són classes especials que permeten &amp;quot;sembrar&amp;quot; dades a la base de dades.&lt;/p&gt;
&lt;h4 id=&quot;strong-crear-un-seeder-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear un Seeder&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:seeder NomSeeder
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Això crea un fitxer a la carpeta database/seeders. Per exemple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BooksSeeder extends Seeder
{
    public function run()
    {
        // Exemple: Crear un llibre
        $book = new Book();
        $book-&amp;gt;title = &amp;quot;Laravel for Beginners&amp;quot;;
        $book-&amp;gt;author = &amp;quot;John Doe&amp;quot;;
        $book-&amp;gt;save();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;afegir-seeders-al-seeder-general&quot; tabindex=&quot;-1&quot;&gt;Afegir Seeders al Seeder General&lt;/h4&gt;
&lt;p&gt;Inclou els seeders al fitxer DatabaseSeeder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class DatabaseSeeder extends Seeder
{
    public function run()
    {
        $this-&amp;gt;call([
            BooksSeeder::class,
            AuthorsSeeder::class,
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;executar-seeders&quot; tabindex=&quot;-1&quot;&gt;Executar Seeders&lt;/h4&gt;
&lt;p&gt;Executar tots els seeders:&lt;br /&gt;
Executar un seeder específic:&lt;br /&gt;
Reiniciar les migracions i executar els seeders:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan db:seed
php artisan db:seed --class=BooksSeeder
php artisan migrate:fresh --seed
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;factories&quot; tabindex=&quot;-1&quot;&gt;Factories&lt;/h3&gt;
&lt;p&gt;Els factories permeten crear grans quantitats de dades de manera ràpida i dinàmica mitjançant Faker.&lt;/p&gt;
&lt;h4 id=&quot;crear-un-factory&quot; tabindex=&quot;-1&quot;&gt;Crear un Factory&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:factory NomFactory -m Model
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per exemple, per al model Author:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace Database&#92;Factories;

use App&#92;Models&#92;Author;
use Illuminate&#92;Database&#92;Eloquent&#92;Factories&#92;Factory;

class AuthorFactory extends Factory
{
protected $model = Author::class;

    public function definition()
    {
        return [
            &#39;name&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;name,
            &#39;birth_year&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;year,
        ];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;utilitzar-un-factory&quot; tabindex=&quot;-1&quot;&gt;Utilitzar un Factory&lt;/h4&gt;
&lt;p&gt;Per generar dades amb un factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use App&#92;Models&#92;Author;

// Crear un únic autor
Author::factory()-&amp;gt;create();

// Crear diversos autors
Author::factory()-&amp;gt;count(10)-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;integracio-amb-seeders&quot; tabindex=&quot;-1&quot;&gt;Integració amb Seeders&lt;/h4&gt;
&lt;p&gt;Combina factories amb seeders per generar dades dinàmiques:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class AuthorsSeeder extends Seeder
{
    public function run()
    {
        Author::factory()-&amp;gt;count(10)-&amp;gt;create();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;dades-relacionades&quot; tabindex=&quot;-1&quot;&gt;Dades Relacionades&lt;/h4&gt;
&lt;p&gt;Els factories permeten generar dades relacionades. Per exemple, llibres amb els seus autors:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BooksSeeder extends Seeder
{
    public function run()
    {
        $authors = Author::factory()-&amp;gt;count(5)-&amp;gt;create();

        $authors-&amp;gt;each(function ($author) {
            Book::factory()-&amp;gt;count(2)-&amp;gt;create([&#39;author_id&#39; =&amp;gt; $author-&amp;gt;id]);
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exemples-avancats&quot; tabindex=&quot;-1&quot;&gt;Exemples Avançats&lt;/h4&gt;
&lt;p&gt;Podem cercar com construir factories més complexes a la &lt;a href=&quot;https://fakerphp.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h5 id=&quot;utilitzar-factories-per-relacions&quot; tabindex=&quot;-1&quot;&gt;Utilitzar Factories per Relacions&lt;/h5&gt;
&lt;p&gt;Definir relacions dins d’un factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BookFactory extends Factory
{
    public function definition()
    {
        return [
            &#39;title&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;sentence,
            &#39;author_id&#39; =&amp;gt; Author::factory(),
        ];
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Llançar el factory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Book::factory()-&amp;gt;count(10)-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;factories-amb-estats&quot; tabindex=&quot;-1&quot;&gt;Factories amb Estats&lt;/h5&gt;
&lt;p&gt;Els estats permeten definir configuracions personalitzades per un model:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class BookFactory extends Factory
{
    public function withDiscount()
    {
        return $this-&amp;gt;state([
        &#39;price&#39; =&amp;gt; $this-&amp;gt;faker-&amp;gt;numberBetween(5, 10),
        ]);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ús d&#39;un estat:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Book::factory()-&amp;gt;withDiscount()-&amp;gt;create();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;avantatges-dels-factories&quot; tabindex=&quot;-1&quot;&gt;Avantatges dels Factories&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Faciliten la generació massiva de dades.&lt;/li&gt;
&lt;li&gt;Simplifiquen les proves i el desenvolupament amb dades fictícies realistes.&lt;/li&gt;
&lt;li&gt;Redueixen el temps d&#39;inicialització de les aplicacions.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/6-seeders-i-factories-en-laravel/" >
        </entry>
        <entry>
            <title>
                5. Laravel Eloquent
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/5-laravel-eloquent/</id>
            <content type="html">
                &lt;p&gt;Eloquent és l&#39;ORM (Object-Relational Mapping) de Laravel. Proporciona una interfície senzilla i elegant per treballar amb bases de dades relacionals mitjançant models.&lt;/p&gt;
&lt;h3 id=&quot;strong-definicio-de-models-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Definició de Models&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Els models es defineixen dins de la carpeta &lt;code&gt;app/Models&lt;/code&gt; i es poden crear mitjançant Artisan:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:model Movie
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exemple-basic&quot; tabindex=&quot;-1&quot;&gt;Exemple bàsic:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace App&#92;Models;

use Illuminate&#92;Database&#92;Eloquent&#92;Model;

class Movie extends Model
{
    // Taula associada al model
    protected $table = &#39;movies&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per defecte:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El model s&#39;associa a una taula plural (&lt;code&gt;movies&lt;/code&gt; per al model &lt;code&gt;Movie&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Utilitza &lt;code&gt;id&lt;/code&gt; com a clau primària.&lt;/li&gt;
&lt;li&gt;Assumeix l&#39;ús de camps &lt;code&gt;created_at&lt;/code&gt; i &lt;code&gt;updated_at&lt;/code&gt; gestionats automàticament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;strong-us-basic-d-un-model-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Ús bàsic d&#39;un model&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;recuperar-dades&quot; tabindex=&quot;-1&quot;&gt;Recuperar dades:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Tots els registres:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movies = Movie::all();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Registres filtrats:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movies = Movie::where(&#39;rating&#39;, &#39;&amp;gt;&#39;, 4)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Registre únic:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = Movie::findOrFail($id);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;inserir-dades&quot; tabindex=&quot;-1&quot;&gt;Inserir dades:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = new Movie();
$movie-&amp;gt;title = &amp;quot;Inception&amp;quot;;
$movie-&amp;gt;director = &amp;quot;Christopher Nolan&amp;quot;;
$movie-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;actualitzar-dades&quot; tabindex=&quot;-1&quot;&gt;Actualitzar dades:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = Movie::find($id);
$movie-&amp;gt;title = &amp;quot;Updated Title&amp;quot;;
$movie-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;esborrar-dades&quot; tabindex=&quot;-1&quot;&gt;Esborrar dades:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movie = Movie::find($id);
$movie-&amp;gt;delete();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;propietats-comuns-dels-models-eloquent&quot; tabindex=&quot;-1&quot;&gt;Propietats comuns dels Models Eloquent&lt;/h3&gt;
&lt;p&gt;Els models d&#39;Eloquent ofereixen diverses propietats que permeten configurar el comportament de la interacció amb la base de dades. A continuació es detallen les més importants:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace App&#92;Models;

use Illuminate&#92;Database&#92;Eloquent&#92;Model;

class Example extends Model
{
    // Especifica el nom de la taula si no segueix la convenció per defecte
    protected $table = &#39;custom_table_name&#39;;

    // Defineix la clau primària de la taula
    protected $primaryKey = &#39;custom_id&#39;;

    // Indica si la clau primària és autoincremental
    public $incrementing = false;

    // Especifica el tipus de la clau primària (per exemple, string si no és integer)
    protected $keyType = &#39;string&#39;;

    // Defineix quins camps poden ser assignats massivament
    protected $fillable = [&#39;name&#39;, &#39;email&#39;, &#39;password&#39;];

    // Defineix quins camps no poden ser assignats massivament
    protected $guarded = [&#39;is_admin&#39;];

    // Oculta camps quan es converteix a JSON o arrays
    protected $hidden = [&#39;password&#39;, &#39;remember_token&#39;];

    // Defineix quins camps són visibles quan es converteix a JSON o arrays
    protected $visible = [&#39;name&#39;, &#39;email&#39;];

    // Transformació automàtica de camps a un tipus específic
    protected $casts = [
        &#39;is_admin&#39; =&amp;gt; &#39;boolean&#39;,
        &#39;settings&#39; =&amp;gt; &#39;array&#39;,
    ];

    // Indica si la taula té els camps `created_at` i `updated_at`
    public $timestamps = true;

    // Defineix la connexió a la base de dades
    protected $connection = &#39;mysql&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-relacions-en-eloquent-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Relacions en Eloquent&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;1-strong-un-a-un-one-to-one-strong&quot; tabindex=&quot;-1&quot;&gt;1. &lt;strong&gt;Un a un (One-to-One):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un usuari té un perfil:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class User extends Model
{
    public function profile()
    {
        return $this-&amp;gt;hasOneclass;
    }
}

$user = User::find(1);
$profile = $user-&amp;gt;profile;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;2-strong-un-a-molts-one-to-many-strong&quot; tabindex=&quot;-1&quot;&gt;2. &lt;strong&gt;Un a molts (One-to-Many):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un autor té molts llibres:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class Author extends Model
{
    public function books()
    {
        return $this-&amp;gt;hasManyclass;
    }
}

$author = Author::find(1);
$books = $author-&amp;gt;books;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;3-strong-molts-a-molts-many-to-many-strong&quot; tabindex=&quot;-1&quot;&gt;3. &lt;strong&gt;Molts a molts (Many-to-Many):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Un usuari té molts rols:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class User extends Model
{
    public function roles()
    {
        return $this-&amp;gt;belongsToManyclass;
    }
}

$user = User::find(1);
$roles = $user-&amp;gt;roles;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;4-strong-has-many-through-relacions-transitives-strong&quot; tabindex=&quot;-1&quot;&gt;4. &lt;strong&gt;Has Many Through (Relacions transitives):&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Permet accedir a dades relacionades a través d&#39;un altre model.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class Country extends Model
{
    public function posts()
    {
        return $this-&amp;gt;hasManyThroughclass, User::class;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-eager-loading-carrega-eficient-de-relacions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Eager Loading (Càrrega eficient de relacions)&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Per evitar múltiples consultes a la base de dades, pots carregar relacions amb &lt;code&gt;with&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$authors = Author::with(&#39;books&#39;)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-col-leccions-i-agrupacions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Col·leccions i Agrupacions&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Eloquent retorna col·leccions per defecte, que permeten treballar amb &lt;a href=&quot;https://laravel.com/docs/11.x/eloquent-collections#available-methods&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;mètodes&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;strong-mutators-i-accessors-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Mutators i Accessors&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Els &lt;strong&gt;mutators&lt;/strong&gt; permeten transformar dades abans de guardar-les, i els &lt;strong&gt;accessors&lt;/strong&gt; les transformen en recuperar-les.&lt;/p&gt;
&lt;h4 id=&quot;exemple&quot; tabindex=&quot;-1&quot;&gt;Exemple:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class User extends Model
{
    // Accessor
    public function getFullNameAttribute()
    {
        return &amp;quot;{$this-&amp;gt;first_name} {$this-&amp;gt;last_name}&amp;quot;;
    }

    // Mutator
    public function setPasswordAttribute($value)
    {
        $this-&amp;gt;attributes[&#39;password&#39;] = bcrypt($value);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;us&quot; tabindex=&quot;-1&quot;&gt;Ús:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$user = User::find(1);
$fullName = $user-&amp;gt;full_name;

$user-&amp;gt;password = &#39;new_password&#39;;
$user-&amp;gt;save();
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;strong-paginacio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Paginació&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Laravel facilita la paginació:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$movies = Movie::paginate(10);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En la vista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;{{ $movies-&amp;gt;links() }}
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/5-laravel-eloquent/" >
        </entry>
        <entry>
            <title>
                4. Laravel Query Builder
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/4-laravel-query-builder/</id>
            <content type="html">
                &lt;p&gt;El &lt;strong&gt;Query Builder&lt;/strong&gt; de Laravel proporciona una interfície fluida per construir i executar consultes de bases de dades. Permet treballar amb diverses bases de dades de manera senzilla sense escriure SQL brut.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;strong-exemples-d-us-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Exemples d&#39;ús&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;obtenir-tots-els-registres&quot; tabindex=&quot;-1&quot;&gt;Obtenir tots els registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;filtrar-registres&quot; tabindex=&quot;-1&quot;&gt;Filtrar registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;where(&#39;active&#39;, 1)
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;seleccionar-columnes-especifiques&quot; tabindex=&quot;-1&quot;&gt;Seleccionar columnes específiques:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;select(&#39;name&#39;, &#39;email&#39;)
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;ordenar-resultats&quot; tabindex=&quot;-1&quot;&gt;Ordenar resultats:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;orderBy(&#39;name&#39;, &#39;asc&#39;)
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;comptar-registres&quot; tabindex=&quot;-1&quot;&gt;Comptar registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$count = DB::table(&#39;users&#39;)-&amp;gt;count();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;consultes-amb-agregats&quot; tabindex=&quot;-1&quot;&gt;Consultes amb agregats:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$maxSalary = DB::table(&#39;employees&#39;)-&amp;gt;max(&#39;salary&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;consultes-amb-subconsultes&quot; tabindex=&quot;-1&quot;&gt;Consultes amb subconsultes:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$users = DB::table(&#39;users&#39;)
    -&amp;gt;whereExists(function ($query) {
        $query-&amp;gt;selectraw(1)
              -&amp;gt;from(&#39;orders&#39;)
              -&amp;gt;whereColumn(&#39;orders.user_id&#39;, &#39;users.id&#39;);
    })
    -&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;unions&quot; tabindex=&quot;-1&quot;&gt;Unions:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$first = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;type&#39;, &#39;admin&#39;);
$second = DB::table(&#39;users&#39;)-&amp;gt;where(&#39;type&#39;, &#39;customer&#39;);

$users = $first-&amp;gt;union($second)-&amp;gt;get();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;inserir-un-registre&quot; tabindex=&quot;-1&quot;&gt;Inserir un registre:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)-&amp;gt;insert([
    &#39;name&#39; =&amp;gt; &#39;John Doe&#39;,
    &#39;email&#39; =&amp;gt; &#39;john@example.com&#39;,
]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;actualitzar-un-registre&quot; tabindex=&quot;-1&quot;&gt;Actualitzar un registre:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)
    -&amp;gt;where(&#39;id&#39;, 1)
    -&amp;gt;update([&#39;name&#39; =&amp;gt; &#39;Updated Name&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;esborrar-un-registre&quot; tabindex=&quot;-1&quot;&gt;Esborrar un registre:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)
    -&amp;gt;where(&#39;id&#39;, 1)
    -&amp;gt;delete();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;esborrar-tots-els-registres&quot; tabindex=&quot;-1&quot;&gt;Esborrar tots els registres:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;DB::table(&#39;users&#39;)-&amp;gt;truncate();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-avantatges-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Avantatges&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;El Query Builder és ideal per a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consultes personalitzades on el rendiment és una prioritat.&lt;/li&gt;
&lt;li&gt;Consultes complexes que no es poden expressar fàcilment amb Eloquent.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/4-laravel-query-builder/" >
        </entry>
        <entry>
            <title>
                3. Migracions en Laravel
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/3-migracions-en-laravel/</id>
            <content type="html">
                &lt;h3 id=&quot;strong-introduccio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Introducció&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Les migracions són un sistema de control de versions per a bases de dades que permet treballar de manera col·laborativa, mantenint un històric dels canvis realitzats en l&#39;esquema. Amb migracions, pots:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear, modificar i esborrar taules.&lt;/li&gt;
&lt;li&gt;Gestionar l&#39;esquema de manera programàtica utilitzant Artisan i el &lt;strong&gt;Schema Builder&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Revertir canvis mitjançant &lt;code&gt;rollback&lt;/code&gt; o tornar a aplicar tots els canvis amb &lt;code&gt;refresh&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Laravel proporciona un conjunt d&#39;eines intuïtives per gestionar migracions, com Artisan i la classe &lt;strong&gt;Schema&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;strong-estructura-de-les-migracions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Estructura de les migracions&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Totes les migracions es guarden a la carpeta &lt;code&gt;database/migrations&lt;/code&gt; i segueixen una estructura predefinida amb dos mètodes principals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;up&lt;/code&gt;&lt;/strong&gt;: Defineix les operacions que s&#39;han d&#39;aplicar a la base de dades (crear taules, afegir columnes, etc.).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;down&lt;/code&gt;&lt;/strong&gt;: Defineix les operacions inverses per revertir els canvis aplicats per &lt;code&gt;up&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemple bàsic:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function up()
{
    Schema::create(&#39;usuarios&#39;, function (Blueprint $tabla) {
        $tabla-&amp;gt;id();
        $tabla-&amp;gt;string(&#39;nombre&#39;);
        $tabla-&amp;gt;string(&#39;email&#39;)-&amp;gt;unique();
        $tabla-&amp;gt;timestamps();
    });
}

public function down()
{
    Schema::dropIfExists(&#39;usuarios&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per defecte, Laravel afegeix un camp autonumèric &lt;code&gt;id&lt;/code&gt; i dues columnes &lt;code&gt;timestamps&lt;/code&gt; (&lt;code&gt;created_at&lt;/code&gt; i &lt;code&gt;updated_at&lt;/code&gt;) gestionades automàticament.&lt;/p&gt;
&lt;h3 id=&quot;strong-crear-una-migracio-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear una migració&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Utilitza Artisan per crear una nova migració:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration nom_migracio
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest comando genera un fitxer amb un nom que inclou un &lt;strong&gt;timestamp&lt;/strong&gt; per assegurar l&#39;ordre cronològic.&lt;/p&gt;
&lt;h3 id=&quot;strong-exemples-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Exemples&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Crear una taula:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration crear_tabla_usuarios --create=usuarios
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Modificar una taula existent:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan make:migration afegir_camp_a_usuarios --table=usuarios
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Laravel pot inferir accions del nom de la migració gràcies a la classe &lt;strong&gt;TableGuesser&lt;/strong&gt;. Per exemple, si el nom conté &lt;code&gt;create&lt;/code&gt; o &lt;code&gt;to&lt;/code&gt;, Artisan deduirà si és per crear o modificar taules.&lt;/p&gt;
&lt;h3 id=&quot;strong-schema-builder-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Schema Builder&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;La classe &lt;strong&gt;Schema&lt;/strong&gt; és el nucli per definir i modificar l&#39;esquema de les bases de dades. Inclou constructors per crear, modificar i eliminar taules i columnes.&lt;/p&gt;
&lt;h4 id=&quot;strong-crear-una-taula-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear una taula&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::create(&#39;users&#39;, function (Blueprint $table) {
    $table-&amp;gt;id();
    $table-&amp;gt;string(&#39;username&#39;, 32);
    $table-&amp;gt;timestamps();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-eliminar-una-taula-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Eliminar una taula&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::dropIfExists(&#39;users&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-afegir-columnes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Afegir columnes&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::table(&#39;usuarios&#39;, function (Blueprint $table) {
    $table-&amp;gt;string(&#39;telefono&#39;)-&amp;gt;after(&#39;email&#39;)-&amp;gt;nullable();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-eliminar-columnes-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Eliminar columnes&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Schema::table(&#39;usuarios&#39;, function (Blueprint $table) {
    $table-&amp;gt;dropColumn(&#39;telefono&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-tipus-de-columnes-disponibles-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Tipus de columnes disponibles&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Laravel ofereix una àmplia varietat de tipus de columnes per satisfer diferents &lt;a href=&quot;https://laravel.com/docs/11.x/migrations#available-column-types&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;necessitats&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;strong-indexs-i-claus-foranies-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Índexs i claus forànies&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;strong-crear-indexs-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Crear índexs&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$table-&amp;gt;unique(&#39;email&#39;);
$table-&amp;gt;index(&#39;state&#39;);
$table-&amp;gt;primary([&#39;first_name&#39;, &#39;last_name&#39;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;strong-definir-claus-foranies-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Definir claus forànies&lt;/strong&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$table-&amp;gt;foreignId(&#39;user_id&#39;)-&amp;gt;constrained()-&amp;gt;onDelete(&#39;cascade&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;strong-executar-i-revertir-migracions-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Executar i revertir migracions&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Executar migracions pendents:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Revertir l&#39;última migració:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:rollback
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Revertir totes les migracions:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:reset
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Refrescar totes les migracions:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:refresh
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Comprovar l&#39;estat de les migracions:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest conjunt de comandes permet un control complet sobre l&#39;estat de les migracions durant el desenvolupament.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/3-migracions-en-laravel/" >
        </entry>
        <entry>
            <title>
                2. Configuració inicial
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/2-configuracio-inicial/</id>
            <content type="html">
                &lt;p&gt;Laravel suporta diversos motors de bases de dades com MySQL, PostgreSQL, SQLite i SQL Server. La configuració principal es fa al fitxer &lt;code&gt;.env&lt;/code&gt; i &lt;code&gt;config/database.php&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemple de configuració al fitxer &lt;code&gt;.env&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-env&quot;&gt;DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=nom_base_de_dades
DB_USERNAME=usuari
DB_PASSWORD=contrasenya
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Comprovació de connexió:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Després de configurar el &lt;code&gt;.env&lt;/code&gt;, utilitza el comandament:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;php artisan migrate:status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest comandament confirma si Laravel pot connectar-se a la base de dades configurada.&lt;/p&gt;
&lt;h4 id=&quot;strong-deteccio-de-problemes-comuns-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;Detecció de problemes comuns&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Comprovar que l&#39;extensió del driver de la base de dades (com &lt;code&gt;pdo_mysql&lt;/code&gt; o &lt;code&gt;pdo_pgsql&lt;/code&gt;) estigui habilitada al &lt;code&gt;php.ini&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Utilitzar &lt;code&gt;php artisan config:clear&lt;/code&gt; per esborrar la memòria cau de configuracions si els canvis al &lt;code&gt;.env&lt;/code&gt; no es reflecteixen.&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/2-configuracio-inicial/" >
        </entry>
        <entry>
            <title>
                1. Introducció
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/1-introduccio/</id>
            <content type="html">
                &lt;p&gt;Laravel és un framework PHP modern que simplifica el desenvolupament d&#39;aplicacions web, incloent-hi la gestió de bases de dades. La integració amb Eloquent, el seu ORM (Object-Relational Mapping), permet treballar amb bases de dades de forma intuïtiva i eficient.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/8-gestio-de-dades-amb-laravel/1-introduccio/" >
        </entry>
        <entry>
            <title>
                7. Web Scraping
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/7-web-scraping/</id>
            <content type="html">
                &lt;p&gt;Consisteix a navegar a una pàgina web i extraure informació automàticament, a partir del codi HTML generat, i organitzar la informació pública disponible en Internet.&lt;br /&gt;
Aquesta pràctica requereix l&#39;ús d&#39;una llibreria que facilite la descàrrega de la informació desitjada imitant la interacció d&#39;un navegador web. Aquest &amp;quot;robot&amp;quot; pot accedir a diverses pàgines simultàniament.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question] &amp;quot;¿És legal?&amp;quot;&lt;br /&gt;
Si el lloc web indica que té el contingut protegit per drets d&#39;autor o en les normes d&#39;accés via usuari/contrasenya ens avisa de la seua prohibició, estaríem incorrent en un delicte.&lt;br /&gt;
És recomanable estudiar l&#39;arxiu &lt;code&gt;robots.txt&lt;/code&gt; que es troba en l&#39;arrel de cada lloc web.&lt;br /&gt;
Més informació en l&#39;article &lt;a href=&quot;https://ichi.pro/es/el-manual-completo-para-el-web-scraping-legal-y-etico-en-2021-69178542830388&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El manual complet per al web scraping legal i ètic en 2021&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;goutte&quot; tabindex=&quot;-1&quot;&gt;Goutte&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/FriendsOfPHP/Goutte&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Goutte&lt;/a&gt; és un senzill client HTTP per a PHP creat específicament per a fer web scraping. Ho va desenvolupar el mateix autor del framework &lt;em&gt;Symfony&lt;/em&gt; i ofereix un API senzilla per a extraure dades de les respostes HTML/XML dels llocs web.&lt;/p&gt;
&lt;p&gt;Els components principals que abstrau &lt;em&gt;Goutte&lt;/em&gt; sobre &lt;em&gt;Symfony&lt;/em&gt; són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BrowserKit&lt;/code&gt;: simula el comportament d&#39;un navegador web.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CssSelector&lt;/code&gt;: tradueix consultes CSS en consultes XPath.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DomCrawler&lt;/code&gt;: facilita l&#39;ús del DOM i XPath.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per a poder utilitzar &lt;em&gt;Goutte&lt;/em&gt; en el nostre projecte, executarem el següent comando en el terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require fabpot/goutte
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;goutte-con-selectores-css&quot; tabindex=&quot;-1&quot;&gt;Goutte con selectores CSS&lt;/h3&gt;
&lt;p&gt;A continuació farem un exemple molt senzill utilitzant els selectors CSS, extraient informació de la web &lt;code&gt;https://books.toscrape.com/&lt;/code&gt;, la qual és una pàgina per a proves que no rebutjarà les nostres peticions.&lt;/p&gt;
&lt;p&gt;Després de crear un client amb &lt;em&gt;Goutte&lt;/em&gt;, hem de realitzar un petició a una URL. Amb la resposta obtinguda, podem utilitzar el mètode &lt;code&gt;filter&lt;/code&gt; per a indicar-li la ruta CSS que volem recórrer i iterar sobre els resultats mitjançant una funció anònima. Una vegada estem dins d&#39;un determinat node, el mètode &lt;code&gt;text()&lt;/code&gt; ens retornarà el contingut del propi node.&lt;/p&gt;
&lt;p&gt;En concret, ficarem en un array associatiu el títol i el preu de tots els llibres de la categoria &lt;em&gt;Classics&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;../vendor/autoload.php&#39;;

$httpClient = new &#92;Goutte&#92;Client();
$response = $httpClient-&amp;gt;request(&#39;GET&#39;, &#39;https://books.toscrape.com/catalogue/category/books/classics_6/index.html&#39;);
// colocamos los precios en un array
$precios = [];
$response-&amp;gt;filter(&#39;.row li article div.product_price p.price_color&#39;)-&amp;gt;each(
    // le pasamos $precios por referencia para poder editarla dentro del closure
    function ($node) use (&amp;amp;$precios) {
        $precios[] = $node-&amp;gt;text();
    }
);

// colocamos el nombre y el precio en un array asociativo
$contadorPrecios = 0;
$libros = [];
$response-&amp;gt;filter(&#39;.row li article h3 a&#39;)-&amp;gt;each(
    function ($node) use ($precios, &amp;amp;$contadorPrecios, &amp;amp;$libros) {
        $libros[$node-&amp;gt;text()] = $precios[$contadorPrecios];
        $contadorPrecios++;
    }
);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;crawler&quot; tabindex=&quot;-1&quot;&gt;Crawler&lt;/h3&gt;
&lt;p&gt;Un cas molt comú és obtindre la informació d&#39;una pàgina que té els resultats paginados, de manera que anem recorrent els enllaços i accedint a cadascun dels resultats.&lt;/p&gt;
&lt;p&gt;En aquest cas agafarem tots els preus dels llibres de fantasia, i els sumarem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;../vendor/autoload.php&#39;;

use Goutte&#92;Client;
use Symfony&#92;Component&#92;HttpClient&#92;HttpClient;

$client = new Clientcreate([&#39;timeout&#39; =&amp;gt; 60]);
$crawler = $client-&amp;gt;request(&#39;GET&#39;, &#39;https://books.toscrape.com/catalogue/category/books/fantasy_19/index.html&#39;);

$salir = false;

$precios = [];
while (!$salir) {
    $crawler-&amp;gt;filter(&#39;.row li article div.product_price p.price_color&#39;)-&amp;gt;each(
        function ($node) use (&amp;amp;$precios) {
            $texto = $node-&amp;gt;text();
            $cantidad = substr($texto, 2); // Le quitamos las libras ¿2 posiciones?
            $precios[] = floatval($cantidad);
        }
    );

    $enlace = $crawler-&amp;gt;selectLink(&#39;next&#39;);
    if ($enlace-&amp;gt;count() != 0) {
        // el enlace next existe
        $sigPag = $crawler-&amp;gt;selectLink(&#39;next&#39;)-&amp;gt;link();
        $crawler = $client-&amp;gt;click($sigPag); // hacemos click
    } else {
        // ya no hay enlace next
        $salir = true;
    }
}

$precioTotal = array_sum($precios);
echo $precioTotal;
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/7-web-scraping/" >
        </entry>
        <entry>
            <title>
                6. Accès a fitxers
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/6-acces-a-fitxers/</id>
            <content type="html">
                &lt;p&gt;Gràcies a la funció fopen() des de PHP podem obrir arxius que es troben en els nostres servidor o una URL.&lt;/p&gt;
&lt;p&gt;A aquesta funció cal passar-li 2 paràmetres; el nom de l&#39;arxiu que volem obrir i la manera en què s&#39;obrirà&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$fp = fopen(&amp;quot;miarchivo.txt&amp;quot;, &amp;quot;r&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Moltes vegades no podem obrir l&#39;arxiu perquè aquest no es troba o no tenim accés a ell, per això és recomanable comprovar que podem fer-ho&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;if (!$fp = fopen(&amp;quot;miarchivo.txt&amp;quot;, &amp;quot;r&amp;quot;)){
    echo &amp;quot;No se ha podido abrir el archivo&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;maneres-d-obertura-de-fitxers&quot; tabindex=&quot;-1&quot;&gt;Maneres d&#39;obertura de fitxers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r&lt;/code&gt;: Manera lectura. Punter al principi de l&#39;arxiu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r+&lt;/code&gt;: Obertura per a lectura i escriptura. Punter al principi de l&#39;arxiu&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w&lt;/code&gt;: Obertura per a escriptura. Punter al principi de l&#39;arxiu i el sobreescriu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;w+&lt;/code&gt;: Obertura per a lectura i escriptura. Punter al principi de l&#39;arxiu i el sobreescriu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt;: Obertura per a escriptura. Punter al final de l&#39;arxiu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a+&lt;/code&gt;: Obertura per a lectura i escriptura. Punter al final de l&#39;arxiu. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: Creació i obertura per a només escriptura. Punter al principi de l&#39;arxiu. Si l&#39;arxiu ja existeix donarà error E_*WARNING. Si no existeix s&#39;intenta crear.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x+&lt;/code&gt;: Creació i obertura per a lectura i escriptura. Mateix comportament que x.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt;: Obertura per a escriptura. Si no existeix es crea. Si existeix no se sobreescriu ni dona cap error. Punter al principi de l&#39;arxiu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c+&lt;/code&gt;: Obertura per a lectura i escriptura. Mateix comportament que C.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;: Quan es treballa amb arxius binaris com *jpg, pdf, *png i altres. Se sol col·locar al final de la manera, és a dir *rb, r+b, x+b, *wb...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;operacions-amb-arxius&quot; tabindex=&quot;-1&quot;&gt;Operacions amb arxius&lt;/h3&gt;
&lt;p&gt;Per a poder &lt;strong&gt;llegir&lt;/strong&gt; un arxiu necessitem usar la funció &lt;em&gt;fread()&lt;/em&gt; de &lt;em&gt;PHP&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;//  ▒▒▒▒▒▒▒▒ Abriendo un archivo y leyendo su contenido ▒▒▒▒▒▒▒▒

$file = &amp;quot;miarchivo.txt&amp;quot;;
$fp = fopen($file, &amp;quot;r&amp;quot;);

// filesize() nos devuelve el tamaño del archivo en cuestión
$contents = fread($fp, filesize($file));

// Cerramos la conexión con el archivo
fclose();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el que volem és &lt;strong&gt;escriure&lt;/strong&gt; en un arxiu, haurem de fer ús de la funció &lt;em&gt;fwrite()&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;//  ▒▒▒▒▒▒▒▒ Escribiendo en un archivo ▒▒▒▒▒▒▒▒

$file = &amp;quot;miarchivo.txt&amp;quot;;
$texto = &amp;quot;Hola que tal&amp;quot;;

$fp = fopen($file, &amp;quot;w&amp;quot;);

fwrite($fp, $texto);
fclose($fp);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;informacio-d-un-fitxer&quot; tabindex=&quot;-1&quot;&gt;Informació d&#39;un fitxer&lt;/h3&gt;
&lt;p&gt;Amb PHP i el seu mètode &lt;em&gt;stat()&lt;/em&gt; podem obtindre informació sobre els arxius que li indiquem. Aquest mètode retorna fins a un total de 12 elements amb &lt;em&gt;informació&lt;/em&gt; sobre el nostre arxiu.&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;&lt;em&gt;dev&lt;/em&gt;	 número de dispositiu&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ino&lt;/em&gt;	 número d&#39;i-node&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mode&lt;/em&gt;	 manera de protecció de l&#39;i-node&lt;/li&gt;
&lt;li&gt;&lt;em&gt;nlink&lt;/em&gt;	 nombre d&#39;enllaços&lt;/li&gt;
&lt;li&gt;&lt;em&gt;uid&lt;/em&gt;	 ID d&#39;usuari del propietari&lt;/li&gt;
&lt;li&gt;&lt;em&gt;gid&lt;/em&gt;	 ID de grup del propietari&lt;/li&gt;
&lt;li&gt;&lt;em&gt;rdev&lt;/em&gt;	 tipus de dispositiu, si és un dispositiu i-node&lt;/li&gt;
&lt;li&gt;&lt;em&gt;size&lt;/em&gt;	 grandària en bytes&lt;/li&gt;
&lt;li&gt;&lt;em&gt;atime&lt;/em&gt;	 moment de l&#39;últim accés (temps Unix)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;mtime&lt;/em&gt;	 moment de l&#39;última modificació (temps Unix)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;ctime&lt;/em&gt;	 moment de l&#39;última modificació de l&#39;i-node (temps Unix)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;blksize&lt;/em&gt;	 grandària del bloc E/S del sistema de fitxers&lt;/li&gt;
&lt;li&gt;&lt;em&gt;blocks&lt;/em&gt;	 nombre de blocs de 512 bytes assignats&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Uns exemples...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

//  ▒▒▒▒▒▒▒▒ Información del archivo ▒▒▒▒▒▒▒▒

$file = &amp;quot;miarchivo.txt&amp;quot;;
$texto = &amp;quot;Todos somos muy ignorantes, lo que ocurre es que no todos ignoramos las mismas cosas.&amp;quot;;

$fp = fopen($file, &amp;quot;w&amp;quot;);
fwrite($fp, $texto);

$datos = stat($file);

echo $datos[3] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Número de enlaces, 1
echo $datos[7] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Tamaño en bytes, 85
echo $datos[8] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Momento de último acceso, 1444138104
echo $datos[9] . &amp;quot;&amp;lt;br&amp;gt;&amp;quot;; // Momento de última modificación, 1444138251

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dona una ullada a &lt;a href=&quot;https://www.php.net/manual/es/book.dir.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;les funcions de directoris&lt;/a&gt; que té &lt;strong&gt;PHP&lt;/strong&gt;, és molt interessant.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/6-acces-a-fitxers/" >
        </entry>
        <entry>
            <title>
                5. QueryBuilder
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/5-query-builder/</id>
            <content type="html">
                &lt;p&gt;Un Query Builder (Constructor de Consultes) és una eina o classe que facilita la creació, execució i manipulació de consultes SQL en un programa. L&#39;objectiu principal és proporcionar una interfície més intuïtiva i segura per interactuar amb bases de dades, sense haver d&#39;escriure consultes SQL en brut.&lt;/p&gt;
&lt;p&gt;A continuació, detallo algunes de les principals avantatges i característiques d&#39;un Query Builder com el que has compartit anteriorment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;Abstracció de la Base de Dades:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;El Query Builder proporciona una capa d&#39;abstracció que permet interactuar amb diferents tipus de bases de dades (MySQL, PostgreSQL, SQLite, etc.) sense canviar el codi de la teva aplicació. Això facilita la portabilitat i l&#39;escalabilitat del codi.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Seguretat:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Prevé injeccions SQL: Gràcies a l&#39;ús de sentències preparades i enllaçament de paràmetres, el Query Builder ajuda a prevenir atacs d&#39;injecció SQL, una de les amenaces més comunes en desenvolupament web.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Sintaxi Més Neta i Més Fàcil:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Els Query Builders solen proporcionar una sintaxi més neta i fàcil d&#39;entendre que les cadenes SQL pures. Això fa que el codi sigui més llegible i fàcil de mantenir.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Reutilització de Codi:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Les funcions del Query Builder es poden reutilitzar a tot el projecte, reduint la duplicació de codi i facilitant el manteniment.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Flexibilitat:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Permet realitzar consultes complexes amb una sintaxi simplificada, facilitant l&#39;adaptació del codi a canvis en els requeriments de l&#39;aplicació.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Desenvolupament Més Ràpid:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Ajuda a accelerar el procés de desenvolupament, ja que els desenvolupadors no necessiten recordar la sintaxi SQL exacta per a cada tipus de base de dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;Fàcil de Depurar:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;El codi generat pel Query Builder és més fàcil de depurar en comparació amb les llargues cadenes SQL.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&quot;8&quot;&gt;
&lt;li&gt;Suport per a Operacions CRUD:&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Els Query Builders solen incloure suport integrat per a operacions CRUD (Crear, Llegir, Actualitzar, Esborrar), fent més fàcil la manipulació de dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En resum, un Query Builder serveix per simplificar la interacció amb bases de dades, proporcionant una interfície més segura, neta i fàcil d&#39;utilitzar que les cadenes SQL pures. Ajuda a accelerar el desenvolupament, facilita el manteniment i millora la seguretat de l&#39;aplicació.&lt;br /&gt;
Ací en tenim un exemple de construcció casera:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace BatBook;

use PDO;

class QueryBuilder
{
    // Aquesta funció serveix per a construir i executar consultes SQL de tipus SELECT.
    // Es pot filtrar per valors, limitar la quantitat de resultats i establir un offset.
    public static function sql($class, $values=null, $limit = null, $offset = null)
    {
        // Obté el nom de la taula a partir de la propietat estàtica $nameTable de la classe passada com argument.
        $table = $class::$nameTable;
        
        // Obté una connexió a la base de dades.
        $conn = Connection::get();
        
        // Construeix la consulta SQL bàsica.
        $sql = &amp;quot;SELECT * FROM $table&amp;quot;;
        
        // Afegeix condicions WHERE si es proporcionen valors per a filtrar.
        if ($values) {
            $sql .= &amp;quot; WHERE &amp;quot;;
            foreach (array_keys($values) as $key =&amp;gt; $id) {
                if ($key != 0) {
                    $sql .= &amp;quot; AND $id=:$id&amp;quot;;
                } else {
                    $sql .= &amp;quot;$id=:$id&amp;quot;;
                }
            }
        }
        
        // Afegeix les clàusules LIMIT i OFFSET si són necessàries.
        if (isset($limit) &amp;amp;&amp;amp; isset($offset)) {
            $sql .= &amp;quot; LIMIT $limit OFFSET $offset&amp;quot;;
        }
        
        // Prepara la sentència SQL.
        $sentence = $conn-&amp;gt;prepare($sql);
        
        // Enllaça els valors a la sentència.
        foreach ($values??[] as $key =&amp;gt; $value) {
            $sentence-&amp;gt;bindValue(&amp;quot;:$key&amp;quot;, $value);
        }
        
        // Estableix el mode de recuperació a objectes de la classe especificada.
        $sentence -&amp;gt; setFetchModeFETCH_CLASS | PDO::FETCH_PROPS_LATE , $class;
        
        // Executa la consulta.
        $sentence -&amp;gt; execute();
        
        // Retorna tots els resultats obtinguts.
        return  $sentence-&amp;gt;fetchAll();
    }

    // Aquesta funció serveix per a trobar una fila en una taula basant-se en el seu ID.
    public static function find($class, $id)
    {
        //TODO
    }

    // Aquesta funció serveix per a insertar una fila en una taula.
    public static function insert($class, $values)
    {
        $table = $class::$nameTable;
        $conn = Connection::get();
        $sql = &amp;quot;INSERT INTO $table (&amp;quot;;
        foreach (array_keys($values) as $key =&amp;gt; $id) {
            if ($key != 0) {
                $sql .= &#39;,&#39;.$id;
            } else {
                $sql .= $id;
            }
        }
        $sql .= &amp;quot;) VALUES (&amp;quot;;
        foreach (array_keys($values) as $key =&amp;gt; $id) {
            if ($key != 0) {
                $sql .= &#39;,:&#39;.$id;
            } else {
                $sql .= &#39;:&#39;.$id;
            }
        }
        $sql .= &amp;quot;)&amp;quot;;
        $sentence = $conn-&amp;gt;prepare($sql);
        foreach ($values as $key =&amp;gt; $value) {
            $sentence-&amp;gt;bindValue(&amp;quot;:$key&amp;quot;, $value);
        }
        $sentence -&amp;gt; execute();
        return $conn-&amp;gt;lastInsertId();
    }

    // Aquesta funció serveix per a actualitzar una fila en una taula.
    public static function update($class, $values, $id)
    {
        $table = $class::$nameTable;
        $conn = Connection::get();
        $sql = &amp;quot;UPDATE $table SET &amp;quot;;
        foreach (array_keys($values) as $key =&amp;gt; $value) {
            if ($key != 0) {
                $sql .= &#39;,&#39;.$value.&#39;=:&#39;.$value;
            } else {
                $sql .= $value.&#39;=:&#39;.$value;
            }
        }
        $sql .= &amp;quot; WHERE id=:id&amp;quot;;
        $sentence = $conn-&amp;gt;prepare($sql);
        foreach ($values as $key =&amp;gt; $value) {
            $sentence-&amp;gt;bindValue(&amp;quot;:$key&amp;quot;, $value);
        }
        $sentence-&amp;gt;bindValue(&amp;quot;:id&amp;quot;, $id);  
        $sentence -&amp;gt; execute();
        return $id;
    }

    // Aquesta funció serveix per a eliminar una fila en una taula basant-se en el seu ID.
    public static function delete($class, $id)
    {
        //TODO
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En resum, aquesta classe proporciona funcions estàtiques per a la construcció i execució de consultes SQL bàsiques com SELECT, INSERT, UPDATE, i DELETE. Utilitza l&#39;extensió PDO per a la connexió a bases de dades i la preparació de sentències SQL, la qual cosa ajuda a prevenir injeccions SQL. També permet la manipulació fàcil de files en bases de dades, tot retornant objectes de la classe especificada.&lt;/p&gt;
&lt;h3 id=&quot;respotes-d-error&quot; tabindex=&quot;-1&quot;&gt;Respotes d&#39;error&lt;/h3&gt;
&lt;p&gt;Quan no trebem un recurs en al nostra web, podem mostrar a l&#39;usuari una pàgina específica d&#39;error utilitzant la funció header. Una típica seria:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;!-- not-found.php --&amp;gt;
&amp;lt;?php http_response_code(404); ?&amp;gt;
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;IE=edge&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;No trobat&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;404 - Pàgina no trobada&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Ho sentim, la pàgina que estàs buscant no s&#39;ha pogut trobar.&amp;lt;/p&amp;gt;
    &amp;lt;a href=&amp;quot;index.php&amp;quot;&amp;gt;Torna a l&#39;inici&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I per a utilitzar-la:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
header(&amp;quot;Location: not-found.php&amp;quot;);
exit;
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/5-query-builder/" >
        </entry>
        <entry>
            <title>
                4. Login &amp; Password
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/4-login-and-password/</id>
            <content type="html">
                &lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-login-password.gif&quot; alt=&quot;06-login-password.gif&quot; /&gt;&lt;br /&gt;
Per a manejar un sistema complet de login i password amb contrasenyes xifrades, necessitem un mètode que xifre aqueixos &lt;em&gt;strings&lt;/em&gt; que l&#39;usuari introdueix com a contrasenya; tant en el formulari de registre com en el del &lt;em&gt;login&lt;/em&gt;, ja que en codificar una contrasenya, després hem de descodificar-la per a comprovar que totes dues *contrasenyes (la que introdueix l&#39;usuari en el login i la que tenim en la base de dades) coincidisquen.&lt;/p&gt;
&lt;p&gt;Necessitem doncs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;password_hash()&lt;/code&gt; per a emmagatzemar la contrasenya en la base de dades a l&#39;hora de fer el &lt;em&gt;INSERT&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PASSWORD_DEFAULT&lt;/code&gt; emmagatzemem la contrasenya usant el mètode d&#39;encriptació bcrypt&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PASSWORD_BCRYPT&lt;/code&gt; emmagatzemem la contrasenya usant l&#39;algorisme CRYPT_BLOWFISH compatible amb crypt()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;password_verify()&lt;/code&gt; per a verificar l&#39;usuari i la contrasenya&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Almacenando usuario y password en BD ▒▒▒▒▒▒▒▒

    $usu = $_POST[&amp;quot;usuario&amp;quot;];
    $pas = $_POST[&amp;quot;password&amp;quot;];

    $sql = &amp;quot;INSERT INTO usuarios(usuario, password) VALUES (:usuario, :password)&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);

    $isOk = $sentencia -&amp;gt; execute([
        &amp;quot;usuario&amp;quot; =&amp;gt; $usu,
        &amp;quot;password&amp;quot; =&amp;gt; password_hash($pas,PASSWORD_DEFAULT)
    ]);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ara que tenim l&#39;usuari codificat i guardat en la base de dades, el recuperarem per a poder loguejar-lo correctament.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Recuperando usuario y password en BD ▒▒▒▒▒▒▒▒

    $usu = $_POST[&amp;quot;login&amp;quot;] ?? &amp;quot;&amp;quot;;

    $sql = &amp;quot;select * from usuarios where usuario = ?&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; execute([$usu]);

    $usuario = $sentencia -&amp;gt; fetch();

    if($usuario &amp;amp;&amp;amp; password_verify($_POST[&#39;pass&#39;], $usuario[&#39;password&#39;])) {
        echo&amp;quot;OK!&amp;quot;;
    } else {
        echo&amp;quot;KO&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/4-login-and-password/" >
        </entry>
        <entry>
            <title>
                3. PHP Data Objects  PDO
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/3-php-data-objects-pdo/</id>
            <content type="html">
                &lt;p&gt;La classe PDO de PHP s&#39;utilitza per connectar-se a una base de dades i executar consultes SQL de manera segura. Quan construeixes una instància de PDO, pots passar-li diferents atributs en el constructor i opcions per configurar el comportament de la connexió. Aquí tens els atributs principals i el seu propòsit:&lt;/p&gt;
&lt;h3 id=&quot;constructor-de-la-classe-pdo&quot; tabindex=&quot;-1&quot;&gt;Constructor de la classe PDO&lt;/h3&gt;
&lt;p&gt;El constructor de la classe PDO accepta tres paràmetres obligatoris i un opcional:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $pdo = new PDO(string $dsn, string $username, string $password, array $options);

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;$dsn (Data Source Name): És una cadena que especifica el tipus de base de dades i la informació necessària per connectar-s&#39;hi.
&lt;ul&gt;
&lt;li&gt;Format per tipus de base de dades i configuració, per exemple:
&lt;ul&gt;
&lt;li&gt;Mysql:host=localhost;dbname=testdb (per a MySQL).&lt;/li&gt;
&lt;li&gt;pgsql:host=localhost;port=5432;dbname=testdb (per a PostgreSQL).&lt;/li&gt;
&lt;li&gt;sqlite:/path/to/database.db (per a SQLite).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;$username: El nom d&#39;usuari per a la connexió a la base de dades.&lt;/li&gt;
&lt;li&gt;$password: La contrasenya associada al nom d&#39;usuari.&lt;/li&gt;
&lt;li&gt;$options (Opcional): Un array d&#39;opcions per definir el comportament de la connexió. Aquests són alguns dels valors més comuns que es poden definir en aquest array:
&lt;ul&gt;
&lt;li&gt;PDO::ATTR_ERRMODE: Controla com es gestionen els errors. Alguns valors comuns són:
&lt;ul&gt;
&lt;li&gt;PDO::ERRMODE_SILENT: Els errors no generen cap missatge.&lt;/li&gt;
&lt;li&gt;PDO::ERRMODE_WARNING: Els errors generen un avís.&lt;/li&gt;
&lt;li&gt;PDO::ERRMODE_EXCEPTION: Els errors generen una excepció, que és el més recomanable per controlar errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PDO::ATTR_DEFAULT_FETCH_MODE: Defineix el mode de recuperació de dades per defecte, com ara:
&lt;ul&gt;
&lt;li&gt;PDO::FETCH_ASSOC: Retorna les dades com un array associatiu.&lt;/li&gt;
&lt;li&gt;PDO::FETCH_OBJ: Retorna les dades com un objecte.&lt;/li&gt;
&lt;li&gt;PDO::FETCH_BOTH: Retorna les dades com un array associatiu i numèric.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PDO::ATTR_PERSISTENT: Habilita connexions persistents. Una connexió persistent pot millorar el rendiment mantenint la connexió activa per múltiples peticions en lloc de crear-ne una nova cada vegada.&lt;/li&gt;
&lt;li&gt;PDO::ATTR_TIMEOUT: Defineix un temps límit per a la connexió en segons.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;exemple-de-connexio-amb-pdo&quot; tabindex=&quot;-1&quot;&gt;Exemple de connexió amb PDO&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dsn = &amp;quot;mysql:host=localhost;dbname=testdb&amp;quot;;
$username = &amp;quot;usuari&amp;quot;;
$password = &amp;quot;contrasenya&amp;quot;;
$options = [
    PDO::ATTR_ERRMODE =&amp;gt; PDO::ERRMODE_EXCEPTION,
    PDO::ATTR_DEFAULT_FETCH_MODE =&amp;gt; PDO::FETCH_ASSOC,
    PDO::ATTR_PERSISTENT =&amp;gt; true,
    PDO::MYSQL_ATTR_INIT_COMMAND =&amp;gt; &amp;quot;SET NAMES utf8&amp;quot;
];

try {
    $pdo = new PDO($dsn, $username, $password, $options);
    echo &amp;quot;Connexió establerta amb èxit!&amp;quot;;
} catch (PDOException $e) {
    echo &amp;quot;Error de connexió: &amp;quot; . $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest codi estableix una connexió a una base de dades MySQL amb un joc de caràcters utf8, una connexió persistent, i llança excepcions en cas d&#39;errors.&lt;/p&gt;
&lt;p&gt;Qualsevol error que es llance a través de &lt;strong&gt;PDO&lt;/strong&gt;, el sistema llançarà una  &lt;strong&gt;PDOException&lt;/strong&gt; .&lt;/p&gt;
&lt;h3 id=&quot;fitxer-de-configuracio-de-la-bd&quot; tabindex=&quot;-1&quot;&gt;Fitxer de configuració de la BD&lt;/h3&gt;
&lt;p&gt;De la mateixa manera que podem tenir el nostre arxiu de funcions &lt;code&gt;funciones.php&lt;/code&gt; i alberguem totes les funcions que s&#39;usen de manera global en l&#39;aplicació, podem establir un arxiu de constants on definim els paràmetres de connexió amb la base de dades.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

    //  ▒▒▒▒▒▒▒▒ conexion.php ▒▒▒▒▒▒▒▒

    constDSN = &amp;quot;mysql:host=localhost;dbname=dwes&amp;quot;;
    constUSUARIO = &amp;quot;dwes&amp;quot;;
    constPASSWORD = &amp;quot;abc123&amp;quot;;

    /*  ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

        ▒▒▒▒▒▒▒▒ NO SUBAS ESTE ARCHIVO A git ▒▒▒▒▒

        ▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒ */

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest arxiu conté informació &lt;span class=&quot;alert&quot;&gt;&lt;strong&gt;molt sensible&lt;/strong&gt;&lt;/span&gt; així que no és recomanable que puges aquest arxiu a &lt;strong&gt;git&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sentencies-preparades&quot; tabindex=&quot;-1&quot;&gt;Sentències preparades&lt;/h3&gt;
&lt;p&gt;Es tracta de sentències que s&#39;estableixen com si foren plantilles de la SQL que llançarem, acceptant paràmetres que són establits a posteriori de la declaració de la sentència preparada.&lt;/p&gt;
&lt;p&gt;Les sentències preparades eviten la &lt;strong&gt;injecció&lt;/strong&gt; de SQL (SQL Injection) i milloren el rendiment de nostres &lt;em&gt;aplicacions&lt;/em&gt; o pàgines web.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $sql = &amp;quot;INSERT INTO Clientes VALUES (?, ?, ?, ?)&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada interrogant és un paràmetre que establirem després, unes quantes línies més a baix.&lt;/p&gt;
&lt;p&gt;Una vegada tenim la plantilla de la nostra consulta, hem de seguir amb la preparació juntament amb 3 mètodes més de &lt;strong&gt;PHP&lt;/strong&gt; per a la seua completa execució:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prepare:&lt;/code&gt; prepara la &lt;strong&gt;sentencia&lt;/strong&gt; abans de ser executada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bind&lt;/code&gt;: el tipus d&#39;unió (*&lt;em&gt;bind&lt;/em&gt;^) de dada que pot ser mitjançant &#39; ? &#39; o &#39; :parametre &#39;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execute&lt;/code&gt; s&#39;executa la consulta unint la plantilla amb les &lt;em&gt;variables&lt;/em&gt; o paràmetres que hem establit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;exemple-parametros&quot; tabindex=&quot;-1&quot;&gt;Exemple paràmetros&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
     

    include &amp;quot;config/database.inc.php&amp;quot;;

    $conexion = null;

    try { 
        $cantidad = $_GET[&amp;quot;cantidad&amp;quot;];

        $conexion = new PDO(DSN, USUARIO, PASSWORD);
        $conexion -&amp;gt; setAttributeATTR_ERRMODE, PDO::ERRMODE_EXCEPTION;

        $sql = &amp;quot;DELETE FROM stock WHERE unidades = ?&amp;quot;;
        $sentencia = $conexion -&amp;gt; prepare($sql);

        $isOk = $sentencia -&amp;gt; execute([$cantidad]);
        $cantidadAfectada = $sentencia -&amp;gt; rowCount();

        echo $cantidadAfectada;
    } catch (PDOException $e) {
        echo $e -&amp;gt; getMessage();
    }

    $conexion = null
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;exemple-bind-param&quot; tabindex=&quot;-1&quot;&gt;Exemple bindParam&lt;/h3&gt;
&lt;p&gt;Molt semblant a utilitzar paràmetres però aquesta vegada la variable està dins de la sentència SQL, en aquest cas l&#39;hem anomenada &lt;code&gt;:cant&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    include &amp;quot;config/database.inc.php&amp;quot;;

    $conexion=null;

    try {
        $cantidad = $_GET[&amp;quot;cantidad&amp;quot;] ?? 0;

        $conexion = new PDO(DSN, USUARIO, PASSWORD);
        $conexion -&amp;gt; setAttributeATTR_ERRMODE, PDO::ERRMODE_EXCEPTION;

        $sql = &amp;quot;DELETE FROM stock WHERE unidades = :cant&amp;quot;;

        $sentencia = $conexion -&amp;gt; prepare($sql);
        $sentencia -&amp;gt; bindParam(&amp;quot;:cant&amp;quot;, $cantidad);
        
        $isOk = $sentencia -&amp;gt; execute();
        
        $cantidadAfectada = $sentencia -&amp;gt; rowCount();
        
        echo $cantidadAfectada;
    } catch (PDOException $e) {
        echo $e -&amp;gt; getMessage();
    }

    $conexion = null;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;bind-param-vs-bind-value&quot; tabindex=&quot;-1&quot;&gt;bindParam VS bindValue&lt;/h3&gt;
&lt;p&gt;Utilitzarem &lt;code&gt;bindValue()&lt;/code&gt; quan hàgem d&#39;inserir dades només una vegada, en canvi, haurem d&#39;usar &lt;code&gt;bindParam()&lt;/code&gt; quan hàgem de passar dades múltiples, com per exemple, un &lt;em&gt;array&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    // se asignan nombre a los parámetros
    $sql = &amp;quot;DELETE FROM stock WHERE unidades = :cant&amp;quot;;
    $sentencia = $conexion -&amp;gt; prepare($sql);

    // bindParam enlaza por referencia
    $cantidad = 0;

    $sentencia -&amp;gt; bindParam(&amp;quot;:cant&amp;quot;, $cantidad);
    $cantidad = 1;

    // se eliminan con cant = 1
    $isOk = $sentencia -&amp;gt; execute();

    // bindValue enlaza por valor
    $cantidad = 0;

    $sentencia -&amp;gt; bindValue(&amp;quot;:cant&amp;quot;, $cantidad);
    $cantidad = 1;

    // se eliminan con cant = 0
    $isOk = $sentencia-&amp;gt;execute();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per a més informació i ús de les variables &lt;em&gt;PDO&lt;/em&gt; &lt;a href=&quot;https://www.php.net/manual/es/pdo.constants.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;consulta el manual de PHP&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;inserint-registres&quot; tabindex=&quot;-1&quot;&gt;Inserint registres&lt;/h3&gt;
&lt;p&gt;A l&#39;hora d&#39;inserir registres en una base de dades, hem de tindre en compte que en la taula pot haver-hi valors autoincrementats. Per a salvaguardar açò, el que hem de fer és deixar aqueix camp autoincrementat buit, però a l&#39;hora de fer la connexió, hem de recuperar-ho amb el mètode &lt;code&gt;lastInsertId()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    $nombre = $_GET[&amp;quot;nombre&amp;quot;] ?? &amp;quot;SUCURSAL X&amp;quot;;
    $telefono = $_GET[&amp;quot;telefono&amp;quot;] ?? &amp;quot;636123456&amp;quot;;

    $sql=&amp;quot;INSERT INTO tienda(nombre, tlf) VALUES (:nombre, :telefono)&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; bindParam(&amp;quot;:nombre&amp;quot;, $nombre);
    $sentencia -&amp;gt; bindParam(&amp;quot;:telefono&amp;quot;, $telefono);

    $isOk = $sentencia -&amp;gt; execute();
    $idGenerado = $conexion -&amp;gt; lastInsertId();

    echo $idGenerado;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consultant-registres&quot; tabindex=&quot;-1&quot;&gt;Consultant registres&lt;/h3&gt;
&lt;p&gt;A l&#39;hora de recuperar els resultats d&#39;una consulta, bastarà amb invocar al mètode &lt;code&gt;PDOStatement::fetch&lt;/code&gt; per a llistar les files generades per la consulta.&lt;/p&gt;
&lt;p&gt;Però hem de triar el tipus de dada que volem rebre entre els 3 que hi ha disponibles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PDO::FETCH_ASSOC:&lt;/code&gt; array indexat que els seus keys són el nom de les columnes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PDO::FETCH_NUM:&lt;/code&gt; array indexat que els seus keys són números.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PDO::FETCH_BOTH:&lt;/code&gt; valor per defecte. Retorna un array indexat que els seus keys són tant el nom de les columnes com números.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-pdo-listado-fetch.png&quot; alt=&quot;06-pdo-listado-fetch.png&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ consulta con array asociativo.php ▒▒▒▒▒▒▒▒

    include &amp;quot;config/database.inc.php&amp;quot;;

    $conexion = null;

    try{
        $conexion = new PDO(DSN, USUARIO, PASSWORD);
        $conexion -&amp;gt; setAttributeATTR_ERRMODE, PDO::ERRMODE_EXCEPTION;

        $sql = &amp;quot;select * from tienda&amp;quot;;

        $sentencia = $conexion -&amp;gt; prepare($sql);
        $sentencia -&amp;gt; setFetchModeFETCH_ASSOC;
        $sentencia -&amp;gt; execute();
        
        while($fila = $sentencia -&amp;gt; fetch()){
            echo &amp;quot;Codigo:&amp;quot; . $fila[&amp;quot;cod&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
            echo &amp;quot;Nombre:&amp;quot; . $fila[&amp;quot;nombre&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
            echo &amp;quot;Teléfono:&amp;quot; . $fila[&amp;quot;tlf&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        }

    }catch(PDOException $e) {
        echo $e -&amp;gt; getMessage();
    }

    $conexion = null;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuperant dades amb una matriu com a resultat de la nostra consulta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ consulta con array asociativo ▒▒▒▒▒▒▒▒

    $sql=&amp;quot;SELECT * FROM tienda&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_ASSOC;
    $sentencia -&amp;gt; execute();

    $tiendas = $sentencia -&amp;gt; fetchAll();

    foreach($tiendasas$tienda) {
        echo&amp;quot;Codigo:&amp;quot; . $tienda[&amp;quot;cod&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo&amp;quot;Nombre:&amp;quot; . $tienda[&amp;quot;nombre&amp;quot;] . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Però si el que volem és llegir dades amb forma d&#39;objecte utilitzant &lt;code&gt;PDO::FETCH_OBJ&lt;/code&gt;, hem de crear un objecte amb propietats públiques amb el mateix nom que les columnes de la taula que anem a consultar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ consulta con formato de objeto ▒▒▒▒▒▒▒▒

    $sql=&amp;quot;SELECT * FROM tienda&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_OBJ;
    $sentencia -&amp;gt; execute();

    while($t = $sentencia -&amp;gt; fetch()) {
        echo&amp;quot;Codigo:&amp;quot; . $t -&amp;gt; cod . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo&amp;quot;Nombre:&amp;quot; . $t -&amp;gt; nombre . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo&amp;quot;Teléfono:&amp;quot; . $t -&amp;gt; tlf . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consultes-amb-models&quot; tabindex=&quot;-1&quot;&gt;Consultes amb models&lt;/h3&gt;
&lt;p&gt;Portem temps creant classes en PHP i les consultes també admeten aquest tipus de dades mitjançant l&#39;ús de &lt;code&gt;PDO::FETCH_CLASS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Si usem aquest mètode, hem de tindre en compte que els noms dels atributs privats han de coincidir amb els noms de les columnes de la taula que anem a manejar.&lt;/p&gt;
&lt;p&gt;Així doncs, si pel que siga canviem l&#39;estructura de la taula &lt;span class=&quot;alert&quot;&gt;&lt;strong&gt;HEM DE CANVIAR&lt;/strong&gt;&lt;/span&gt; la nostra classe perquè tot continue funcionant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ clase Tienda ▒▒▒▒▒▒▒▒

    classTienda {
        private int $cod;
        private string $nombre;
        private ? string $tlf;
        
        public function getCodigo() : int {
            return $this -&amp;gt; cod;
        }
        
        public function getNombre() : string {
            return $this -&amp;gt; nombre;
        }
        
        public function getTelefono() : ?string {
            return $this -&amp;gt; tlf;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Consultando a través de la clase Tienda ▒▒▒▒▒▒▒▒

    $sql = &amp;quot;SELECT * FROM tienda&amp;quot;;
    $sentencia = $conexion -&amp;gt; prepare($sql);

    // Aquí &#39;Tienda&#39; es el nombre de nuestra clase
    $sentencia -&amp;gt; setFetchModeFETCH_CLASS, Tienda::class;
    $sentencia -&amp;gt; execute();

    while($t = $sentencia -&amp;gt; fetch()) {
        echo &amp;quot;Codigo: &amp;quot; . $t -&amp;gt; getCodigo() . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo &amp;quot;Nombre: &amp;quot; . $t -&amp;gt; getNombre() . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        echo &amp;quot;Teléfono: &amp;quot; . $t -&amp;gt; getTelefono() . &amp;quot;&amp;lt;br /&amp;gt;&amp;quot;;
        
        var_dump($t);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Però què passa si les nostres classes tenen constructor? doncs que hem d&#39;indicar-li, al mètode FECTH, que emplene les propietats després de cridar al constructor i per a això fem ús de &lt;code&gt;PDO::FETCH_PROPS_LATE&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Consulta para una clase con constructor ▒▒▒▒▒▒▒▒

    $sql = &amp;quot;SELECT * FROM tienda&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class;
    $sentencia -&amp;gt; execute();

    $tiendas = $sentencia -&amp;gt; fetchAll();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;consultes-amb-like&quot; tabindex=&quot;-1&quot;&gt;Consultes amb LIKE&lt;/h3&gt;
&lt;p&gt;Per a utilitzar el comodí &lt;em&gt;LIKE&lt;/em&gt; o altres comodins, hem d&#39;associar-lo a la dada i MAI en la pròpia consulta.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    //  ▒▒▒▒▒▒▒▒ Utilizando comodines :: LIKE ▒▒▒▒▒▒▒▒

    $sql = &amp;quot;SELECT * FROM tienda where nombre like :nombre or tlf like :tlf&amp;quot;;

    $sentencia = $conexion -&amp;gt; prepare($sql);
    $sentencia -&amp;gt; setFetchModeFETCH_CLASS | PDO::FETCH_PROPS_LATE, Tienda::class;

    $cadBuscar = &amp;quot;%&amp;quot; . $busqueda . &amp;quot;%&amp;quot;;

    $sentencia -&amp;gt; execute([&amp;quot;nombre&amp;quot; =&amp;gt; $cadBuscar,&amp;quot;tlf&amp;quot; =&amp;gt; $cadBuscar]);

    $result = $sentencia -&amp;gt; fetchAll();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Teniu una llista d&#39;exemples molt completa en la &lt;a href=&quot;https://phpdelusions.net/pdo/objects&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/3-php-data-objects-pdo/" >
        </entry>
        <entry>
            <title>
                2. Bases de dades relacionals (SQL)
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/2-bases-de-dades-relacionals-sql/</id>
            <content type="html">
                &lt;h3 id=&quot;instal-lacio&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h3&gt;
&lt;p&gt;A través de &lt;strong&gt;XAMPP&lt;/strong&gt; és molt senzill, simplement ens descarregaríem el programa i l&#39;activaríem. Per a descarregar XAMPP &lt;a href=&quot;https://www.apachefriends.org/es/download.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;prem ací&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Amb &lt;em&gt;&lt;strong&gt;Docker&lt;/strong&gt;&lt;/em&gt; utilitzarem un altre  repositori que inclou el mysql i el phpMyAdmin i llancem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker-compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tot ha eixit bé i el contenidor està en marxa, podrem visitar la pàgina de phpMyAdmin de la següent manera&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;http://localhost:8000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-bbdd-phpMyAdmin-login.png&quot; alt=&quot;06-bbdd-phpMyAdmin-login.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Per a accedir hem d&#39;utilitzar les següents credencials que venen configurades en el arxiu &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usuario: root
contraseña: 1234
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;estructura-d-una-base-de-dades&quot; tabindex=&quot;-1&quot;&gt;Estructura d&#39;una base de dades&lt;/h3&gt;
&lt;p&gt;Sabem que una base de dades té molts camps amb els seus noms i valors, però a més sabem que la base de dades ha de tindre un nom. per tant tindríem la següent estructura per a una base de dades:&lt;/p&gt;
&lt;p&gt;NombreBaseDeDatos&lt;br /&gt;
|__Tabla-#1&lt;br /&gt;
|       |__DatosTabla-#1&lt;br /&gt;
|&lt;br /&gt;
|__Tabla-#2&lt;br /&gt;
|       |__DatosTabla-#2&lt;br /&gt;
|&lt;br /&gt;
|__Tabla-#3&lt;br /&gt;
|       |__DatosTabla-#3&lt;br /&gt;
[...]&lt;/p&gt;
&lt;p&gt;Vegem-ho en un exemple real&lt;/p&gt;
&lt;p&gt;Ryanair&lt;br /&gt;
|__pasajero&lt;br /&gt;
|    |__id[&lt;em&gt;]&lt;br /&gt;
|    |__nombre&lt;br /&gt;
|    |__apellidos&lt;br /&gt;
|    |__edad&lt;br /&gt;
|    |__id_vuelo[^]&lt;br /&gt;
|&lt;br /&gt;
|__vuelo&lt;br /&gt;
|    |__id[&lt;/em&gt;]&lt;br /&gt;
|    |__n_plazas&lt;br /&gt;
|    |__disponible&lt;br /&gt;
|    |__id_pais[^]&lt;br /&gt;
|&lt;br /&gt;
|__pais&lt;br /&gt;
|__id[*]&lt;br /&gt;
|__nombre&lt;/p&gt;
&lt;div class=&quot;leyenda&quot;&gt;
    [*] Clau primària [^] Clave Forània
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-bbdd-estructura.png&quot; alt=&quot;06-bbdd-estructura.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;sql&quot; tabindex=&quot;-1&quot;&gt;SQL&lt;/h3&gt;
&lt;p&gt;Aquest llenguatge de consulta estructurada (&lt;em&gt;Structured Query Language&lt;/em&gt;) és el que utilitzarem per a realitzar les consultes a les nostres bases de dades per a mostrar el contingut en les diferents interfícies web que creem al llarg de la unitat. Si vols saber més detalls visita &lt;a href=&quot;https://es.wikipedia.org/wiki/sql&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wiki SQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Exemple d&#39;una sentència SQL on seleccionem totes les files i columnes de la nostra taula anomenada &lt;strong&gt;&#39;pais&#39;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;SELECT * FROM pais
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estas sentencias pueden invocarse desde la consola de comandos mediante el intérprete &lt;em&gt;mysql&lt;/em&gt; (previamente instalado en el sistema) o a través de la herramienta phpMyAdmin.&lt;/p&gt;
&lt;p&gt;Las sentencias SQL también las podemos usar dentro de nuestro código php, de tal manera que cuando se cargue nuestra interfaz web, lance una sentecia SQL para mostrar los datos que queramos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
    // Llistat de clients, adreçats per DNI de manera ASCendent
    $clientesOrdenadosPorDNI = &amp;quot;SELECT * FROM `pasajero` ORDER BY `dni`&amp;quot; ASC;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;php-my-admin&quot; tabindex=&quot;-1&quot;&gt;phpMyAdmin&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-bbdd-phpMyAdmin-logo.png&quot; alt=&quot;06-bbdd-phpMyAdmin-logo.png&quot; /&gt;&lt;br /&gt;
Aquest programari funciona sota Ngingx i PHP i és més que res una interfície web per a gestionar les bases de dades que tinguem disponibles en el nostre servidor local. Molts *&lt;em&gt;hostings&lt;/em&gt; ofereixen aquesta eina per defecte per a poder gestionar les BBDD que tinguem configurades sota el nostre compte.&lt;/p&gt;
&lt;h4 id=&quot;creant-una-base-de-dades-dins-de-php-my-admin&quot; tabindex=&quot;-1&quot;&gt;Creant una base de dades dins de phpMyAdmin&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-bbdd-phpMyAdmin.gif&quot; alt=&quot;06-bbdd-phpMyAdmin.gif&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Per a crear una nova base de dades hem d&#39;entrar en &lt;em&gt;phpMyAdmin&lt;/em&gt; com a &lt;em&gt;usuari root&lt;/em&gt; i punxar en l&#39;opció &lt;span class=&quot;warning&quot;&gt;&lt;em&gt;Nova&lt;/em&gt;&lt;/span&gt; del menú de l&#39;esquerra.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;En la nova finestra de creació posarem un &lt;strong&gt;nom&lt;/strong&gt; a nostra &lt;em&gt;bbdd&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;També establirem el &lt;strong&gt;cotejamiento&lt;/strong&gt; &lt;span class=&quot;warning&quot;&gt;&lt;em&gt;utf8m4_unicode_ci&lt;/em&gt;&lt;/span&gt; perquè nostra &lt;em&gt;bbdd&lt;/em&gt; suporte tot tipus de caràcters (com els asiàtics) i fins i tot &lt;em&gt;emojis&lt;/em&gt; ;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Li donem al botó de &lt;strong&gt;Crear&lt;/strong&gt; per a crear la &lt;em&gt;bbdd&lt;/em&gt; i començar a escriure les diferents taules que anem a introduir en ella.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;El sistema generarà el codi SQL per a crear tot el que li hem posat i crearà la base de dades amb les taules que li hàgem ficat.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sql&quot;&gt;CREATE TABLE `persona`. ( `id` INT NOT NULL AUTO_INCREMENT , `nombre` TINYTEXT NOT NULL , `apellidos` TEXT NOT NULL , `telefono` TINYTEXT NOT NULL , PRIMARY KEY (`id`)) ENGINE = InnoDB;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;opcions-en-php-my-admin&quot; tabindex=&quot;-1&quot;&gt;Opcions en phpMyAdmin&lt;/h4&gt;
&lt;p&gt;Quan seleccionem una base de dades de la llista, el sistema ens mostra diverses pestanyes amb les quals interactuar amb la base de dades en qüestió:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Estructura&lt;/code&gt;: Podem veure les diferents taules que consoliden la nostra base de dades&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SQL&lt;/code&gt;: Per si volem injectar codi SQL perquè el sistema l&#39;interprete&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Buscar&lt;/code&gt;: Serveix per a buscar per termes, en la nostra base de dades, aplicant diferents filtres de cerca&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Generar consulta&lt;/code&gt;: semblança a SQL però d&#39;una manera més gràfica, sense haver de saber res del llenguatge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Exportar i importar&lt;/code&gt;: Com el seu nom indica, per a fer qualsevol de les 2 operacions sobre la base de dades&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Operacions&lt;/code&gt;: Diferents opcions avançades per a realitzar en la nostra base de dades, de la qual destacarem l&#39;opció &lt;em&gt;Cotejamiento&lt;/em&gt; on podrem canviar el &lt;em&gt;cotejamiento&lt;/em&gt; de la nostra taula però &lt;span class=&quot;alert&quot;&gt;&lt;em&gt;ULL AMB ACÔ&lt;/em&gt; perquè podem eliminar dades sense voler, ja que en canviar el &lt;em&gt;cotejamiento&lt;/em&gt; podem suprimir caràcters no suportats pel nou &lt;em&gt;cotejamiento&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No aprofundirem en la resta d&#39;opcions però, en la pestanya &lt;strong&gt;Més&lt;/strong&gt; existeix l&#39;opció &lt;strong&gt;Dissenyador&lt;/strong&gt; per a poder editar les relacions entre taules d&#39;una manera gràfica (punxant i arrossegant) que veurem més endavant.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/2-bases-de-dades-relacionals-sql/" >
        </entry>
        <entry>
            <title>
                1. Introducció a les tecnologies per accedir a dades
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/1-introduccio-a-les-tecnologies-per-accedir-a-dades/</id>
            <content type="html">
                &lt;h3 id=&quot;bases-de-dades-relacionals-sql&quot; tabindex=&quot;-1&quot;&gt;Bases de dades relacionals (SQL)&lt;/h3&gt;
&lt;p&gt;Les bases de dades relacionals utilitzen llenguatge SQL per emmagatzemar i recuperar dades de taules relacionades. En PHP, les tecnologies més utilitzades per accedir-hi són &lt;strong&gt;PDO&lt;/strong&gt; i &lt;strong&gt;MySQLi&lt;/strong&gt;. &lt;strong&gt;PDO&lt;/strong&gt; suporta múltiples sistemes de bases de dades (MySQL, PostgreSQL, etc.), mentre que &lt;strong&gt;MySQLi&lt;/strong&gt; està dissenyat específicament per a MySQL.&lt;/p&gt;
&lt;h3 id=&quot;bases-de-dades-no-sql&quot; tabindex=&quot;-1&quot;&gt;Bases de dades NoSQL&lt;/h3&gt;
&lt;p&gt;Les bases de dades NoSQL, com &lt;strong&gt;MongoDB&lt;/strong&gt; o &lt;strong&gt;Firebase&lt;/strong&gt;, emmagatzemen dades en formats no estructurats, com JSON. Aquestes són ideals per a aplicacions que gestionen grans volums de dades o dades no estructurades. &lt;strong&gt;MongoDB&lt;/strong&gt; és un sistema orientat a documents, mentre que &lt;strong&gt;Firebase&lt;/strong&gt; és conegut per les seves capacitats en temps real.&lt;/p&gt;
&lt;h3 id=&quot;acces-a-ap-is&quot; tabindex=&quot;-1&quot;&gt;Accés a APIs&lt;/h3&gt;
&lt;p&gt;Les &lt;strong&gt;APIs REST&lt;/strong&gt; permeten accedir a dades de serveis web externs utilitzant sol·licituds HTTP i respostes en formats com JSON o XML. &lt;strong&gt;GraphQL&lt;/strong&gt; és una alternativa moderna que permet sol·licituds més específiques, només retornant les dades necessàries, en contrast amb les sol·licituds REST, que poden ser més generals.&lt;/p&gt;
&lt;h3 id=&quot;web-scraping&quot; tabindex=&quot;-1&quot;&gt;Web Scraping&lt;/h3&gt;
&lt;p&gt;El &lt;strong&gt;web scraping&lt;/strong&gt; és el procés d&#39;extracció automàtica de dades de pàgines web. Aquesta tècnica es pot utilitzar per recuperar informació d&#39;una pàgina web quan no hi ha una API disponible. En PHP, es poden utilitzar diverses biblioteques per descarregar i analitzar contingut HTML, com ara &lt;strong&gt;cURL&lt;/strong&gt; i &lt;strong&gt;DOMDocument&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&quot;consideracions-de-seguretat&quot; tabindex=&quot;-1&quot;&gt;Consideracions de seguretat&lt;/h3&gt;
&lt;p&gt;És fonamental garantir la seguretat quan es treballa amb l&#39;accés a dades. Això inclou protegir les aplicacions contra vulnerabilitats comunes, com les &lt;strong&gt;injeccions SQL&lt;/strong&gt;, i assegurar les connexions utilitzant &lt;strong&gt;SSL/TLS&lt;/strong&gt; quan es comuniqui amb bases de dades remotes o APIs externes.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/1-introduccio-a-les-tecnologies-per-accedir-a-dades/" >
        </entry>
        <entry>
            <title>
                0. Indice
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/0-indice/</id>
            <content type="html">
                &lt;blockquote&gt;
&lt;p&gt;[!abstract] &amp;quot;Duració i criteris d&#39;avaluació&amp;quot;&lt;br /&gt;
Duració estimada: 10 hores&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resultat d&#39;aprenentatge&lt;/th&gt;
&lt;th&gt;Criteris d&#39;avaluació&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;6. Desenvolupa aplicacions web d&#39;accés a magatzems de dades, aplicant mesures per a mantindre la seguretat i la integritat de la informació.&lt;/td&gt;
&lt;td&gt;a) S&#39;han analitzat les tecnologies que permeten l&#39;accés mitjançant programació a la informació disponible en magatzems de dades.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;b) S&#39;han creat aplicacions que establisquen connexions amb bases de dades.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;c) S&#39;ha recuperat informació emmagatzemada en bases de dades.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;d) S&#39;ha publicat en aplicacions web la informació recuperada.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;e) S&#39;han utilitzat conjunts de dades per a emmagatzemar la informació.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;f) S&#39;han creat aplicacions web que permeten l&#39;actualització i l&#39;eliminació  d&#39;informació disponible en una base de dades.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;g) S&#39;han provat i documentat les aplicacions web.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;En aquesta unitat aprendrem a accedir a dades que es troben en un servidor; recuperant, editant i creant aquestes dades a través d&#39;una base de dades.&lt;/p&gt;
&lt;p&gt;A través de les diferents capes o nivells, de les quals 2 d&#39;elles ja coneixem (&lt;em&gt;Nginx&lt;/em&gt;, &lt;em&gt;PHP&lt;/em&gt;) i &lt;em&gt;MySQL&lt;/em&gt; la que estudiarem en aquest tema.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-bbdd-arquitectura-3-niveles.png&quot; alt=&quot;06-bbdd-arquitectura-3-niveles.png&quot; /&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/5-acceso-a-datos/0-indice/" >
        </entry>
        <entry>
            <title>
                phpoo
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/phpoo/</id>
            <content type="html">
                &lt;h1 id=&quot;desenvolupament-d-aplicacions-web-poo-separacio-de-logica-i-presentacio-gestio-d-errors-i-proves&quot; tabindex=&quot;-1&quot;&gt;Desenvolupament d&#39;Aplicacions Web: POO, Separació de Lògica i Presentació, Gestió d&#39;Errors i Proves&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;[!abstract] &amp;quot;Duració i criteris d&#39;avaluació&amp;quot;&lt;br /&gt;
Duració estimada: 20 hores&lt;br /&gt;
&lt;/p&gt;&lt;hr /&gt;&lt;br /&gt;
| Resultat d&#39;aprenentatge | Criteris d&#39;avaluació |&lt;br /&gt;
| --------                | --------             |&lt;br /&gt;
| 5. Desenvolupa aplicacions Web identificant i aplicant mecanismes per a separar el codi de presentació de la lògica de negoci.| a) S&#39;han identificat els avantatges de separar la lògica de negoci dels aspectes de presentació de l&#39;aplicació. &lt;br /&gt; b) S&#39;han analitzat tecnologies i mecanismes que permeten realitzar aquesta separació i les seues característiques principals. &lt;br /&gt; c) S&#39;han utilitzat objectes i controls en el servidor per a generar l&#39;aspecte visual de l&#39;aplicació Web en el client. &lt;br /&gt; d) S’han utilitzat formularis generats de forma dinàmica per a respondre als esdeveniments de l&#39;aplicació Web. &lt;br /&gt; e) S&#39;han identificat i aplicat els paràmetres relatius a la configuració de l&#39;aplicació Web. &lt;br /&gt; f) S&#39;han escrit aplicacions Web amb manteniment d&#39;estat i separació de la lògica de negoci. &lt;br /&gt; g) S&#39;han aplicat els principis de la programació orientada a objectes. &lt;br /&gt; g) S&#39;ha provat i documentat el codi. |&lt;p&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-concepte-de-classes-i-objectes&quot; tabindex=&quot;-1&quot;&gt;1. Concepte de classes i Objectes&lt;/h2&gt;
&lt;p&gt;PHP segueix un paradigma de programació orientada a objectes (POO) basada en classes.&lt;/p&gt;
&lt;p&gt;Un classe és un plantilla que defineix les propietats i mètodes per a poder crear objectes. D&#39;aquest manera, un objecte és una instància d&#39;una classe.&lt;/p&gt;
&lt;p&gt;Tant les propietats com els mètodes es defineixen amb una visibilitat (qui pot accedir)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Privat - &lt;code&gt;private&lt;/code&gt;: Només pot accedir la pròpia classe.&lt;/li&gt;
&lt;li&gt;Protegit - &lt;code&gt;protected&lt;/code&gt;: Només pot accedir la pròpia classe o els seus descendents.&lt;/li&gt;
&lt;li&gt;Público - &lt;code&gt;public&lt;/code&gt;: Pot accedir qualsevol altra classe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per a declarar una classe, s&#39;utilitza la paraula clau &lt;code&gt;class&lt;/code&gt; seguit del nom de la classe. Per a instanciar un objecte a partir de la classe, s&#39;utilitza &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class NomClase {
// propiedades
// y métodos
}

$ob = new NomClase();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! important &amp;quot;Classes amb majúscula&amp;quot;&lt;br /&gt;
Totes les classes comencen per lletra majúscula.&lt;/p&gt;
&lt;p&gt;Quan un projecte creix, és normal modelar les classes mitjançant UML (recordeu Entorns de Desenvolupament?). La classes es representen mitjançant un quadrat, separant el nom, de les propietats i els mètodes:&lt;/p&gt;
&lt;p width=&quot;500&quot;&gt;![UML](/img/user/01 Apuntes/DAW/PHP Teoria Batoi/imagenes/03/uml.png)&lt;/p&gt;
&lt;p&gt;Una vegada que hem creat un objecte, s&#39;utilitza l&#39;operador &lt;code&gt;-&amp;gt;&lt;/code&gt; per a accedir a una propietat o un mètode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$objeto-&amp;gt;propiedad;
$objeto-&amp;gt;método(parámetros);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si des de dins de la classe, volem accedir a una propietat o mètode de la mateixa classe, utilitzarem la referència &lt;code&gt;$this&lt;/code&gt;;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;propiedad;
$this-&amp;gt;método(parámetros);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Així doncs, com a exemple, codificaríem una persona en el fitxer &lt;code&gt;Persona.php&lt;/code&gt; com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Persona {
    private string $nombre;

    public function setNombre(string $nom) {
        $this-&amp;gt;nombre=$nom;
    }

    public function imprimir(){
        echo $this-&amp;gt;nombre;
        echo &#39;&amp;lt;br&amp;gt;&#39;;
    }
}

$bruno = new Persona(); // creamos un objeto
$bruno-&amp;gt;setNombre(&amp;quot;Bruno Díaz&amp;quot;);
$bruno-&amp;gt;imprimir();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Encara que es poden declarar diverses classes en el mateix arxiu, és una mala pràctica. Així doncs, cada fitxer contedrá una sola classe, i es nomenarà amb el nom de la classe.&lt;/p&gt;
&lt;h2 id=&quot;2-principis-de-la-poo&quot; tabindex=&quot;-1&quot;&gt;2. Principis de la POO&lt;/h2&gt;
&lt;h3 id=&quot;encapsulacio&quot; tabindex=&quot;-1&quot;&gt;Encapsulació&lt;/h3&gt;
&lt;p&gt;Les propietats es defineixen privades o protegides (si volem que les classes heretades puguen accedir).&lt;/p&gt;
&lt;p&gt;Per a cada propietat, s&#39;afigen mètodes públics (&lt;em&gt;getter/setter&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public setPropiedad(tipo $param)
public getPropiedad() : tipo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Les constants es defineixen públiques perquè siguen accessibles per tots els recursos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class MayorMenor {
    private int $mayor;
    private int $menor;

    public function setMayor(int $may) {
        $this-&amp;gt;mayor = $may;
    }

    public function setMenor(int $men) {
        $this-&amp;gt;menor = $men;
    }

    public function getMayor() : int {
        return $this-&amp;gt;mayor;
    }

    public function getMenor() : int {
        return $this-&amp;gt;menor;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;rebent-i-enviant-objectes&quot; tabindex=&quot;-1&quot;&gt;Rebent i enviant objectes&lt;/h4&gt;
&lt;p&gt;És recomanable indicar-ho en la mena de paràmetres. Si l&#39;objecte pot retornar nuls es posa &lt;code&gt;?&lt;/code&gt; davant del nom de la classe.&lt;/p&gt;
&lt;p&gt;!!! important &amp;quot;Objectes per referència&amp;quot;&lt;br /&gt;
Els objectes que s&#39;envien i reben com a paràmetres sempre es passen per referència.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
function maymen(array $numeros) : ?MayorMenor {
    $a = max($numeros);
    $b = min($numeros);

    $result = new MayorMenor();
    $result-&amp;gt;setMayor($a);
    $result-&amp;gt;setMenor($b);

    return $result;
}

$resultado =  maymen([1,76,9,388,41,39,25,97,22]);
echo &amp;quot;&amp;lt;br&amp;gt;Mayor: &amp;quot;.$resultado-&amp;gt;getMayor();
echo &amp;quot;&amp;lt;br&amp;gt;Menor: &amp;quot;.$resultado-&amp;gt;getMenor();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;constructor-1&quot; tabindex=&quot;-1&quot;&gt;Constructor&lt;/h4&gt;
&lt;p&gt;El constructor dels objectes es defineix mitjançant el mètode màgic &lt;code&gt;__construct&lt;/code&gt;.&lt;br /&gt;
Pot o no tindre paràmetres, però només pot haver-hi un únic constructor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Persona {
    private string $nombre;

    public function __construct(string $nom) {
        $this-&amp;gt;nombre = $nom;
    }

    public function imprimir(){
      echo $this-&amp;gt;nombre;
      echo &#39;&amp;lt;br&amp;gt;&#39;;
    }
}

$bruno = new Persona(&amp;quot;Bruno Díaz&amp;quot;);
$bruno-&amp;gt;imprimir();
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;constructors-en-php-8&quot; tabindex=&quot;-1&quot;&gt;Constructors en PHP 8&lt;/h5&gt;
&lt;p&gt;Una de les grans novetats que ofereix PHP 8 és la simplificació dels constructors amb paràmetres, la qual cosa es coneix com a promoció de les propietats del constructor*.&lt;/p&gt;
&lt;p&gt;Per a això, en comptes d&#39;haver de declarar les propietats com a privades o protegides, i després dins del constructor haver d&#39;assignar els paràmetres a estàs propietats, el propi constructor promociona les propietats.&lt;/p&gt;
&lt;p&gt;Vegem-ho millor amb un exemple. Imaginem una classe &lt;code&gt;Punt&lt;/code&gt; on vulguem emmagatzemar les seues coordenades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Punto {
    protected float $x;
    protected float $y;
    protected float $z;

    public function __construct(
        float $x = 0.0,
        float $y = 0.0,
        float $z = 0.0
    ) {
        $this-&amp;gt;x = $x;
        $this-&amp;gt;y = $y;
        $this-&amp;gt;z = $z;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En PHP 8, quedaria de la següent manera (molt més curt, la qual cosa facilita la seua llegibilitat):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Punto {
    public function __construct(
        protected float $x = 0.0,
        protected float $y = 0.0,
        protected float $z = 0.0,
    ) {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! info &amp;quot;L&#39;ordre importa&amp;quot;&lt;br /&gt;
A l&#39;hora de codificar l&#39;ordre dels elements ha de ser:&lt;/p&gt;
&lt;p&gt;``` php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
declare(strict_types=1);&lt;/p&gt;
&lt;p&gt;class NombreClase {&lt;br /&gt;
// propiedades&lt;/p&gt;
&lt;p&gt;// constructor&lt;/p&gt;
&lt;p&gt;// getters - setters&lt;/p&gt;
&lt;p&gt;// resto de métodos&lt;br /&gt;
}&lt;br /&gt;
?&amp;gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;h4 id=&quot;classes-estatiques&quot; tabindex=&quot;-1&quot;&gt;Classes estàtiques&lt;/h4&gt;
&lt;p&gt;Són aquelles que tenen propietats i/o mètodes estàtics (també es coneixen com &lt;em&gt;de classe&lt;/em&gt;, perquè el seu valor es comparteix entre totes les instàncies de la mateixa classe).&lt;/p&gt;
&lt;p&gt;Es declaren amb &lt;code&gt;static&lt;/code&gt; i es referencien amb &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si volem accedir a un mètode estàtic, s&#39;anteposa el nom de la classe: &lt;code&gt;Producte::nuevoProducto()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si des d&#39;un mètode volem accedir a una propietat estàtica de la mateixa classe, s&#39;utilitza la referència &lt;code&gt;self&lt;/code&gt;: &lt;code&gt;self::$numProductos&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    const IVA = 0.23;
    private static $numProductos = 0; 

    public static function nuevoProducto() {
        self::$numProductos++;
    }
}

Producto::nuevoProducto();
$impuesto = Producto::IVA;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;També podem tindre classes normals que tinguen alguna propietat estàtica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    const IVA = 0.23;
    private static $numProductos = 0; 
    private $codigo;

    public function __construct(string $cod) {
        self::$numProductos++;
        $this-&amp;gt;codigo = $cod;
    }

    public function mostrarResumen() : string {
        return &amp;quot;El producto &amp;quot;.$this-&amp;gt;codigo.&amp;quot; es el número &amp;quot;.self::$numProductos;
    }
}

$prod1 = new Producto(&amp;quot;PS5&amp;quot;);
$prod2 = new Producto(&amp;quot;XBOX Series X&amp;quot;);
$prod3 = new Producto(&amp;quot;Nintendo Switch&amp;quot;);
echo $prod3-&amp;gt;mostrarResumen();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;introspeccio&quot; tabindex=&quot;-1&quot;&gt;Introspecció&lt;/h4&gt;
&lt;p&gt;En treballar amb classes i objectes, existeixen un conjunt de funcions ja definides pel llenguatge que permeten obtindre informació sobre els objectes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;: permet comprovar si un objecte és d&#39;una determinada classe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_class&lt;/code&gt;: retorna el nom de la classe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_declared_class&lt;/code&gt;: retorna un array amb els noms de les classes definides&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_àlies&lt;/code&gt;: crea un àlies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_exists&lt;/code&gt; / &lt;code&gt;method_exists&lt;/code&gt; / &lt;code&gt;property_exists&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; si la classe / mètode / propietat està definida&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_class_methods&lt;/code&gt; / &lt;code&gt;get_class_vars&lt;/code&gt; / &lt;code&gt;get_object_vars&lt;/code&gt;: Retorna un array amb els noms dels mètodes / propietats d&#39;una classe / propietats d&#39;un objecte que són accessibles des d&#39;on es fa la crida.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un exemple d&#39;aquestes funcions pot ser el següent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$p = new Producto(&amp;quot;PS5&amp;quot;);
if ($p instanceof Producto) {
    echo &amp;quot;Es un producto&amp;quot;;
    echo &amp;quot;La clase es &amp;quot;.get_class($p);

    class_alias(&amp;quot;Producto&amp;quot;, &amp;quot;Articulo&amp;quot;);
    $c = new Articulo(&amp;quot;Nintendo Switch&amp;quot;);
    echo &amp;quot;Un articulo es un &amp;quot;.get_class($c);

    print_r(get_class_methods(&amp;quot;Producto&amp;quot;));
    print_r(get_class_vars(&amp;quot;Producto&amp;quot;));
    print_r(get_object_vars($p));

    if (method_exists($p, &amp;quot;mostrarResumen&amp;quot;)) {
        $p-&amp;gt;mostrarResumen();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! caution &amp;quot;Clonat&amp;quot;&lt;br /&gt;
En assignar dos objectes no es copien, es crea una nova referència. Si volem una còpia, cal clonar-ho mitjançant el mètode &lt;code&gt;clone(object) : object&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Si volem modificar el clonat per defecte, cal definir el mètode màgic &lt;code&gt;__clone()&lt;/code&gt; que es dirà després de copiar totes les propietats.&lt;/p&gt;
&lt;p&gt;Més informació en &lt;a href=&quot;https://www.php.net/manual/es/language.oop5.cloning.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/es/language.oop5.cloning.php&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;herencia&quot; tabindex=&quot;-1&quot;&gt;Herència&lt;/h3&gt;
&lt;p&gt;PHP suporta herència simple, de manera que una classe només pot heretar d&#39;una altra, no de dues classes alhora. Per a això s&#39;utilitza la paraula clau &lt;code&gt;extends&lt;/code&gt;. Si volem que la classe A hereta de la classe B farem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class A extends B
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fill hereta els atributs i mètodes públics i protegits.&lt;/p&gt;
&lt;p&gt;!!! warning &amp;quot;Cada classe en un arxiu&amp;quot;&lt;br /&gt;
Com ja hem comentat, hauríem de col·locar cada classe en un arxiu diferent per a posteriorment utilitzar-lo mitjançant &lt;code&gt;include&lt;/code&gt;. En els següent exemple els hem col·locats junt per a facilitar la seua llegibilitat.&lt;/p&gt;
&lt;p&gt;Per exemple, tenim una classe &lt;code&gt;Producte&lt;/code&gt; i una &lt;code&gt;Tv&lt;/code&gt; que hereta de &lt;code&gt;Producte&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    public $codigo;
    public $nombre;
    public $nombreCorto;
    public $PVP;

    public function mostrarResumen() {
        echo &amp;quot;&amp;lt;p&amp;gt;Prod:&amp;quot;.$this-&amp;gt;codigo.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
    }
}

class Tv extends Producto {
    public $pulgadas;
    public $tecnologia;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos utilizar las siguientes funciones para averiguar si hay relación entre dos clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_parent_class(object): string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_subclass_of(object, string): bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$t = new Tv();
$t-&amp;gt;codigo = 33;
if ($t instanceof Producto) {
    echo $t-&amp;gt;mostrarResumen();
}

$padre = get_parent_class($t);
echo &amp;quot;&amp;lt;br&amp;gt;La clase padre es: &amp;quot; . $padre;
$objetoPadre = new $padre;
echo $objetoPadre-&amp;gt;mostrarResumen();

if (is_subclass_of($t, &#39;Producto&#39;)) {
    echo &amp;quot;&amp;lt;br&amp;gt;Soy un hijo de Producto&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Polimorfisme&lt;/h3&gt;
&lt;p&gt;Podem crear mètodes en els fills amb el mateix nom que el pare, canviant el seu comportament.&lt;br /&gt;
Per a invocar als mètodes del pare -&amp;gt; &lt;code&gt;parent::nombreMetodo()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Tv extends Producto {
   public $pulgadas;
   public $tecnologia;

   public function mostrarResumen() {
      parent::mostrarResumen();
      echo &amp;quot;&amp;lt;p&amp;gt;TV &amp;quot;.$this-&amp;gt;tecnologia.&amp;quot; de &amp;quot;.$this-&amp;gt;pulgadas.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;constructor-en-fills&quot; tabindex=&quot;-1&quot;&gt;Constructor en fills&lt;/h4&gt;
&lt;p&gt;En els fills no es crea cap constructor de manera automàtica. Pel que si no n&#39;hi ha, s&#39;invoca automàticament al del pare. En canvi, si el definim en el fill, hem d&#39;invocar al del pare de manera explícita.&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP7&amp;quot;&lt;/p&gt;
&lt;p&gt;``` php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
class Producto {&lt;br /&gt;
public string $codigo;&lt;/p&gt;
&lt;p&gt;public function __construct(string $codigo) {&lt;br /&gt;
&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;17.338ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 7663.3 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(361,0)&quot;&gt;&lt;path data-c=&quot;210E&quot; d=&quot;M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(937,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1282,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1751,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2806.8,0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3862.6,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4295.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4780.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5300.6,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5645.6,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6122.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6885.3,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;codigo;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public function mostrarResumen() {&lt;br /&gt;
echo &amp;quot;&lt;/p&gt;&lt;p&gt;Prod:&amp;quot;.$this-&amp;gt;codigo.&amp;quot;&lt;/p&gt;&amp;quot;;&lt;br /&gt;
}&lt;br /&gt;
}&lt;p&gt;&lt;/p&gt;
&lt;p&gt;class Tv extends Producto {&lt;br /&gt;
public $pulgadas;&lt;br /&gt;
public $tecnologia;&lt;/p&gt;
&lt;p&gt;public function __construct(string &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;10.171ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 4495.7 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(433,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1438,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1783,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2260,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2745,0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3189.7,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3534.7,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4134.7,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;pulgadas, string &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.452ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;62.443ex&quot; height=&quot;2.149ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 27600 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;merror&quot; data-mjx-error=&quot;Missing open brace for subscript&quot; title=&quot;Missing open brace for subscript&quot;&gt;&lt;rect data-background=&quot;true&quot; width=&quot;27600&quot; height=&quot;950&quot; y=&quot;-200&quot; style=&quot;fill: yellow; stroke: none;&quot;&gt;&lt;/rect&gt;&lt;title&gt;Missing open brace for subscript&lt;/title&gt;&lt;g data-mml-node=&quot;mtext&quot; style=&quot;fill: red; stroke: red; font-family: serif;&quot;&gt;&lt;text data-variant=&quot;-explicitFont&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot;&gt;tecnologia) {             parent::__construct(&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;merror data-mjx-error=&quot;Missing open brace for subscript&quot; title=&quot;Missing open brace for subscript&quot;&gt;&lt;mtext&gt;tecnologia) {             parent::__construct(&lt;/mtext&gt;&lt;/merror&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;codigo);&lt;br /&gt;
&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;19.944ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 8815.3 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(361,0)&quot;&gt;&lt;path data-c=&quot;210E&quot; d=&quot;M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(937,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1282,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1751,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2806.8,0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3862.6,0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4365.6,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4937.6,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5235.6,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5712.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6241.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6761.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7290.6,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8037.3,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;pulgadas;&lt;br /&gt;
&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;21.261ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 9397.3 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(361,0)&quot;&gt;&lt;path data-c=&quot;210E&quot; d=&quot;M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(937,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1282,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1751,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2806.8,0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3862.6,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4223.6,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4689.6,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5122.6,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5722.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6207.6,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6505.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6990.6,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7467.6,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7812.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8619.3,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;tecnologia;&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public function mostrarResumen() {&lt;br /&gt;
parent::mostrarResumen();&lt;br /&gt;
echo &amp;quot;&lt;/p&gt;&lt;p&gt;TV &amp;quot;.&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;24.85ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 10983.6 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(361,0)&quot;&gt;&lt;path data-c=&quot;210E&quot; d=&quot;M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(937,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1282,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1751,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2806.8,0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3862.6,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4223.6,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4689.6,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5122.6,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5722.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6207.6,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6505.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6990.6,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7467.6,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7812.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8341.6,0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(8619.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;g data-c=&quot;2033&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; transform=&quot;translate(275,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9169.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9689.6,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(10155.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;g data-c=&quot;2033&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; transform=&quot;translate(275,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(10705.6,0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mo data-mjx-pseudoscript=&quot;true&quot;&gt;&quot;&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mo data-mjx-pseudoscript=&quot;true&quot;&gt;&quot;&lt;/mo&gt;&lt;/mrow&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;this-&amp;gt;pulgadas.&amp;quot;&lt;/p&gt;&amp;quot;;&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
```&lt;p&gt;&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP8&amp;quot;&lt;/p&gt;
&lt;p&gt;``` php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
class Producto {&lt;br /&gt;
public function __construct(private string $codigo)&lt;/p&gt;
&lt;p&gt;public function mostrarResumen() {&lt;br /&gt;
echo &amp;quot;&lt;/p&gt;&lt;p&gt;Prod:&amp;quot;.$this-&amp;gt;codigo.&amp;quot;&lt;/p&gt;&amp;quot;;&lt;br /&gt;
}&lt;br /&gt;
}&lt;p&gt;&lt;/p&gt;
&lt;p&gt;class Tv extends Producto {&lt;/p&gt;
&lt;p&gt;public function __construct(&lt;br /&gt;
string &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;17.275ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 7635.7 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(433,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1438,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1783,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2260,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2745,0)&quot;&gt;&lt;path data-c=&quot;2C&quot; d=&quot;M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3189.7,0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3692.7,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4143.7,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4488.7,0)&quot;&gt;&lt;path data-c=&quot;1D463&quot; d=&quot;M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4973.7,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5502.7,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5863.7,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6329.7,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6674.7,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7274.7,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mo&gt;,&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;pulgadas,&lt;br /&gt;
private string &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.452ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;73.303ex&quot; height=&quot;2.149ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 32400 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;merror&quot; data-mjx-error=&quot;Missing open brace for subscript&quot; title=&quot;Missing open brace for subscript&quot;&gt;&lt;rect data-background=&quot;true&quot; width=&quot;32400&quot; height=&quot;950&quot; y=&quot;-200&quot; style=&quot;fill: yellow; stroke: none;&quot;&gt;&lt;/rect&gt;&lt;title&gt;Missing open brace for subscript&lt;/title&gt;&lt;g data-mml-node=&quot;mtext&quot; style=&quot;fill: red; stroke: red; font-family: serif;&quot;&gt;&lt;text data-variant=&quot;-explicitFont&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot;&gt;tecnologia)         {             parent::__construct(&lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;merror data-mjx-error=&quot;Missing open brace for subscript&quot; title=&quot;Missing open brace for subscript&quot;&gt;&lt;mtext&gt;tecnologia)         {             parent::__construct(&lt;/mtext&gt;&lt;/merror&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;codigo);&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;public function mostrarResumen() {&lt;br /&gt;
parent::mostrarResumen();&lt;br /&gt;
echo &amp;quot;&lt;/p&gt;&lt;p&gt;TV &amp;quot;.&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.464ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;24.85ex&quot; height=&quot;2.034ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -694 10983.6 899&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(361,0)&quot;&gt;&lt;path data-c=&quot;210E&quot; d=&quot;M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(937,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1282,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(1751,0)&quot;&gt;&lt;path data-c=&quot;2212&quot; d=&quot;M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2806.8,0)&quot;&gt;&lt;path data-c=&quot;3E&quot; d=&quot;M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3862.6,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4223.6,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4689.6,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5122.6,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5722.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6207.6,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6505.6,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6990.6,0)&quot;&gt;&lt;path data-c=&quot;1D454&quot; d=&quot;M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7467.6,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7812.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(8341.6,0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(8619.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;g data-c=&quot;2033&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; transform=&quot;translate(275,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9169.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9689.6,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(10155.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;g data-c=&quot;2033&quot;&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;path data-c=&quot;2032&quot; d=&quot;M79 43Q73 43 52 49T30 61Q30 68 85 293T146 528Q161 560 198 560Q218 560 240 545T262 501Q262 496 260 486Q259 479 173 263T84 45T79 43Z&quot; transform=&quot;translate(275,0)&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(10705.6,0)&quot;&gt;&lt;path data-c=&quot;2E&quot; d=&quot;M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;h&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mo&gt;&amp;gt;&lt;/mo&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mo data-mjx-pseudoscript=&quot;true&quot;&gt;&quot;&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mo data-mjx-pseudoscript=&quot;true&quot;&gt;&quot;&lt;/mo&gt;&lt;/mrow&gt;&lt;mo&gt;.&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;this-&amp;gt;pulgadas.&amp;quot;&lt;/p&gt;&amp;quot;;&lt;br /&gt;
}&lt;br /&gt;
}&lt;br /&gt;
```&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;abstraccio&quot; tabindex=&quot;-1&quot;&gt;Abstracció&lt;/h3&gt;
&lt;p&gt;Les classes abstractes obliguen a heretar d&#39;una classe, ja que no es permet la seua instanciación. Es defineix mitjançant &lt;code&gt;abstract class NombreClase {&lt;/code&gt;.&lt;br /&gt;
Una classe abstracta pot contindre propietats i mètodes no-abstractes, i/o mètodes abstractes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Clase abstracta
abstract class Producto {
    private $codigo;
    public function getCodigo() : string {
        return $this-&amp;gt;codigo;
    }
    // Método abstracto
    abstract public function mostrarResumen();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quan una classe hereta d&#39;una classe abstracta, obligatòriament ha d&#39;implementar els mètodes que té el pare marcats com a abstractes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Tv extends Producto {
    public $pulgadas;
    public $tecnologia;

    public function mostrarResumen() { //obligado a implementarlo
        echo &amp;quot;&amp;lt;p&amp;gt;Código &amp;quot;.$this-&amp;gt;getCodigo().&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        echo &amp;quot;&amp;lt;p&amp;gt;TV &amp;quot;.$this-&amp;gt;tecnologia.&amp;quot; de &amp;quot;.$this-&amp;gt;pulgadas.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
    }
}

$t = new Tv();
echo $t-&amp;gt;getCodigo();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;classes-finals&quot; tabindex=&quot;-1&quot;&gt;Classes finals&lt;/h4&gt;
&lt;p&gt;Són classes oposades a abstractes, ja que eviten que es puga heretar una classe o mètode per a sobreescriure-ho.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    private $codigo;

    public function getCodigo() : string {
        return $this-&amp;gt;codigo;
    }

    final public function mostrarResumen() : string {
        return &amp;quot;Producto &amp;quot;.$this-&amp;gt;codigo;
    }
}

// No podremos heredar de Microondas
final class Microondas extends Producto {
    private $potencia;

    public function getPotencia() : int {
        return $this-&amp;gt;potencia;
    }

    // No podemos implementar mostrarResumen()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;interficies&quot; tabindex=&quot;-1&quot;&gt;Interfícies&lt;/h4&gt;
&lt;p&gt;Permet definir un contracte amb les signatures dels mètodes a complir. Així doncs, només conté declaracions de funcions i totes han de ser públiques.&lt;/p&gt;
&lt;p&gt;Es declaren amb la paraula clau &lt;code&gt;interface&lt;/code&gt; i després les classes que complisquen el contracte el realitzen mitjançant la paraula clau &lt;code&gt;implements&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
interface Nombreable {
// declaración de funciones
}
class NombreClase implements NombreInterfaz {
// código de la clase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es permet l&#39;herència d&#39;interfícies. A més, una classe pot implementar diverses interfícies (en aquest cas, sí que suporta l&#39;herència múltiple, però només d&#39;interfícies).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
interface Mostrable {
    public function mostrarResumen() : string;
}

interface MostrableTodo extends Mostrable {
    public function mostrarTodo() : string;
}

interface Facturable {
    public function generarFactura() : string;
}

class Producto implements MostrableTodo, Facturable {
    // Implementaciones de los métodos
    // Obligatoriamente deberá implementar public function mostrarResumen, mostrarTodo y generarFactura
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;metodes-encadenats&quot; tabindex=&quot;-1&quot;&gt;Mètodes encadenats&lt;/h4&gt;
&lt;p&gt;Segueix el plantejament de la programació funcional, i també es coneix com &lt;em&gt;method chaining&lt;/em&gt;. Planteja que sobre un objecte es realitzen diverses crides.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$p1 = new Libro();
$p1-&amp;gt;setNombre(&amp;quot;Harry Potter&amp;quot;);
$p1-&amp;gt;setAutor(&amp;quot;JK Rowling&amp;quot;);
echo $p1;

// Method chaining
$p2 = new Libro();
$p2-&amp;gt;setNombre(&amp;quot;Patria&amp;quot;)-&amp;gt;setAutor(&amp;quot;Aramburu&amp;quot;);
echo $p2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per a facilitar-ho, modificarem tots els seus mètodes mutants (que modifiquen dades, setters*, ...) perquè retornen una referència a &lt;code&gt;$this&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Libro {
    private string $nombre;
    private string $autor;

    public function getNombre() : string {
        return $this-&amp;gt;nombre;
    }
    public function setNombre(string $nombre) : Libro { 
        $this-&amp;gt;nombre = $nombre;
        return $this;
    }

    public function getAutor() : string {
        return $this-&amp;gt;autor;
    }
    public function setAutor(string $autor) : Libro {
        $this-&amp;gt;autor = $autor;
        return $this;
    }

    public function __toString() : string {
        return $this-&amp;gt;nombre.&amp;quot; de &amp;quot;.$this-&amp;gt;autor;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;metodes-magics&quot; tabindex=&quot;-1&quot;&gt;Mètodes màgics&lt;/h4&gt;
&lt;p&gt;Totes les classes PHP ofereixen un conjunt de mètodes, també coneguts com &lt;em&gt;magic methods&lt;/em&gt; que es poden sobreescriure per a substituir el seu comportament. Alguns d&#39;ells ja els hem utilitzats.&lt;/p&gt;
&lt;p&gt;Davant qualsevol dubte, és convenient consultar la &lt;a href=&quot;https://www.php.net/manual/es/language.oop5.magic.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Els més destacables són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__construct()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__destruct()&lt;/code&gt; → s&#39;invoca en perdre la referència. S&#39;utilitza per a tancar una connexió a la BD, tancar un fitxer, ...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__toString()&lt;/code&gt; → representació de l&#39;objecte com a cadena. És a dir, quan fem &lt;code&gt;echo $objecte&lt;/code&gt; s&#39;executa automàticament aquest mètode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__get(propietat)&lt;/code&gt;, &lt;code&gt;__set(propietat, valor)&lt;/code&gt; → Permetria accedir a les propietat privades, encara que sempre és més llegible/mantenible codificar els &lt;em&gt;getter/setter&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__isset(propietat)&lt;/code&gt;, &lt;code&gt;__unset(propietat)&lt;/code&gt; → Permet esbrinar o llevar el valor a una propietat.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__sleep()&lt;/code&gt;, &lt;code&gt;__wakeup()&lt;/code&gt; → S&#39;executen en recuperar (*unserialize^) o emmagatzemar un objecte que se serialitza (*serialize), i s&#39;utilitzen per a permet definir quines propietats se serialitzen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__call()&lt;/code&gt;, &lt;code&gt;__callStatic()&lt;/code&gt; → S&#39;executen en cridar a un mètode que no és públic. Permeten sobrecarreguen mètodes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-espai-de-noms&quot; tabindex=&quot;-1&quot;&gt;3. Espai de noms&lt;/h2&gt;
&lt;p&gt;Des de PHP 5.3 i també coneguts com &lt;em&gt;Namespaces&lt;/em&gt;, permeten organitzar les classes/interfícies, funcions i/o constants de manera similar als paquets a &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;!!! tip &amp;quot;Recomanació&amp;quot;&lt;br /&gt;
Un només namespace per arxiu i crear una estructura de carpetes respectant els nivells/subnivells (igual que es fa a Java)&lt;/p&gt;
&lt;p&gt;Es declaren en la primera línia mitjançant la paraula clau &lt;code&gt;namespace&lt;/code&gt; seguida del nom de l&#39;espai de noms assignat (cada subnivell se separa amb la barra invertida &lt;code&gt;&#92;&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;Per exemple, per a col·locar la classe &lt;code&gt;Producte&lt;/code&gt; dins del &lt;em&gt;namespace&lt;/em&gt; &lt;code&gt;Dwes&#92;Exemples&lt;/code&gt; ho faríem així:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Dwes&#92;Exemples;

const IVA = 0.21;

class Producte {
    public $nombre;
      
    public function muestra() : void {
        echo&amp;quot;&amp;lt;p&amp;gt;Prod:&amp;quot; . $this-&amp;gt;nombre . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;acces&quot; tabindex=&quot;-1&quot;&gt;Accés&lt;/h4&gt;
&lt;p&gt;Per a referenciar a un recurs que conté un namespace, primer hem de tindre&#39;l disponible fent ús de &lt;code&gt;include&lt;/code&gt; o &lt;code&gt;require&lt;/code&gt;. Si el recurs està en el mateix &lt;em&gt;namespace&lt;/em&gt;, es realitza un accés directe (es coneix com a accés sense qualificar).&lt;/p&gt;
&lt;p&gt;Realment hi ha tres tipus d&#39;accés:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sense qualificar: &lt;code&gt;recurs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;qualificat: &lt;code&gt;rutaRelativa&#92;recurs&lt;/code&gt; → no fa falta posar el &lt;em&gt;namespace&lt;/em&gt; complet&lt;/li&gt;
&lt;li&gt;totalment qualificat: &lt;code&gt;&#92;rutaAbsoluta&#92;recurs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Dwes&#92;Ejemplos;

include_once(&amp;quot;Producto.php&amp;quot;);

echo IVA; // sin cualificar
echo Utilidades&#92;IVA; // acceso cualificado. Daría error, no existe &#92;Dwes&#92;Ejemplos&#92;Utilidades&#92;IVA
echo &#92;Dwes&#92;Ejemplos&#92;IVA; // totalmente cualificado

$p1 = new Producto(); // lo busca en el mismo namespace y encuentra &#92;Dwes&#92;Ejemplos&#92;Producto
$p2 = new Model&#92;Producto(); // daría error, no existe el namespace Model. Está buscando &#92;Dwes&#92;Ejemplos&#92;Model&#92;Producto
$p3 = new &#92;Dwes&#92;Ejemplos&#92;Producto(); // &#92;Dwes&#92;Ejemplos&#92;Producto
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;acces-1&quot; tabindex=&quot;-1&quot;&gt;Accés&lt;/h4&gt;
&lt;p&gt;Per a evitar la referència qualificada podem declarar l&#39;ús mitjançant &lt;code&gt;use&lt;/code&gt; (similar a fer &lt;code&gt;import&lt;/code&gt; a Java). Es fa en la capçalera, després del &lt;code&gt;namespace&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Els tipus Posibles són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use const nombreCualificadoConstante&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use function nombreCualificadoFuncion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use nombreCualificadoClase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use nombreCualificadoClase as NuevoNombre&lt;/code&gt; // per a canviar de nom elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per exemple, si volem utilitzar la classe &lt;code&gt;&#92;Dwes&#92;Exemples&#92;Producte&lt;/code&gt; des d&#39;un recurs que es troba en l&#39;arrel, per exemple en &lt;code&gt;inici.php&lt;/code&gt;, faríem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
include_once(&amp;quot;Dwes&#92;Exemples&#92;Producte.php&amp;quot;);

use const Dwes&#92;Exemples&#92;IVA;
use &#92;Dwes&#92;Exemples&#92;Producte;

echo IVA;
$p1 = new Producte();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! tip &amp;quot;To &lt;code&gt;use&lt;/code&gt; or not to &lt;code&gt;use&lt;/code&gt;&amp;quot;&lt;br /&gt;
En resum, &lt;code&gt;use&lt;/code&gt; permet accedir sense qualificar a recursos que estan en un altre &lt;em&gt;namespace&lt;/em&gt;. Si estem en el mateix espai de nom, no necessitem &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;organitzacio&quot; tabindex=&quot;-1&quot;&gt;Organització&lt;/h4&gt;
&lt;p&gt;Tot projecte, conforme creix, necessita organitzar el seu codi font. Es planteja una organització en la qual els arxius que interactuan amb el navegador es col·loquen en l&#39;arrel, i les classes que definim van dins d&#39;un namespace (i dins de la seua pròpia carpeta &lt;code&gt;src&lt;/code&gt; o &lt;code&gt;app&lt;/code&gt;).&lt;/p&gt;
&lt;figure&gt;
&lt;img src=&quot;https://pedroporo.github.io/imagenes/03/03organizacion.png&quot; /&gt;
&lt;figcaption&gt;Organització del codi font&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;!!! tip &amp;quot;Organització, includes i usos&amp;quot;&lt;br /&gt;
* Col·locarem cada recurs en un fitxer a part.&lt;br /&gt;
* En la primera línia indicarem la seua &lt;em&gt;namespace&lt;/em&gt; (si no està en l&#39;arrel).&lt;br /&gt;
* Si utilitzem altres recursos, farem un &lt;code&gt;include_once&lt;/code&gt; d&#39;aqueixos recursos (classes, interfícies, etc...).&lt;br /&gt;
* Cada recurs ha d&#39;incloure tots els altres recursos que referencie: la classe de la qual hereta, interfícies que implementa, classes utilitzades/rebudes com a paràmetres, etc...&lt;br /&gt;
* Si els recursos estan en un espai de noms diferent al que estem, emprarem &lt;code&gt;use&lt;/code&gt; amb la ruta completa per a després utilitzar referències sense qualificar.&lt;/p&gt;
&lt;h4 id=&quot;autoload&quot; tabindex=&quot;-1&quot;&gt;Autoload&lt;/h4&gt;
&lt;p&gt;No és tediós haver de fer el &lt;code&gt;include&lt;/code&gt; de les classes? El autoload ve al rescat.&lt;/p&gt;
&lt;p&gt;Així doncs, permet carregar les classes (no les constants ni les funcions) que s&#39;utilitzaran i evitar haver de fer el &lt;code&gt;include_once&lt;/code&gt; de cadascuna d&#39;elles. Per a això, es pot utilitzar el composer.&lt;/p&gt;
&lt;h2 id=&quot;4-composer&quot; tabindex=&quot;-1&quot;&gt;4. Composer&lt;/h2&gt;
&lt;figure style=&quot;float: right;&quot;&gt;
    &lt;img src=&quot;https://pedroporo.github.io/imagenes/05/logo-composer.png&quot; width=&quot;200&quot; /&gt;
    &lt;figcaption&gt;Logo Composer&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Eina per excel·lència en PHP per a la gestió de llibreries i dependències, de manera que instal·la i les actualitza assegurant que tot l&#39;equip de desenvolupament té el mateix entorn i versions. A més, ofereix &lt;em&gt;autoloading&lt;/em&gt; del nostre codi, de manera que no hàgem de fer-lo nosaltres &amp;quot;a mà&amp;quot;.&lt;/p&gt;
&lt;p&gt;Està escrit en PHP, i podeu consultar tota la seua documentació en &lt;a href=&quot;https://getcomposer.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://getcomposer.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Utilitza &lt;a href=&quot;https://packagist.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Packagist&lt;/em&gt;&lt;/a&gt; com a repositori de llibreries.&lt;/p&gt;
&lt;p&gt;Funcionalment, és similar a Maven (Java) / npm (JS).&lt;/p&gt;
&lt;h3 id=&quot;instal-lacio&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h3&gt;
&lt;p&gt;Si estem usant XAMPP, hem d&#39;instal·lar &lt;em&gt;Composer&lt;/em&gt; en el propi sistema operatiu. Es recomana seguir les &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;instruccions oficials&lt;/a&gt; segons el sistema operatiu a emprar.&lt;/p&gt;
&lt;p&gt;En canvi, si usem &lt;em&gt;Docker&lt;/em&gt;, necessitem modificar la configuració del nostre contenidor. En el nostre cas, hem decidit modificar l&#39;arxiu &lt;code&gt;Dockerfile&lt;/code&gt; i afegir el següent comando:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-docker&quot;&gt;COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;És important que dins del contenidor comprovem que tenim la v2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer -V
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;primers-passos&quot; tabindex=&quot;-1&quot;&gt;Primers passos&lt;/h3&gt;
&lt;p&gt;Quan creem un projecte per primera vegada, hem d&#39;inicialitzar el repositori. Per a això, executarem el comando &lt;code&gt;composer init&lt;/code&gt; on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configurem el nom del paquet, descripció, autor (nom &lt;email&gt;), tipus de paquet (project), etc...&lt;/email&gt;&lt;/li&gt;
&lt;li&gt;Definim les dependències del projecte (&lt;code&gt;require&lt;/code&gt;) i les de desenvolupament (&lt;code&gt;require-dev&lt;/code&gt;) de manera interactiva.&lt;/li&gt;
&lt;li&gt;En les de desenvolupament s&#39;indica aquelles que no s&#39;instal·laran a l&#39;entorn de producció, per exemple, les llibreries de proves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Després de la seua configuració, es crearà automàticament l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt; amb les dades introduïdes i descàrrega les llibreries en la carpeta &lt;code&gt;vendor&lt;/code&gt;. La instal·lació de les llibreries sempre es realitza de manera local per a cada projecte.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;name&amp;quot;: &amp;quot;dwes/log&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Pruebas con Monolog&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;project&amp;quot;,
    &amp;quot;require&amp;quot;: {
        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;^2.1&amp;quot;
    },
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
    &amp;quot;authors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Aitor Medrano&amp;quot;,
            &amp;quot;email&amp;quot;: &amp;quot;a.medrano@edu.gva.es&amp;quot;
        }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A l&#39;hora d&#39;indicar cada llibreria introduirem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;el nom de la llibreria, composta tant pel creador o &amp;quot;vendor&amp;quot;, com pel nom del projecte. Exemples: &lt;code&gt;monolog/monolog&lt;/code&gt; o &lt;code&gt;laravel/installer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;la versió de cada llibreria. Tenim diverses opcions per a indicar-la:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directament: 1.4.2&lt;/li&gt;
&lt;li&gt;Amb comodins: 1.&lt;/li&gt;
&lt;li&gt;A partir de: &amp;gt;= 2.0.3&lt;/li&gt;
&lt;li&gt;Sense trencament de canvis:&lt;br /&gt;
{ &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#1&quot;&gt;#1&lt;/a&gt;}&lt;br /&gt;
.3.2 // &amp;gt;=1.3.2 &amp;lt;2.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;actualitzar-llibreries&quot; tabindex=&quot;-1&quot;&gt;Actualitzar llibreries&lt;/h3&gt;
&lt;p&gt;Podem definir les dependències via l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt; o mitjançant comandos amb el format &lt;code&gt;composer require vendor/package:version&lt;/code&gt;. Per exemple, si volem afegir phpUnit com a llibreria de desenvolupament, farem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require phpunit/phpunit –dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Després d&#39;afegir noves llibreries, hem d&#39;actualitzar el nostre projecte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si creem l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt; nosaltres directament sense inicialitzar el repositori, hem d&#39;instal·lar les dependències:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En fer aquest pas (tant instal·lar com actualitzar), com ja hem comentat, es descarreguen les llibreries en dins de la carpeta &lt;code&gt;vendor&lt;/code&gt;. És molt important afegir aquesta carpeta a l&#39;arxiu &lt;code&gt;.gitignore&lt;/code&gt; per a no pujar-les a GitHub.&lt;/p&gt;
&lt;p&gt;A més es crea l&#39;arxiu &lt;code&gt;composer.lock&lt;/code&gt;, que emmagatzema la versió exacta que s&#39;ha instal·lat de cada llibreria (aquest arxiu no es toca).&lt;/p&gt;
&lt;h3 id=&quot;code-autoload-php-code&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;autoload.php&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Composer&lt;/em&gt; crea de manera automàtica en &lt;code&gt;vendor/autoload.php&lt;/code&gt; el codi per a incloure de manera automàtica totes les llibreries que tinguem configurades en &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Per a utilitzar-ho, en la capçalera del nostre arxius posarem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el nostre cas, de moment només el podrem en els arxius on provem les classes&lt;/p&gt;
&lt;p&gt;Si volem que Composer també s&#39;encarregue de carregar de manera automàtica les nostres classes de domini, dins de l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt;, definirem la propietat &lt;code&gt;autoload&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;autoload&amp;quot;: {
    &amp;quot;psr-4&amp;quot;: {&amp;quot;Dwes&#92;&#92;&amp;quot;: &amp;quot;app/Dwes&amp;quot;}
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Posteriorment, hem de tornar a generar el &lt;em&gt;autoload&lt;/em&gt; de &lt;em&gt;Composer&lt;/em&gt; mitjançant l&#39;opció &lt;code&gt;dump-autoload&lt;/code&gt; (o &lt;code&gt;du&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer dump-autoload
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;5-logger-amb-monolog&quot; tabindex=&quot;-1&quot;&gt;5. Logger amb Monolog&lt;/h2&gt;
&lt;p&gt;Provarem &lt;em&gt;Composer&lt;/em&gt; afegint la llibreria de &lt;a href=&quot;https://github.com/seldaek/monolog&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Monolog&lt;/em&gt;&lt;/a&gt; al nostre projecte. Es tracta d&#39;un llibreria per a la gestió de logs de les nostres aplicacions, suportant diferents nivells (info, warning, etc...), eixides (fitxers, sockets, BBDD, Web Services, email, etc) i formats (text pla, HTML, JSON, etc...).&lt;/p&gt;
&lt;p&gt;Per a això, inclourem la llibreria en el nostre projecte amb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require monolog/monolog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Monolog 2 requereix almenys PHP 7.2, compleix amb el estandar de logging PSR-3, i és la llibreria emprada per &lt;em&gt;Laravel&lt;/em&gt; i &lt;em&gt;Symfony&lt;/em&gt; per a la gestió de logs.&lt;/p&gt;
&lt;p&gt;!!! info &amp;quot;Quan utilitzar un log&amp;quot;&lt;br /&gt;
* Seguir les acciones/moviments dels usuaris&lt;br /&gt;
* Registrar les transaccions&lt;br /&gt;
* Rastrejar els errors d&#39;usuari&lt;br /&gt;
* Fallades/avisos a nivell de sistema&lt;br /&gt;
* Interpretar i col·leccionar dades per a posterior investigació de patrons&lt;/p&gt;
&lt;h3 id=&quot;nivells&quot; tabindex=&quot;-1&quot;&gt;Nivells&lt;/h3&gt;
&lt;p&gt;A continuació vam mostrar els diferents nivells de menys a més restrictiu:&lt;/p&gt;
&lt;p&gt;* debug -100: Informació detallada amb propòsits de debug. No usar en entorns de producció.&lt;br /&gt;
* info - 200: Esdeveniments interessants com l&#39;inici de sessió d&#39;usuaris.&lt;br /&gt;
* notice - 250: Esdeveniments normals però significatius.&lt;br /&gt;
* warning - 300: Ocurrències excepcionals que no arriben a ser error.&lt;br /&gt;
* error - 400: Errors d&#39;execució que permeten continuar amb l&#39;execució de l&#39;aplicació però que han de ser monitorats.&lt;br /&gt;
* critical - 500: Situacions importants on es generen excepcions no esperades o no hi ha disponible un component.&lt;br /&gt;
* alert - 550: S&#39;han de prendre mesures immediatament.&lt;br /&gt;
Caiguda completa de la web, base de dades no disponible, etc... A més, se solen enviar missatges per email.&lt;br /&gt;
* emergency - 600: És l&#39;error més greu i indica que tot el sistema està inutilitzable.&lt;/p&gt;
&lt;h3 id=&quot;hola-monolog&quot; tabindex=&quot;-1&quot;&gt;Hola Monolog&lt;/h3&gt;
&lt;p&gt;Per exemple, en l&#39;arxiu &lt;code&gt;pruebaLog.php&lt;/code&gt; que col·locaríem en l&#39;arrel, primer incloem el &lt;strong&gt;autoload&lt;/strong&gt;, importem els classes a utilitzar per a finalment usar els mètodes de &lt;strong&gt;Monolog&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
include __DIR__ .&amp;quot;/vendor/autoload.php&amp;quot;;

use Monolog&#92;Level;
use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

$log = new Logger(&amp;quot;MiLogger&amp;quot;);
$log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;logs/milog.log&amp;quot;, Level::Debug));

$log-&amp;gt;debug(&amp;quot;Esto es un mensaje de DEBUG&amp;quot;);
$log-&amp;gt;info(&amp;quot;Esto es un mensaje de INFO&amp;quot;);
$log-&amp;gt;warning(&amp;quot;Esto es un mensaje de WARNING&amp;quot;);
$log-&amp;gt;error(&amp;quot;Esto es un mensaje de ERROR&amp;quot;);
$log-&amp;gt;critical(&amp;quot;Esto es un mensaje de CRITICAL&amp;quot;);
$log-&amp;gt;alert(&amp;quot;Esto es un mensaje de ALERT&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En tots els mètodes de registre de missatges (&lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, ...), a més del propi missatge, li podem passar informació com el contingut d&#39;alguna variable, usuari de l&#39;aplicació, etc.. com a segon paràmetre dins d&#39;un array, el qual es coneix com &lt;strong&gt;array de contexte&lt;/strong&gt;.&lt;br /&gt;
És convenient fer-ho mitjançant un array associatiu per a facilitar la lectura del log.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$log-&amp;gt;warning(&amp;quot;Producto no encontrado&amp;quot;, [$producto]);
$log-&amp;gt;warning(&amp;quot;Producto no encontrado&amp;quot;, [&amp;quot;datos&amp;quot; =&amp;gt; $producto]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;funcionament&quot; tabindex=&quot;-1&quot;&gt;Funcionament&lt;/h3&gt;
&lt;p&gt;Cada instància &lt;code&gt;Logger&lt;/code&gt; té un nom de canal i una pila de manejadores (&lt;strong&gt;handler&lt;/strong&gt;).&lt;br /&gt;
Cada missatge que manem al log travessa la pila de manejadores, i cadascun decideix si ha de registrar la informació, i si es dona el cas, finalitzar la propagació.&lt;br /&gt;
Per exemple, un &lt;code&gt;StreamHandler&lt;/code&gt; en el fons de la pila que ho escriga tot en disc, i en el topall afig un &lt;code&gt;MailHandler&lt;/code&gt; que envie un mail només quan hi haja un error.&lt;/p&gt;
&lt;p&gt;Els manejadores més utilitzats són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StreamHandler(ruta, nivel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RotatingFileHandler(ruta, maxFiles, nivel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NativeMailerHandler(para, asunto, desde, nivel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FirePHPHandler(nivel)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per exemple: Si volem que els missatges de l&#39;aplicació isquen pel log del servidor,&lt;br /&gt;
en el nostre cas l&#39;arxiu &lt;code&gt;error.log&lt;/code&gt; de &lt;strong&gt;Apatxe&lt;/strong&gt; utilitzarem com a ruta l&#39;eixida d&#39;error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// error.log
$log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;php://stderr&amp;quot;, Level::Debug));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! tip &amp;quot;FirePHP&amp;quot;&lt;br /&gt;
Per exemple, mitjançant &lt;code&gt;FirePHPHandler&lt;/code&gt;, podem utilitzar &lt;code&gt;FirePHP&lt;/code&gt;, la qual és una eina per a fer debug en la consola de Firefox*.&lt;br /&gt;
Després d&#39;instal·lar l&#39;extensió en Firefox, habilitar les opcions i configurar el &lt;strong&gt;Handler&lt;/strong&gt;, podem veure els missatges acolorits amb les seues dades:&lt;/p&gt;
&lt;p&gt;``` php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
$log = new Logger(&amp;quot;MiFirePHPLogger&amp;quot;);&lt;br /&gt;
$log-&amp;gt;pushHandler(new FirePHPHandlerINFO);&lt;/p&gt;
&lt;p&gt;$datos = [&amp;quot;real&amp;quot; =&amp;gt; &amp;quot;Bruce Wayne&amp;quot;, &amp;quot;personaje&amp;quot; =&amp;gt; &amp;quot;Batman&amp;quot;];&lt;br /&gt;
$log-&amp;gt;debug(&amp;quot;Esto es un mensaje de DEBUG&amp;quot;, $datos);&lt;br /&gt;
$log-&amp;gt;info(&amp;quot;Esto es un mensaje de INFO&amp;quot;, $datos);&lt;br /&gt;
$log-&amp;gt;warning(&amp;quot;Esto es un mensaje de WARNING&amp;quot;, $datos);&lt;br /&gt;
// ...&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;figure style=&quot;align: center;&quot;&gt;&lt;br /&gt;
&lt;img src=&quot;https://pedroporo.github.io/imagenes/05/firePhp.png&quot; /&gt;&lt;br /&gt;
&lt;figcaption&gt;Ejemplo de uso de FirePHP&lt;/figcaption&gt;&lt;br /&gt;
&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
&lt;h3 id=&quot;manejadors&quot; tabindex=&quot;-1&quot;&gt;Manejadors&lt;/h3&gt;
&lt;p&gt;Si no s&#39;indica cap, se li assigna un per defecte. L&#39;últim manejador inserit serà el primer a executar-se.&lt;br /&gt;
Després es van executant conforme a la pila.&lt;/p&gt;
&lt;h3 id=&quot;processadors&quot; tabindex=&quot;-1&quot;&gt;Processadors&lt;/h3&gt;
&lt;p&gt;Els processadors permeten afegir informació als missatges.&lt;br /&gt;
Per a això, s&#39;apilen després de cada manejador mitjançant el mètode &lt;code&gt;pushProcessor($processador)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alguns processadors coneguts són &lt;code&gt;IntrospectionProcessor&lt;/code&gt; (mostren la línia, fitxer, classe i metodo des del qual s&#39;invoca el log), &lt;code&gt;WebProcessor&lt;/code&gt; (afig la URI, mètode i IP) o &lt;code&gt;GitProcessor&lt;/code&gt; (afig la branca i el commit).&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;php     &amp;lt;?php     $log = new Logger(&amp;quot;MiLogger&amp;quot;);     $log-&amp;gt;pushHandler(new RotatingFileHandler(&amp;quot;logs/milog.log&amp;quot;, 0, Level::DEBUG));     $log-&amp;gt;pushProcessor(new IntrospectionProcessor());     $log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;php://stderr&amp;quot;, Level::WARNING));     // no usa Introspection pq lo hemos apilado después, le asigno otro     $log-&amp;gt;pushProcessor(new WebProcessor());    &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Consola en format text&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log     [2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {&amp;quot;file&amp;quot;:&amp;quot;C:&#92;&#92;xampp&#92;&#92;htdocs&#92;&#92;log&#92;&#92;procesador.php&amp;quot;,&amp;quot;line&amp;quot;:12,&amp;quot;class&amp;quot;:null,&amp;quot;function&amp;quot;:null}     [2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {&amp;quot;file&amp;quot;:&amp;quot;C:&#92;&#92;xampp&#92;&#92;htdocs&#92;&#92;log&#92;&#92;procesador.php&amp;quot;,&amp;quot;line&amp;quot;:13,&amp;quot;class&amp;quot;:null,&amp;quot;function&amp;quot;:null}    &lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;formatadors&quot; tabindex=&quot;-1&quot;&gt;Formatadors&lt;/h3&gt;
&lt;p&gt;S&#39;associen als manejadores amb &lt;code&gt;setFormatter&lt;/code&gt;. Els formateadores més utilitzats són &lt;code&gt;LineFormatter&lt;/code&gt;, &lt;code&gt;HtmlFormatter&lt;/code&gt; o &lt;code&gt;JsonFormatter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;php     &amp;lt;?php     $log = new Logger(&amp;quot;MiLogger&amp;quot;);     $rfh = new RotatingFileHandler(&amp;quot;logs/milog.log&amp;quot;, Level::Debug);     $rfh-&amp;gt;setFormatter(new JsonFormatter());     $log-&amp;gt;pushHandler($rfh);    &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Consola en JSON&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;json     {&amp;quot;message&amp;quot;:&amp;quot;Esto es un mensaje de DEBUG&amp;quot;,&amp;quot;context&amp;quot;:{},&amp;quot;level&amp;quot;:100,&amp;quot;level_name&amp;quot;:&amp;quot;DEBUG&amp;quot;,&amp;quot;channel&amp;quot;:&amp;quot;MiLogger&amp;quot;,&amp;quot;datetime&amp;quot;:&amp;quot;2020-11-27T15:36:52.747211+01:00&amp;quot;,&amp;quot;extra&amp;quot;:{}}     {&amp;quot;message&amp;quot;:&amp;quot;Esto es un mensaje de INFO&amp;quot;,&amp;quot;context&amp;quot;:{},&amp;quot;level&amp;quot;:200,&amp;quot;level_name&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;channel&amp;quot;:&amp;quot;MiLogger&amp;quot;,&amp;quot;datetime&amp;quot;:&amp;quot;2020-11-27T15:36:52.747538+01:00&amp;quot;,&amp;quot;extra&amp;quot;:{}}    &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;!!! tip &amp;quot;Més informació&amp;quot;&lt;br /&gt;
Més informació sobre manejadores, formateadores i processadors en &lt;a href=&quot;https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;6-generacio-de-pdf-amb-dompdf&quot; tabindex=&quot;-1&quot;&gt;6.  Generació de PDF amb DOMPDF&lt;/h2&gt;
&lt;p&gt;Amb PHP podem manejar tot tipus d&#39;arxius com ja hem vist però, què passa si volem generar fitxers PDF amb dades tretes d&#39;una base de dades?&lt;/p&gt;
&lt;div class=&quot;center img-small&quot;&gt;
    &lt;img src=&quot;https://pedroporo.github.io/imagenes/06/06-pdf.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;Gràcies a una classe escrita en PHP, podem generar arxius PDF sense necessitat d&#39;instal·lar llibreries addicionals en el nostre servidor.&lt;br /&gt;
Però anem a utilitzar una llibreria que permet transformar codi html en pdf.&lt;/p&gt;
&lt;h3 id=&quot;dompdf&quot; tabindex=&quot;-1&quot;&gt;DOMPDF&lt;/h3&gt;
&lt;p&gt;Afegirem la llibreria de &lt;a href=&quot;https://github.com/seldaek/monolog&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;DOMPDF&lt;/em&gt;&lt;/a&gt; al nostre projecte. Per a això, inclourem la llibreria en el nostre projecte amb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require dompdf/dompdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vegada que DOMPDF està instal·lat, el procés per generar PDFs des de HTML és bastant directe. Els passos bàsics són:&lt;/p&gt;
&lt;p&gt;Pas 1: Incloent DOMPDF&lt;br /&gt;
Primer, necessitarem incloure DOMPDF en el script PHP. Si estem utilitzant Composer, això es fa automàticament a través de l&#39;auto-càrrega de Composer. Només cal afegir la següent línia al principi del&#39;script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;require &#39;vendor/autoload.php&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 2: Creació d&#39;una Instància de DOMPDF&lt;br /&gt;
A continuació, creem una nova instància de la classe DOMPDF:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
use Dompdf&#92;Dompdf;

$dompdf = new Dompdf();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 3: Carregar HTML&lt;br /&gt;
Després, carregem l&#39;HTML en l&#39;objecte DOMPDF. Això es pot fer directament com una cadena o carregant un fitxer HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hola, això és una prova.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;;
$dompdf-&amp;gt;loadHtml($html);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O bé carregar un fitxer HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;loadHtml(file_get_contents(&#39;path/to/your/file.html&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 4: Configuració de la Mida del Paper i l&#39;Orientació&lt;br /&gt;
Podem configurar la mida del paper i l&#39;orientació si és necessari:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;portrait&#39;); // o &#39;landscape&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 5: Renderització del PDF&lt;br /&gt;
Ara, demanem a DOMPDF que renderitze el PDF:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;render();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 6: Eixida del PDF&lt;br /&gt;
Finalment, podem enviar el PDF al navegador, guardar-lo en un fitxer o fer amb ell el que necessitem:&lt;/p&gt;
&lt;p&gt;Per mostrar-lo al navegador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;stream(&amp;quot;document.pdf&amp;quot;, array(&amp;quot;Attachment&amp;quot; =&amp;gt; false));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per desar-lo en un fitxer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$output = $dompdf-&amp;gt;output();
file_put_contents(&#39;path/to/save/document.pdf&#39;, $output);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;consells-addicionals&quot; tabindex=&quot;-1&quot;&gt;Consells Addicionals&lt;/h5&gt;
&lt;p&gt;Cal assegurar-se que l&#39;HTML és vàlid i ben format. DOMPDF intenta ser tolerant amb l&#39;HTML, però l&#39;HTML mal format pot causar problemes.&lt;br /&gt;
El CSS que s&#39;utilitze pot afectar significativament com es veu el PDF. DOMPDF suporta una bona part de CSS 2.1, però no tot.&lt;br /&gt;
Si necessitem incloure imatges, cal assegurar-se que les rutes són absolutes i accessibles des del servidor on s&#39;executa DOMPDF.&lt;br /&gt;
Aquesta és una guia bàsica per començar amb DOMPDF. Per a casos d&#39;ús més avançats i opcions de configuració, cal consultar la documentació oficial de DOMPDF.&lt;/p&gt;
&lt;h2 id=&quot;7-documentacion-con-strong-php-documentor-strong&quot; tabindex=&quot;-1&quot;&gt;7. Documentación con &lt;strong&gt;phpDocumentor&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.phpdoc.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;phpDocumentor&lt;/a&gt; és l&#39;eina per a documentar el codi PHP. És similar en propòsit i funcionament a &lt;strong&gt;Javadoc&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Així doncs, és un eina que facilita la documentació del codi PHP, creant un lloc web amb l&#39;API de l&#39;aplicació.&lt;/p&gt;
&lt;p&gt;Es basa en l&#39;ús d&#39;anotacions sobre els docblocks. Per a posar-ho en marxa, en el nostre cas ens decantarem per utilitzar la imatge que ja existeix de Docker.&lt;/p&gt;
&lt;h3 id=&quot;instal-lacio-1&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h3&gt;
&lt;h5 id=&quot;pas-1-instal-lacio-amb-docker&quot; tabindex=&quot;-1&quot;&gt;Pas 1: Instal·lació amb Docker&lt;/h5&gt;
&lt;p&gt;Primer, cal assegurar-se tenir Docker instal·lat i funcionant al  sistema. Després, s&#39;ha de descarregar i executar el contenidor de phpDocumentor utilitzant la següent comanda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull phpdoc/phpdoc
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;pas-2-generacio-de-documentacio&quot; tabindex=&quot;-1&quot;&gt;Pas 2: Generació de Documentació&lt;/h5&gt;
&lt;p&gt;Un cop tinguem la imatge, podem utilitzar-la per generar la documentació. El procés bàsic implica muntar els fitxers de codi dins del contenidor Docker i executar phpDocumentor sobre aquests fitxers.&lt;/p&gt;
&lt;p&gt;Ací hi ha un exemple de com fer-ho:&lt;/p&gt;
&lt;p&gt;En el cas d&#39;usar &lt;em&gt;Docker&lt;/em&gt;, usarem el següent comando per a executar-lo (crea el contenidor, executa el comando que li demanem, i automàticament l&#39;esborra):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v $(pwd):/data phpdoc/phpdoc:latest run -d /data/src -t /data/src/docs

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquesta comanda fa el següent:&lt;/p&gt;
&lt;p&gt;* -rm: Això elimina el contenidor després d&#39;executar-lo, així no es queden contenidors inactius.&lt;br /&gt;
* -v &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;53.548ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 23668.1 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(892,0)&quot;&gt;&lt;path data-c=&quot;1D464&quot; d=&quot;M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1608,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2128,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2794.8,0)&quot;&gt;&lt;path data-c=&quot;3A&quot; d=&quot;M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(3350.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3850.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4370.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4899.6,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5260.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6067.3,0)&quot;&gt;&lt;path data-c=&quot;3A&quot; d=&quot;M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6623.1,0)&quot;&gt;&lt;path data-c=&quot;1D440&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7674.1,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8246.1,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8846.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9207.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9736.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10202.1,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10500.1,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11020.1,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11365.1,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11816.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(12282.1,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(12715.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(13076.1,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(13561.1,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(14012.1,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(14357.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(14886.1,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(15319.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(15680.1,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(16252.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(16781.1,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(17079.1,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(17599.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(18065.1,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(18363.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(18724.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(19190.1,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(19762.1,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(20231.1,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(20576.1,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(21045.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(21406.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(21872.1,0)&quot;&gt;&lt;path data-c=&quot;1D45A&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(22750.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(23279.1,0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mo&gt;/&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;(pwd)) al directori /data dins del contenidor. Hauràs de reemplaçar $(pwd) amb el camí on està el teu codi font si no estàs executant aquesta comanda des del directori del teu projecte.&lt;br /&gt;
* -d /data/src: Especifica el directori dins del contenidor on es troba el teu codi font. Reemplaça /data/src amb el camí corresponent dins del contenidor si és diferent.&lt;br /&gt;
* -t /data/src/docs: Especifica on vols que es generi la documentació dins del contenidor. En aquest cas, es generarà dins de /data/docs.&lt;/p&gt;
&lt;h5 id=&quot;pas-3-acces-a-la-documentacio-generada&quot; tabindex=&quot;-1&quot;&gt;Pas 3: Accés a la Documentació Generada&lt;/h5&gt;
&lt;p&gt;Una vegada generada, la documentació estarà dins del directori que especificat (en aquest cas, &lt;code&gt;docs&lt;/code&gt; dins del directori docs de projecte). Pots obrir els fitxers HTML amb qualsevol navegador per veure la documentació.&lt;/p&gt;
&lt;h3 id=&quot;doc-block&quot; tabindex=&quot;-1&quot;&gt;DocBlock&lt;/h3&gt;
&lt;p&gt;Un &lt;em&gt;docblock&lt;/em&gt; és el bloc de codi que es col·loca damunt d&#39;un recurs. El seu format és:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
/**
* Sumari*, una sola línia

* Descripció* que pot utilitzar diverses línies
* i que ofereix detalls de l&#39;element o referències
* per a ampliar la informació

* @param string $miArgumento amb una descripció* de l&#39;argument
* que pot usar diverses línies.

* @return void
*/
function miFuncion(tipo $miArgumento)
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! tip &amp;quot;Visual Studio Code&amp;quot;&lt;br /&gt;
Per tal que us ajude a documentar podeu utilitzar l&#39;extensió  PHP DocBlocker.&lt;/p&gt;
&lt;h3 id=&quot;documentant-el-codi&quot; tabindex=&quot;-1&quot;&gt;Documentant el codi&lt;/h3&gt;
&lt;p&gt;En tots els elements, ademas del sumari i/o descripció, posarem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En les classes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@author&lt;/code&gt; nom &lt;email&gt;&lt;/email&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@package&lt;/code&gt; ruta del namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;En les propietats:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@var&lt;/code&gt; tipus descripció&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;En els mètodes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@param&lt;/code&gt; tipus $nomene descripció&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@throws&lt;/code&gt; ClaseException descripció&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@return&lt;/code&gt; tipus descripció&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vegem-ho amb un exemple. Suposem que tenim una classe que representa un client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
/**
* Classe que representa un client
* 
* El client s&#39;encarrega d&#39;emmagatzemar els suports que té llogat,
* de manera que podem llogar i retornar productes mitjançant les operacions
* homònimes.
* 
* @package Dwes&#92;Videoclub&#92;Model
* @author Aitor Medrano &amp;lt;a.medrano@edu.gva.es&amp;gt;
*/
class Cliente {

    public string $nombre; 
    private string $numero;

    /**
    * Colecció de soports alquilats
    * @var array&amp;lt;Soporte&amp;gt; 
    */
    private $soportesAlquilados[];

    /*
    * Comprova si el suport rebut ja el té llogat el client
    * @param Suport $suporte Suport a comprovar
    * @return bool true si ho té llogat
    /
    public function tieneAlquilado(Soporte $soporte) : bool { 
        // ...
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si generem la documentació i obrim amb un navegador l&#39;arxiu &lt;code&gt;docs/api/index.html&lt;/code&gt; podrem navegar fins a la classe `Client:&lt;/p&gt;
&lt;figure style=&quot;align: center;&quot;&gt;
    &lt;img src=&quot;https://pedroporo.github.io/imagenes/05/phpdoc.png&quot; /&gt;
    &lt;figcaption&gt;phpDocumentor de Cliente&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;8-separar-la-logica-de-negoci-dels-aspectes-de-presentacio-de-l-aplicacio&quot; tabindex=&quot;-1&quot;&gt;8. Separar la lògica de negoci dels aspectes de presentació de l&#39;aplicació&lt;/h2&gt;
&lt;h4 id=&quot;logica-de-negoci&quot; tabindex=&quot;-1&quot;&gt;Lògica de Negoci&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Regles i procediments que defineixen el funcionament de l&#39;aplicació.&lt;/li&gt;
&lt;li&gt;Inclou processament de dades, càlculs, interaccions amb la base de dades, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;aspectes-de-presentacio&quot; tabindex=&quot;-1&quot;&gt;Aspectes de Presentació&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manera en què es mostra la informació a l&#39;usuari.&lt;/li&gt;
&lt;li&gt;Inclou la interfície d&#39;usuari, disseny, navegació, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;avantatges&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mantenibilitat&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilita la modificació de la lògica de negoci sense afectar la presentació.&lt;/li&gt;
&lt;li&gt;Permet actualitzar la interfície d&#39;usuari sense modificar la lògica subjacent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reutilització&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La lògica de negoci pot ser reutilitzada en diferents aplicacions amb interfícies variades.&lt;/li&gt;
&lt;li&gt;Els components de presentació poden ser reutilitzats amb diferents lògiques de negoci.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Escalabilitat&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ajuda a escalar l&#39;aplicació separant les preocupacions, permetent millorar una part sense impactar l&#39;altra.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prova i Depuració&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilita les proves unitàries i la depuració en permetre provar la lògica de negoci per separat de la interfície.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Col·laboració&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permet que desenvolupadors de backend i frontend treballen de manera independent en les seues àrees respectives.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;tecnologies-i-mecanismes-per-a-la-separacio&quot; tabindex=&quot;-1&quot;&gt;Tecnologies i Mecanismes per a la Separació&lt;/h3&gt;
&lt;p&gt;A continuació es presenten diverses tecnologies i mecanismes que faciliten la separació de la lògica de negoci i la presentació en una aplicació web:&lt;/p&gt;
&lt;h4 id=&quot;frameworks-php&quot; tabindex=&quot;-1&quot;&gt;Frameworks PHP:&lt;/h4&gt;
&lt;p&gt;Laravel: Framework que segueix el patró MVC (Model-View-Controller). Laravel facilita la creació de codi net i ben organitzat, separant clarament la lògica de negoci de la presentació.&lt;br /&gt;
Symfony: Altres frameworks populars que també segueixen el patró MVC i ofereixen eines per a la separació de la lògica i la presentació.&lt;/p&gt;
&lt;h4 id=&quot;patro-mvc&quot; tabindex=&quot;-1&quot;&gt;Patró MVC:&lt;/h4&gt;
&lt;p&gt;Model-View-Controller: Patró de disseny que divideix una aplicació en tres components interconnectats:&lt;br /&gt;
Model: Gestiona la lògica de negoci i les dades.&lt;br /&gt;
Vista: Gestiona la presentació de la informació.&lt;br /&gt;
Controlador: Gestiona la comunicació entre el Model i la Vista.&lt;/p&gt;
&lt;h4 id=&quot;plantilles&quot; tabindex=&quot;-1&quot;&gt;Plantilles:&lt;/h4&gt;
&lt;p&gt;Blade (Laravel): Motor de plantilles que permet separar el codi HTML de la lògica de negoci.&lt;br /&gt;
Twig (Symfony): Motor de plantilles similar a Blade, utilitzat per separar la lògica de negoci del codi de presentació.&lt;/p&gt;
&lt;h4 id=&quot;api-rest&quot; tabindex=&quot;-1&quot;&gt;API REST:&lt;/h4&gt;
&lt;p&gt;Permet crear serveis web que exposen funcionalitats i dades a través de punts finals d&#39;API, mantenint la lògica de negoci separada de la presentació.&lt;/p&gt;
&lt;h3 id=&quot;exemple-mvc&quot; tabindex=&quot;-1&quot;&gt;Exemple MVC&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Model: Product.php
class Product {
    private string $name;
    private float $price;
    
    public function __construct(string $name, float $price) {
        $this-&amp;gt;name = $name;
        $this-&amp;gt;price = $price;
    }
    
    public function getName(): string {
        return $this-&amp;gt;name;
    }
    
    public function getPrice(): float {
        return $this-&amp;gt;price;
    }
}

// Controller: ProductController.php
class ProductController {
    public function showProduct() {
        $product = new Product(&amp;quot;Laptop&amp;quot;, 1200.00);
        include &#39;views/productView.php&#39;;
    }
}

// View: productView.php
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Product Information&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Product: &amp;lt;?php echo htmlspecialchars($product-&amp;gt;getName()); ?&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Price: $&amp;lt;?php echo htmlspecialchars($product-&amp;gt;getPrice()); ?&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La separació de la lògica de negoci dels aspectes de presentació és crucial per al desenvolupament d&#39;aplicacions web eficients, mantenibles i escalables.&lt;/p&gt;
&lt;h2 id=&quot;9-gestio-d-exempcions&quot; tabindex=&quot;-1&quot;&gt;9. Gestió d&#39;Exempcions&lt;/h2&gt;
&lt;p&gt;La gestió d&#39;excepcions forma part des de PHP 5. El seu funcionament és similar a Java*, fent ús d&#39;un bloc &lt;code&gt;try / catch / finally&lt;/code&gt;.&lt;br /&gt;
Si detectem una situació anòmala i volem llançar una excepció, haurem de realitzar &lt;code&gt;throw new Exception&lt;/code&gt; (adjuntant el missatge que l&#39;ha provocat).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
try {
    if ($divisor == 0) {
        throw new Exception(&amp;quot;División por cero.&amp;quot;);
    }
    $resultado = $dividendo / $divisor;
} catch (Exception $e) {
    echo &amp;quot;Se ha producido el siguiente error: &amp;quot;.$e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La classe &lt;code&gt;Exception&lt;/code&gt; és la classe pare de totes les excepcions. El seu constructor rep &lt;code&gt;missatge[,codigoError][,excepcionPrevia]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A partir d&#39;un objecte &lt;code&gt;Exception&lt;/code&gt;, podem accedir als mètodes &lt;code&gt;getMessage()&lt;/code&gt;i &lt;code&gt;getCode()&lt;/code&gt; per a obtindre el missatge i el codi d&#39;error de l&#39;excepció capturada.&lt;/p&gt;
&lt;p&gt;El propi llenguatge ofereix un conjunt d&#39;excepcions ja definides, les quals podem capturar (i llançar des de PHP 7). Es recomana la seua consulta en la &lt;a href=&quot;https://www.php.net/manual/es/class.exception.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;creant-exempcions&quot; tabindex=&quot;-1&quot;&gt;Creant exempcions&lt;/h4&gt;
&lt;p&gt;Per a crear una excepció, la forma més curta és crear una classe que únicament herete de &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class HolaExcepcion extends Exception {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si volem, i és recomanable depenent dels requisits, podem sobrecarregar els mètodes màgics, per exemple, sobrecarregant el constructor i cridant al constructor del pare, o reescriure el mètode &lt;code&gt;__toString&lt;/code&gt; per a canviar el seu missatge:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class MiExcepcion extends Exception {
    public function __construct($msj, $codigo = 0, Exception $previa = null) {
        // código propio
        parent::__construct($msj, $codigo, $previa);
    }
    public function __toString() {
        return __CLASS__ . &amp;quot;: [{$this-&amp;gt;code}]: {$this-&amp;gt;message}&#92;n&amp;quot;;
    }
    public function miFuncion() {
        echo &amp;quot;Una función personalizada para este tipo de excepción&#92;n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si definim una excepció d&#39;aplicació dins d&#39;un &lt;em&gt;namespace&lt;/em&gt;, quan referenciem a &lt;code&gt;Exception&lt;/code&gt;, haurem de referenciar-la mitjançant el seu nom totalment qualificat (&lt;code&gt;&#92;Exception&lt;/code&gt;), o utilitzant &lt;code&gt;use&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Mitjançant nom totalment qualificat&amp;quot;&lt;br /&gt;
``` php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
namespace &#92;Dwes&#92;Ejemplos;&lt;/p&gt;
&lt;p&gt;class AppExcepcion extends &#92;Exception {}&lt;br /&gt;
&lt;code&gt;=== &amp;quot;Mitjançant `use`&amp;quot;    &lt;/code&gt; php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
namespace &#92;Dwes&#92;Ejemplos;&lt;/p&gt;
&lt;p&gt;use Exception;&lt;/p&gt;
&lt;p&gt;class AppExcepcion extends Exception {}&lt;br /&gt;
```&lt;/p&gt;
&lt;h5 id=&quot;exempcions-multiples&quot; tabindex=&quot;-1&quot;&gt;Exempcions múltiples&lt;/h5&gt;
&lt;p&gt;Es poden usar excepcions múltiples per a comprovar diferents condicions. A l&#39;hora de capturar-les, es fa de més específica a més general.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$email = &amp;quot;ejemplo@ejemplo.com&amp;quot;;
try {
    // Comprueba si el email es válido
    if(filter_var($email, FILTER_VALIDATE_EMAIL) === FALSE) {
        throw new MiExcepcion($email);
    }
    // Comprueba la palabra ejemplo en la dirección email
    if(strpos($email, &amp;quot;ejemplo&amp;quot;) !== FALSE) {
        throw new Exception(&amp;quot;$email es un email de ejemplo no válido&amp;quot;);
    }
} catch (MiExcepcion $e) {
    echo $e-&amp;gt;miFuncion();
} catch(Exception $e) {
    echo $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! question &amp;quot;Autoevaluación&amp;quot;&lt;br /&gt;
¿Qué pasaría al ejectuar el siguiente código?&lt;br /&gt;
``` php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
class MainException extends Exception {}&lt;br /&gt;
class SubException extends MainException {}&lt;/p&gt;
&lt;p&gt;try {&lt;br /&gt;
    throw new SubException(&amp;quot;Lanzada SubException&amp;quot;);&lt;br /&gt;
} catch (MainException &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.452ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;63.801ex&quot; height=&quot;2.149ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 28200 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;merror&quot; data-mjx-error=&quot;Extra open brace or missing close brace&quot; title=&quot;Extra open brace or missing close brace&quot;&gt;&lt;rect data-background=&quot;true&quot; width=&quot;28200&quot; height=&quot;950&quot; y=&quot;-200&quot; style=&quot;fill: yellow; stroke: none;&quot;&gt;&lt;/rect&gt;&lt;title&gt;Extra open brace or missing close brace&lt;/title&gt;&lt;g data-mml-node=&quot;mtext&quot; style=&quot;fill: red; stroke: red; font-family: serif;&quot;&gt;&lt;text data-variant=&quot;-explicitFont&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot;&gt;e) {         echo &quot;Capturada MainException &quot; . &lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;merror data-mjx-error=&quot;Extra open brace or missing close brace&quot; title=&quot;Extra open brace or missing close brace&quot;&gt;&lt;mtext&gt;e) {         echo &quot;Capturada MainException &quot; . &lt;/mtext&gt;&lt;/merror&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;e-&amp;gt;getMessage();&lt;br /&gt;
} catch (SubException &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.452ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;62.443ex&quot; height=&quot;2.149ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 27600 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;merror&quot; data-mjx-error=&quot;Extra open brace or missing close brace&quot; title=&quot;Extra open brace or missing close brace&quot;&gt;&lt;rect data-background=&quot;true&quot; width=&quot;27600&quot; height=&quot;950&quot; y=&quot;-200&quot; style=&quot;fill: yellow; stroke: none;&quot;&gt;&lt;/rect&gt;&lt;title&gt;Extra open brace or missing close brace&lt;/title&gt;&lt;g data-mml-node=&quot;mtext&quot; style=&quot;fill: red; stroke: red; font-family: serif;&quot;&gt;&lt;text data-variant=&quot;-explicitFont&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot;&gt;e) {         echo &quot;Capturada SubException &quot; . &lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;merror data-mjx-error=&quot;Extra open brace or missing close brace&quot; title=&quot;Extra open brace or missing close brace&quot;&gt;&lt;mtext&gt;e) {         echo &quot;Capturada SubException &quot; . &lt;/mtext&gt;&lt;/merror&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;e-&amp;gt;getMessage();&lt;br /&gt;
} catch (Exception &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.452ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;58.371ex&quot; height=&quot;2.149ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 25800 950&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;merror&quot; data-mjx-error=&quot;Extra open brace or missing close brace&quot; title=&quot;Extra open brace or missing close brace&quot;&gt;&lt;rect data-background=&quot;true&quot; width=&quot;25800&quot; height=&quot;950&quot; y=&quot;-200&quot; style=&quot;fill: yellow; stroke: none;&quot;&gt;&lt;/rect&gt;&lt;title&gt;Extra open brace or missing close brace&lt;/title&gt;&lt;g data-mml-node=&quot;mtext&quot; style=&quot;fill: red; stroke: red; font-family: serif;&quot;&gt;&lt;text data-variant=&quot;-explicitFont&quot; transform=&quot;scale(1,-1)&quot; font-size=&quot;884px&quot;&gt;e) {         echo &quot;Capturada Exception &quot; . &lt;/text&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;merror data-mjx-error=&quot;Extra open brace or missing close brace&quot; title=&quot;Extra open brace or missing close brace&quot;&gt;&lt;mtext&gt;e) {         echo &quot;Capturada Exception &quot; . &lt;/mtext&gt;&lt;/merror&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;e-&amp;gt;getMessage();&lt;br /&gt;
}&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;Si en el mateix &lt;code&gt;catch&lt;/code&gt; volem capturar diverses excepcions, hem d&#39;utilitzar l&#39;operador &lt;code&gt;|&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class MainException extends Exception {}
class SubException extends MainException {}

try {
    throw new SubException(&amp;quot;Lanzada SubException&amp;quot;);
} catch (MainException | SubException $e ) {
    echo &amp;quot;Capturada Exception &amp;quot; . $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Des de PHP 7, existeix el tipus &lt;code&gt;Throwable&lt;/code&gt;, el qual és una interfície que implementen tant els errors com les excepcions, i ens permet capturar els dos tipus alhora:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
try {
    // tu codigo
} catch (Throwable $e) {
    echo &#39;Forma de capturar errores y excepciones a la vez&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si només volem capturar els errors fatals, podem fer ús de la classe &lt;code&gt;Error&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
try {
    // Genera una notificación que no se captura
    echo $variableNoAsignada;
    // Error fatal que se captura
    funcionQueNoExiste();
} catch (Error $e) {
    echo &amp;quot;Error capturado: &amp;quot; . $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;rellancar-exempcions&quot; tabindex=&quot;-1&quot;&gt;Rellançar exempcions&lt;/h4&gt;
&lt;p&gt;En les aplicacions reals, és molt comuna capturar una excepció de sistema i llançar una d&#39;aplicació que hem definit nostros.&lt;br /&gt;
També podem llançar les excepcions sense necessitat d&#39;estar dins d&#39;un &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class AppException extends Exception {}

try {
    // Código de negocio que falla
} catch (Exception $e) {
    throw new AppException(&amp;quot;AppException: &amp;quot;.$e-&amp;gt;getMessage(), $e-&amp;gt;getCode(), $e);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;10-proves-amb-phpunit&quot; tabindex=&quot;-1&quot;&gt;10. Proves amb PHPUNIT&lt;/h2&gt;
&lt;p&gt;El curs passat, dins del mòdul de Entorns de Desenvolupament, estudiarieu la importància de la realització de proves, així com les proves unitàries mitjançant &lt;a href=&quot;https://junit.org/junit5/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JUnit&lt;/a&gt;.&lt;/p&gt;
&lt;figure style=&quot;float: right;&quot;&gt;
    &lt;img src=&quot;https://pedroporo.github.io/imagenes/05/tdd.png&quot; width=&quot;300&quot; /&gt;
    &lt;figcaption&gt;Test Driven Development&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Hui dia és de gran importància seguir una bona metodologia de proves, sent el desenvolupament dirigit per les proves (Test Driven Development / TDD) un dels enfocaments més emprats, el qual consisteix en:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Escriure el test, i com no hi ha codi implementat, la prova falle (roig).&lt;/li&gt;
&lt;li&gt;Escriure el codi d&#39;aplicació perquè la prova funcione (verda).&lt;/li&gt;
&lt;li&gt;refactoritzar el codi de l&#39;aplicació amb l&#39;ajuda de la prova per a comprovar que no trenquem res (refactor).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En el cas de PHP, l&#39;eina que s&#39;utilitza és &lt;strong&gt;PHPUnit&lt;/strong&gt; (&lt;a href=&quot;https://phpunit.de/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://phpunit.de/&lt;/a&gt;), que com el seu nom indica, està basada en JUnit. La versió actual és la 11.&lt;/p&gt;
&lt;h3 id=&quot;introduccio-a-php-unit&quot; tabindex=&quot;-1&quot;&gt;Introducció a PHPUnit&lt;/h3&gt;
&lt;p&gt;PHPUnit és un framework de proves popular per a PHP que suporta tant proves unitàries com proves d&#39;integració. És àmpliament utilitzat en la comunitat PHP per la seua simplicitat i eficàcia. Les proves unitàries es centren en provar components o mètodes individuals, mentre que les proves d&#39;integració asseguren que les diferents parts del sistema funcionen conjuntament com s&#39;espera.&lt;/p&gt;
&lt;h4 id=&quot;instal-lacio-2&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h4&gt;
&lt;p&gt;Per començar a utilitzar PHPUnit, cal instal·lar-lo. La manera recomanada és a través de Composer. Executa la següent comanda en el terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require --dev phpunit/phpunit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquesta comanda afegirà PHPUnit com a dependència de desenvolupament en el teu projecte.&lt;/p&gt;
&lt;p&gt;!!! tip &amp;quot;Llibreries de desenvolupament&amp;quot;&lt;br /&gt;
Les llibreries que es col·loquen en &lt;code&gt;require-dev&lt;/code&gt; són les de desenvolupament i &lt;em&gt;testing&lt;/em&gt;, de manera que no s&#39;instal·laran en un entorn de producció.&lt;/p&gt;
&lt;p&gt;Una vegada instal·lat, podem configurar PHPUnit creant un fitxer phpunit.xml en l&#39;arrel del projecte per especificar la configuració de les proves:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;phpunit bootstrap=&amp;quot;vendor/autoload.php&amp;quot;&amp;gt;
    &amp;lt;testsuites&amp;gt;
        &amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
            &amp;lt;directory&amp;gt;tests&amp;lt;/directory&amp;gt;
        &amp;lt;/testsuite&amp;gt;
    &amp;lt;/testsuites&amp;gt;
&amp;lt;/phpunit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;estructura-d-un-test&quot; tabindex=&quot;-1&quot;&gt;Estructura d’un test&lt;/h4&gt;
&lt;p&gt;Els tests en PHPUnit són classes PHP que hereten de PHPUnit&#92;Framework&#92;TestCase. Cada mètode dins d&#39;aquestes classes que comence amb test serà executat com una prova.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;use PHPUnit&#92;Framework&#92;TestCase;
use App&#92;Models&#92;Empleado;


class EmpleadoTest extends TestCase {
    private $empleado;

    protected function setUp(): void {
        $this-&amp;gt;empleado = new Empleado(&#39;John&#39;, &#39;Doe&#39;, 4000, 30);
    }

    public function testGetSou() {
        $this-&amp;gt;assertEquals(4000, $this-&amp;gt;empleado-&amp;gt;getSou());
    }

    public function testSetSou() {
        $this-&amp;gt;empleado-&amp;gt;setSou(4500);
        $this-&amp;gt;assertEquals(4500, $this-&amp;gt;empleado-&amp;gt;getSou());
    }

    public function testGetTelefonos() {
        $this-&amp;gt;assertIsArray($this-&amp;gt;empleado-&amp;gt;getTelefonos());
        $this-&amp;gt;assertEmpty($this-&amp;gt;empleado-&amp;gt;getTelefonos());
    }

    public function testSetTelefono() {
        $this-&amp;gt;empleado-&amp;gt;setTelefono(&#39;123456789&#39;);
        $this-&amp;gt;assertCount(1, $this-&amp;gt;empleado-&amp;gt;getTelefonos());
        $this-&amp;gt;assertEquals(&#39;123456789&#39;, $this-&amp;gt;empleado-&amp;gt;getTelefonos()[0]);
    }

    public function testListarTelefonos() {
        $this-&amp;gt;empleado-&amp;gt;setTelefono(&#39;123456789&#39;);
        $this-&amp;gt;empleado-&amp;gt;setTelefono(&#39;987654321&#39;);
        $this-&amp;gt;assertEquals(&#39;123456789, 987654321&#39;, $this-&amp;gt;empleado-&amp;gt;listarTelefonos());
    }

    public function testVaciarTelefonos() {
        $this-&amp;gt;empleado-&amp;gt;setTelefono(&#39;123456789&#39;);
        $this-&amp;gt;empleado-&amp;gt;vaciarTelefonos();
        $this-&amp;gt;assertEmpty($this-&amp;gt;empleado-&amp;gt;getTelefonos());
    }

    public function testDebePagarImpuestos() {
        $this-&amp;gt;assertTrue($this-&amp;gt;empleado-&amp;gt;debePagarImpuestos());
        $this-&amp;gt;empleado-&amp;gt;setSou(3000);
        $this-&amp;gt;assertFalse($this-&amp;gt;empleado-&amp;gt;debePagarImpuestos());
    }
}


&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;execucio-de-proves&quot; tabindex=&quot;-1&quot;&gt;Execució de Proves&lt;/h4&gt;
&lt;p&gt;Per executar les proves, podem utilitzar la següent comanda:&lt;/p&gt;
&lt;p&gt;vendor/bin/phpunit&lt;/p&gt;
&lt;p&gt;Aquesta comanda cercarà els arxius de prova en el directori especificat (per defecte tests) i executarà totes les proves.&lt;/p&gt;
&lt;h4 id=&quot;tipus-de-proves&quot; tabindex=&quot;-1&quot;&gt;Tipus de  proves&lt;/h4&gt;
&lt;p&gt;Amb PHPUnit, podem realitzar diversos tipus de proves, entre elles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Proves Unitàries : Verifiquen el funcionament d&#39;una unitat de codi individual, com una funció o mètode.&lt;/li&gt;
&lt;li&gt;Proves Funcionals: Verifiquen que un conjunt de mòduls funciona correctament conjuntament. Aquestes proves poden simular interaccions de l&#39;usuari en un sistema web, encara que això es fa millor amb frameworks especialitzats per a proves funcionals.&lt;/li&gt;
&lt;li&gt;Proves d&#39;Integració*: Comproven que diferents mòduls o serveis funcionen correctament quan es combinen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemple de prova unitària:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function testResta() {
$calculadora = new Calculadora();
$resultat = $calculadora-&amp;gt;resta(5, 3);
$this-&amp;gt;assertEquals(2, $resultat);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;assercions&quot; tabindex=&quot;-1&quot;&gt;Assercions&lt;/h4&gt;
&lt;p&gt;Les assercions permeten comprovar el resultat dels mètodes que volem provar. Les assercions esperen que el predicat sempre siga vertader.&lt;/p&gt;
&lt;p&gt;PHPUnit ofereix les següent assercions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assertTrue&lt;/code&gt; / &lt;code&gt;assertFalse&lt;/code&gt;: Comprova que la condició donada siga avaluada com true / false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertEquals&lt;/code&gt; / &lt;code&gt;assertSame&lt;/code&gt;: Comprova que dues variables siguen iguals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertNotEquals&lt;/code&gt; / &lt;code&gt;assertNotSame&lt;/code&gt;: Comprova que dues variables NO siguen iguals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertNull&lt;/code&gt;: Comprova que un valor és null.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Same&lt;/code&gt; → comprova els tipus. Si no coincideixen els tipus i els valors, l&#39;asserció fallarà&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equals&lt;/code&gt; → sense comprovació estricta&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertArrayHasKey&lt;/code&gt; / &lt;code&gt;assertArrayNotHasKey&lt;/code&gt;: Comprova que un array posseïsca un &lt;em&gt;key&lt;/em&gt; determinat / o NO ho posseïsca&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertArraySubset&lt;/code&gt;: Comprova que un array posseïsca un altre array com subset del mateix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertAttributeContains&lt;/code&gt; / &lt;code&gt;assertAttributeNotContains&lt;/code&gt;: Comprova que un atribut d&#39;una classe continga una variable determinada / o NO continga una variable determinada&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertAttributeEquals&lt;/code&gt;: Comprova que un atribut d&#39;una classe siga igual a una variable determinada.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;proves-amb-dades&quot; tabindex=&quot;-1&quot;&gt;Proves amb dades&lt;/h4&gt;
&lt;p&gt;Les proves en PHPUnit poden utilitzar data providers per executar el mateix test amb diferents dades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * @dataProvider proveidorDeDades
 */
public function testMultiplica($a, $b, $esperat) {
    $calculadora = new Calculadora();
    $this-&amp;gt;assertEquals($esperat, $calculadora-&amp;gt;multiplica($a, $b));
}

public function proveidorDeDades() {
    return [
        [2, 3, 6],
        [0, 5, 0],
        [-1, 5, -5],
    ];
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;mocks&quot; tabindex=&quot;-1&quot;&gt;Mocks&lt;/h4&gt;
&lt;p&gt;Els mocks són objectes simulats que ens permeten aïllar la unitat de codi que estem provant. PHPUnit facilita la creació de mocks per a classes o interfícies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$mock = $this-&amp;gt;createMockclass;
$mock-&amp;gt;method(&#39;obtenirDades&#39;)-&amp;gt;willReturn(&#39;Dades simulades&#39;);

$calculadora = new Calculadora($mock);
$resultat = $calculadora-&amp;gt;processaDades();
$this-&amp;gt;assertEquals(&#39;Resultat esperat&#39;, $resultat);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;provant-excepcions&quot; tabindex=&quot;-1&quot;&gt;Provant excepcions&lt;/h4&gt;
&lt;p&gt;Les proves a més de comprovar que les classes funcionen com s&#39;espera, han de cobrir tots els casos possibles. Així doncs, hem de poder fer proves que esperen que es llance una exempció (i que el missatge continga una certa informació):&lt;/p&gt;
&lt;p&gt;Per a això, s&#39;utilitzen les següent expectatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expectExceptionclass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectExceptionCode(codigoExcepcion)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectExceptionMessage(missatge)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De la mateixa manera que abans, primer es posa l&#39;expectativa, i després es provoca que es llance l&#39;exempció:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
public function testExcepcio() {
    $this-&amp;gt;expectExceptionclass;

    $calculadora = new Calculadora();
    $calculadora-&amp;gt;divideix(5, 0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;conclusio&quot; tabindex=&quot;-1&quot;&gt;Conclusió&lt;/h4&gt;
&lt;p&gt;Les proves són crucials per a assegurar que el nostre codi PHP és fiable i manté la seua funcionalitat al llarg del temps. Utilitzar PHPUnit ens proporciona les eines necessàries per a escriure proves eficaces i mantenir el nostre projecte en un estat saludable.&lt;/p&gt;
&lt;h2 id=&quot;12-referencies-bibliografiques&quot; tabindex=&quot;-1&quot;&gt;12. Referències Bibliogràfiques&lt;/h2&gt;
&lt;h3 id=&quot;programacio-orientada-a-objectes-en-php&quot; tabindex=&quot;-1&quot;&gt;Programació Orientada a Objectes en PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;PHP Objects, Patterns, and Practice&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per M. Zandstra. Apress, 2017. ISBN: 978-1-4842-1361-3. Aquest llibre és un recurs essencial per entendre els fonaments de la programació orientada a objectes en PHP, així com patrons de disseny.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Learning PHP, MySQL &amp;amp; JavaScript: With jQuery, CSS &amp;amp; HTML5&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Robin Nixon. O&#39;Reilly Media, 2018. ISBN: 978-1-4919-2070-2. Ofereix una introducció completa a la programació amb PHP, incloent-hi el model d&#39;objectes de PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;constructors-i-destructors&quot; tabindex=&quot;-1&quot;&gt;Constructors i Destructors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Constructors and Destructors&lt;/strong&gt;&lt;br /&gt;
Documentació oficial de PHP sobre constructors i destructors en la programació orientada a objectes. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.decon.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.decon.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;encapsulacio-i-visibilitat&quot; tabindex=&quot;-1&quot;&gt;Encapsulació i Visibilitat&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Visibility&lt;/strong&gt;&lt;br /&gt;
Secció del manual oficial de PHP que explica les paraules clau &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, i &lt;code&gt;private&lt;/code&gt;, així com el concepte d&#39;encapsulació. Accessible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.visibility.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.visibility.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;herencia-i-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Herència i Polimorfisme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Programming PHP&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Kevin Tatroe, Peter MacIntyre, i Rasmus Lerdorf. O&#39;Reilly Media, 2013. ISBN: 978-1-4493-5053-6. Aquest llibre cobreix àmpliament els conceptes d&#39;herència i polimorfisme en PHP, proporcionant exemples pràctics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Manual: Inheritance&lt;/strong&gt;&lt;br /&gt;
Documentació oficial de PHP que tracta sobre l&#39;herència en classes, incloent el polimorfisme. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.inheritance.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.inheritance.php&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;classes-abstractes-i-interficies&quot; tabindex=&quot;-1&quot;&gt;Classes Abstractes i Interfícies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Interfaces and Abstract Classes&lt;/strong&gt;&lt;br /&gt;
Explicació oficial de les classes abstractes i les interfícies en PHP. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.interfaces.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.interfaces.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nombres-magics-i-metodes-magics&quot; tabindex=&quot;-1&quot;&gt;Nombres màgics i Metodes màgics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Magic Methods&lt;/strong&gt;&lt;br /&gt;
Guia completa sobre els mètodes màgics en PHP, com &lt;code&gt;__construct()&lt;/code&gt;, &lt;code&gt;__destruct()&lt;/code&gt;, &lt;code&gt;__get()&lt;/code&gt;, &lt;code&gt;__set()&lt;/code&gt;, entre altres. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.magic.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.magic.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;trait-en-php&quot; tabindex=&quot;-1&quot;&gt;Trait en PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Traits&lt;/strong&gt;&lt;br /&gt;
Documentació sobre traits en PHP, que permeten reutilitzar codi entre diferents classes. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.traits.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.traits.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;excepcions-en-php&quot; tabindex=&quot;-1&quot;&gt;Excepcions en PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;The Pragmatic Programmer: Your Journey to Mastery&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per David Thomas i Andrew Hunt. Addison-Wesley Professional, 2019. ISBN: 978-0-1359-5202-8. Inclou bones pràctiques per a la gestió d&#39;excepcions, aplicables també a PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Manual: Exceptions&lt;/strong&gt;&lt;br /&gt;
Secció del manual de PHP dedicada a les excepcions, explicant com llençar i capturar excepcions en PHP. Accessible a &lt;a href=&quot;https://www.php.net/manual/en/language.exceptions.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.exceptions.php&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;proves-amb-php-unit&quot; tabindex=&quot;-1&quot;&gt;Proves amb PHPUnit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Modern PHP: New Features and Good Practices&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Josh Lockhart. O&#39;Reilly Media, 2015. ISBN: 978-1-4919-2904-0. Aquest llibre inclou una secció sobre proves amb PHPUnit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHPUnit Documentation&lt;/strong&gt;&lt;br /&gt;
Documentació oficial de PHPUnit, que cobreix com escriure i executar proves unitàries en PHP. Accessible a &lt;a href=&quot;https://phpunit.de/documentation.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://phpunit.de/documentation.html&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eines-de-desenvolupament-i-autocarrega&quot; tabindex=&quot;-1&quot;&gt;Eines de Desenvolupament i Autocàrrega&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Composer Documentation&lt;/strong&gt;&lt;br /&gt;
Accessible des de &lt;a href=&quot;https://getcomposer.org/doc/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://getcomposer.org/doc/&lt;/a&gt;. Composer és l&#39;eina estàndard per a la gestió de dependències en PHP, i inclou suport per a l&#39;autocàrrega de classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Manual: Autoloading Classes&lt;/strong&gt;&lt;br /&gt;
Guia sobre el mecanisme d&#39;autocàrrega en PHP, que facilita la inclusió automàtica de classes en els teus projectes. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.autoload.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.autoload.php&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;poo-avancada-patrons-de-disseny&quot; tabindex=&quot;-1&quot;&gt;POO Avançada: Patrons de Disseny&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Head First Design Patterns&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Eric Freeman i Elisabeth Robson. O&#39;Reilly Media, 2020. ISBN: 978-1-4919-7175-9. Un recurs excel·lent per aprendre patrons de disseny aplicables a PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;PHP Design Patterns&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Stephan Schmidt. Publicat per Packt Publishing, 2008. ISBN: 978-1-84719-255-3. Aquest llibre explora com aplicar patrons de disseny en projectes PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;webs-de-referencia-addicionals&quot; tabindex=&quot;-1&quot;&gt;Webs de Referència Addicionals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP: The Right Way&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://phptherightway.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://phptherightway.com/&lt;/a&gt;. Una guia per a desenvolupar aplicacions PHP seguint les millors pràctiques de la indústria.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stack Overflow&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/tagged/php&lt;/a&gt;. Una font d&#39;informació valuosa per resoldre problemes específics de PHP i discutir amb altres desenvolupadors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;13-exercicis&quot; tabindex=&quot;-1&quot;&gt;13. Exercicis&lt;/h2&gt;
&lt;h3 id=&quot;bateria-d-exercicis-solucionats-per-a-la-unitat-de-programacio-orientada-a-objectes&quot; tabindex=&quot;-1&quot;&gt;Bateria d&#39;Exercicis Solucionats per a la Unitat de Programació Orientada a Objectes&lt;/h3&gt;
&lt;h5 id=&quot;exercici-1-crear-una-classe-basica&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Crear una Classe Bàsica&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe &lt;code&gt;Cotxe&lt;/code&gt; que tinga les propietats &lt;code&gt;marca&lt;/code&gt; i &lt;code&gt;model&lt;/code&gt;. Afegeix un mètode &lt;code&gt;mostraInformacio&lt;/code&gt; que retorne un string amb la marca i el model del cotxe.&lt;/li&gt;
&lt;li&gt;Crea una instància de la classe &lt;code&gt;Cotxe&lt;/code&gt;, assigna-li una marca i un model, i mostra la informació utilitzant el mètode &lt;code&gt;mostraInformacio&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Cotxe {
    public $marca;
    public $model;

    public function mostraInformacio() {
        return &amp;quot;Marca: &amp;quot; . $this-&amp;gt;marca . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;model;
    }
}
 
$cotxe = new Cotxe();
$cotxe-&amp;gt;marca = &amp;quot;Toyota&amp;quot;;
$cotxe-&amp;gt;model = &amp;quot;Corolla&amp;quot;;
echo $cotxe-&amp;gt;mostraInformacio(); // Output: Marca: Toyota, Model: Corolla
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h5 id=&quot;exercici-2-afegir-un-constructor-i-destructor&quot; tabindex=&quot;-1&quot;&gt;Exercici 2. Afegir un Constructor i destructor&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Modifica la classe &lt;code&gt;Cotxe&lt;/code&gt; per afegir un constructor que prenga com a paràmetres la &lt;code&gt;marca&lt;/code&gt; i el &lt;code&gt;model&lt;/code&gt;, i que establisca aquestes propietats automàticament.&lt;/li&gt;
&lt;li&gt;Afegeix un destructor a la classe &lt;code&gt;Cotxe&lt;/code&gt; que mostre un missatge quan l&#39;objecte és destruït. Crea un objecte i permet que es destruïsca al final del programa.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Cotxe {
    public $marca;
    public $model;

    public function __construct($marca, $model) {
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }
    public function __destruct() {
        echo &amp;quot;L&#39;objecte Cotxe ha estat destruït.&#92;n&amp;quot;;
    }

    public function mostraInformacio() {
        return &amp;quot;Marca: &amp;quot; . $this-&amp;gt;marca . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;model;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h5 id=&quot;exercici-3-encapsulacio-de-propietats&quot; tabindex=&quot;-1&quot;&gt;Exercici 3. Encapsulació de Propietats&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Modifica la classe &lt;code&gt;Cotxe&lt;/code&gt; per a que les propietats &lt;code&gt;marca&lt;/code&gt; i &lt;code&gt;model&lt;/code&gt; siguen privades. Afegeix mètodes públics &lt;code&gt;getMarca&lt;/code&gt;, &lt;code&gt;setMarca&lt;/code&gt;, &lt;code&gt;getModel&lt;/code&gt;, i &lt;code&gt;setModel&lt;/code&gt; per accedir i modificar aquestes propietats.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Cotxe {
    private $marca;
    private $model;

    public function __construct($marca, $model) {
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }

    public function getMarca() {
        return $this-&amp;gt;marca;
    }

    public function setMarca($marca) {
        $this-&amp;gt;marca = $marca;
    }

    public function getModel() {
        return $this-&amp;gt;model;
    }

    public function setModel($model) {
        $this-&amp;gt;model = $model;
    }

    public function mostraInformacio() {
        return &amp;quot;Marca: &amp;quot; . $this-&amp;gt;getMarca() . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;getModel();
    }
}

$cotxe = new Cotxe(&amp;quot;Ford&amp;quot;, &amp;quot;Fiesta&amp;quot;);
echo $cotxe-&amp;gt;mostraInformacio(); // Output: Marca: Ford, Model: Fiesta
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h5 id=&quot;exercici-4-herencia-i-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Exercici 4. Herència i Polimorfisme&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe &lt;code&gt;Vehicle&lt;/code&gt; amb una propietat &lt;code&gt;tipus&lt;/code&gt;. A continuació, crea una classe &lt;code&gt;Motocicleta&lt;/code&gt; que herete de &lt;code&gt;Vehicle&lt;/code&gt; i tinga una propietat &lt;code&gt;cilindrada&lt;/code&gt;. Afegeix un mètode a &lt;code&gt;Motocicleta&lt;/code&gt; que retorne el tipus i la cilindrada.&lt;/li&gt;
&lt;li&gt;Crea una funció &lt;code&gt;mostraDetallsVehicle&lt;/code&gt; que accepte un objecte de tipus &lt;code&gt;Vehicle&lt;/code&gt; i mostre les seues propietats. Prova aquesta funció amb objectes de &lt;code&gt;Cotxe&lt;/code&gt; i &lt;code&gt;Motocicleta&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Vehicle {
    protected $tipus;

    public function __construct($tipus) {
        $this-&amp;gt;tipus = $tipus;
    }

    public function mostraDetalls() {
        return &amp;quot;Tipus: &amp;quot; . $this-&amp;gt;tipus;
    }
}

class Cotxe extends Vehicle {
    private $marca;
    private $model;

    public function __construct($marca, $model) {
        parent::__construct(&amp;quot;Cotxe&amp;quot;);
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }

    public function mostraDetalls() {
        return parent::mostraDetalls() . &amp;quot;, Marca: &amp;quot; . $this-&amp;gt;marca . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;model;
    }
}

class Motocicleta extends Vehicle {
    private $cilindrada;

    public function __construct($cilindrada) {
        parent::__construct(&amp;quot;Motocicleta&amp;quot;);
        $this-&amp;gt;cilindrada = $cilindrada;
    }

    public function mostraDetalls() {
        return parent::mostraDetalls() . &amp;quot;, Cilindrada: &amp;quot; . $this-&amp;gt;cilindrada;
    }
}

function mostraDetallsVehicle(Vehicle $vehicle) {
    echo $vehicle-&amp;gt;mostraDetalls() . &amp;quot;&#92;n&amp;quot;;
}

$cotxe = new Cotxe(&amp;quot;Toyota&amp;quot;, &amp;quot;Corolla&amp;quot;);
$moto = new Motocicleta(600);

mostraDetallsVehicle($cotxe); // Output: Tipus: Cotxe, Marca: Toyota, Model: Corolla
mostraDetallsVehicle($moto);  // Output: Tipus: Motocicleta, Cilindrada: 600
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h5 id=&quot;exercici-5-implementacio-del-patro-mvc-amb-vehicles&quot; tabindex=&quot;-1&quot;&gt;Exercici 5. Implementació del Patró MVC amb Vehicles&lt;/h5&gt;
&lt;p&gt;Continuant amb l&#39;exercici anterior on has creat les classes &lt;code&gt;Vehicle&lt;/code&gt;, &lt;code&gt;Cotxe&lt;/code&gt;, i &lt;code&gt;Motocicleta&lt;/code&gt;, ara refactoritzaràs el codi per seguir el patró Model-Vista-Controlador (MVC). El teu objectiu és separar la lògica de negoci (models) de la presentació (vistes) i gestionar la interacció entre aquestes capes mitjançant un controlador.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Model&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoritza les classes &lt;code&gt;Vehicle&lt;/code&gt;, &lt;code&gt;Cotxe&lt;/code&gt;, i &lt;code&gt;Motocicleta&lt;/code&gt; perquè representen el model de negoci i només contenen la lògica relacionada amb la gestió de vehicles.&lt;/li&gt;
&lt;li&gt;Assegura&#39;t que els models no contenen cap codi de presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear les Vistes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crea vistes separades per mostrar els detalls dels vehicles:
&lt;ul&gt;
&lt;li&gt;Una vista HTML que mostre la informació dels vehicles en format HTML.&lt;/li&gt;
&lt;li&gt;Una vista en text simple que mostre els detalls dels vehicles en un format de text senzill.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un controlador que gestione la interacció entre els models i les vistes.&lt;/li&gt;
&lt;li&gt;El controlador ha de ser capaç de rebre una sol·licitud per mostrar un vehicle i triar la vista adequada per mostrar-ne els detalls.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Models

class Vehicle {
    protected $tipus;

    public function __construct($tipus) {
        $this-&amp;gt;tipus = $tipus;
    }

    public function getTipus() {
        return $this-&amp;gt;tipus;
    }
}

class Cotxe extends Vehicle {
    private $marca;
    private $model;

    public function __construct($marca, $model) {
        parent::__construct(&amp;quot;Cotxe&amp;quot;);
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }

    public function getMarca() {
        return $this-&amp;gt;marca;
    }

    public function getModel() {
        return $this-&amp;gt;model;
    }
}

class Motocicleta extends Vehicle {
    private $cilindrada;

    public function __construct($cilindrada) {
        parent::__construct(&amp;quot;Motocicleta&amp;quot;);
        $this-&amp;gt;cilindrada = $cilindrada;
    }

    public function getCilindrada() {
        return $this-&amp;gt;cilindrada;
    }
}

// Vistes

class VehicleView {
    public function renderHtml(Vehicle $vehicle) {
        $output = &amp;quot;&amp;lt;p&amp;gt;Tipus: &amp;quot; . $vehicle-&amp;gt;getTipus() . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        if ($vehicle instanceof Cotxe) {
            $output .= &amp;quot;&amp;lt;p&amp;gt;Marca: &amp;quot; . $vehicle-&amp;gt;getMarca() . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
            $output .= &amp;quot;&amp;lt;p&amp;gt;Model: &amp;quot; . $vehicle-&amp;gt;getModel() . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        } elseif ($vehicle instanceof Motocicleta) {
            $output .= &amp;quot;&amp;lt;p&amp;gt;Cilindrada: &amp;quot; . $vehicle-&amp;gt;getCilindrada() . &amp;quot; cc&amp;lt;/p&amp;gt;&amp;quot;;
        }
        return $output;
    }

    public function renderText(Vehicle $vehicle) {
        $output = &amp;quot;Tipus: &amp;quot; . $vehicle-&amp;gt;getTipus() . &amp;quot;&#92;n&amp;quot;;
        if ($vehicle instanceof Cotxe) {
            $output .= &amp;quot;Marca: &amp;quot; . $vehicle-&amp;gt;getMarca() . &amp;quot;&#92;n&amp;quot;;
            $output .= &amp;quot;Model: &amp;quot; . $vehicle-&amp;gt;getModel() . &amp;quot;&#92;n&amp;quot;;
        } elseif ($vehicle instanceof Motocicleta) {
            $output .= &amp;quot;Cilindrada: &amp;quot; . $vehicle-&amp;gt;getCilindrada() . &amp;quot; cc&#92;n&amp;quot;;
        }
        return $output;
    }
}

// Controlador

class VehicleController {
    private $view;

    public function __construct(VehicleView $view) {
        $this-&amp;gt;view = $view;
    }

    public function mostrarVehicle(Vehicle $vehicle, $format = &#39;html&#39;) {
        if ($format === &#39;html&#39;) {
            echo $this-&amp;gt;view-&amp;gt;renderHtml($vehicle);
        } else {
            echo $this-&amp;gt;view-&amp;gt;renderText($vehicle);
        }
    }
}

// Exemple d&#39;ús

$view = new VehicleView();
$controller = new VehicleController($view);

$cotxe = new Cotxe(&amp;quot;Toyota&amp;quot;, &amp;quot;Corolla&amp;quot;);
$moto = new Motocicleta(600);

// Mostrar en HTML
$controller-&amp;gt;mostrarVehicle($cotxe, &#39;html&#39;);
$controller-&amp;gt;mostrarVehicle($moto, &#39;html&#39;);

// Mostrar en Text
$controller-&amp;gt;mostrarVehicle($cotxe, &#39;text&#39;);
$controller-&amp;gt;mostrarVehicle($moto, &#39;text&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-5-classes-abstractes-i-interficies&quot; tabindex=&quot;-1&quot;&gt;Exercici 5. Classes Abstractes i Interfícies&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe abstracta &lt;code&gt;Figura&lt;/code&gt; amb un mètode abstracte &lt;code&gt;calculaArea&lt;/code&gt;. Després, crea classes &lt;code&gt;Cercle&lt;/code&gt; i &lt;code&gt;Rectangle&lt;/code&gt; que estiguen basades en &lt;code&gt;Figura&lt;/code&gt; i implementen el mètode &lt;code&gt;calculaArea&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Defineix una interfície &lt;code&gt;OperacionsBàsiques&lt;/code&gt; amb els mètodes &lt;code&gt;suma&lt;/code&gt; i &lt;code&gt;resta&lt;/code&gt;. Implementa aquesta interfície en una classe &lt;code&gt;CalculadoraSimple&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
abstract class Figura {
    abstract public function calculaArea();
}

class Cercle extends Figura {
    private $radi;

    public function __construct($radi) {
        $this-&amp;gt;radi = $radi;
    }

    public function calculaArea() {
        return pi() * $this-&amp;gt;radi * $this-&amp;gt;radi;
    }
}

class Rectangle extends Figura {
    private $ample;
    private $llarg;

    public function __construct($ample, $llarg) {
        $this-&amp;gt;ample = $ample;
        $this-&amp;gt;llarg = $llarg;
    }

    public function calculaArea() {
        return $this-&amp;gt;ample * $this-&amp;gt;llarg;
    }
}

$cercle = new Cercle(5);
$rectangle = new Rectangle(4, 6);

echo &amp;quot;Àrea del cercle: &amp;quot; . $cercle-&amp;gt;calculaArea() . &amp;quot;&#92;n&amp;quot;; // Output: Àrea del cercle: 78.5398
echo &amp;quot;Àrea del rectangle: &amp;quot; . $rectangle-&amp;gt;calculaArea() . &amp;quot;&#92;n&amp;quot;; // Output: Àrea del rectangle: 24

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
interface OperacionsBàsiques {
    public function suma($a, $b);
    public function resta($a, $b);
}

class CalculadoraSimple implements OperacionsBàsiques {
    public function suma($a, $b) {
        return $a + $b;
    }

    public function resta($a, $b) {
        return $a - $b;
    }
}

$calculadora = new CalculadoraSimple();
echo &amp;quot;Suma: &amp;quot; . $calculadora-&amp;gt;suma(5, 3) . &amp;quot;&#92;n&amp;quot;; // Output: Suma: 8
echo &amp;quot;Resta: &amp;quot; . $calculadora-&amp;gt;resta(5, 3) . &amp;quot;&#92;n&amp;quot;; // Output: Resta: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-6-utilitzar-traits&quot; tabindex=&quot;-1&quot;&gt;Exercici 6.  Utilitzar Traits&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea un trait &lt;code&gt;Informacio&lt;/code&gt; amb un mètode &lt;code&gt;mostraInformacio&lt;/code&gt;. Inclou aquest trait en les classes &lt;code&gt;Cotxe&lt;/code&gt; i &lt;code&gt;Motocicleta&lt;/code&gt;, i utilitza&#39;l per mostrar informació addicional.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
trait Informacio {
    public function mostraInformacio() {
        return &amp;quot;Aquest és un objecte de tipus &amp;quot; . get_class($this);
    }
}

class Cotxe {
    use Informacio;
}

class Motocicleta {
    use Informacio;
}

$cotxe = new Cotxe();
$moto = new Motocicleta();

echo $cotxe-&amp;gt;mostraInformacio() . &amp;quot;&#92;n&amp;quot;; // Output: Aquest és un objecte de tipus Cotxe
echo $moto-&amp;gt;mostraInformacio() . &amp;quot;&#92;n&amp;quot;; // Output: Aquest és un objecte de tipus Motocicleta
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-7-gestionar-excepcions&quot; tabindex=&quot;-1&quot;&gt;Exercici 7.  Gestionar Excepcions&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Escriu una funció &lt;code&gt;divideix&lt;/code&gt; que prenga dos nombres com a paràmetres i retorne el resultat de la divisió. Si el segon nombre és zero, llença una excepció amb un missatge adequat. Captura aquesta excepció quan crides a la funció i mostra un missatge d&#39;error.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
function divideix($a, $b) {
    if ($b == 0) {
        throw new Exception(&amp;quot;No es pot dividir per zero.&amp;quot;);
    }
    return $a / $b;
}

try {
    echo divideix(10, 2) . &amp;quot;&#92;n&amp;quot;; // Output: 5
    echo divideix(10, 0) . &amp;quot;&#92;n&amp;quot;; // Aquesta línia llançarà una excepció
} catch (Exception $e) {
    echo &amp;quot;Error: &amp;quot; . $e-&amp;gt;getMessage() . &amp;quot;&#92;n&amp;quot;; // Output: Error: No es pot dividir per zero.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-8-proves-amb-php-unit&quot; tabindex=&quot;-1&quot;&gt;Exercici 8. Proves amb PHPUnit&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe &lt;code&gt;Calculadora&lt;/code&gt; amb els mètodes &lt;code&gt;suma&lt;/code&gt; i &lt;code&gt;resta&lt;/code&gt;. Escriu una prova unitària amb PHPUnit per verificar que aquests mètodes funcionen correctament.&lt;/li&gt;
&lt;li&gt;Afegeix un mètode &lt;code&gt;divideix&lt;/code&gt; a la classe &lt;code&gt;Calculadora&lt;/code&gt; que llance una excepció quan es divideix per zero. Escriu una prova unitària que assegure que aquesta excepció es llança correctament.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Arxiu: tests/CalculadoraTest.php
use PHPUnit&#92;Framework&#92;TestCase;

class Calculadora {
    public function suma($a, $b) {
        return $a + $b;
    }

    public function resta($a, $b) {
        return $a - $b;
    }
}

class CalculadoraTest extends TestCase {
    public function testSuma() {
        $calculadora = new Calculadora();
        $resultat = $calculadora-&amp;gt;suma(2, 3);
        $this-&amp;gt;assertEquals(5, $resultat);
    }

    public function testResta() {
        $calculadora = new Calculadora();
        $resultat = $calculadora-&amp;gt;resta(5, 3);
        $this-&amp;gt;assertEquals(2, $resultat);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; 
// Arxiu: tests/CalculadoraTest.php
use PHPUnit&#92;Framework&#92;TestCase;

class Calculadora {
    public function divideix($a, $b) {
        if ($b == 0) {
            throw new InvalidArgumentException(&amp;quot;No es pot dividir per zero.&amp;quot;);
        }
        return $a / $b;
    }
}

class CalculadoraTest extends TestCase {
    public function testDivideix() {
        $this-&amp;gt;expectExceptionclass;
        
        $calculadora = new Calculadora();
        $calculadora-&amp;gt;divideix(5, 0);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-9-espais-de-noms-namespaces&quot; tabindex=&quot;-1&quot;&gt;Exercici 9. Espais de Noms (Namespaces)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea un espai de noms &lt;code&gt;App&#92;Models&lt;/code&gt; i defineix una classe &lt;code&gt;Usuari&lt;/code&gt; dins d&#39;aquest espai de noms. Afegeix un mètode &lt;code&gt;getNomComplet&lt;/code&gt; que retorne el nom complet de l&#39;usuari.&lt;/li&gt;
&lt;li&gt;En un fitxer separat, importa la classe &lt;code&gt;Usuari&lt;/code&gt; de l&#39;espai de noms &lt;code&gt;App&#92;Models&lt;/code&gt; i crea una instància d&#39;aquesta classe. Utilitza el mètode &lt;code&gt;getNomComplet&lt;/code&gt; per mostrar el nom complet d&#39;un usuari.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Arxiu: src/Models/Usuari.php
namespace App&#92;Models;

class Usuari {
    private $nom;
    private $cognom;

    public function __construct($nom, $cognom) {
        $this-&amp;gt;nom = $nom;
        $this-&amp;gt;cognom = $cognom;
    }

    public function getNomComplet() {
        return $this-&amp;gt;nom . &amp;quot; &amp;quot; . $this-&amp;gt;cognom;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
// Arxiu: index.php
require &#39;vendor/autoload.php&#39;;

use App&#92;Models&#92;Usuari;

$usuari = new Usuari(&amp;quot;Joan&amp;quot;, &amp;quot;Garcia&amp;quot;);
echo $usuari-&amp;gt;getNomComplet(); // Output: Joan Garcia
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-10-autoloading-i-composer&quot; tabindex=&quot;-1&quot;&gt;Exercici 10. Autoloading i Composer&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Configura un projecte PHP amb Composer que utilitze l&#39;autoloading PSR-4. Crea l&#39;estructura de directoris &lt;code&gt;src/Models&lt;/code&gt; i col·loca una classe &lt;code&gt;Producte&lt;/code&gt; dins de &lt;code&gt;src/Models&lt;/code&gt;. Verifica que l&#39;autoloading funcione correctament instanciant la classe &lt;code&gt;Producte&lt;/code&gt; en un fitxer separat.&lt;/li&gt;
&lt;li&gt;Afegeix la llibreria &lt;code&gt;monolog/monolog&lt;/code&gt; al projecte utilitzant Composer. Crea una instància de &lt;code&gt;Logger&lt;/code&gt; i afegeix una entrada al registre de logs.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;ol&gt;
&lt;li&gt;Crea l&#39;estructura de directoris src/Models i col·loca el següent codi a src/Models/Producte.php:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App&#92;Models;

class Producte {
    private $nom;

    public function __construct($nom) {
        $this-&amp;gt;nom = $nom;
    }

    public function getNom() {
        return $this-&amp;gt;nom;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Configura l&#39;autoloading en composer.json:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: {
            &amp;quot;App&#92;&#92;&amp;quot;: &amp;quot;src/&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Executa composer dump-autoload per generar els fitxers d&#39;autoload.&lt;/li&gt;
&lt;li&gt;Utilitza la classe producte:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Arxiu: index.php
require &#39;vendor/autoload.php&#39;;

use App&#92;Models&#92;Producte;

$producte = new Producte(&amp;quot;Ordinador&amp;quot;);
echo $producte-&amp;gt;getNom(); // Output: Ordinador
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Afegeix Monolog a composer.json:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require monolog/monolog
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Utilitza Monolog per crear un logger:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

$log = new Logger(&#39;nom_aplicacio&#39;);
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::WARNING));

// Afegeix una entrada al log
$log-&amp;gt;warning(&#39;Aquesta és una entrada d&#39;advertència&#39;);
$log-&amp;gt;error(&#39;Aquesta és una entrada d&#39;error&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-11-logger&quot; tabindex=&quot;-1&quot;&gt;Exercici 11. Logger&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Utilitzant la llibreria &lt;code&gt;Monolog&lt;/code&gt;, crea un logger que escriga missatges a un fitxer &lt;code&gt;app.log&lt;/code&gt;. Configura el logger per registrar missatges d&#39;informació i d&#39;error.&lt;/li&gt;
&lt;li&gt;Configura un logger que escriga missatges de registre tant a un fitxer com a la consola. Prova el logger registrant missatges d&#39;error.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

$log = new Logger(&#39;nom_aplicacio&#39;);
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::INFO));
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::ERROR));

// Registra missatges d&#39;informació i d&#39;error
$log-&amp;gt;info(&#39;Aquesta és una entrada d’informació&#39;);
$log-&amp;gt;error(&#39;Aquesta és una entrada d’error&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;
use Monolog&#92;Handler&#92;ErrorLogHandler;

$log = new Logger(&#39;nom_aplicacio&#39;);
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::WARNING));
$log-&amp;gt;pushHandler(new ErrorLogHandler());

// Registra missatges d’error al fitxer i a la consola
$log-&amp;gt;error(&#39;Aquesta és una entrada d’error&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-12-documentacio&quot; tabindex=&quot;-1&quot;&gt;Exercici 12. Documentació&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Documenta la classe &lt;code&gt;Producte&lt;/code&gt; creada en l&#39;exercici anterior utilitzant comentaris PHPDoc. Assegura&#39;t d&#39;incloure la descripció de la classe, les propietats, i els mètodes.&lt;/li&gt;
&lt;li&gt;Utilitza una eina com &lt;code&gt;phpDocumentor&lt;/code&gt; per generar la documentació automàtica del codi PHP del projecte, incloent-hi la classe &lt;code&gt;Producte&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App&#92;Models;

/**
 * Classe Producte
 *
 * Representa un producte amb un nom.
 */
class Producte {
    /**
     * @var string El nom del producte
     */
    private $nom;

    /**
     * Constructor de la classe Producte
     *
     * @param string $nom El nom del producte
     */
    public function __construct($nom) {
        $this-&amp;gt;nom = $nom;
    }

    /**
     * Obté el nom del producte
     *
     * @return string El nom del producte
     */
    public function getNom() {
        return $this-&amp;gt;nom;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Instal·la phpDocumentor globalment o com a dependència de desenvolupament:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require --dev phpdocumentor/phpdocumentor
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Genera la documentació:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vendor/bin/phpdoc -d src -t docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest comandament generarà la documentació a la carpeta docs.&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-13-generacio-de-pd-fs-amb-dom-pdf&quot; tabindex=&quot;-1&quot;&gt;Exercici 13. Generació de PDFs amb DomPDF&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Instal·la la llibreria &lt;code&gt;dompdf/dompdf&lt;/code&gt; amb Composer. Crea un script PHP que genere un PDF senzill amb un títol i un paràgraf de text.&lt;/li&gt;
&lt;li&gt;Crea un PDF utilitzant DomPDF que incloga una taula amb dades i una imatge. Assegura&#39;t que el PDF es renderitze correctament i que la imatge s&#39;incloga en el document.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;ol&gt;
&lt;li&gt;Instal·la DomPDF amb Composer:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require dompdf/dompdf
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Crea un script PHP que generi un PDF senzill:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Dompdf&#92;Dompdf;

$dompdf = new Dompdf();
$html = &#39;&amp;lt;h1&amp;gt;Informe de Vendes&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Aquest és un informe de les vendes.&amp;lt;/p&amp;gt;&#39;;

$dompdf-&amp;gt;loadHtml($html);
$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;landscape&#39;);
$dompdf-&amp;gt;render();
$dompdf-&amp;gt;stream(&#39;informe.pdf&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Crea un PDF amb una taula i una imatge:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Dompdf&#92;Dompdf;

$dompdf = new Dompdf();
$html = &#39;
    &amp;lt;h1&amp;gt;Informe de Productes&amp;lt;/h1&amp;gt;
    &amp;lt;table border=&amp;quot;1&amp;quot; cellpadding=&amp;quot;10&amp;quot;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;Producte&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Preu&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;Ordinador&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;500€&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;Teclat&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;20€&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;img src=&amp;quot;https://example.com/imatge.png&amp;quot; alt=&amp;quot;Imatge de Producte&amp;quot; /&amp;gt;
&#39;;

$dompdf-&amp;gt;loadHtml($html);
$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;portrait&#39;);
$dompdf-&amp;gt;render();
$dompdf-&amp;gt;stream(&amp;quot;informe_productes.pdf&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;h2 id=&quot;exercicis-proposats&quot; tabindex=&quot;-1&quot;&gt;Exercicis proposats&lt;/h2&gt;
&lt;h4 id=&quot;exercici-1-creacio-de-la-classe-basica-i-gestio-de-propietats&quot; tabindex=&quot;-1&quot;&gt;Exercici 1. Creació de la Classe Bàsica i Gestió de Propietats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una classe &lt;code&gt;Persona&lt;/code&gt; amb les propietats privades &lt;code&gt;nom&lt;/code&gt;, &lt;code&gt;cognoms&lt;/code&gt;, i &lt;code&gt;edat&lt;/code&gt;. Encapsula aquestes propietats mitjançant getters i setters. Afig els següents mètodes:&lt;/p&gt;
&lt;p&gt;- &lt;code&gt;getNomComplet(): string&lt;/code&gt; – Retorna el nom complet de la persona.&lt;br /&gt;
- &lt;code&gt;estaJubilat(): bool&lt;/code&gt; – Retorna &lt;code&gt;true&lt;/code&gt; si l&#39;edat és major o igual a 65, &lt;code&gt;false&lt;/code&gt; en cas contrari.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifica la classe &lt;code&gt;Persona&lt;/code&gt; afegint un constructor que assigna nom i cognoms. Si es proporciona un tercer paràmetre, assigna l&#39;edat; en cas contrari, assigna una edat per defecte de 25 anys.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifica la classe &lt;code&gt;Persona&lt;/code&gt; per utilitzar una constant &lt;code&gt;LIMITE_EDAT&lt;/code&gt; amb el valor de 66 anys i utilitza-la en el mètode &lt;code&gt;estaJubilat&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-2-herencia-i-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Exercici 2. Herència i Polimorfisme&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una classe &lt;code&gt;Empleado&lt;/code&gt; que herete de &lt;code&gt;Persona&lt;/code&gt;. Afig les següents propietats i mètodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;private float $sou&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private array $telefons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;anyadirTelefono(int $telefon): void&lt;/code&gt; – Afig un número de telèfon a l&#39;array.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listarTelefonos(): string&lt;/code&gt; – Retorna els números de telèfon separats per comes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vaciarTelefonos(): void&lt;/code&gt; – Buida l&#39;array de telèfons.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debePagarImpuestos(): bool&lt;/code&gt; – Retorna &lt;code&gt;true&lt;/code&gt; si el sou és superior a 3333€, &lt;code&gt;false&lt;/code&gt; en cas contrari.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Afig un mètode estàtic &lt;code&gt;toHtml(Empleado $emp): string&lt;/code&gt; que genere un codi HTML que mostre el nom complet de l&#39;empleat dins d&#39;un paràgraf i els seus telèfons dins d&#39;una llista ordenada.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Afig un mètode estàtic &lt;code&gt;toHtml(Persona $p)&lt;/code&gt; a la classe Persona que mostre el nom complet de la persona dins d&#39;un paràgraf. Modifica el mètode &lt;code&gt;toHtml&lt;/code&gt; de &lt;code&gt;Empleado&lt;/code&gt; per rebre una &lt;code&gt;Persona&lt;/code&gt; com a paràmetre i comprovar si es tracta d&#39;un &lt;code&gt;Empleado&lt;/code&gt; amb &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transforma &lt;code&gt;Persona&lt;/code&gt; en una classe abstracta. Redefineix el mètode estàtic &lt;code&gt;toHtml(Persona $p)&lt;/code&gt; en totes les seues subclasses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-3-integracio-d-espais-de-noms-autoloading-i-composer&quot; tabindex=&quot;-1&quot;&gt;Exercici 3. Integració d&#39;Espais de Noms, Autoloading, i Composer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una classe &lt;code&gt;Empresa&lt;/code&gt; que incloga una propietat amb un array de &lt;code&gt;Empleados&lt;/code&gt; . Implementa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public function addWorker(Empleado $t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public function listWorkersHtml(): string&lt;/code&gt; – Genera la llista de treballadors en format HTML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public function getCosteNominas(): float&lt;/code&gt; – Calcula el cost total de les nòmines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configura el projecte PHP amb Composer que utilitze l&#39;autoloading PSR-4.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-4-logger-i-documentacio&quot; tabindex=&quot;-1&quot;&gt;Exercici 4. Logger i Documentació&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Utilitza la llibreria &lt;code&gt;Monolog&lt;/code&gt; per configurar un logger que escriga missatges a un fitxer &lt;code&gt;app.log&lt;/code&gt;. Afig funcionalitat perquè el logger registre missatges d&#39;informació i d&#39;error en diferents arxius segons la gravetat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configura un logger que escriga missatges de registre tant a un fitxer com a la consola. Prova el logger registrant missatges d&#39;error i advertència.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documenta la classe &lt;code&gt;Producte&lt;/code&gt; creada en exercicis anteriors utilitzant comentaris PHPDoc. Inclou la descripció de la classe, les propietats, i els mètodes. Utilitza una eina com &lt;code&gt;phpDocumentor&lt;/code&gt; per generar documentació automàtica.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escriu proves unitàries per als mètodes de les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt; utilitzant PHPUnit. Prova els mètodes &lt;code&gt;getNomComplet&lt;/code&gt;, &lt;code&gt;estaJubilat&lt;/code&gt;, &lt;code&gt;addWorker&lt;/code&gt;, i &lt;code&gt;getCosteNominas&lt;/code&gt;. Assegura&#39;t que les proves cobreixen diferents escenaris, incloent errors potencials.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escriu una prova unitària que comprove que el logger està registrant correctament els missatges d&#39;error a l&#39;arxiu corresponent. Utilitza un mock per assegurar-te que el logger funciona sense necessitat d&#39;escriure en un fitxer real durant la prova.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-5-generacio-de-pd-fs-amb-dom-pdf&quot; tabindex=&quot;-1&quot;&gt;Exercici 5. Generació de PDFs amb DomPDF&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instal·la la llibreria &lt;code&gt;dompdf/dompdf&lt;/code&gt; amb Composer. Crea un script PHP que genere un PDF senzill amb un títol i un paràgraf de text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crea un PDF utilitzant DomPDF que incloga una taula amb dades i una imatge. Assegura&#39;t que el PDF es renderitze correctament i que la imatge s&#39;incloga en el document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilitzant la classe &lt;code&gt;Empresa&lt;/code&gt; i &lt;code&gt;Empleado&lt;/code&gt;, genera un informe en PDF amb la llista de treballadors i el seu sou. Utilitza DomPDF per generar aquest informe.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-6-serialitzacio-i-json&quot; tabindex=&quot;-1&quot;&gt;Exercici 6. Serialització i JSON&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una interfície &lt;code&gt;JSerializable&lt;/code&gt; que incloga els mètodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toJSON(): string&lt;/code&gt; – Converteix l&#39;objecte a un JSON utilitzant &lt;code&gt;json_encode()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toSerialize(): string&lt;/code&gt; – Serialitza l&#39;objecte utilitzant &lt;code&gt;serialize()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifica les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt; per implementar aquesta interfície. Assegura&#39;t que les propietats privades es puguen serialitzar correctament.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escriu mètodes per deserialitzar un objecte a partir d&#39;una cadena JSON o d&#39;una cadena serialitzada. Prova aquests mètodes amb PHPUnit per assegurar-te que la deserialització funciona correctament.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-7-separacio-del-model-de-negoci-i-la-presentacio-mvc&quot; tabindex=&quot;-1&quot;&gt;Exercici 7. Separació del Model de Negoci i la Presentació (MVC)&lt;/h4&gt;
&lt;p&gt;Fins ara, has creat diverses classes que gestionen la lògica del joc i les dades (models), com &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt;, i has generat sortides HTML i PDFs amb DomPDF. Ara és el moment de refactoritzar la teua aplicació per assegurar una separació clara entre la lògica del negoci i la presentació, seguint el patró Model-Vista-Controlador (MVC).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Model&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoritza les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt; per assegurar que només gestionen la lògica de negoci (per exemple, càlcul de nòmines, gestió d&#39;empleats, etc.).&lt;/li&gt;
&lt;li&gt;Assegura&#39;t que aquestes classes no contenen codi relacionat amb la presentació (HTML o PDF).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear les Vistes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crea vistes separades per presentar la informació als usuaris:
&lt;ul&gt;
&lt;li&gt;Una vista HTML per mostrar la informació de &lt;code&gt;Empleado&lt;/code&gt; i &lt;code&gt;Empresa&lt;/code&gt; com a llistats.&lt;/li&gt;
&lt;li&gt;Una vista PDF per generar informes amb DomPDF, basant-se en les dades proporcionades pel model.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un controlador que reba les sol·licituds dels usuaris, interactue amb el model (&lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, &lt;code&gt;Empresa&lt;/code&gt;), i tria la vista adequada per mostrar els resultats (HTML o PDF).&lt;/li&gt;
&lt;li&gt;El controlador ha d&#39;encapsular tota la lògica necessària per a gestionar la interacció entre la vista i el model, assegurant que el model no estiga lligat a la capa de presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;EmpleadoController&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App&#92;Controllers;

use App&#92;Models&#92;Empleado;

class EmpleadoController {

    public function listAll(){
        $persona1 = new Empleado(&#39;Ignasi&#39;,&#39;Gomis Mullor&#39;,50);
        $persona2 = new Empleado(&#39;Juan&#39;,&#39;Segura Vasco&#39;,50);
        $persona1-&amp;gt;setSou(2500);
        $persona2-&amp;gt;setSou(2500);

        $empleados = [$persona1, $persona2];

        
        include $_SERVER[&#39;DOCUMENT_ROOT&#39;].&#39;/views/empleado.view.php&#39;;
        

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;empleado.view.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;

&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ca&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Empleado&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;

&amp;lt;table&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;th&amp;gt;Nom&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Telefons&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Sou&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;?php foreach ($empleados as $empleado): ?&amp;gt;
    &amp;lt;tr&amp;gt;
        &amp;lt;td&amp;gt;&amp;lt;?= $empleado ?&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;?= $empleado-&amp;gt;listarTelefonos() ?&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;?= $empleado-&amp;gt;getSou() ?&amp;gt;&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;?php endforeach; ?&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;index.php&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
&amp;lt;?php
include_once __DIR__ .&#39;/../vendor/autoload.php&#39;;

use App&#92;Controllers&#92;EmpleadoController;

$controller = new EmpleadoController();
$controller-&amp;gt;listAll();

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-8-creacio-de-proves-unitaries-per-al-patro-mvc&quot; tabindex=&quot;-1&quot;&gt;Exercici 8. Creació de Proves Unitàries per al Patró MVC&lt;/h4&gt;
&lt;p&gt;Després de refactoritzar l&#39;aplicació per separar la lògica del negoci de la presentació seguint el patró Model-Vista-Controlador (MVC), és fonamental assegurar-se que tots els components funcionen correctament i que la interacció entre ells es realitza tal com s&#39;espera. Per això, has de crear una sèrie de proves unitàries utilitzant PHPUnit per verificar el funcionament del model, les vistes i els controladors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proves del Model&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escriu proves unitàries per verificar el funcionament dels mètodes de les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Assegura&#39;t que els mètodes funcionen correctament, com ara:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getNomComplet()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debePagarImpuestos()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addWorker()&lt;/code&gt; i &lt;code&gt;getCosteNominas()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prova que els càlculs es realitzen correctament i que les dades es gestionen segons el que s&#39;espera.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proves del Controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escriu proves unitàries per assegurar-te que els controladors interactuen correctament amb els models i que seleccionen la vista adequada per a cada situació.&lt;/li&gt;
&lt;li&gt;Prova que les dades es passen correctament del model a la vista a través del controlador.&lt;/li&gt;
&lt;li&gt;Implementa proves per verificar que el controlador respon correctament a diferents sol·licituds de l&#39;usuari, per exemple:
&lt;ul&gt;
&lt;li&gt;Mostrar una llista d&#39;empleats en HTML.&lt;/li&gt;
&lt;li&gt;Generar un informe en PDF utilitzant DomPDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proves de les Vistes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escriu proves unitàries per comprovar que les vistes reben i mostren correctament la informació proporcionada pel controlador.&lt;/li&gt;
&lt;li&gt;Prova que la generació de contingut HTML o PDF es realitza correctament a partir de les dades proporcionades pel model.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;14-enunciat-dels-projectes&quot; tabindex=&quot;-1&quot;&gt;14. Enunciat dels projectes&lt;/h2&gt;
&lt;h3 id=&quot;projecte-and-quot-4-en-ratlla-and-quot&quot; tabindex=&quot;-1&quot;&gt;Projecte &amp;quot;4 en Ratlla&amp;quot;&lt;/h3&gt;
&lt;h4 id=&quot;1-crear-l-entorn-del-4-en-ratlla&quot; tabindex=&quot;-1&quot;&gt;1. Crear l&#39;entorn del 4 en ratlla&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Dins de php crear les carpetes App,Views i Helpers.&lt;/li&gt;
&lt;li&gt;Dins de la carpeta App crea les carpetes Models, Controllers , Services i Exceptions.&lt;/li&gt;
&lt;li&gt;Dins de la carpeta src tindrem el index.php i el css.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-integracio-de-composer-i-autoloading&quot; tabindex=&quot;-1&quot;&gt;2. Integració de Composer i Autoloading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configuració de Composer&lt;/strong&gt;: Defineix un &lt;code&gt;composer.json&lt;/code&gt; per al projecte, configurant l&#39;autoloading PSR-4 per carregar automàticament les classes de &lt;code&gt;Joc4enRatlla&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estructura del Projecte&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Organitza el codi en directoris com &lt;code&gt;App/Models&lt;/code&gt; per a les classes del joc i &lt;code&gt;App/Controllers&lt;/code&gt; per a la gestió del flux del joc.&lt;/li&gt;
&lt;li&gt;Configura Composer per gestionar les dependències del projecte.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-refactoritzacio-amb-programacio-orientada-a-objectes-poo-i-amb-mvc&quot; tabindex=&quot;-1&quot;&gt;3. Refactorització amb Programació Orientada a Objectes (POO) i amb MVC&lt;/h4&gt;
&lt;h5 id=&quot;models&quot; tabindex=&quot;-1&quot;&gt;Models&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dins de la carpeta Models:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classe &lt;code&gt;Board&lt;/code&gt;&lt;/strong&gt;: Crea una classe &lt;code&gt;Board&lt;/code&gt; per representar la graella del joc. Aquesta classe ha de gestionar la configuració inicial de la graella, els moviments dels jugadors, i la comprovació de si hi ha un guanyador.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;  
namespace Joc4enRatlla&#92;Models;
 
class Board
{
    public const FILES = 6;
    public const COLUMNS = 7;
    public const DIRECTIONS = [
        [0, 1],   // Horizontal derecha
        [1, 0],   // Vertical abajo
        [1, 1],   // Diagonal abajo-derecha
        [1, -1]   // Diagonal abajo-izquierda
    ];

    private array $slots;

    public function __construct()
    
    // Getters i Setters 
    
    private static function initializeBoard(): array //Inicialitza la graella amb valors buits
    public function setMovementOnBoard(int $column, int $player): array //Realitza un moviment en la graella
    public function checkWin(array $coord): bool //Comprova si hi ha un guanyador
    public function isValidMove(int $column): bool //Comprova si el moviment és vàlid
     


}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classe  &lt;code&gt;Jugador&lt;/code&gt;&lt;/strong&gt;: Crea una classe &lt;code&gt;Player&lt;/code&gt; per representar els jugadors del joc, amb propietats com el &lt;code&gt;name&lt;/code&gt;, el &lt;code&gt;color&lt;/code&gt; de les fitxes, forma de jugar &lt;code&gt;isAutomatic&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;namespace Joc4enRatlla&#92;Models;

 
class Player {
    private $name;      // Nom del jugador
    private $color;     // Color de les fitxes
    private $isAutomatic; // Forma de jugar (automàtica/manual)
 
    public function __construct( $name, $color, $isAutomatic = false)  

    // Getters i Setters 
 
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classe &lt;code&gt;Game&lt;/code&gt;&lt;/strong&gt;: Refactoritza la lògica del joc en una classe &lt;code&gt;Game&lt;/code&gt; que gestione la graella, el torn del jugador, i la lògica per determinar el guanyador, la puntuació.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
namespace Joc4enRatlla&#92;Models;

use Joc4enRatlla&#92;Models&#92;Board;
use Joc4enRatlla&#92;Models&#92;Player;

class Game
{
    private Board $board;
    private int $nextPlayer;
    private array $players;
    private ?Player $winner;
    private array $scores = [1 =&amp;gt; 0, 2 =&amp;gt; 0];
    
    public function __construct( Player $jugador1, Player $jugador2)
     
    // getters i setters
       
    public function reset(): void //Reinicia el joc
    public function play($columna)  //Realitza un moviment
    public function playAutomatic(){
        $opponent = $this-&amp;gt;nextPlayer === 1 ? 2 : 1;

        for ($col = 1; $col &amp;lt;= Board::COLUMNS; $col++) {
            if ($this-&amp;gt;board-&amp;gt;isValidMove($col)) {
                $tempBoard = clone($this-&amp;gt;board);
                $coord = $tempBoard-&amp;gt;setMovementOnBoard($col, $this-&amp;gt;nextPlayer);

                if ($tempBoard-&amp;gt;checkWin($coord)) {
                    $this-&amp;gt;play($col);
                    return;
                }
            }
        }

        for ($col = 1; $col &amp;lt;= Board::COLUMNS; $col++) {
            if ($this-&amp;gt;board-&amp;gt;isValidMove($col)) {
                $tempBoard = clone($this-&amp;gt;board);
                $coord = $tempBoard-&amp;gt;setMovementOnBoard($col, $opponent);
                if ($tempBoard-&amp;gt;checkWin($coord )) {
                    $this-&amp;gt;play($col);
                    return;
                }
            }
        }

        $possibles = array();
        for ($col = 1; $col &amp;lt;= Board::COLUMNS; $col++) {
            if ($this-&amp;gt;board-&amp;gt;isValidMove($col)) {
                $possibles[] = $col;
            }
        }
        if (count($possibles)&amp;gt;2) {
            $random = rand(-1,1);
        }
        $middle = (int) (count($possibles) / 2)+$random;
        $inthemiddle = $possibles[$middle];
        $this-&amp;gt;play($inthemiddle);
    }
    public function save()  //Guarda l&#39;estat del joc a les sessions
    public static function restore() //Restaura l&#39;estat del joc de les sessions
 
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentació&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Totes les classes i mètodes han d&#39;estar documentats amb comentaris PHPDoc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;controladors&quot; tabindex=&quot;-1&quot;&gt;Controladors&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dins de la carpeta Controllers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classe &lt;code&gt;JocController&lt;/code&gt;&lt;/strong&gt;: Crea un controlador &lt;code&gt;JocController&lt;/code&gt; que gestione el  joc. Aquest controlador ha de permetre als jugadors realitzar moviments, comprovar l&#39;estat del joc, i gestionar les vistes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; namespace Joc4enRatlla&#92;Controllers;

   use Joc4enRatlla&#92;Models&#92;Player;
   use Joc4enRatlla&#92;Models&#92;Game;
   
   
   class GameController
   {
   private Game $game;
   
   // Request és l&#39;array $_POST
   
   public function __construct($request=null)
   {
       //Inicialització del joc
       $this-&amp;gt;play($request);

   }

   public function play(Array $request)  
   {
       // Gestió del joc
       ...
       
       $board = $this-&amp;gt;game-&amp;gt;getBoard();
       $players = $this-&amp;gt;game-&amp;gt;getPlayers();
       $winner = $this-&amp;gt;game-&amp;gt;getWinner();
       $scores = $this-&amp;gt;game-&amp;gt;getScores();

       loadView(&#39;index&#39;,compact(&#39;board&#39;,&#39;players&#39;,&#39;winner&#39;,&#39;scores&#39;));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;serveis-i-funcions&quot; tabindex=&quot;-1&quot;&gt;Serveis i funcions&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dins de la carpeta Services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Funció &lt;code&gt;loadView&lt;/code&gt;&lt;/strong&gt;: Crea una funció &lt;code&gt;loadView&lt;/code&gt; que carregue les vistes del joc. Aquesta funció ha de rebre el nom de la vista i les dades a passar a la vista, i ha de mostrar la vista amb les dades proporcionades.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace Joc4enRatlla&#92;Services;

class Service
{
    public static function loadView($view, $data = [])
    {
        $viewPath = str_replace(&#39;.&#39;, &#39;/&#39;, $view);
        extract($data);

        include  $_SERVER[&#39;DOCUMENT_ROOT&#39;] . &amp;quot;/../Views/$viewPath.view.php&amp;quot;;

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;i la funció &lt;code&gt;loadView&lt;/code&gt; en un fitxer de funcions&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;  function loadView($view, $data = [])
    {
       Joc4enRatlla&#92;Services&#92;Service::loadView($view, $data);
    }

    function dd(...$data )
    {
        echo &amp;quot;&amp;lt;pre&amp;gt;&amp;quot;;
        foreach ($data as $d) {
            var_dump($d);
        }

        echo &amp;quot;&amp;lt;/pre&amp;gt;&amp;quot;;
        die();
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;vistes&quot; tabindex=&quot;-1&quot;&gt;Vistes&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dins de la carpeta Views:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Vista &lt;code&gt;index.php&lt;/code&gt;&lt;/strong&gt;: Crea una vista &lt;code&gt;index.php&lt;/code&gt; que mostre la graella del joc, el torn actual del jugador, i els resultats finals (guanyador o empat). Aquesta vista ha de permetre als jugadors realitzar moviments en la graella.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;4ratlla.css?v=&amp;lt;?php echo time(); ?&amp;gt;&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;4 en ratlla&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        .player1 {
            background-color: &amp;lt;?= $players[1]-&amp;gt;getColor() ?&amp;gt; ; /* Color vermell per un dels jugadors */
        }

        .player2 {
            background-color:  &amp;lt;?= $players[2]-&amp;gt;getColor() ?&amp;gt;; /* Color groc per l&#39;altre jugador */
        }

    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;?php include_once $_SERVER[&#39;DOCUMENT_ROOT&#39;].&#39;/../Views/partials/error.view.php&#39;  ?&amp;gt;
 &amp;lt;form action=&amp;quot;&amp;lt;?php echo htmlspecialchars($_SERVER[&amp;quot;PHP_SELF&amp;quot;]); ?&amp;gt;&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
    &amp;lt;?php include_once $_SERVER[&#39;DOCUMENT_ROOT&#39;].&#39;/../Views/partials/board.view.php&#39;  ?&amp;gt;
     &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;reset&amp;quot; value=&amp;quot;Reiniciar joc&amp;quot;&amp;gt;
     &amp;lt;input type=&amp;quot;submit&amp;quot; name=&amp;quot;exit&amp;quot; value=&amp;quot;Acabar joc&amp;quot;&amp;gt;
&amp;lt;/form&amp;gt;
 &amp;lt;?php include_once $_SERVER[&#39;DOCUMENT_ROOT&#39;].&#39;/../Views/partials/panel.view.php&#39;  ?&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;spa&quot; tabindex=&quot;-1&quot;&gt;SPA&lt;/h5&gt;
&lt;p&gt;Creen la pàgina index.php que carregarà el joc 4 en ratlla.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
session_start();
require_once $_SERVER[&#39;DOCUMENT_ROOT&#39;] . &#39;/../vendor/autoload.php&#39;;
require_once $_SERVER[&#39;DOCUMENT_ROOT&#39;] . &#39;/../Helpers/functions.php&#39;;
use Joc4enRatlla&#92;Controllers&#92;GameController;

if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39;) {
    $gameController = new GameController($_POST); 
} else {
    loadView(&#39;jugador&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;4-proves-amb-php-unit&quot; tabindex=&quot;-1&quot;&gt;4. Proves amb PHPUnit&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escriu Proves Unitàries&lt;/strong&gt;: Crea proves unitàries per a la classe &lt;code&gt;Joc4enRatlla&lt;/code&gt; utilitzant PHPUnit. Les proves poden incloure:
&lt;ul&gt;
&lt;li&gt;Verificació de la configuració inicial de la graella.&lt;/li&gt;
&lt;li&gt;Proves per assegurar que un moviment s&#39;aplica correctament a la graella.&lt;/li&gt;
&lt;li&gt;Proves per assegurar que el joc detecta correctament un guanyador o un empat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves de Gestió de Sessions&lt;/strong&gt;: Afig proves per assegurar que l&#39;estat del joc i el torn del jugador es mantenen correctament a través de les sessions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5-logger-amb-monolog-1&quot; tabindex=&quot;-1&quot;&gt;5. Logger amb Monolog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configuració de Logger&lt;/strong&gt;: Utilitza &lt;code&gt;Monolog&lt;/code&gt; per registrar esdeveniments importants del joc, com quan un jugador fa un moviment, quan s&#39;inicia una nova partida, o quan es produeixen errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diversos Handlers&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Registra els moviments dels jugadors i els resultats del joc en un fitxer &lt;code&gt;game.log&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Registra errors greus o problemes amb les sessions en un fitxer d&#39;errors separat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;consideracions-addicionals-pel-projecte&quot; tabindex=&quot;-1&quot;&gt;Consideracions Addicionals pel  Projecte&lt;/h3&gt;
&lt;h4 id=&quot;1-documentacio-amb-php-doc&quot; tabindex=&quot;-1&quot;&gt;1. Documentació amb PHPDoc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentació Completa&lt;/strong&gt;: Documenta totes les classes i mètodes amb comentaris PHPDoc. Això inclou les descripcions dels paràmetres i els valors de retorn per a cada mètode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generació Automàtica&lt;/strong&gt;: Utilitza &lt;code&gt;phpDocumentor&lt;/code&gt; o una eina similar per generar la documentació automàticament. Afig la documentació generada al projecte per facilitar el manteniment i la comprensió del codi.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-implementacio-d-interficies&quot; tabindex=&quot;-1&quot;&gt;2. Implementació d&#39;Interfícies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interfície &lt;code&gt;JocInterface&lt;/code&gt;&lt;/strong&gt;: Crea una interfície que definisca els mètodes bàsics que qualsevol joc  ha de tindre (&lt;code&gt;iniciarJoc&lt;/code&gt;, &lt;code&gt;ferMoviment&lt;/code&gt;, &lt;code&gt;comprovaGuanyador&lt;/code&gt;, etc.). Assegura&#39;t que la  &lt;code&gt;Joc4enRatlla&lt;/code&gt; implemente  aquesta interfície.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-serialitzacio-i-persistencia&quot; tabindex=&quot;-1&quot;&gt;3. Serialització i Persistència&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serialització de l&#39;Estat del Joc&lt;/strong&gt;: Implementa funcionalitats per serialitzar l&#39;estat del joc (usant JSON o &lt;code&gt;serialize()&lt;/code&gt;) i deserialitzar-lo per mantenir la persistència entre sessions o guardar l&#39;estat per a reprendre la partida posteriorment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-exempcions&quot; tabindex=&quot;-1&quot;&gt;4. Exempcions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gestió d&#39;Excepcions&lt;/strong&gt;: Utilitza excepcions per gestionar el que un jugador jugue una columna que ja estiga plena. Afig el missatge  d&#39;error al jocs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5-fes-que-el-jugador-puga-triar-nom-i-color&quot; tabindex=&quot;-1&quot;&gt;5. Fes que el jugador puga triar nom i color&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Triar Nom i Color&lt;/strong&gt;: Permet als jugadors triar el seu nom i el color de les fitxes al començar una partida. Aquesta informació ha de ser guardada en les sessions i mostrada en la vista del joc.&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Criteri&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;** Insuficient (1 punt)**&lt;/th&gt;
&lt;th&gt;** Adequat (2 punts)**&lt;/th&gt;
&lt;th&gt;** Bé (3 punts)**&lt;/th&gt;
&lt;th&gt;** Excel·lent (4 punts)**&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;**Funcionalitat del programa **&lt;/td&gt;
&lt;td&gt;No es funcional.&lt;/td&gt;
&lt;td&gt;Es funcional però falten funcionalitats.&lt;/td&gt;
&lt;td&gt;Es funcional però falten detalls.&lt;/td&gt;
&lt;td&gt;Totalment funcional.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Implementació de Programació Orientada a Objectes (POO)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Les classes no estan ben dissenyades, falta encapsulació, ús incorrecte d&#39;herència, o mètodes no funcional.&lt;/td&gt;
&lt;td&gt;Les classes estan creades però poden tindre errors o una estructura confusa. S&#39;aplica la POO de manera bàsica, però hi ha problemes de disseny.&lt;/td&gt;
&lt;td&gt;Classes correctament estructurades i funcionalment completes. Ús adequat d&#39;encapsulació, herència i polimorfisme.&lt;/td&gt;
&lt;td&gt;Disseny de classes ben organitzat, reutilitzable i amb una implementació clara dels principis de POO.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Separació del Model de Negoci de la Presentació (MVC)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;ha implementat la separació de model i presentació; el codi de lògica i presentació està mesclat.&lt;/td&gt;
&lt;td&gt;Hi ha una separació parcial, però algunes parts de la lògica del negoci es barregen amb la presentació o a l&#39;inrevés.&lt;/td&gt;
&lt;td&gt;La separació entre model, vista i controlador està ben implementada, però podria millorar en alguns aspectes.&lt;/td&gt;
&lt;td&gt;Excel·lent separació entre el model, vista i controlador, seguint els principis del patró MVC i mantenint un codi net.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Integració de Composer i Autoloading&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;ha configurat Composer o l&#39;autoloading, o està mal configurat i no funciona correctament.&lt;/td&gt;
&lt;td&gt;Composer s&#39;ha utilitzat, però amb una estructura de projectes i autoloading bàsics o incorrectes.&lt;/td&gt;
&lt;td&gt;Composer i l&#39;autoloading estan configurats correctament amb una estructura de projectes ben definida.&lt;/td&gt;
&lt;td&gt;Ús excel·lent de Composer amb una configuració avançada d&#39;autoloading i una estructura de projecte organitzada i modular.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Implementació de Proves amb PHPUnit&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;han creat proves, o les proves creades són mínimes i no adequades per a verificar la funcionalitat.&lt;/td&gt;
&lt;td&gt;Es presenten proves bàsiques amb PHPUnit, però cobreixen parcialment les funcionalitats requerides.&lt;/td&gt;
&lt;td&gt;Proves unitàries completes que cobreixen la majoria dels casos, incloent proves de gestió de sessions i lògica de joc.&lt;/td&gt;
&lt;td&gt;Proves exhaustives que cobreixen totes les funcionalitats i consideren casos límit, amb ús de mocks quan necessari.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ús de Logger amb Monolog&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;ha implementat el logger o no s&#39;utilitza de manera efectiva per registrar esdeveniments importants.&lt;/td&gt;
&lt;td&gt;Logger implementat, però amb ús limitat o incorrecte en la registració d&#39;esdeveniments i errors.&lt;/td&gt;
&lt;td&gt;Logger ben implementat, amb esdeveniments i errors registrats adequadament en diferents fitxers o canals.&lt;/td&gt;
&lt;td&gt;Ús avançat de logger amb diferents handlers per registrar informació, errors, i seguiment detallat del flux del joc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Falta documentació o és insuficient per comprendre les classes i mètodes del projecte.&lt;/td&gt;
&lt;td&gt;Documentació bàsica amb PHPDoc, però amb omisions o descripcions poc clares.&lt;/td&gt;
&lt;td&gt;Documentació completa amb PHPDoc per a totes les classes i mètodes, amb descripcions clares i detallades.&lt;/td&gt;
&lt;td&gt;Documentació excel·lent amb PHPDoc, ben estructurada i completa, facilitant la comprensió i manteniment del projecte.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Exempcions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No hi ha.&lt;/td&gt;
&lt;td&gt;Si hi ha però no es mostra missatge d&#39;error.&lt;/td&gt;
&lt;td&gt;Es tracta perfectament i hi ha missatge d&#39;error .&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Qualitat del Codi i Bones Pràctiques&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Codi desorganitzat, amb molts errors de sintaxi, mala nomenclatura, o sense bones pràctiques de codi.&lt;/td&gt;
&lt;td&gt;Codi funcional però amb problemes d&#39;estructura, estil inconsistent o incompliment parcial de bones pràctiques.&lt;/td&gt;
&lt;td&gt;Codi ben escrit, seguint les convencions de nomenclatura i bones pràctiques de desenvolupament.&lt;/td&gt;
&lt;td&gt;Codi de qualitat professional, net, ben organitzat, i seguint rigorosament les millors pràctiques de programació.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;explicacio-dels-criteris&quot; tabindex=&quot;-1&quot;&gt;Explicació dels Criteris&lt;/h3&gt;
&lt;h4 id=&quot;strong-1-punt-insuficient-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;1 punt: Insuficient&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: Les classes no segueixen els principis bàsics de la programació orientada a objectes. Hi ha problemes greus com la falta d&#39;encapsulació, l&#39;ús inadequat de l&#39;herència o mètodes que no funcionen correctament.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: No s&#39;ha implementat la separació del model de negoci i la presentació. El codi de la lògica del negoci està mesclat amb la presentació (HTML, CSS), cosa que dificulta el manteniment i l&#39;escalabilitat del projecte.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: No s&#39;ha configurat Composer o l&#39;autoloading. Si estan configurats, no funcionen correctament.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Les proves estan absents o són mínimes, i no verifiquen adequadament la funcionalitat del projecte.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: El logger no s&#39;ha implementat, o si està present, no s&#39;utilitza de manera efectiva per registrar esdeveniments importants.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: Falta documentació essencial, o la que existeix és insuficient per a entendre el codi.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi és desorganitzat, amb molts errors de sintaxi i no segueix les bones pràctiques de programació.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;strong-2-punts-adequat-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;2 punts: Adequat&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: Les classes estan creades, però poden contindre errors o una estructura confusa. L&#39;aplicació de la POO és bàsica, amb alguns problemes de disseny.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: Hi ha una separació parcial entre el model de negoci i la presentació. No obstant això, encara hi ha parts del codi on la lògica del negoci està barrejada amb la presentació o a l&#39;inrevés, cosa que indica una comprensió bàsica però incompleta del patró MVC.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: Composer s&#39;ha utilitzat, però l&#39;estructura de projectes o l&#39;autoloading no són òptims, presentant configuracions bàsiques o incorrectes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Es presenten proves bàsiques que cobreixen parcialment les funcionalitats requerides.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: El logger està implementat, però l&#39;ús és limitat o incorrecte en la registració d&#39;esdeveniments i errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: La documentació amb PHPDoc és bàsica, amb algunes omisions o descripcions poc clares.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi és funcional però presenta problemes d&#39;estructura, estil inconsistent o incompliment parcial de bones pràctiques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;strong-3-punts-be-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;3 punts: Bé&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: Les classes estan correctament estructurades i són funcionalment completes. Es fa un ús adequat de l&#39;encapsulació, l&#39;herència i el polimorfisme.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: La separació entre el model, vista i controlador està ben implementada, seguint majoritàriament els principis del patró MVC. El codi és clar i estructurat, amb algunes àrees que podrien millorar-se per aconseguir una millor modularitat i mantenibilitat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: Composer i l&#39;autoloading estan configurats correctament, amb una estructura de projectes ben definida.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Les proves unitàries estan completes i cobreixen la majoria dels casos, incloent-hi la gestió de sessions i la lògica del joc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: El logger està ben implementat, amb esdeveniments i errors registrats adequadament en diferents fitxers o canals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: La documentació amb PHPDoc és completa per a totes les classes i mètodes, amb descripcions clares i detallades.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi està ben escrit, seguint les convencions de nomenclatura i les bones pràctiques de desenvolupament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;strong-4-punts-excel-lent-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;4 punts: Excel·lent&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: El disseny de classes està ben organitzat, és reutilitzable i implementa clarament els principis de la programació orientada a objectes. El codi és elegant i eficient.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: Excel·lent separació entre el model, vista i controlador, seguint rigorosament els principis del patró MVC. El codi està ben organitzat, modular i fàcil de mantenir, cosa que facilita l&#39;escalabilitat del projecte. Hi ha una clara distinció de responsabilitats entre les diferents capes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: S&#39;utilitza Composer de manera excel·lent, amb una configuració avançada de l&#39;autoloading i una estructura de projecte organitzada i modular.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Les proves són exhaustives, cobrint totes les funcionalitats i considerant casos límit, amb ús de mocks quan necessari.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: S&#39;utilitza el logger de manera avançada, amb diferents handlers per registrar informació, errors, i fer un seguiment detallat del flux del joc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: La documentació amb PHPDoc és excel·lent, ben estructurada i completa, facilitant la comprensió i el manteniment del projecte.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi és de qualitat professional, net, ben organitzat, i segueix rigorosament les millors pràctiques de programació.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;15-autoavaluacio-programacio-orientada-a-objectes-en-php&quot; tabindex=&quot;-1&quot;&gt;15. Autoavaluació: Programació Orientada a Objectes en PHP&lt;/h2&gt;
&lt;h4 id=&quot;exercici-1-constructors-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Constructors en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és la funció principal d&#39;un constructor en una classe PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1a&quot; name=&quot;question1&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q1a&quot;&gt;a) Destruir els objectes de la classe quan ja no són necessaris.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1b&quot; name=&quot;question1&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q1b&quot;&gt;b) Inicialitzar les propietats de l&#39;objecte quan es crea.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1c&quot; name=&quot;question1&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q1c&quot;&gt;c) Executar una funció arbitrària abans de cada mètode.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1d&quot; name=&quot;question1&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q1d&quot;&gt;d) Crear mètodes màgics automàticament.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer1()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result1&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer1() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question1&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Inicialitzar les propietats de l&#39;objecte quan es crea.&quot;;
    document.getElementById(&#39;result1&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-2-herencia-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 2: Herència en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-1&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és l&#39;avantatge principal de l&#39;herència en la programació orientada a objectes?&lt;/p&gt;
&lt;h5 id=&quot;opcions-1&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2a&quot; name=&quot;question2&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q2a&quot;&gt;a) Permet reutilitzar codi definint classes noves basades en classes existents.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2b&quot; name=&quot;question2&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q2b&quot;&gt;b) Permet ocultar totes les propietats i mètodes de la classe.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2c&quot; name=&quot;question2&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q2c&quot;&gt;c) Permet definir funcions globals sense necessitat de classes.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2d&quot; name=&quot;question2&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q2d&quot;&gt;d) Permet cridar a funcions de JavaScript des de PHP.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer2()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result2&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer2() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question2&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet reutilitzar codi definint classes noves basades en classes existents.&quot;;
    document.getElementById(&#39;result2&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-3-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Exercici 3: Polimorfisme&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-2&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Què permet el polimorfisme en el context de la POO?&lt;/p&gt;
&lt;h5 id=&quot;opcions-2&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3a&quot; name=&quot;question3&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q3a&quot;&gt;a) Permet que una funció tinga múltiples implementacions depenent de l&#39;objecte que la cride.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3b&quot; name=&quot;question3&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q3b&quot;&gt;b) Permet la creació d&#39;objectes a partir de funcions anònimes.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3c&quot; name=&quot;question3&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q3c&quot;&gt;c) Permet la connexió entre PHP i bases de dades relacionals.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3d&quot; name=&quot;question3&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q3d&quot;&gt;d) Permet executar múltiples scripts PHP alhora.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer3()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result3&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer3() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question3&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet que una funció tinga múltiples implementacions depenent de l&#39;objecte que la cride.&quot;;
    document.getElementById(&#39;result3&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-4-espais-de-noms&quot; tabindex=&quot;-1&quot;&gt;Exercici 4: Espais de Noms&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-3&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Per a què s&#39;utilitzen els espais de noms (namespaces) en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-3&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4a&quot; name=&quot;question4&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q4a&quot;&gt;a) Per executar codi PHP de forma asincrònica.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4b&quot; name=&quot;question4&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q4b&quot;&gt;b) Per evitar conflictes entre noms de classes, funcions o constants en diferents parts del codi.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4c&quot; name=&quot;question4&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q4c&quot;&gt;c) Per definir variables globals accessibles des de qualsevol punt del codi.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4d&quot; name=&quot;question4&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q4d&quot;&gt;d) Per importar codi d&#39;altres llenguatges de programació com JavaScript.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer4()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result4&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer4() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question4&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Per evitar conflictes entre noms de classes, funcions o constants en diferents parts del codi.&quot;;
    document.getElementById(&#39;result4&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-5-traits-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 5: Traits en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-4&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quin avantatge ofereixen els traits en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-4&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5a&quot; name=&quot;question5&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q5a&quot;&gt;a) Permet escriure codi reutilitzable que es pot incloure en múltiples classes, independentment de la jerarquia d&#39;herència.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5b&quot; name=&quot;question5&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q5b&quot;&gt;b) Permet la creació de funcions globals en PHP.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5c&quot; name=&quot;question5&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q5c&quot;&gt;c) Permet la comunicació entre diferents servidors web.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5d&quot; name=&quot;question5&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q5d&quot;&gt;d) Permet executar codi PHP dins de plantilles HTML.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer5()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result5&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer5() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question5&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet escriure codi reutilitzable que es pot incloure en múltiples classes, independentment de la jerarquia d&#39;herència.&quot;;
    document.getElementById(&#39;result5&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-6-excepcions-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 6: Excepcions en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-5&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és la finalitat d&#39;utilitzar excepcions en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-5&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6a&quot; name=&quot;question6&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q6a&quot;&gt;a) Evitar l&#39;execució de codi mal format.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6b&quot; name=&quot;question6&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q6b&quot;&gt;b) Gestionar errors i condicions excepcionals de manera controlada dins d&#39;una aplicació.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6c&quot; name=&quot;question6&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q6c&quot;&gt;c) Declarar funcions dins d&#39;una classe.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6d&quot; name=&quot;question6&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q6d&quot;&gt;d) Garantir que totes les variables estiguen inicialitzades abans del seu ús.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer6()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result6&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer6() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question6&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Gestionar errors i condicions excepcionals de manera controlada dins d&#39;una aplicació.&quot;;
    document.getElementById(&#39;result6&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-7-autoloading-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 7: Autoloading en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-6&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quin avantatge ofereix l&#39;autoloading en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-6&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7a&quot; name=&quot;question7&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q7a&quot;&gt;a) Permet que les classes es carreguen automàticament quan s&#39;utilitzen, sense necessitat de fer incloure manualment cada fitxer.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7b&quot; name=&quot;question7&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q7b&quot;&gt;b) Permet l&#39;execució de múltiples scripts alhora.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7c&quot; name=&quot;question7&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q7c&quot;&gt;c) Permet la manipulació de fitxers en el servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7d&quot; name=&quot;question7&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q7d&quot;&gt;d) Permet la connexió amb bases de dades.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer7()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result7&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer7() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question7&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet que les classes es carreguen automàticament quan s&#39;utilitzen, sense necessitat de fer incloure manualment cada fitxer.&quot;;
    document.getElementById(&#39;result7&#39;).innerText = resultText;
}
&lt;/script&gt;
            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/phpoo/" >
        </entry>
        <entry>
            <title>
                Exercicis proposats
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/exercicis-proposats/</id>
            <content type="html">
                &lt;h4 id=&quot;exercici-1-creacio-de-la-classe-basica-i-gestio-de-propietats&quot; tabindex=&quot;-1&quot;&gt;Exercici 1. Creació de la Classe Bàsica i Gestió de Propietats&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una classe &lt;code&gt;Persona&lt;/code&gt; amb les propietats privades &lt;code&gt;nom&lt;/code&gt;, &lt;code&gt;cognoms&lt;/code&gt;, i &lt;code&gt;edat&lt;/code&gt;. Encapsula aquestes propietats mitjançant getters i setters. Afig els següents mètodes:&lt;/p&gt;
&lt;p&gt;- &lt;code&gt;getNomComplet(): string&lt;/code&gt; – Retorna el nom complet de la persona.&lt;br /&gt;
- &lt;code&gt;estaJubilat(): bool&lt;/code&gt; – Retorna &lt;code&gt;true&lt;/code&gt; si l&#39;edat és major o igual a 65, &lt;code&gt;false&lt;/code&gt; en cas contrari.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifica la classe &lt;code&gt;Persona&lt;/code&gt; afegint un constructor que assigna nom i cognoms. Si es proporciona un tercer paràmetre, assigna l&#39;edat; en cas contrari, assigna una edat per defecte de 25 anys.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifica la classe &lt;code&gt;Persona&lt;/code&gt; per utilitzar una constant &lt;code&gt;LIMITE_EDAT&lt;/code&gt; amb el valor de 66 anys i utilitza-la en el mètode &lt;code&gt;estaJubilat&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-2-herencia-i-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Exercici 2. Herència i Polimorfisme&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una classe &lt;code&gt;Empleado&lt;/code&gt; que herete de &lt;code&gt;Persona&lt;/code&gt;. Afig les següents propietats i mètodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;private float $sou&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private array $telefons&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;anyadirTelefono(int $telefon): void&lt;/code&gt; – Afig un número de telèfon a l&#39;array.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;listarTelefonos(): string&lt;/code&gt; – Retorna els números de telèfon separats per comes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vaciarTelefonos(): void&lt;/code&gt; – Buida l&#39;array de telèfons.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debePagarImpuestos(): bool&lt;/code&gt; – Retorna &lt;code&gt;true&lt;/code&gt; si el sou és superior a 3333€, &lt;code&gt;false&lt;/code&gt; en cas contrari.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Afig un mètode estàtic &lt;code&gt;toHtml(Empleado $emp): string&lt;/code&gt; que genere un codi HTML que mostre el nom complet de l&#39;empleat dins d&#39;un paràgraf i els seus telèfons dins d&#39;una llista ordenada.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Afig un mètode estàtic &lt;code&gt;toHtml(Persona $p)&lt;/code&gt; a la classe Persona que mostre el nom complet de la persona dins d&#39;un paràgraf. Modifica el mètode &lt;code&gt;toHtml&lt;/code&gt; de &lt;code&gt;Empleado&lt;/code&gt; per rebre una &lt;code&gt;Persona&lt;/code&gt; com a paràmetre i comprovar si es tracta d&#39;un &lt;code&gt;Empleado&lt;/code&gt; amb &lt;code&gt;instanceof&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transforma &lt;code&gt;Persona&lt;/code&gt; en una classe abstracta. Redefineix el mètode estàtic &lt;code&gt;toHtml(Persona $p)&lt;/code&gt; en totes les seues subclasses. Afig una classe &lt;code&gt;Worker&lt;/code&gt; que siga també abstracta i que emmagatzeme els &lt;code&gt;telefonos&lt;/code&gt;. Crea mètodes per calcular el sou en &lt;code&gt;Empleado&lt;/code&gt; i &lt;code&gt;Gerent&lt;/code&gt;, segons la descripció.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-3-integracio-d-espais-de-noms-autoloading-i-composer&quot; tabindex=&quot;-1&quot;&gt;Exercici 3. Integració d&#39;Espais de Noms, Autoloading, i Composer&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una classe &lt;code&gt;Empresa&lt;/code&gt; que incloga una propietat amb un array de &lt;code&gt;Workers&lt;/code&gt;, ja siguen &lt;code&gt;Employees&lt;/code&gt; o &lt;code&gt;Managers&lt;/code&gt;. Implementa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public function addWorker(Worker $t)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public function listWorkersHtml(): string&lt;/code&gt; – Genera la llista de treballadors en format HTML.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public function getCosteNominas(): float&lt;/code&gt; – Calcula el cost total de les nòmines.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configura un projecte PHP amb Composer que utilitze l&#39;autoloading PSR-4. Afig un fitxer &lt;code&gt;composer.json&lt;/code&gt; i defineix l&#39;estructura de directoris &lt;code&gt;src/Models&lt;/code&gt;, &lt;code&gt;src/Services&lt;/code&gt;, etc. Crea una classe &lt;code&gt;Producte&lt;/code&gt; dins de &lt;code&gt;src/Models&lt;/code&gt; i verifica que l&#39;autoloading funcione correctament instanciant la classe en un fitxer separat.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-4-logger-i-documentacio&quot; tabindex=&quot;-1&quot;&gt;Exercici 4. Logger i Documentació&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Utilitza la llibreria &lt;code&gt;Monolog&lt;/code&gt; per configurar un logger que escriga missatges a un fitxer &lt;code&gt;app.log&lt;/code&gt;. Afig funcionalitat perquè el logger registre missatges d&#39;informació i d&#39;error en diferents arxius segons la gravetat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configura un logger que escriga missatges de registre tant a un fitxer com a la consola. Prova el logger registrant missatges d&#39;error i advertència.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Documenta la classe &lt;code&gt;Producte&lt;/code&gt; creada en exercicis anteriors utilitzant comentaris PHPDoc. Inclou la descripció de la classe, les propietats, i els mètodes. Utilitza una eina com &lt;code&gt;phpDocumentor&lt;/code&gt; per generar documentació automàtica.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escriu proves unitàries per als mètodes de les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt; utilitzant PHPUnit. Prova els mètodes &lt;code&gt;getNomComplet&lt;/code&gt;, &lt;code&gt;estaJubilat&lt;/code&gt;, &lt;code&gt;addWorker&lt;/code&gt;, i &lt;code&gt;getCosteNominas&lt;/code&gt;. Assegura&#39;t que les proves cobreixen diferents escenaris, incloent errors potencials.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escriu una prova unitària que comprove que el logger està registrant correctament els missatges d&#39;error a l&#39;arxiu corresponent. Utilitza un mock per assegurar-te que el logger funciona sense necessitat d&#39;escriure en un fitxer real durant la prova.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-5-generacio-de-pd-fs-amb-dom-pdf&quot; tabindex=&quot;-1&quot;&gt;Exercici 5. Generació de PDFs amb DomPDF&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Instal·la la llibreria &lt;code&gt;dompdf/dompdf&lt;/code&gt; amb Composer. Crea un script PHP que genere un PDF senzill amb un títol i un paràgraf de text.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Crea un PDF utilitzant DomPDF que incloga una taula amb dades i una imatge. Assegura&#39;t que el PDF es renderitze correctament i que la imatge s&#39;incloga en el document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilitzant la classe &lt;code&gt;Empresa&lt;/code&gt; i &lt;code&gt;Empleado&lt;/code&gt;, genera un informe en PDF amb la llista de treballadors i el seu sou. Utilitza DomPDF per generar aquest informe.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-6-serialitzacio-i-json&quot; tabindex=&quot;-1&quot;&gt;Exercici 6. Serialització i JSON&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Crea una interfície &lt;code&gt;JSerializable&lt;/code&gt; que incloga els mètodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toJSON(): string&lt;/code&gt; – Converteix l&#39;objecte a un JSON utilitzant &lt;code&gt;json_encode()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;toSerialize(): string&lt;/code&gt; – Serialitza l&#39;objecte utilitzant &lt;code&gt;serialize()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifica les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt; per implementar aquesta interfície. Assegura&#39;t que les propietats privades es puguen serialitzar correctament.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Escriu mètodes per deserialitzar un objecte a partir d&#39;una cadena JSON o d&#39;una cadena serialitzada. Prova aquests mètodes amb PHPUnit per assegurar-te que la deserialització funciona correctament.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-7-separacio-del-model-de-negoci-i-la-presentacio-mvc&quot; tabindex=&quot;-1&quot;&gt;Exercici 7. Separació del Model de Negoci i la Presentació (MVC)&lt;/h4&gt;
&lt;p&gt;Fins ara, has creat diverses classes que gestionen la lògica del joc i les dades (models), com &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt;, i has generat sortides HTML i PDFs amb DomPDF. Ara és el moment de refactoritzar la teua aplicació per assegurar una separació clara entre la lògica del negoci i la presentació, seguint el patró Model-Vista-Controlador (MVC).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Model&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoritza les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt; per assegurar que només gestionen la lògica de negoci (per exemple, càlcul de nòmines, gestió d&#39;empleats, etc.).&lt;/li&gt;
&lt;li&gt;Assegura&#39;t que aquestes classes no contenen codi relacionat amb la presentació (HTML o PDF).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear les Vistes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crea vistes separades per presentar la informació als usuaris:
&lt;ul&gt;
&lt;li&gt;Una vista HTML per mostrar la informació de &lt;code&gt;Empleado&lt;/code&gt; i &lt;code&gt;Empresa&lt;/code&gt; com a llistats.&lt;/li&gt;
&lt;li&gt;Una vista PDF per generar informes amb DomPDF, basant-se en les dades proporcionades pel model.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un controlador que reba les sol·licituds dels usuaris, interactue amb el model (&lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, &lt;code&gt;Empresa&lt;/code&gt;), i tria la vista adequada per mostrar els resultats (HTML o PDF).&lt;/li&gt;
&lt;li&gt;El controlador ha d&#39;encapsular tota la lògica necessària per a gestionar la interacció entre la vista i el model, assegurant que el model no estiga lligat a la capa de presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exercici-8-creacio-de-proves-unitaries-per-al-patro-mvc&quot; tabindex=&quot;-1&quot;&gt;Exercici 8. Creació de Proves Unitàries per al Patró MVC&lt;/h4&gt;
&lt;p&gt;Després de refactoritzar l&#39;aplicació per separar la lògica del negoci de la presentació seguint el patró Model-Vista-Controlador (MVC), és fonamental assegurar-se que tots els components funcionen correctament i que la interacció entre ells es realitza tal com s&#39;espera. Per això, has de crear una sèrie de proves unitàries utilitzant PHPUnit per verificar el funcionament del model, les vistes i els controladors.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proves del Model&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escriu proves unitàries per verificar el funcionament dels mètodes de les classes &lt;code&gt;Persona&lt;/code&gt;, &lt;code&gt;Empleado&lt;/code&gt;, i &lt;code&gt;Empresa&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Assegura&#39;t que els mètodes funcionen correctament, com ara:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getNomComplet()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debePagarImpuestos()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addWorker()&lt;/code&gt; i &lt;code&gt;getCosteNominas()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prova que els càlculs es realitzen correctament i que les dades es gestionen segons el que s&#39;espera.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proves del Controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escriu proves unitàries per assegurar-te que els controladors interactuen correctament amb els models i que seleccionen la vista adequada per a cada situació.&lt;/li&gt;
&lt;li&gt;Prova que les dades es passen correctament del model a la vista a través del controlador.&lt;/li&gt;
&lt;li&gt;Implementa proves per verificar que el controlador respon correctament a diferents sol·licituds de l&#39;usuari, per exemple:
&lt;ul&gt;
&lt;li&gt;Mostrar una llista d&#39;empleats en HTML.&lt;/li&gt;
&lt;li&gt;Generar un informe en PDF utilitzant DomPDF.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Proves de les Vistes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Escriu proves unitàries per comprovar que les vistes reben i mostren correctament la informació proporcionada pel controlador.&lt;/li&gt;
&lt;li&gt;Prova que la generació de contingut HTML o PDF es realitza correctament a partir de les dades proporcionades pel model.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/exercicis-proposats/" >
        </entry>
        <entry>
            <title>
                9.  Generació de PDF amb DOMPDF
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/9-generacio-de-pdf-amb-dompdf/</id>
            <content type="html">
                &lt;p&gt;Amb PHP podem manejar tot tipus d&#39;arxius com ja hem vist però, què passa si volem generar fitxers PDF amb dades tretes d&#39;una base de dades?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/06/06-pdf.png&quot; alt=&quot;06-pdf.png|30&quot; width=&quot;30px&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Gràcies a una classe escrita en PHP, podem generar arxius PDF sense necessitat d&#39;instal·lar llibreries addicionals en el nostre servidor.&lt;br /&gt;
Però anem a utilitzar una llibreria que permet transformar codi html en pdf.&lt;/p&gt;
&lt;h3 id=&quot;dompdf&quot; tabindex=&quot;-1&quot;&gt;DOMPDF&lt;/h3&gt;
&lt;p&gt;Afegirem la llibreria de &lt;a href=&quot;https://github.com/seldaek/monolog&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;DOMPDF&lt;/em&gt;&lt;/a&gt; al nostre projecte. Per a això, inclourem la llibreria en el nostre projecte amb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require dompdf/dompdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una vegada que DOMPDF està instal·lat, el procés per generar PDFs des de HTML és bastant directe. Els passos bàsics són:&lt;/p&gt;
&lt;p&gt;Pas 1: Incloent DOMPDF&lt;br /&gt;
Primer, necessitarem incloure DOMPDF en el script PHP. Si estem utilitzant Composer, això es fa automàticament a través de l&#39;auto-càrrega de Composer. Només cal afegir la següent línia al principi del&#39;script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;require &#39;vendor/autoload.php&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 2: Creació d&#39;una Instància de DOMPDF&lt;br /&gt;
A continuació, creem una nova instància de la classe DOMPDF:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
use Dompdf&#92;Dompdf;

$dompdf = new Dompdf();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 3: Carregar HTML&lt;br /&gt;
Després, carregem l&#39;HTML en l&#39;objecte DOMPDF. Això es pot fer directament com una cadena o carregant un fitxer HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$html = &amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;Hola, això és una prova.&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;;
$dompdf-&amp;gt;loadHtml($html);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O bé carregar un fitxer HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;loadHtml(file_get_contents(&#39;path/to/your/file.html&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 4: Configuració de la Mida del Paper i l&#39;Orientació&lt;br /&gt;
Podem configurar la mida del paper i l&#39;orientació si és necessari:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;portrait&#39;); // o &#39;landscape&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 5: Renderització del PDF&lt;br /&gt;
Ara, demanem a DOMPDF que renderitze el PDF:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;render();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pas 6: Eixida del PDF&lt;br /&gt;
Finalment, podem enviar el PDF al navegador, guardar-lo en un fitxer o fer amb ell el que necessitem:&lt;/p&gt;
&lt;p&gt;Per mostrar-lo al navegador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$dompdf-&amp;gt;stream(&amp;quot;document.pdf&amp;quot;, array(&amp;quot;Attachment&amp;quot; =&amp;gt; false));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per desar-lo en un fitxer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$output = $dompdf-&amp;gt;output();
file_put_contents(&#39;path/to/save/document.pdf&#39;, $output);
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;consells-addicionals&quot; tabindex=&quot;-1&quot;&gt;Consells Addicionals&lt;/h5&gt;
&lt;p&gt;Cal assegurar-se que l&#39;HTML és vàlid i ben format. DOMPDF intenta ser tolerant amb l&#39;HTML, però l&#39;HTML mal format pot causar problemes.&lt;br /&gt;
El CSS que s&#39;utilitze pot afectar significativament com es veu el PDF. DOMPDF suporta una bona part de CSS 2.1, però no tot.&lt;br /&gt;
Si necessitem incloure imatges, cal assegurar-se que les rutes són absolutes i accessibles des del servidor on s&#39;executa DOMPDF.&lt;br /&gt;
Aquesta és una guia bàsica per començar amb DOMPDF. Per a casos d&#39;ús més avançats i opcions de configuració, cal consultar la documentació oficial de DOMPDF.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/9-generacio-de-pdf-amb-dompdf/" >
        </entry>
        <entry>
            <title>
                8. Logger amb Monolog
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/8-logger-amb-monolog/</id>
            <content type="html">
                &lt;p&gt;Provarem &lt;em&gt;Composer&lt;/em&gt; afegint la llibreria de &lt;a href=&quot;https://github.com/seldaek/monolog&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Monolog&lt;/em&gt;&lt;/a&gt; al nostre projecte. Es tracta d&#39;un llibreria per a la gestió de logs de les nostres aplicacions, suportant diferents nivells (info, warning, etc...), eixides (fitxers, sockets, BBDD, Web Services, email, etc) i formats (text pla, HTML, JSON, etc...).&lt;/p&gt;
&lt;p&gt;Per a això, inclourem la llibreria en el nostre projecte amb:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require monolog/monolog
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Monolog 2 requereix almenys PHP 7.2, compleix amb el estandar de logging PSR-3, i és la llibreria emprada per &lt;em&gt;Laravel&lt;/em&gt; i &lt;em&gt;Symfony&lt;/em&gt; per a la gestió de logs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!info] &amp;quot;Quan utilitzar un log&amp;quot;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Seguir les acciones/moviments dels usuaris&lt;/li&gt;
&lt;li&gt;Registrar les transaccions&lt;/li&gt;
&lt;li&gt;Rastrejar els errors d&#39;usuari&lt;/li&gt;
&lt;li&gt;Fallades/avisos a nivell de sistema&lt;/li&gt;
&lt;li&gt;Interpretar i col·leccionar dades per a posterior investigació de patrons&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;nivells&quot; tabindex=&quot;-1&quot;&gt;Nivells&lt;/h3&gt;
&lt;p&gt;A continuació vam mostrar els diferents nivells de menys a més restrictiu:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debug -100: Informació detallada amb propòsits de debug. No usar en entorns de producció.&lt;/li&gt;
&lt;li&gt;info - 200: Esdeveniments interessants com l&#39;inici de sessió d&#39;usuaris.&lt;/li&gt;
&lt;li&gt;notice - 250: Esdeveniments normals però significatius.&lt;/li&gt;
&lt;li&gt;warning - 300: Ocurrències excepcionals que no arriben a ser error.&lt;/li&gt;
&lt;li&gt;error - 400: Errors d&#39;execució que permeten continuar amb l&#39;execució de l&#39;aplicació però que han de ser monitorats.&lt;/li&gt;
&lt;li&gt;critical - 500: Situacions importants on es generen excepcions no esperades o no hi ha disponible un component.&lt;/li&gt;
&lt;li&gt;alert - 550: S&#39;han de prendre mesures immediatament.&lt;br /&gt;
Caiguda completa de la web, base de dades no disponible, etc... A més, se solen enviar missatges per email.&lt;/li&gt;
&lt;li&gt;emergency - 600: És l&#39;error més greu i indica que tot el sistema està inutilitzable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;hola-monolog&quot; tabindex=&quot;-1&quot;&gt;Hola Monolog&lt;/h3&gt;
&lt;p&gt;Per exemple, en l&#39;arxiu &lt;code&gt;pruebaLog.php&lt;/code&gt; que col·locaríem en l&#39;arrel, primer incloem el &lt;em&gt;autoload&lt;/em&gt;, importem els classes a utilitzar per a finalment usar els mètodes de &lt;em&gt;Monolog&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
include __DIR__ .&amp;quot;/vendor/autoload.php&amp;quot;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

$log = new Logger(&amp;quot;MiLogger&amp;quot;);
$log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;logs/milog.log&amp;quot;, Logger::DEBUG));

$log-&amp;gt;debug(&amp;quot;Esto es un mensaje de DEBUG&amp;quot;);
$log-&amp;gt;info(&amp;quot;Esto es un mensaje de INFO&amp;quot;);
$log-&amp;gt;warning(&amp;quot;Esto es un mensaje de WARNING&amp;quot;);
$log-&amp;gt;error(&amp;quot;Esto es un mensaje de ERROR&amp;quot;);
$log-&amp;gt;critical(&amp;quot;Esto es un mensaje de CRITICAL&amp;quot;);
$log-&amp;gt;alert(&amp;quot;Esto es un mensaje de ALERT&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En tots els mètodes de registre de missatges (&lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, ...), a més del propi missatge, li podem passar informació com el contingut d&#39;alguna variable, usuari de l&#39;aplicació, etc.. com a segon paràmetre dins d&#39;un array, el qual es coneix com &lt;strong&gt;array de contexte&lt;/strong&gt;.&lt;br /&gt;
És convenient fer-ho mitjançant un array associatiu per a facilitar la lectura del log.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$log-&amp;gt;warning(&amp;quot;Producto no encontrado&amp;quot;, [$producto]);
$log-&amp;gt;warning(&amp;quot;Producto no encontrado&amp;quot;, [&amp;quot;datos&amp;quot; =&amp;gt; $producto]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;funcionament&quot; tabindex=&quot;-1&quot;&gt;Funcionament&lt;/h3&gt;
&lt;p&gt;Cada instància &lt;code&gt;Logger&lt;/code&gt; té un nom de canal i una pila de manejadores (&lt;em&gt;handler&lt;/em&gt;).&lt;br /&gt;
Cada missatge que manem al log travessa la pila de manejadores, i cadascun decideix si ha de registrar la informació, i si es dona el cas, finalitzar la propagació.&lt;br /&gt;
Per exemple, un &lt;code&gt;StreamHandler&lt;/code&gt; en el fons de la pila que ho escriga tot en disc, i en el topall afig un &lt;code&gt;MailHandler&lt;/code&gt; que envie un mail només quan hi haja un error.&lt;/p&gt;
&lt;h3 id=&quot;manejadors&quot; tabindex=&quot;-1&quot;&gt;Manejadors&lt;/h3&gt;
&lt;p&gt;Cada manejador tambien té un formatejador (&lt;code&gt;Formatter&lt;/code&gt;). Si no s&#39;indica cap, se li assigna un per defecte. L&#39;últim manejador inserit serà el primer a executar-se.&lt;br /&gt;
Després es van executant conforme a la pila.&lt;/p&gt;
&lt;p&gt;Els manejadores més utilitzats són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StreamHandler(ruta, nivel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RotatingFileHandler(ruta, maxFiles, nivel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NativeMailerHandler(para, asunto, desde, nivel)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FirePHPHandler(nivel)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si volem que els missatges de l&#39;aplicació isquen pel log del servidor,&lt;br /&gt;
en el nostre cas l&#39;arxiu &lt;code&gt;error.log&lt;/code&gt; de Apatxe* utilitzarem com a ruta l&#39;eixida d&#39;error:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// error.log
$log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;php://stderr&amp;quot;, Logger::DEBUG));
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;FirePHP&amp;quot;&lt;br /&gt;
Per exemple, mitjançant &lt;code&gt;FirePHPHandler&lt;/code&gt;, podem utilitzar &lt;code&gt;FirePHP&lt;/code&gt;, la qual és una eina per a fer debug en la consola de Firefox*.&lt;br /&gt;
Després d&#39;instal·lar l&#39;extensió en Firefox, habilitar les opcions i configurar el &lt;em&gt;Handler&lt;/em&gt;, podem veure els missatges acolorits amb les seues dades:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    $log = new Logger(&amp;quot;MiFirePHPLogger&amp;quot;);
    $log-&amp;gt;pushHandler(new FirePHPHandlerINFO);

    $datos = [&amp;quot;real&amp;quot; =&amp;gt; &amp;quot;Bruce Wayne&amp;quot;, &amp;quot;personaje&amp;quot; =&amp;gt; &amp;quot;Batman&amp;quot;];
    $log-&amp;gt;debug(&amp;quot;Esto es un mensaje de DEBUG&amp;quot;, $datos);
    $log-&amp;gt;info(&amp;quot;Esto es un mensaje de INFO&amp;quot;, $datos);
    $log-&amp;gt;warning(&amp;quot;Esto es un mensaje de WARNING&amp;quot;, $datos);
    // ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/05/firePhp.png&quot; alt=&quot;firePhp.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;canals&quot; tabindex=&quot;-1&quot;&gt;Canals&lt;/h3&gt;
&lt;p&gt;Se&#39;ls assigna en crear el &lt;code&gt;Logger&lt;/code&gt;. En grans aplicacions, es crea un canal per cada subsistema: vendes, comptabilitat, magatzem.&lt;br /&gt;
No és una bona pràctica usar el nom de la classe com a canal, això es fa amb un processador.&lt;/p&gt;
&lt;p&gt;Per al seu ús, és recomane assignar el log a una propietat privada a Logger, i posteriorment, en el constructor de la classe, assignar el canal, manejadors i format.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$this-&amp;gt;log = new Logger(&amp;quot;MiApp&amp;quot;);
$this-&amp;gt;log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;logs/milog.log&amp;quot;, Logger::DEBUG));
$this-&amp;gt;log-&amp;gt;pushHandler(new FirePHPHandlerDEBUG);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I dins dels mètodes per a escriure en el log:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$this-&amp;gt;log-&amp;gt;warning(&amp;quot;Producto no encontrado&amp;quot;, [$producto]);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;processadors&quot; tabindex=&quot;-1&quot;&gt;Processadors&lt;/h3&gt;
&lt;p&gt;Els processadors permeten afegir informació als missatges.&lt;br /&gt;
Per a això, s&#39;apilen després de cada manejador mitjançant el mètode &lt;code&gt;pushProcessor($processador)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alguns processadors coneguts són &lt;code&gt;IntrospectionProcessor&lt;/code&gt; (mostren la línia, fitxer, classe i metodo des del qual s&#39;invoca el log), &lt;code&gt;WebProcessor&lt;/code&gt; (afig la URI, mètode i IP) o &lt;code&gt;GitProcessor&lt;/code&gt; (afig la branca i el commit).&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    $log = new Logger(&amp;quot;MiLogger&amp;quot;);
    $log-&amp;gt;pushHandler(new RotatingFileHandler(&amp;quot;logs/milog.log&amp;quot;, 0, Logger::DEBUG));
    $log-&amp;gt;pushProcessor(new IntrospectionProcessor());
    $log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;php://stderr&amp;quot;, Logger::WARNING));
    // no usa Introspection pq lo hemos apilado después, le asigno otro
    $log-&amp;gt;pushProcessor(new WebProcessor());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;=== &amp;quot;Consola en format text&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-log&quot;&gt;    [2020-11-26T13:35:31.076138+01:00] MiLogger.DEBUG: Esto es un mensaje de DEBUG [] {&amp;quot;file&amp;quot;:&amp;quot;C:&#92;&#92;xampp&#92;&#92;htdocs&#92;&#92;log&#92;&#92;procesador.php&amp;quot;,&amp;quot;line&amp;quot;:12,&amp;quot;class&amp;quot;:null,&amp;quot;function&amp;quot;:null}
    [2020-11-26T13:35:31.078344+01:00] MiLogger.INFO: Esto es un mensaje de INFO [] {&amp;quot;file&amp;quot;:&amp;quot;C:&#92;&#92;xampp&#92;&#92;htdocs&#92;&#92;log&#92;&#92;procesador.php&amp;quot;,&amp;quot;line&amp;quot;:13,&amp;quot;class&amp;quot;:null,&amp;quot;function&amp;quot;:null}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;formatadors&quot; tabindex=&quot;-1&quot;&gt;Formatadors&lt;/h3&gt;
&lt;p&gt;S&#39;associen als manejadores amb &lt;code&gt;setFormatter&lt;/code&gt;. Els formateadores més utilitzats són &lt;code&gt;LineFormatter&lt;/code&gt;, &lt;code&gt;HtmlFormatter&lt;/code&gt; o &lt;code&gt;JsonFormatter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    $log = new Logger(&amp;quot;MiLogger&amp;quot;);
    $rfh = new RotatingFileHandler(&amp;quot;logs/milog.log&amp;quot;, Logger::DEBUG);
    $rfh-&amp;gt;setFormatter(new JsonFormatter());
    $log-&amp;gt;pushHandler($rfh);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;=== &amp;quot;Consola en JSON&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;    {&amp;quot;message&amp;quot;:&amp;quot;Esto es un mensaje de DEBUG&amp;quot;,&amp;quot;context&amp;quot;:{},&amp;quot;level&amp;quot;:100,&amp;quot;level_name&amp;quot;:&amp;quot;DEBUG&amp;quot;,&amp;quot;channel&amp;quot;:&amp;quot;MiLogger&amp;quot;,&amp;quot;datetime&amp;quot;:&amp;quot;2020-11-27T15:36:52.747211+01:00&amp;quot;,&amp;quot;extra&amp;quot;:{}}
    {&amp;quot;message&amp;quot;:&amp;quot;Esto es un mensaje de INFO&amp;quot;,&amp;quot;context&amp;quot;:{},&amp;quot;level&amp;quot;:200,&amp;quot;level_name&amp;quot;:&amp;quot;INFO&amp;quot;,&amp;quot;channel&amp;quot;:&amp;quot;MiLogger&amp;quot;,&amp;quot;datetime&amp;quot;:&amp;quot;2020-11-27T15:36:52.747538+01:00&amp;quot;,&amp;quot;extra&amp;quot;:{}}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;Més informació&amp;quot;&lt;br /&gt;
Més informació sobre manejadores, formateadores i processadors en &lt;a href=&quot;https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/Seldaek/monolog/blob/master/doc/02-handlers-formatters-processors.md&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;us-de-factories&quot; tabindex=&quot;-1&quot;&gt;Ús de Factories&lt;/h3&gt;
&lt;p&gt;En comptes de instanciar un log en cada classe, és convenient crear una factoria (per exemple, seguint la idea del patró de disseny &lt;a href=&quot;https://refactoring.guru/%C3%A9s/design-patterns/factory-method&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Factory Method&lt;/em&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Per al següent exemple, suposarem que creguem la factoria en el &lt;em&gt;namespace&lt;/em&gt; &lt;code&gt;Dwes&#92;Exemples&#92;Util&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Dwes&#92;Ejemplos&#92;Util

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

class LogFactory {

    public static function getLogger(string $canal = &amp;quot;miApp&amp;quot;) : Logger {
        $log = new Logger($canal);
        $log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;logs/miApp.log&amp;quot;, Logger::DEBUG));

        return $log;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si en comptes de retornar un &lt;code&gt;Monolog&#92;Logger&lt;/code&gt; utilitzem la interfície de PSR, si en el futur canviem la implementació del log, no haurem de modificar nostre codi. Així doncs, la factoria ara retornarà &lt;code&gt;Psr&#92;Log&#92;LoggerInterface&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Dwes&#92;Ejemplos&#92;Util

use Monolog&#92;Handler&#92;StreamHandler;
use Monolog&#92;Logger;
use Psr&#92;Log&#92;LoggerInterface;

class LogFactory {

    public static function getLogger(string $canal = &amp;quot;miApp&amp;quot;) : LoggerInterface {
        $log = new Logger($canal);
        $log-&amp;gt;pushHandler(new StreamHandler(&amp;quot;log/miApp.log&amp;quot;, Logger::DEBUG));

        return $log;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalment, per a utilitzar la factoria, només canviem el codi que teníem en el constructor de les classes que usen el log, quedant alguna cosa asi:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

namespace Dwes&#92;Ejemplos&#92;Model;

use Dwes&#92;Ejemplos&#92;Util&#92;LogFactory;
use Monolog&#92;Logger;

class Cliente {

    private $codigo; 

    private Logger $log;

    function __construct($codigo){ 
        $this-&amp;gt;codigo=$codigo; 

        $this-&amp;gt;log = LogFactory::getLogger();
    }

    /// ... resto del código
}
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/8-logger-amb-monolog/" >
        </entry>
        <entry>
            <title>
                7. Composer
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/7-composer/</id>
            <content type="html">
                &lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/05/logo-composer.png&quot; alt=&quot;logo-composer.png|200&quot; width=&quot;200px&quot; /&gt;&lt;br /&gt;
Eina per excel·lència en PHP per a la gestió de llibreries i dependències, de manera que instal·la i les actualitza assegurant que tot l&#39;equip de desenvolupament té el mateix entorn i versions. A més, ofereix &lt;em&gt;autoloading&lt;/em&gt; del nostre codi, de manera que no hàgem de fer-lo nosaltres &amp;quot;a mà&amp;quot;.&lt;/p&gt;
&lt;p&gt;Està escrit en PHP, i podeu consultar tota la seua documentació en &lt;a href=&quot;https://getcomposer.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://getcomposer.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Utilitza &lt;a href=&quot;https://packagist.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Packagist&lt;/em&gt;&lt;/a&gt; com a repositori de llibreries.&lt;/p&gt;
&lt;p&gt;Funcionalment, és similar a Maven (Java) / npm (JS).&lt;/p&gt;
&lt;h3 id=&quot;instal-lacio&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h3&gt;
&lt;p&gt;Si estem usant XAMPP, hem d&#39;instal·lar &lt;em&gt;Composer&lt;/em&gt; en el propi sistema operatiu. Es recomana seguir les &lt;a href=&quot;https://getcomposer.org/doc/00-intro.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;instruccions oficials&lt;/a&gt; segons el sistema operatiu a emprar.&lt;/p&gt;
&lt;p&gt;En canvi, si usem &lt;em&gt;Docker&lt;/em&gt;, necessitem modificar la configuració del nostre contenidor. En el nostre cas, hem decidit modificar l&#39;arxiu &lt;code&gt;Dockerfile&lt;/code&gt; i afegir el següent comando:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-docker&quot;&gt;COPY --from=composer:2.0 /usr/bin/composer /usr/local/bin/composer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;És important que dins del contenidor comprovem que tenim la v2:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer -V
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;primers-passos&quot; tabindex=&quot;-1&quot;&gt;Primers passos&lt;/h3&gt;
&lt;p&gt;Quan creem un projecte per primera vegada, hem d&#39;inicialitzar el repositori. Per a això, executarem el comando &lt;code&gt;composer init&lt;/code&gt; on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configurem el nom del paquet, descripció, autor (nom &lt;code&gt;&amp;lt;email&amp;gt;&lt;/code&gt;), tipus de paquet (project), etc.&lt;/li&gt;
&lt;li&gt;Definim les dependències del projecte (&lt;code&gt;require&lt;/code&gt;) i les de desenvolupament (&lt;code&gt;require-dev&lt;/code&gt;) de manera interactiva.&lt;/li&gt;
&lt;li&gt;En les de desenvolupament s&#39;indica aquelles que no s&#39;instal·laran a l&#39;entorn de producció, per exemple, les llibreries de proves.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Després de la seua configuració, es crearà automàticament l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt; amb les dades introduïdes i descàrrega les llibreries en la carpeta &lt;code&gt;vendor&lt;/code&gt;. La instal·lació de les llibreries sempre es realitza de manera local per a cada projecte.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;	{
    &amp;quot;name&amp;quot;: &amp;quot;dwes/log&amp;quot;,
    &amp;quot;description&amp;quot;: &amp;quot;Pruebas con Monolog&amp;quot;,
    &amp;quot;type&amp;quot;: &amp;quot;project&amp;quot;,
    &amp;quot;require&amp;quot;: {
        &amp;quot;monolog/monolog&amp;quot;: &amp;quot;^2.1&amp;quot;
    },
    &amp;quot;license&amp;quot;: &amp;quot;MIT&amp;quot;,
    &amp;quot;authors&amp;quot;: [
        {
            &amp;quot;name&amp;quot;: &amp;quot;Aitor Medrano&amp;quot;,
            &amp;quot;email&amp;quot;: &amp;quot;a.medrano@edu.gva.es&amp;quot;
        }
    ]
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A l&#39;hora d&#39;indicar cada llibreria introduirem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;el nom de la llibreria, composta tant pel creador o &amp;quot;vendor&amp;quot;, com pel nom del projecte. Exemples: &lt;code&gt;monolog/monolog&lt;/code&gt; o &lt;code&gt;laravel/installer&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;la versió de cada llibreria. Tenim diverses opcions per a indicar-la:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Directament: 1.4.2&lt;/li&gt;
&lt;li&gt;Amb comodins: 1.&lt;/li&gt;
&lt;li&gt;A partir de: &amp;gt;= 2.0.3&lt;/li&gt;
&lt;li&gt;Sense trencament de canvis:&lt;br /&gt;
{ &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#1&quot;&gt;#1&lt;/a&gt;}&lt;br /&gt;
.3.2 // &amp;gt;=1.3.2 &amp;lt;2.0.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;actualitzar-llibreries&quot; tabindex=&quot;-1&quot;&gt;Actualitzar llibreries&lt;/h3&gt;
&lt;p&gt;Podem definir les dependències via l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt; o mitjançant comandos amb el format &lt;code&gt;composer require vendor/package:version&lt;/code&gt;. Per exemple, si volem afegir phpUnit com a llibreria de desenvolupament, farem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require phpunit/phpunit –dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Després d&#39;afegir noves llibreries, hem d&#39;actualitzar el nostre projecte:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer update
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si creem l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt; nosaltres directament sense inicialitzar el repositori, hem d&#39;instal·lar les dependències:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En fer aquest pas (tant instal·lar com actualitzar), com ja hem comentat, es descarreguen les llibreries en dins de la carpeta &lt;code&gt;vendor&lt;/code&gt;. És molt important afegir aquesta carpeta a l&#39;arxiu &lt;code&gt;.gitignore&lt;/code&gt; per a no pujar-les a GitHub.&lt;/p&gt;
&lt;p&gt;A més es crea l&#39;arxiu &lt;code&gt;composer.lock&lt;/code&gt;, que emmagatzema la versió exacta que s&#39;ha instal·lat de cada llibreria (aquest arxiu no es toca).&lt;/p&gt;
&lt;h3 id=&quot;code-autoload-php-code&quot; tabindex=&quot;-1&quot;&gt;&lt;code&gt;autoload.php&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Composer&lt;/em&gt; crea de manera automàtica en &lt;code&gt;vendor/autoload.php&lt;/code&gt; el codi per a incloure de manera automàtica totes les llibreries que tinguem configurades en &lt;code&gt;composer.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Per a utilitzar-ho, en la capçalera del nostre arxius posarem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el nostre cas, de moment només el podrem en els arxius on provem les classes&lt;/p&gt;
&lt;p&gt;Si volem que Composer també s&#39;encarregue de carregar de manera automàtica les nostres classes de domini, dins de l&#39;arxiu &lt;code&gt;composer.json&lt;/code&gt;, definirem la propietat &lt;code&gt;autoload&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;autoload&amp;quot;: {
    &amp;quot;psr-4&amp;quot;: {&amp;quot;Dwes&#92;&#92;&amp;quot;: &amp;quot;app/Dwes&amp;quot;}
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Posteriorment, hem de tornar a generar el &lt;em&gt;autoload&lt;/em&gt; de &lt;em&gt;Composer&lt;/em&gt; mitjançant l&#39;opció &lt;code&gt;dump-autoload&lt;/code&gt; (o &lt;code&gt;du&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer dump-autoload
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/7-composer/" >
        </entry>
        <entry>
            <title>
                6. Gestió d&#39;Errors
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/6-gestio-d-errors/</id>
            <content type="html">
                &lt;p&gt;PHP classifica els errors que ocorren en diferents nivells. Cada nivell s&#39;identifica amb una constant. Per exemple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;E_ERROR&lt;/code&gt;: errors fatals, no recuperables. S&#39;interromp el script.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E_WARNING&lt;/code&gt;: advertiments en temps d&#39;execució. El script no s&#39;interromp.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;E_NOTICE&lt;/code&gt;: avisos en temps d&#39;execució.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podeu comprovar el llistat complet de constants de &lt;a href=&quot;https://www.php.net/manual/es/errorfunc.constants.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/es/errorfunc.constants.php&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Per a la configuració dels errors podem fer-ho de dues formes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A nivell de &lt;code&gt;php.ini&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_reporting&lt;/code&gt;: indica els nivells d&#39;errors a notificar
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_reporting = E_ALL &amp;amp; ~E_NOTICE&lt;/code&gt; -&amp;gt; Tots els errors menys els avisos en temps d&#39;execució.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;display_errors&lt;/code&gt;: indica si mostrar o no els errors per pantalla. En entorns de producció és comuna posar-ho a &lt;code&gt;off&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mitjançant codi amb les següents funcions:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;error_reporting(codigo)&lt;/code&gt; -&amp;gt; Controla quins errors notificar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_error_handler(nombreManejador)&lt;/code&gt; -&amp;gt; Indica que funció s&#39;invocarà cada vegada que es trobe un error. El manejador rep com a paràmetres el nivell de l&#39;error i el missatge&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A continuació tenim un exemple mitjançant codi:&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Funcions per a la gestió d&#39;errors&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    error_reporting(E_ALL &amp;amp; ~E_NOTICE &amp;amp; ~E_WARNING);
    $resultado = $dividendo / $divisor;

    error_reporting(E_ALL &amp;amp; ~E_NOTICE);
    set_error_handler(&amp;quot;miManejadorErrores&amp;quot;);
    $resultado = $dividendo / $divisor;
    restore_error_handler(); // vuelve al anterior

    function miManejadorErrores($nivel, $mensaje) {
        switch($nivel) {
            case E_WARNING:
                echo &amp;quot;&amp;lt;strong&amp;gt;Warning&amp;lt;/strong&amp;gt;: $mensaje.&amp;lt;br/&amp;gt;&amp;quot;;
                break;
            default:
                echo &amp;quot;Error de tipo no especificado: $mensaje.&amp;lt;br/&amp;gt;&amp;quot;;
        }
    }
    ```

=== &amp;quot;Consola&amp;quot;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Error de tipo no especificado: Undefined variable: dividendo.&lt;br /&gt;
Error de tipo no especificado: Undefined variable: divisor.&lt;br /&gt;
Error de tipo Warning: Division by zero.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
### Exempcions

La gestió d&#39;excepcions forma part des de PHP 5. El seu funcionament és similar a Java*, fent ús d&#39;un bloc `try / catch / finally`.
Si detectem una situació anòmala i volem llançar una excepció, haurem de realitzar `throw new Exception` (adjuntant el missatge que l&#39;ha provocat).

``` php
&amp;lt;?php
try {
    if ($divisor == 0) {
        throw new Exception(&amp;quot;División por cero.&amp;quot;);
    }
    $resultado = $dividendo / $divisor;
} catch (Exception $e) {
    echo &amp;quot;Se ha producido el siguiente error: &amp;quot;.$e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La classe &lt;code&gt;Exception&lt;/code&gt; és la classe pare de totes les excepcions. El seu constructor rep &lt;code&gt;missatge[,codigoError][,excepcionPrevia]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A partir d&#39;un objecte &lt;code&gt;Exception&lt;/code&gt;, podem accedir als mètodes &lt;code&gt;getMessage()&lt;/code&gt;i &lt;code&gt;getCode()&lt;/code&gt; per a obtindre el missatge i el codi d&#39;error de l&#39;excepció capturada.&lt;/p&gt;
&lt;p&gt;El propi llenguatge ofereix un conjunt d&#39;excepcions ja definides, les quals podem capturar (i llançar des de PHP 7). Es recomana la seua consulta en la &lt;a href=&quot;https://www.php.net/manual/es/class.exception.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;creant-exempcions&quot; tabindex=&quot;-1&quot;&gt;Creant exempcions&lt;/h4&gt;
&lt;p&gt;Per a crear una excepció, la forma més curta és crear una classe que únicament herete de &lt;code&gt;Exception&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class HolaExcepcion extends Exception {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si volem, i és recomanable depenent dels requisits, podem sobrecarregar els mètodes màgics, per exemple, sobrecarregant el constructor i cridant al constructor del pare, o reescriure el mètode &lt;code&gt;__toString&lt;/code&gt; per a canviar el seu missatge:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class MiExcepcion extends Exception {
    public function __construct($msj, $codigo = 0, Exception $previa = null) {
        // código propio
        parent::__construct($msj, $codigo, $previa);
    }
    public function __toString() {
        return __CLASS__ . &amp;quot;: [{$this-&amp;gt;code}]: {$this-&amp;gt;message}&#92;n&amp;quot;;
    }
    public function miFuncion() {
        echo &amp;quot;Una función personalizada para este tipo de excepción&#92;n&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si definim una excepció d&#39;aplicació dins d&#39;un &lt;em&gt;namespace&lt;/em&gt;, quan referenciem a &lt;code&gt;Exception&lt;/code&gt;, haurem de referenciar-la mitjançant el seu nom totalment qualificat (&lt;code&gt;&#92;Exception&lt;/code&gt;), o utilitzant &lt;code&gt;use&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Mitjançant nom totalment qualificat&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    namespace &#92;Dwes&#92;Ejemplos;

    class AppExcepcion extends &#92;Exception {}
    ```
=== &amp;quot;Mitjançant `use`&amp;quot;
``` php
    &amp;lt;?php
    namespace &#92;Dwes&#92;Ejemplos;

    use Exception;

    class AppExcepcion extends Exception {}
    ```

##### Exempcions múltiples

Es poden usar excepcions múltiples per a comprovar diferents condicions. A l&#39;hora de capturar-les, es fa de més específica a més general.

``` php
&amp;lt;?php
$email = &amp;quot;ejemplo@ejemplo.com&amp;quot;;
try {
    // Comprueba si el email es válido
    if(filter_var($email, FILTER_VALIDATE_EMAIL) === FALSE) {
        throw new MiExcepcion($email);
    }
    // Comprueba la palabra ejemplo en la dirección email
    if(strpos($email, &amp;quot;ejemplo&amp;quot;) !== FALSE) {
        throw new Exception(&amp;quot;$email es un email de ejemplo no válido&amp;quot;);
    }
} catch (MiExcepcion $e) {
    echo $e-&amp;gt;miFuncion();
} catch(Exception $e) {
    echo $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question] &amp;quot;Autoevaluación&amp;quot;&lt;br /&gt;
¿Qué pasaría al ejectuar el siguiente código?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    class MainException extends Exception {}
    class SubException extends MainException {}

    try {
        throw new SubException(&amp;quot;Lanzada SubException&amp;quot;);
    } catch (MainException $e) {
        echo &amp;quot;Capturada MainException &amp;quot; . $e-&amp;gt;getMessage();
    } catch (SubException $e) {
        echo &amp;quot;Capturada SubException &amp;quot; . $e-&amp;gt;getMessage();
    } catch (Exception $e) {
        echo &amp;quot;Capturada Exception &amp;quot; . $e-&amp;gt;getMessage();
    }
    ```

Si en el mateix `catch` volem capturar diverses excepcions, hem d&#39;utilitzar l&#39;operador `|`:

``` php
&amp;lt;?php
class MainException extends Exception {}
class SubException extends MainException {}

try {
    throw new SubException(&amp;quot;Lanzada SubException&amp;quot;);
} catch (MainException | SubException $e ) {
    echo &amp;quot;Capturada Exception &amp;quot; . $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Des de PHP 7, existeix el tipus &lt;code&gt;Throwable&lt;/code&gt;, el qual és una interfície que implementen tant els errors com les excepcions, i ens permet capturar els dos tipus alhora:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
try {
    // tu codigo
} catch (Throwable $e) {
    echo &#39;Forma de capturar errores y excepciones a la vez&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si només volem capturar els errors fatals, podem fer ús de la classe &lt;code&gt;Error&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
try {
    // Genera una notificación que no se captura
    echo $variableNoAsignada;
    // Error fatal que se captura
    funcionQueNoExiste();
} catch (Error $e) {
    echo &amp;quot;Error capturado: &amp;quot; . $e-&amp;gt;getMessage();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;rellancar-exempcions&quot; tabindex=&quot;-1&quot;&gt;Rellançar exempcions&lt;/h4&gt;
&lt;p&gt;En les aplicacions reals, és molt comuna capturar una excepció de sistema i llançar una d&#39;aplicació que hem definit nostros.&lt;br /&gt;
També podem llançar les excepcions sense necessitat d&#39;estar dins d&#39;un &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class AppException extends Exception {}

try {
    // Código de negocio que falla
} catch (Exception $e) {
    throw new AppException(&amp;quot;AppException: &amp;quot;.$e-&amp;gt;getMessage(), $e-&amp;gt;getCode(), $e);
}
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/6-gestio-d-errors/" >
        </entry>
        <entry>
            <title>
                5. Tecnologies i Mecanismes per a la Separació
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/5-tecnologies-i-mecanismes-per-a-la-separacio/</id>
            <content type="html">
                &lt;p&gt;A continuació es presenten diverses tecnologies i mecanismes que faciliten la separació de la lògica de negoci i la presentació en una aplicació web:&lt;/p&gt;
&lt;h4 id=&quot;frameworks-php&quot; tabindex=&quot;-1&quot;&gt;Frameworks PHP:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Laravel: Framework que segueix el patró MVC (Model-View-Controller). Laravel facilita la creació de codi net i ben organitzat, separant clarament la lògica de negoci de la presentació.&lt;/li&gt;
&lt;li&gt;Symfony: Altres frameworks populars que també segueixen el patró MVC i ofereixen eines per a la separació de la lògica i la presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;patro-mvc&quot; tabindex=&quot;-1&quot;&gt;Patró MVC:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Model-View-Controller: Patró de disseny que divideix una aplicació en tres components interconnectats:
&lt;ul&gt;
&lt;li&gt;Model: Gestiona la lògica de negoci i les dades.&lt;/li&gt;
&lt;li&gt;Vista: Gestiona la presentació de la informació.&lt;/li&gt;
&lt;li&gt;Controlador: Gestiona la comunicació entre el Model i la Vista.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;plantilles&quot; tabindex=&quot;-1&quot;&gt;Plantilles:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Blade (Laravel): Motor de plantilles que permet separar el codi HTML de la lògica de negoci.&lt;/li&gt;
&lt;li&gt;Twig (Symfony): Motor de plantilles similar a Blade, utilitzat per separar la lògica de negoci del codi de presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;api-rest&quot; tabindex=&quot;-1&quot;&gt;API REST:&lt;/h4&gt;
&lt;p&gt;Permet crear serveis web que exposen funcionalitats i dades a través de punts finals d&#39;API, mantenint la lògica de negoci separada de la presentació.&lt;/p&gt;
&lt;h4 id=&quot;exemple-mvc&quot; tabindex=&quot;-1&quot;&gt;Exemple MVC&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;// Model: Product.php
class Product {
    private string $name;
    private float $price;
    
    public function __construct(string $name, float $price) {
        $this-&amp;gt;name = $name;
        $this-&amp;gt;price = $price;
    }
    
    public function getName(): string {
        return $this-&amp;gt;name;
    }
    
    public function getPrice(): float {
        return $this-&amp;gt;price;
    }
}

// Controller: ProductController.php
class ProductController {
    public function showProduct() {
        $product = new Product(&amp;quot;Laptop&amp;quot;, 1200.00);
        include &#39;views/productView.php&#39;;
    }
}

// View: productView.php
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Product Information&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Product: &amp;lt;?php echo htmlspecialchars($product-&amp;gt;getName()); ?&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Price: $&amp;lt;?php echo htmlspecialchars($product-&amp;gt;getPrice()); ?&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La separació de la lògica de negoci dels aspectes de presentació és crucial per al desenvolupament d&#39;aplicacions web eficients, mantenibles i escalables.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/5-tecnologies-i-mecanismes-per-a-la-separacio/" >
        </entry>
        <entry>
            <title>
                4. Separar la lògica de negoci dels aspectes de presentació de l&#39;aplicació
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/4-separar-la-logica-de-negoci-dels-aspectes-de-presentacio-de-l-aplicacio/</id>
            <content type="html">
                &lt;h4 id=&quot;logica-de-negoci&quot; tabindex=&quot;-1&quot;&gt;Lògica de Negoci&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Regles i procediments que defineixen el funcionament de l&#39;aplicació.&lt;/li&gt;
&lt;li&gt;Inclou processament de dades, càlculs, interaccions amb la base de dades, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;aspectes-de-presentacio&quot; tabindex=&quot;-1&quot;&gt;Aspectes de Presentació&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Manera en què es mostra la informació a l&#39;usuari.&lt;/li&gt;
&lt;li&gt;Inclou la interfície d&#39;usuari, disseny, navegació, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;avantatges&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Mantenibilitat&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilita la modificació de la lògica de negoci sense afectar la presentació.&lt;/li&gt;
&lt;li&gt;Permet actualitzar la interfície d&#39;usuari sense modificar la lògica subjacent.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Reutilització&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La lògica de negoci pot ser reutilitzada en diferents aplicacions amb interfícies variades.&lt;/li&gt;
&lt;li&gt;Els components de presentació poden ser reutilitzats amb diferents lògiques de negoci.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Escalabilitat&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ajuda a escalar l&#39;aplicació separant les preocupacions, permetent millorar una part sense impactar l&#39;altra.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Prova i Depuració&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilita les proves unitàries i la depuració en permetre provar la lògica de negoci per separat de la interfície.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Col·laboració&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permet que desenvolupadors de backend i frontend treballen de manera independent en les seues àrees respectives.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/4-separar-la-logica-de-negoci-dels-aspectes-de-presentacio-de-l-aplicacio/" >
        </entry>
        <entry>
            <title>
                3. Espai de noms
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/3-espai-de-noms/</id>
            <content type="html">
                &lt;p&gt;Des de PHP 5.3 i també coneguts com &lt;em&gt;Namespaces&lt;/em&gt;, permeten organitzar les classes/interfícies, funcions i/o constants de manera similar als paquets a &lt;em&gt;Java&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;Recomanació&amp;quot;&lt;br /&gt;
Un només namespace per arxiu i crear una estructura de carpetes respectant els nivells/subnivells (igual que es fa a Java)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Es declaren en la primera línia mitjançant la paraula clau &lt;code&gt;namespace&lt;/code&gt; seguida del nom de l&#39;espai de noms assignat (cada subnivell se separa amb la barra invertida &lt;code&gt;&#92;&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;Per exemple, per a col·locar la classe &lt;code&gt;Producte&lt;/code&gt; dins del &lt;em&gt;namespace&lt;/em&gt; &lt;code&gt;Dwes&#92;Exemples&lt;/code&gt; ho faríem així:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Dwes&#92;Exemples;

const IVA = 0.21;

class Producte {
    public $nombre;
      
    public function muestra() : void {
        echo&amp;quot;&amp;lt;p&amp;gt;Prod:&amp;quot; . $this-&amp;gt;nombre . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;acces&quot; tabindex=&quot;-1&quot;&gt;Accés&lt;/h4&gt;
&lt;p&gt;Per a referenciar a un recurs que conté un namespace, primer hem de tindre&#39;l disponible fent ús de &lt;code&gt;include&lt;/code&gt; o &lt;code&gt;require&lt;/code&gt;. Si el recurs està en el mateix &lt;em&gt;namespace&lt;/em&gt;, es realitza un accés directe (es coneix com a accés sense qualificar).&lt;/p&gt;
&lt;p&gt;Realment hi ha tres tipus d&#39;accés:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sense qualificar: &lt;code&gt;recurs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;qualificat: &lt;code&gt;rutaRelativa&#92;recurs&lt;/code&gt; → no fa falta posar el &lt;em&gt;namespace&lt;/em&gt; complet&lt;/li&gt;
&lt;li&gt;totalment qualificat: &lt;code&gt;&#92;rutaAbsoluta&#92;recurs&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace Dwes&#92;Ejemplos;

include_once(&amp;quot;Producto.php&amp;quot;);

echo IVA; // sin cualificar
echo Utilidades&#92;IVA; // acceso cualificado. Daría error, no existe &#92;Dwes&#92;Ejemplos&#92;Utilidades&#92;IVA
echo &#92;Dwes&#92;Ejemplos&#92;IVA; // totalmente cualificado

$p1 = new Producto(); // lo busca en el mismo namespace y encuentra &#92;Dwes&#92;Ejemplos&#92;Producto
$p2 = new Model&#92;Producto(); // daría error, no existe el namespace Model. Está buscando &#92;Dwes&#92;Ejemplos&#92;Model&#92;Producto
$p3 = new &#92;Dwes&#92;Ejemplos&#92;Producto(); // &#92;Dwes&#92;Ejemplos&#92;Producto
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;acces-1&quot; tabindex=&quot;-1&quot;&gt;Accés&lt;/h4&gt;
&lt;p&gt;Per a evitar la referència qualificada podem declarar l&#39;ús mitjançant &lt;code&gt;use&lt;/code&gt; (similar a fer &lt;code&gt;import&lt;/code&gt; a Java). Es fa en la capçalera, després del &lt;code&gt;namespace&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;Els tipus Posibles són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;use const nombreCualificadoConstante&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use function nombreCualificadoFuncion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use nombreCualificadoClase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;use nombreCualificadoClase as NuevoNombre&lt;/code&gt; // per a canviar de nom elements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per exemple, si volem utilitzar la classe &lt;code&gt;&#92;Dwes&#92;Exemples&#92;Producte&lt;/code&gt; des d&#39;un recurs que es troba en l&#39;arrel, per exemple en &lt;code&gt;inici.php&lt;/code&gt;, faríem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
include_once(&amp;quot;Dwes&#92;Exemples&#92;Producte.php&amp;quot;);

use const Dwes&#92;Exemples&#92;IVA;
use &#92;Dwes&#92;Exemples&#92;Producte;

echo IVA;
$p1 = new Producte();
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;To &lt;code&gt;use&lt;/code&gt; or not to &lt;code&gt;use&lt;/code&gt;&amp;quot;&lt;br /&gt;
En resum, &lt;code&gt;use&lt;/code&gt; permet accedir sense qualificar a recursos que estan en un altre &lt;em&gt;namespace&lt;/em&gt;. Si estem en el mateix espai de nom, no necessitem &lt;code&gt;use&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;organitzacio&quot; tabindex=&quot;-1&quot;&gt;Organització&lt;/h4&gt;
&lt;p&gt;Tot projecte, conforme creix, necessita organitzar el seu codi font. Es planteja una organització en la qual els arxius que interactuan amb el navegador es col·loquen en l&#39;arrel, i les classes que definim van dins d&#39;un namespace (i dins de la seua pròpia carpeta &lt;code&gt;src&lt;/code&gt; o &lt;code&gt;app&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/03/03organizacion.png&quot; alt=&quot;03organizacion.png&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;Organització, includes i usos&amp;quot;&lt;br /&gt;
* Col·locarem cada recurs en un fitxer a part.&lt;br /&gt;
* En la primera línia indicarem la seua &lt;em&gt;namespace&lt;/em&gt; (si no està en l&#39;arrel).&lt;br /&gt;
* Si utilitzem altres recursos, farem un &lt;code&gt;include_once&lt;/code&gt; d&#39;aqueixos recursos (classes, interfícies, etc...).&lt;br /&gt;
* Cada recurs ha d&#39;incloure tots els altres recursos que referencie: la classe de la qual hereta, interfícies que implementa, classes utilitzades/rebudes com a paràmetres, etc...&lt;br /&gt;
* Si els recursos estan en un espai de noms diferent al que estem, emprarem &lt;code&gt;use&lt;/code&gt; amb la ruta completa per a després utilitzar referències sense qualificar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;autoload&quot; tabindex=&quot;-1&quot;&gt;Autoload&lt;/h4&gt;
&lt;p&gt;No és tediós haver de fer el &lt;code&gt;include&lt;/code&gt; de les classes? El autoload ve al rescat.&lt;/p&gt;
&lt;p&gt;Així doncs, permet carregar les classes (no les constants ni les funcions) que s&#39;utilitzaran i evitar haver de fer el &lt;code&gt;include_once&lt;/code&gt; de cadascuna d&#39;elles. Per a això, s&#39;utilitza la funció &lt;code&gt;spl_autoload_register&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
spl_autoload_register( function( $nombreClase ) {
    include_once $nombreClase.&#39;.php&#39;;
} );
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question] &amp;quot;Per què es diuen autoload?&amp;quot;&lt;br /&gt;
Perquè abans es realitzava mitjançant el mètode màgic &lt;code&gt;__autoload()&lt;/code&gt;, el qual està &lt;em&gt;deprecated&lt;/em&gt; des de PHP 7.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I com organitzem ara el nostre codi aprofitant el autoload?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/03/03autoload.png&quot; alt=&quot;03autoload.png|600&quot; width=&quot;600px&quot; /&gt;&lt;br /&gt;
Per a facilitar la cerca dels recursos a incloure, és recomanable col·locar totes les classes dins d&#39;una mateixa carpeta. Nosaltres la col·locarem dins de &lt;code&gt;app&lt;/code&gt; (més endavant, quan estudiem &lt;em&gt;Laravel&lt;/em&gt; veurem el motiu d&#39;aquesta decisió). Altres carpetes que podem crear són &lt;code&gt;test&lt;/code&gt; per a col·locar les proves &lt;em&gt;PhpUnit&lt;/em&gt; que després realitzarem, o la carpeta &lt;code&gt;vendor&lt;/code&gt; on s&#39;emmagatzemaran les llibreries del projecte (aquesta carpeta és un estándard dins de PHP, ja que &lt;em&gt;Composer&lt;/em&gt; la crea automàticament).&lt;/p&gt;
&lt;p&gt;Com hem col·locat tots els nostres recursos dins de &lt;code&gt;app&lt;/code&gt;, ara nostre &lt;code&gt;autoload.php&lt;/code&gt; (el qual col·loquem en la carpeta arrel) només buscarà dins d&#39;aqueixa carpeta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
spl_autoload_register( function( $nombreClase ) {
    include_once &amp;quot;app/&amp;quot;.$nombreClase.&#39;.php&#39;;
} );

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;autoload i rutes errònies&amp;quot;&lt;br /&gt;
En &lt;em&gt;Ubuntu&lt;/em&gt; en fer el &lt;em&gt;include&lt;/em&gt; de la classe que rep com a paràmetre, les barres dels namespace (&lt;code&gt;&#92;&lt;/code&gt;) són diferents a les de les rutes (&lt;code&gt;/&lt;/code&gt;). Per això, és millor que utilitzem el fitxer autoload:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    spl_autoload_register( function( $nombreClase ) {
        $ruta = &amp;quot;app&#92;&#92;&amp;quot;.$nombreClase.&#39;.php&#39;;
        $ruta = str_replace(&amp;quot;&#92;&#92;&amp;quot;, &amp;quot;/&amp;quot;, $ruta); // Sustituimos las barras
        include_once $_SERVER[&#39;DOCUMENT_ROOT&#39;].&#39;/&#39;.$ruta;
    } );
    
    ```
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/3-espai-de-noms/" >
        </entry>
        <entry>
            <title>
                2. Principis de la POO
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/2-principis-de-la-poo/</id>
            <content type="html">
                &lt;p&gt;Encapsulació&lt;/p&gt;
&lt;p&gt;Les propietats es defineixen privades o protegides (si volem que les classes heretades puguen accedir).&lt;/p&gt;
&lt;p&gt;Per a cada propietat, s&#39;afigen mètodes públics (&lt;em&gt;getter/setter&lt;/em&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public setPropiedad(tipo $param)
public getPropiedad() : tipo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Les constants es defineixen públiques perquè siguen accessibles per tots els recursos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class MayorMenor {
    private int $mayor;
    private int $menor;

    public function setMayor(int $may) {
        $this-&amp;gt;mayor = $may;
    }

    public function setMenor(int $men) {
        $this-&amp;gt;menor = $men;
    }

    public function getMayor() : int {
        return $this-&amp;gt;mayor;
    }

    public function getMenor() : int {
        return $this-&amp;gt;menor;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;rebent-i-enviant-objectes&quot; tabindex=&quot;-1&quot;&gt;Rebent i enviant objectes&lt;/h4&gt;
&lt;p&gt;És recomanable indicar-ho en la mena de paràmetres. Si l&#39;objecte pot retornar nuls es posa &lt;code&gt;?&lt;/code&gt; davant del nom de la classe.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!important] &amp;quot;Objectes per referència&amp;quot;&lt;br /&gt;
Els objectes que s&#39;envien i reben com a paràmetres sempre es passen per referència.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
function maymen(array $numeros) : ?MayorMenor {
    $a = max($numeros);
    $b = min($numeros);

    $result = new MayorMenor();
    $result-&amp;gt;setMayor($a);
    $result-&amp;gt;setMenor($b);

    return $result;
}

$resultado =  maymen([1,76,9,388,41,39,25,97,22]);
echo &amp;quot;&amp;lt;br&amp;gt;Mayor: &amp;quot;.$resultado-&amp;gt;getMayor();
echo &amp;quot;&amp;lt;br&amp;gt;Menor: &amp;quot;.$resultado-&amp;gt;getMenor();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;constructor-1&quot; tabindex=&quot;-1&quot;&gt;Constructor&lt;/h4&gt;
&lt;p&gt;El constructor dels objectes es defineix mitjançant el mètode màgic &lt;code&gt;__construct&lt;/code&gt;.&lt;br /&gt;
Pot o no tindre paràmetres, però només pot haver-hi un únic constructor.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Persona {
    private string $nombre;

    public function __construct(string $nom) {
        $this-&amp;gt;nombre = $nom;
    }

    public function imprimir(){
      echo $this-&amp;gt;nombre;
      echo &#39;&amp;lt;br&amp;gt;&#39;;
    }
}

$bruno = new Persona(&amp;quot;Bruno Díaz&amp;quot;);
$bruno-&amp;gt;imprimir();
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;constructors-en-php-8&quot; tabindex=&quot;-1&quot;&gt;Constructors en PHP 8&lt;/h5&gt;
&lt;p&gt;Una de les grans novetats que ofereix PHP 8 és la simplificació dels constructors amb paràmetres, la qual cosa es coneix com a promoció de les propietats del constructor*.&lt;/p&gt;
&lt;p&gt;Per a això, en comptes d&#39;haver de declarar les propietats com a privades o protegides, i després dins del constructor haver d&#39;assignar els paràmetres a estàs propietats, el propi constructor promociona les propietats.&lt;/p&gt;
&lt;p&gt;Vegem-ho millor amb un exemple. Imaginem una classe &lt;code&gt;Punt&lt;/code&gt; on vulguem emmagatzemar les seues coordenades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Punto {
    protected float $x;
    protected float $y;
    protected float $z;

    public function __construct(
        float $x = 0.0,
        float $y = 0.0,
        float $z = 0.0
    ) {
        $this-&amp;gt;x = $x;
        $this-&amp;gt;y = $y;
        $this-&amp;gt;z = $z;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En PHP 8, quedaria de la següent manera (molt més curt, la qual cosa facilita la seua llegibilitat):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Punto {
    public function __construct(
        protected float $x = 0.0,
        protected float $y = 0.0,
        protected float $z = 0.0,
    ) {}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!info] &amp;quot;L&#39;ordre importa&amp;quot;&lt;br /&gt;
A l&#39;hora de codificar l&#39;ordre dels elements ha de ser:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    declare(strict_types=1);
    class NombreClase {
    // propiedades
    // constructor
    // getters - setters
    // resto de métodos
    }
    ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;classes-estatiques&quot; tabindex=&quot;-1&quot;&gt;Classes estàtiques&lt;/h4&gt;
&lt;p&gt;Són aquelles que tenen propietats i/o mètodes estàtics (també es coneixen com &lt;em&gt;de classe&lt;/em&gt;, perquè el seu valor es comparteix entre totes les instàncies de la mateixa classe).&lt;/p&gt;
&lt;p&gt;Es declaren amb &lt;code&gt;static&lt;/code&gt; i es referencien amb &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Si volem accedir a un mètode estàtic, s&#39;anteposa el nom de la classe: &lt;code&gt;Producte::nuevoProducto()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si des d&#39;un mètode volem accedir a una propietat estàtica de la mateixa classe, s&#39;utilitza la referència &lt;code&gt;self&lt;/code&gt;: &lt;code&gt;self::$numProductos&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    const IVA = 0.23;
    private static $numProductos = 0; 

    public static function nuevoProducto() {
        self::$numProductos++;
    }
}

Producto::nuevoProducto();
$impuesto = Producto::IVA;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;També podem tindre classes normals que tinguen alguna propietat estàtica:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    const IVA = 0.23;
    private static $numProductos = 0; 
    private $codigo;

    public function __construct(string $cod) {
        self::$numProductos++;
        $this-&amp;gt;codigo = $cod;
    }

    public function mostrarResumen() : string {
        return &amp;quot;El producto &amp;quot;.$this-&amp;gt;codigo.&amp;quot; es el número &amp;quot;.self::$numProductos;
    }
}

$prod1 = new Producto(&amp;quot;PS5&amp;quot;);
$prod2 = new Producto(&amp;quot;XBOX Series X&amp;quot;);
$prod3 = new Producto(&amp;quot;Nintendo Switch&amp;quot;);
echo $prod3-&amp;gt;mostrarResumen();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;introspeccio&quot; tabindex=&quot;-1&quot;&gt;Introspecció&lt;/h4&gt;
&lt;p&gt;En treballar amb classes i objectes, existeixen un conjunt de funcions ja definides pel llenguatge que permeten obtindre informació sobre els objectes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;instanceof&lt;/code&gt;: permet comprovar si un objecte és d&#39;una determinada classe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_class&lt;/code&gt;: retorna el nom de la classe&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_declared_class&lt;/code&gt;: retorna un array amb els noms de les classes definides&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_àlies&lt;/code&gt;: crea un àlies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class_exists&lt;/code&gt; / &lt;code&gt;method_exists&lt;/code&gt; / &lt;code&gt;property_exists&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; si la classe / mètode / propietat està definida&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_class_methods&lt;/code&gt; / &lt;code&gt;get_class_vars&lt;/code&gt; / &lt;code&gt;get_object_vars&lt;/code&gt;: Retorna un array amb els noms dels mètodes / propietats d&#39;una classe / propietats d&#39;un objecte que són accessibles des d&#39;on es fa la crida.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un exemple d&#39;aquestes funcions pot ser el següent:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$p = new Producto(&amp;quot;PS5&amp;quot;);
if ($p instanceof Producto) {
    echo &amp;quot;Es un producto&amp;quot;;
    echo &amp;quot;La clase es &amp;quot;.get_class($p);

    class_alias(&amp;quot;Producto&amp;quot;, &amp;quot;Articulo&amp;quot;);
    $c = new Articulo(&amp;quot;Nintendo Switch&amp;quot;);
    echo &amp;quot;Un articulo es un &amp;quot;.get_class($c);

    print_r(get_class_methods(&amp;quot;Producto&amp;quot;));
    print_r(get_class_vars(&amp;quot;Producto&amp;quot;));
    print_r(get_object_vars($p));

    if (method_exists($p, &amp;quot;mostrarResumen&amp;quot;)) {
        $p-&amp;gt;mostrarResumen();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! caution &amp;quot;Clonat&amp;quot;&lt;br /&gt;
En assignar dos objectes no es copien, es crea una nova referència. Si volem una còpia, cal clonar-ho mitjançant el mètode &lt;code&gt;clone(object) : object&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Si volem modificar el clonat per defecte, cal definir el mètode màgic &lt;code&gt;__clone()&lt;/code&gt; que es dirà després de copiar totes les propietats.&lt;/p&gt;
&lt;p&gt;Més informació en &lt;a href=&quot;https://www.php.net/manual/es/language.oop5.cloning.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/es/language.oop5.cloning.php&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;herencia&quot; tabindex=&quot;-1&quot;&gt;Herència&lt;/h3&gt;
&lt;p&gt;PHP suporta herència simple, de manera que una classe només pot heretar d&#39;una altra, no de dues classes alhora. Per a això s&#39;utilitza la paraula clau &lt;code&gt;extends&lt;/code&gt;. Si volem que la classe A hereta de la classe B farem:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;class A extends B
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fill hereta els atributs i mètodes públics i protegits.&lt;/p&gt;
&lt;p&gt;!!! warning &amp;quot;Cada classe en un arxiu&amp;quot;&lt;br /&gt;
Com ja hem comentat, hauríem de col·locar cada classe en un arxiu diferent per a posteriorment utilitzar-lo mitjançant &lt;code&gt;include&lt;/code&gt;. En els següent exemple els hem col·locats junt per a facilitar la seua llegibilitat.&lt;/p&gt;
&lt;p&gt;Per exemple, tenim una classe &lt;code&gt;Producte&lt;/code&gt; i una &lt;code&gt;Tv&lt;/code&gt; que hereta de &lt;code&gt;Producte&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    public $codigo;
    public $nombre;
    public $nombreCorto;
    public $PVP;

    public function mostrarResumen() {
        echo &amp;quot;&amp;lt;p&amp;gt;Prod:&amp;quot;.$this-&amp;gt;codigo.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
    }
}

class Tv extends Producto {
    public $pulgadas;
    public $tecnologia;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos utilizar las siguientes funciones para averiguar si hay relación entre dos clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get_parent_class(object): string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;is_subclass_of(object, string): bool&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$t = new Tv();
$t-&amp;gt;codigo = 33;
if ($t instanceof Producto) {
    echo $t-&amp;gt;mostrarResumen();
}

$padre = get_parent_class($t);
echo &amp;quot;&amp;lt;br&amp;gt;La clase padre es: &amp;quot; . $padre;
$objetoPadre = new $padre;
echo $objetoPadre-&amp;gt;mostrarResumen();

if (is_subclass_of($t, &#39;Producto&#39;)) {
    echo &amp;quot;&amp;lt;br&amp;gt;Soy un hijo de Producto&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Polimorfisme&lt;/h3&gt;
&lt;p&gt;Podem crear mètodes en els fills amb el mateix nom que el pare, canviant el seu comportament.&lt;br /&gt;
Per a invocar als mètodes del pare -&amp;gt; &lt;code&gt;parent::nombreMetodo()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Tv extends Producto {
   public $pulgadas;
   public $tecnologia;

   public function mostrarResumen() {
      parent::mostrarResumen();
      echo &amp;quot;&amp;lt;p&amp;gt;TV &amp;quot;.$this-&amp;gt;tecnologia.&amp;quot; de &amp;quot;.$this-&amp;gt;pulgadas.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;constructor-en-fills&quot; tabindex=&quot;-1&quot;&gt;Constructor en fills&lt;/h4&gt;
&lt;p&gt;En els fills no es crea cap constructor de manera automàtica. Pel que si no n&#39;hi ha, s&#39;invoca automàticament al del pare. En canvi, si el definim en el fill, hem d&#39;invocar al del pare de manera explícita.&lt;/p&gt;
&lt;p&gt;=== &amp;quot;PHP7&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;?php
    class Producto {
        public string $codigo;

        public function __construct(string $codigo) {
            $this-&amp;gt;codigo = $codigo;
        }

        public function mostrarResumen() {
            echo &amp;quot;&amp;lt;p&amp;gt;Prod:&amp;quot;.$this-&amp;gt;codigo.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        }
    }
    
    class Tv extends Producto {
        public $pulgadas;
        public $tecnologia;

        public function __construct(string $codigo, int $pulgadas, string $tecnologia) {
            parent::__construct($codigo);
            $this-&amp;gt;pulgadas = $pulgadas;
            $this-&amp;gt;tecnologia = $tecnologia;
        }

        public function mostrarResumen() {
            parent::mostrarResumen();
            echo &amp;quot;&amp;lt;p&amp;gt;TV &amp;quot;.$this-&amp;gt;tecnologia.&amp;quot; de &amp;quot;.$this-&amp;gt;pulgadas.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        }
    }
    ```

=== &amp;quot;PHP8&amp;quot;

``` php
    &amp;lt;?php
    class Producto {
        public function __construct(private string $codigo) { }

        public function mostrarResumen() {
            echo &amp;quot;&amp;lt;p&amp;gt;Prod:&amp;quot;.$this-&amp;gt;codigo.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        }        
    }
    
    class Tv extends Producto {

        public function __construct(
            string $codigo,
            private int $pulgadas,
            private string $tecnologia)
        {
            parent::__construct($codigo);
        }

        public function mostrarResumen() {
            parent::mostrarResumen();
            echo &amp;quot;&amp;lt;p&amp;gt;TV &amp;quot;.$this-&amp;gt;tecnologia.&amp;quot; de &amp;quot;.$this-&amp;gt;pulgadas.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        }
    }
    ```

### Abstracció

Les classes abstractes obliguen a heretar d&#39;una classe, ja que no es permet la seua instanciación. Es defineix mitjançant `abstract class NombreClase {`.
Una classe abstracta pot contindre propietats i mètodes no-abstractes, i/o mètodes abstractes.

``` php
&amp;lt;?php
// Clase abstracta
abstract class Producto {
    private $codigo;
    public function getCodigo() : string {
        return $this-&amp;gt;codigo;
    }
    // Método abstracto
    abstract public function mostrarResumen();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quan una classe hereta d&#39;una classe abstracta, obligatòriament ha d&#39;implementar els mètodes que té el pare marcats com a abstractes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Tv extends Producto {
    public $pulgadas;
    public $tecnologia;

    public function mostrarResumen() { //obligado a implementarlo
        echo &amp;quot;&amp;lt;p&amp;gt;Código &amp;quot;.$this-&amp;gt;getCodigo().&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        echo &amp;quot;&amp;lt;p&amp;gt;TV &amp;quot;.$this-&amp;gt;tecnologia.&amp;quot; de &amp;quot;.$this-&amp;gt;pulgadas.&amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
    }
}

$t = new Tv();
echo $t-&amp;gt;getCodigo();
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;classes-finals&quot; tabindex=&quot;-1&quot;&gt;Classes finals&lt;/h4&gt;
&lt;p&gt;Són classes oposades a abstractes, ja que eviten que es puga heretar una classe o mètode per a sobreescriure-ho.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Producto {
    private $codigo;

    public function getCodigo() : string {
        return $this-&amp;gt;codigo;
    }

    final public function mostrarResumen() : string {
        return &amp;quot;Producto &amp;quot;.$this-&amp;gt;codigo;
    }
}

// No podremos heredar de Microondas
final class Microondas extends Producto {
    private $potencia;

    public function getPotencia() : int {
        return $this-&amp;gt;potencia;
    }

    // No podemos implementar mostrarResumen()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;interficies&quot; tabindex=&quot;-1&quot;&gt;Interfícies&lt;/h4&gt;
&lt;p&gt;Permet definir un contracte amb les signatures dels mètodes a complir. Així doncs, només conté declaracions de funcions i totes han de ser públiques.&lt;/p&gt;
&lt;p&gt;Es declaren amb la paraula clau &lt;code&gt;interface&lt;/code&gt; i després les classes que complisquen el contracte el realitzen mitjançant la paraula clau &lt;code&gt;implements&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
interface Nombreable {
// declaración de funciones
}
class NombreClase implements NombreInterfaz {
// código de la clase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es permet l&#39;herència d&#39;interfícies. A més, una classe pot implementar diverses interfícies (en aquest cas, sí que suporta l&#39;herència múltiple, però només d&#39;interfícies).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
interface Mostrable {
    public function mostrarResumen() : string;
}

interface MostrableTodo extends Mostrable {
    public function mostrarTodo() : string;
}

interface Facturable {
    public function generarFactura() : string;
}

class Producto implements MostrableTodo, Facturable {
    // Implementaciones de los métodos
    // Obligatoriamente deberá implementar public function mostrarResumen, mostrarTodo y generarFactura
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;metodes-encadenats&quot; tabindex=&quot;-1&quot;&gt;Mètodes encadenats&lt;/h4&gt;
&lt;p&gt;Segueix el plantejament de la programació funcional, i també es coneix com &lt;em&gt;method chaining&lt;/em&gt;. Planteja que sobre un objecte es realitzen diverses crides.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$p1 = new Libro();
$p1-&amp;gt;setNombre(&amp;quot;Harry Potter&amp;quot;);
$p1-&amp;gt;setAutor(&amp;quot;JK Rowling&amp;quot;);
echo $p1;

// Method chaining
$p2 = new Libro();
$p2-&amp;gt;setNombre(&amp;quot;Patria&amp;quot;)-&amp;gt;setAutor(&amp;quot;Aramburu&amp;quot;);
echo $p2;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Per a facilitar-ho, modificarem tots els seus mètodes mutants (que modifiquen dades, setters*, ...) perquè retornen una referència a &lt;code&gt;$this&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Libro {
    private string $nombre;
    private string $autor;

    public function getNombre() : string {
        return $this-&amp;gt;nombre;
    }
    public function setNombre(string $nombre) : Libro { 
        $this-&amp;gt;nombre = $nombre;
        return $this;
    }

    public function getAutor() : string {
        return $this-&amp;gt;autor;
    }
    public function setAutor(string $autor) : Libro {
        $this-&amp;gt;autor = $autor;
        return $this;
    }

    public function __toString() : string {
        return $this-&amp;gt;nombre.&amp;quot; de &amp;quot;.$this-&amp;gt;autor;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;metodes-magics&quot; tabindex=&quot;-1&quot;&gt;Mètodes màgics&lt;/h4&gt;
&lt;p&gt;Totes les classes PHP ofereixen un conjunt de mètodes, també coneguts com &lt;em&gt;magic methods&lt;/em&gt; que es poden sobreescriure per a substituir el seu comportament. Alguns d&#39;ells ja els hem utilitzats.&lt;/p&gt;
&lt;p&gt;Davant qualsevol dubte, és convenient consultar la &lt;a href=&quot;https://www.php.net/manual/es/language.oop5.magic.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Els més destacables són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__construct()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__destruct()&lt;/code&gt; → s&#39;invoca en perdre la referència. S&#39;utilitza per a tancar una connexió a la BD, tancar un fitxer, ...&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__toString()&lt;/code&gt; → representació de l&#39;objecte com a cadena. És a dir, quan fem &lt;code&gt;echo $objecte&lt;/code&gt; s&#39;executa automàticament aquest mètode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__get(propietat)&lt;/code&gt;, &lt;code&gt;__set(propietat, valor)&lt;/code&gt; → Permetria accedir a les propietat privades, encara que sempre és més llegible/mantenible codificar els &lt;em&gt;getter/setter&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__isset(propietat)&lt;/code&gt;, &lt;code&gt;__unset(propietat)&lt;/code&gt; → Permet esbrinar o llevar el valor a una propietat.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__sleep()&lt;/code&gt;, &lt;code&gt;__wakeup()&lt;/code&gt; → S&#39;executen en recuperar (*unserialize^) o emmagatzemar un objecte que se serialitza (*serialize), i s&#39;utilitzen per a permet definir quines propietats se serialitzen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__call()&lt;/code&gt;, &lt;code&gt;__callStatic()&lt;/code&gt; → S&#39;executen en cridar a un mètode que no és públic. Permeten sobrecarreguen mètodes.&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/2-principis-de-la-poo/" >
        </entry>
        <entry>
            <title>
                15. Autoavaluació Programació Orientada a Objectes en PHP
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/15-autoavaluacio-programacio-orientada-a-objectes-en-php/</id>
            <content type="html">
                &lt;h4 id=&quot;exercici-1-constructors-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Constructors en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és la funció principal d&#39;un constructor en una classe PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1a&quot; name=&quot;question1&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q1a&quot;&gt;a) Destruir els objectes de la classe quan ja no són necessaris.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1b&quot; name=&quot;question1&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q1b&quot;&gt;b) Inicialitzar les propietats de l&#39;objecte quan es crea.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1c&quot; name=&quot;question1&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q1c&quot;&gt;c) Executar una funció arbitrària abans de cada mètode.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1d&quot; name=&quot;question1&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q1d&quot;&gt;d) Crear mètodes màgics automàticament.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer1()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result1&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer1() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question1&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Inicialitzar les propietats de l&#39;objecte quan es crea.&quot;;
    document.getElementById(&#39;result1&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-2-herencia-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 2: Herència en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-1&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és l&#39;avantatge principal de l&#39;herència en la programació orientada a objectes?&lt;/p&gt;
&lt;h5 id=&quot;opcions-1&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2a&quot; name=&quot;question2&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q2a&quot;&gt;a) Permet reutilitzar codi definint classes noves basades en classes existents.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2b&quot; name=&quot;question2&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q2b&quot;&gt;b) Permet ocultar totes les propietats i mètodes de la classe.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2c&quot; name=&quot;question2&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q2c&quot;&gt;c) Permet definir funcions globals sense necessitat de classes.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q2d&quot; name=&quot;question2&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q2d&quot;&gt;d) Permet cridar a funcions de JavaScript des de PHP.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer2()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result2&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer2() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question2&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet reutilitzar codi definint classes noves basades en classes existents.&quot;;
    document.getElementById(&#39;result2&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-3-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Exercici 3: Polimorfisme&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-2&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Què permet el polimorfisme en el context de la POO?&lt;/p&gt;
&lt;h5 id=&quot;opcions-2&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3a&quot; name=&quot;question3&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q3a&quot;&gt;a) Permet que una funció tinga múltiples implementacions depenent de l&#39;objecte que la cride.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3b&quot; name=&quot;question3&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q3b&quot;&gt;b) Permet la creació d&#39;objectes a partir de funcions anònimes.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3c&quot; name=&quot;question3&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q3c&quot;&gt;c) Permet la connexió entre PHP i bases de dades relacionals.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3d&quot; name=&quot;question3&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q3d&quot;&gt;d) Permet executar múltiples scripts PHP alhora.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer3()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result3&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer3() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question3&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet que una funció tinga múltiples implementacions depenent de l&#39;objecte que la cride.&quot;;
    document.getElementById(&#39;result3&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-4-espais-de-noms&quot; tabindex=&quot;-1&quot;&gt;Exercici 4: Espais de Noms&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-3&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Per a què s&#39;utilitzen els espais de noms (namespaces) en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-3&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4a&quot; name=&quot;question4&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q4a&quot;&gt;a) Per executar codi PHP de forma asincrònica.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4b&quot; name=&quot;question4&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q4b&quot;&gt;b) Per evitar conflictes entre noms de classes, funcions o constants en diferents parts del codi.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4c&quot; name=&quot;question4&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q4c&quot;&gt;c) Per definir variables globals accessibles des de qualsevol punt del codi.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4d&quot; name=&quot;question4&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q4d&quot;&gt;d) Per importar codi d&#39;altres llenguatges de programació com JavaScript.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer4()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result4&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer4() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question4&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Per evitar conflictes entre noms de classes, funcions o constants en diferents parts del codi.&quot;;
    document.getElementById(&#39;result4&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-5-traits-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 5: Traits en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-4&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quin avantatge ofereixen els traits en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-4&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5a&quot; name=&quot;question5&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q5a&quot;&gt;a) Permet escriure codi reutilitzable que es pot incloure en múltiples classes, independentment de la jerarquia d&#39;herència.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5b&quot; name=&quot;question5&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q5b&quot;&gt;b) Permet la creació de funcions globals en PHP.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5c&quot; name=&quot;question5&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q5c&quot;&gt;c) Permet la comunicació entre diferents servidors web.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5d&quot; name=&quot;question5&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q5d&quot;&gt;d) Permet executar codi PHP dins de plantilles HTML.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer5()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result5&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer5() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question5&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet escriure codi reutilitzable que es pot incloure en múltiples classes, independentment de la jerarquia d&#39;herència.&quot;;
    document.getElementById(&#39;result5&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-6-excepcions-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 6: Excepcions en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-5&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és la finalitat d&#39;utilitzar excepcions en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-5&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6a&quot; name=&quot;question6&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q6a&quot;&gt;a) Evitar l&#39;execució de codi mal format.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6b&quot; name=&quot;question6&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q6b&quot;&gt;b) Gestionar errors i condicions excepcionals de manera controlada dins d&#39;una aplicació.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6c&quot; name=&quot;question6&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q6c&quot;&gt;c) Declarar funcions dins d&#39;una classe.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q6d&quot; name=&quot;question6&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q6d&quot;&gt;d) Garantir que totes les variables estiguen inicialitzades abans del seu ús.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer6()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result6&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer6() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question6&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Gestionar errors i condicions excepcionals de manera controlada dins d&#39;una aplicació.&quot;;
    document.getElementById(&#39;result6&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-7-autoloading-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 7: Autoloading en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-6&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quin avantatge ofereix l&#39;autoloading en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-6&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7a&quot; name=&quot;question7&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q7a&quot;&gt;a) Permet que les classes es carreguen automàticament quan s&#39;utilitzen, sense necessitat de fer incloure manualment cada fitxer.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7b&quot; name=&quot;question7&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q7b&quot;&gt;b) Permet l&#39;execució de múltiples scripts alhora.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7c&quot; name=&quot;question7&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q7c&quot;&gt;c) Permet la manipulació de fitxers en el servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7d&quot; name=&quot;question7&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q7d&quot;&gt;d) Permet la connexió amb bases de dades.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer7()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result7&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer7() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question7&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Permet que les classes es carreguen automàticament quan s&#39;utilitzen, sense necessitat de fer incloure manualment cada fitxer.&quot;;
    document.getElementById(&#39;result7&#39;).innerText = resultText;
}
&lt;/script&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/15-autoavaluacio-programacio-orientada-a-objectes-en-php/" >
        </entry>
        <entry>
            <title>
                14. Enunciat dels projectes
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/14-enunciat-dels-projectes/</id>
            <content type="html">
                &lt;h3 id=&quot;projecte-and-quot-ofegat-and-quot&quot; tabindex=&quot;-1&quot;&gt;Projecte &amp;quot;Ofegat&amp;quot;&lt;/h3&gt;
&lt;h4 id=&quot;1-refactoritzacio-amb-programacio-orientada-a-objectes-poo&quot; tabindex=&quot;-1&quot;&gt;1. Refactorització amb Programació Orientada a Objectes (POO)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Crear una Classe &lt;code&gt;JocOfegat&lt;/code&gt;&lt;/strong&gt;: Refactoritza la lògica principal del joc en una classe &lt;code&gt;JocOfegat&lt;/code&gt; que gestione l&#39;estat del joc, la paraula a endevinar, les lletres endevinades, i el nombre d&#39;intents restants.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mètodes Principals&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iniciarJoc($paraula): void&lt;/code&gt; – Inicia una nova partida amb la paraula donada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endevinaLletra($lletra): bool&lt;/code&gt; – Comprova si la lletra és part de la paraula i actualitza l&#39;estat del joc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;estaAcabat(): bool&lt;/code&gt; – Retorna &lt;code&gt;true&lt;/code&gt; si el joc ha acabat, ja siga per guanyar o per perdre.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obteEstat(): array&lt;/code&gt; – Retorna l&#39;estat actual del joc, incloent les lletres encertades, intents restants, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-separacio-del-model-de-negoci-de-la-presentacio&quot; tabindex=&quot;-1&quot;&gt;2. Separació del Model de Negoci de la Presentació&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model-Vista-Controlador (MVC)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: La classe JocOfegat actua com a model, gestionant la lògica del joc i mantenint l&#39;estat. Aquest model ha d&#39;estar completament separat de qualsevol codi que gestione la presentació (HTML, CSS).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vista&lt;/strong&gt;: Crea vistes que s&#39;encarreguen exclusivament de mostrar la informació a l&#39;usuari. Aquestes vistes poden utilitzar plantilles HTML i accedir al model a través de controladors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controlador&lt;/strong&gt;: El controlador serà responsable de rebre les entrades de l&#39;usuari (com l&#39;endevinació d&#39;una lletra), interactuar amb el model (JocOfegat) per actualitzar l&#39;estat del joc, i seleccionar la vista adequada per a mostrar els resultats a l&#39;usuari.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-integracio-de-composer-i-autoloading&quot; tabindex=&quot;-1&quot;&gt;3. Integració de Composer i Autoloading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configuració de Composer&lt;/strong&gt;: Utilitza Composer per gestionar les dependències del projecte. Defineix l&#39;autoloading per carregar automàticament les classes de &lt;code&gt;JocOfegat&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estructura del Projecte&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Organitza el codi en directoris com &lt;code&gt;src/Models&lt;/code&gt; per a les classes del joc, i &lt;code&gt;src/Services&lt;/code&gt; per a la gestió de sessions i autenticació.&lt;/li&gt;
&lt;li&gt;Defineix un &lt;code&gt;composer.json&lt;/code&gt; per configurar l&#39;autoloading PSR-4.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-proves-amb-php-unit&quot; tabindex=&quot;-1&quot;&gt;4. Proves amb PHPUnit&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escriu Proves Unitàries&lt;/strong&gt;: Crea proves unitàries per a la classe &lt;code&gt;JocOfegat&lt;/code&gt; utilitzant PHPUnit. Les proves poden incloure:
&lt;ul&gt;
&lt;li&gt;Prova per assegurar que una paraula es configura correctament.&lt;/li&gt;
&lt;li&gt;Prova per verificar que una lletra encertada actualitza l&#39;estat correctament.&lt;/li&gt;
&lt;li&gt;Prova per assegurar que el joc detecta correctament quan s&#39;ha guanyat o perdut.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prova de Gestió de Sessions&lt;/strong&gt;: Afig proves per a la gestió de sessions, comprovant que l&#39;estat del joc es guarda i es recupera correctament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5-logger-amb-monolog&quot; tabindex=&quot;-1&quot;&gt;5. Logger amb Monolog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configuració de Logger&lt;/strong&gt;: Utilitza &lt;code&gt;Monolog&lt;/code&gt; per registrar esdeveniments importants, com quan s&#39;inicia un nou joc, quan un jugador endevina una lletra o quan es produeixen errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diversos Handlers&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Registra missatges a un fitxer &lt;code&gt;game.log&lt;/code&gt; per a esdeveniments generals.&lt;/li&gt;
&lt;li&gt;Afig un handler per registrar errors greus, com intents invàlids o problemes de sessió, en un fitxer d&#39;errors separat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;projecte-and-quot-4-en-ratlla-and-quot&quot; tabindex=&quot;-1&quot;&gt;Projecte &amp;quot;4 en Ratlla&amp;quot;&lt;/h3&gt;
&lt;h4 id=&quot;1-refactoritzacio-amb-programacio-orientada-a-objectes-poo-1&quot; tabindex=&quot;-1&quot;&gt;1. Refactorització amb Programació Orientada a Objectes (POO)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Classe &lt;code&gt;Joc4enRatlla&lt;/code&gt;&lt;/strong&gt;: Refactoritza la lògica del joc en una classe &lt;code&gt;Joc4enRatlla&lt;/code&gt; que gestione la graella, el torn del jugador, i la lògica per determinar el guanyador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mètodes Principals&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iniciarPartida(): void&lt;/code&gt; – Inicia una nova partida.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ferMoviment($columna): bool&lt;/code&gt; – Permet que un jugador faça un moviment en una columna determinada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;comprovaGuanyador(): ?int&lt;/code&gt; – Comprova si hi ha un guanyador després d&#39;un moviment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obteEstatGraella(): array&lt;/code&gt; – Retorna l&#39;estat actual de la graella.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-separacio-del-model-de-negoci-de-la-presentacio-1&quot; tabindex=&quot;-1&quot;&gt;2. Separació del Model de Negoci de la Presentació&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model-Vista-Controlador (MVC)&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: La classe Joc4enRatlla representa el model, que s&#39;encarrega de tota la lògica del joc, incloent la gestió de la graella i la determinació del guanyador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Vista&lt;/strong&gt;: Les vistes presenten la graella del joc, el torn actual del jugador, i els resultats finals (guanyador o empat). Aquestes vistes han d&#39;estar separades del model i només han de mostrar la informació proporcionada pel controlador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controlador&lt;/strong&gt;: El controlador gestiona les interaccions de l&#39;usuari, com els moviments en la graella. Aquest component comunica el model amb les vistes, assegurant-se que els canvis en l&#39;estat del joc es reflectisquen correctament en la presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-integracio-de-composer-i-autoloading-1&quot; tabindex=&quot;-1&quot;&gt;3. Integració de Composer i Autoloading&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configuració de Composer&lt;/strong&gt;: Defineix un &lt;code&gt;composer.json&lt;/code&gt; per al projecte, configurant l&#39;autoloading PSR-4 per carregar automàticament les classes de &lt;code&gt;Joc4enRatlla&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Estructura del Projecte&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Organitza el codi en directoris com &lt;code&gt;src/Models&lt;/code&gt; per a les classes del joc i &lt;code&gt;src/Controllers&lt;/code&gt; per a la gestió del flux del joc.&lt;/li&gt;
&lt;li&gt;Configura Composer per gestionar les dependències del projecte.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;4-proves-amb-php-unit-1&quot; tabindex=&quot;-1&quot;&gt;4. Proves amb PHPUnit&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escriu Proves Unitàries&lt;/strong&gt;: Crea proves unitàries per a la classe &lt;code&gt;Joc4enRatlla&lt;/code&gt; utilitzant PHPUnit. Les proves poden incloure:
&lt;ul&gt;
&lt;li&gt;Verificació de la configuració inicial de la graella.&lt;/li&gt;
&lt;li&gt;Proves per assegurar que un moviment s&#39;aplica correctament a la graella.&lt;/li&gt;
&lt;li&gt;Proves per assegurar que el joc detecta correctament un guanyador o un empat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves de Gestió de Sessions&lt;/strong&gt;: Afig proves per assegurar que l&#39;estat del joc i el torn del jugador es mantenen correctament a través de les sessions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;5-logger-amb-monolog-1&quot; tabindex=&quot;-1&quot;&gt;5. Logger amb Monolog&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Configuració de Logger&lt;/strong&gt;: Utilitza &lt;code&gt;Monolog&lt;/code&gt; per registrar esdeveniments importants del joc, com quan un jugador fa un moviment, quan s&#39;inicia una nova partida, o quan es produeixen errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diversos Handlers&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;Registra els moviments dels jugadors i els resultats del joc en un fitxer &lt;code&gt;game.log&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Registra errors greus o problemes amb les sessions en un fitxer d&#39;errors separat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;consideracions-addicionals-per-a-ambdos-projectes&quot; tabindex=&quot;-1&quot;&gt;Consideracions Addicionals per a Ambdós Projectes&lt;/h3&gt;
&lt;h4 id=&quot;1-documentacio-amb-php-doc&quot; tabindex=&quot;-1&quot;&gt;1. Documentació amb PHPDoc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentació Completa&lt;/strong&gt;: Documenta totes les classes i mètodes amb comentaris PHPDoc. Això inclou les descripcions dels paràmetres i els valors de retorn per a cada mètode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Generació Automàtica&lt;/strong&gt;: Utilitza &lt;code&gt;phpDocumentor&lt;/code&gt; o una eina similar per generar la documentació automàticament. Afig la documentació generada al projecte per facilitar el manteniment i la comprensió del codi.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-implementacio-d-interficies&quot; tabindex=&quot;-1&quot;&gt;2. Implementació d&#39;Interfícies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interfície &lt;code&gt;JocInterface&lt;/code&gt;&lt;/strong&gt;: Crea una interfície que definisca els mètodes bàsics que qualsevol joc (com Ofegat o 4 en Ratlla) ha de tindre (&lt;code&gt;iniciarJoc&lt;/code&gt;, &lt;code&gt;ferMoviment&lt;/code&gt;, &lt;code&gt;comprovaGuanyador&lt;/code&gt;, etc.). Assegura&#39;t que les classes &lt;code&gt;JocOfegat&lt;/code&gt; i &lt;code&gt;Joc4enRatlla&lt;/code&gt; implementen aquesta interfície.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-serialitzacio-i-persistencia&quot; tabindex=&quot;-1&quot;&gt;3. Serialització i Persistència&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Serialització de l&#39;Estat del Joc&lt;/strong&gt;: Implementa funcionalitats per serialitzar l&#39;estat del joc (usant JSON o &lt;code&gt;serialize()&lt;/code&gt;) i deserialitzar-lo per mantenir la persistència entre sessions o guardar l&#39;estat per a reprendre la partida posteriorment.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rubrica-d-avaluacio-per-als-projectes-and-quot-ofegat-and-quot-i-and-quot-4-en-ratlla-and-quot&quot; tabindex=&quot;-1&quot;&gt;Rúbrica d&#39;Avaluació per als Projectes &amp;quot;Ofegat&amp;quot; i &amp;quot;4 en Ratlla&amp;quot;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Criteri&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;** Insuficient (1 punt)**&lt;/th&gt;
&lt;th&gt;** Adequat (2 punts)**&lt;/th&gt;
&lt;th&gt;** Bé (3 punts)**&lt;/th&gt;
&lt;th&gt;** Excel·lent (4 punts)**&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Implementació de Programació Orientada a Objectes (POO)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Les classes no estan ben dissenyades, falta encapsulació, ús incorrecte d&#39;herència, o mètodes no funcional.&lt;/td&gt;
&lt;td&gt;Les classes estan creades però poden tindre errors o una estructura confusa. S&#39;aplica la POO de manera bàsica, però hi ha problemes de disseny.&lt;/td&gt;
&lt;td&gt;Classes correctament estructurades i funcionalment completes. Ús adequat d&#39;encapsulació, herència i polimorfisme.&lt;/td&gt;
&lt;td&gt;Disseny de classes ben organitzat, reutilitzable i amb una implementació clara dels principis de POO.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Separació del Model de Negoci de la Presentació (MVC)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;ha implementat la separació de model i presentació; el codi de lògica i presentació està mesclat.&lt;/td&gt;
&lt;td&gt;Hi ha una separació parcial, però algunes parts de la lògica del negoci es barregen amb la presentació o a l&#39;inrevés.&lt;/td&gt;
&lt;td&gt;La separació entre model, vista i controlador està ben implementada, però podria millorar en alguns aspectes.&lt;/td&gt;
&lt;td&gt;Excel·lent separació entre el model, vista i controlador, seguint els principis del patró MVC i mantenint un codi net.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Integració de Composer i Autoloading&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;ha configurat Composer o l&#39;autoloading, o està mal configurat i no funciona correctament.&lt;/td&gt;
&lt;td&gt;Composer s&#39;ha utilitzat, però amb una estructura de projectes i autoloading bàsics o incorrectes.&lt;/td&gt;
&lt;td&gt;Composer i l&#39;autoloading estan configurats correctament amb una estructura de projectes ben definida.&lt;/td&gt;
&lt;td&gt;Ús excel·lent de Composer amb una configuració avançada d&#39;autoloading i una estructura de projecte organitzada i modular.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Implementació de Proves amb PHPUnit&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;han creat proves, o les proves creades són mínimes i no adequades per a verificar la funcionalitat.&lt;/td&gt;
&lt;td&gt;Es presenten proves bàsiques amb PHPUnit, però cobreixen parcialment les funcionalitats requerides.&lt;/td&gt;
&lt;td&gt;Proves unitàries completes que cobreixen la majoria dels casos, incloent proves de gestió de sessions i lògica de joc.&lt;/td&gt;
&lt;td&gt;Proves exhaustives que cobreixen totes les funcionalitats i consideren casos límit, amb ús de mocks quan necessari.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ús de Logger amb Monolog&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No s&#39;ha implementat el logger o no s&#39;utilitza de manera efectiva per registrar esdeveniments importants.&lt;/td&gt;
&lt;td&gt;Logger implementat, però amb ús limitat o incorrecte en la registració d&#39;esdeveniments i errors.&lt;/td&gt;
&lt;td&gt;Logger ben implementat, amb esdeveniments i errors registrats adequadament en diferents fitxers o canals.&lt;/td&gt;
&lt;td&gt;Ús avançat de logger amb diferents handlers per registrar informació, errors, i seguiment detallat del flux del joc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Falta documentació o és insuficient per comprendre les classes i mètodes del projecte.&lt;/td&gt;
&lt;td&gt;Documentació bàsica amb PHPDoc, però amb omisions o descripcions poc clares.&lt;/td&gt;
&lt;td&gt;Documentació completa amb PHPDoc per a totes les classes i mètodes, amb descripcions clares i detallades.&lt;/td&gt;
&lt;td&gt;Documentació excel·lent amb PHPDoc, ben estructurada i completa, facilitant la comprensió i manteniment del projecte.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Qualitat del Codi i Bones Pràctiques&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Codi desorganitzat, amb molts errors de sintaxi, mala nomenclatura, o sense bones pràctiques de codi.&lt;/td&gt;
&lt;td&gt;Codi funcional però amb problemes d&#39;estructura, estil inconsistent o incompliment parcial de bones pràctiques.&lt;/td&gt;
&lt;td&gt;Codi ben escrit, seguint les convencions de nomenclatura i bones pràctiques de desenvolupament.&lt;/td&gt;
&lt;td&gt;Codi de qualitat professional, net, ben organitzat, i seguint rigorosament les millors pràctiques de programació.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;explicacio-dels-criteris&quot; tabindex=&quot;-1&quot;&gt;Explicació dels Criteris&lt;/h3&gt;
&lt;h4 id=&quot;strong-1-punt-insuficient-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;1 punt: Insuficient&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: Les classes no segueixen els principis bàsics de la programació orientada a objectes. Hi ha problemes greus com la falta d&#39;encapsulació, l&#39;ús inadequat de l&#39;herència o mètodes que no funcionen correctament.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: No s&#39;ha implementat la separació del model de negoci i la presentació. El codi de la lògica del negoci està mesclat amb la presentació (HTML, CSS), cosa que dificulta el manteniment i l&#39;escalabilitat del projecte.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: No s&#39;ha configurat Composer o l&#39;autoloading. Si estan configurats, no funcionen correctament.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Les proves estan absents o són mínimes, i no verifiquen adequadament la funcionalitat del projecte.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: El logger no s&#39;ha implementat, o si està present, no s&#39;utilitza de manera efectiva per registrar esdeveniments importants.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: Falta documentació essencial, o la que existeix és insuficient per a entendre el codi.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi és desorganitzat, amb molts errors de sintaxi i no segueix les bones pràctiques de programació.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;strong-2-punts-adequat-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;2 punts: Adequat&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: Les classes estan creades, però poden contindre errors o una estructura confusa. L&#39;aplicació de la POO és bàsica, amb alguns problemes de disseny.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: Hi ha una separació parcial entre el model de negoci i la presentació. No obstant això, encara hi ha parts del codi on la lògica del negoci està barrejada amb la presentació o a l&#39;inrevés, cosa que indica una comprensió bàsica però incompleta del patró MVC.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: Composer s&#39;ha utilitzat, però l&#39;estructura de projectes o l&#39;autoloading no són òptims, presentant configuracions bàsiques o incorrectes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Es presenten proves bàsiques que cobreixen parcialment les funcionalitats requerides.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: El logger està implementat, però l&#39;ús és limitat o incorrecte en la registració d&#39;esdeveniments i errors.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: La documentació amb PHPDoc és bàsica, amb algunes omisions o descripcions poc clares.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi és funcional però presenta problemes d&#39;estructura, estil inconsistent o incompliment parcial de bones pràctiques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;strong-3-punts-be-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;3 punts: Bé&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: Les classes estan correctament estructurades i són funcionalment completes. Es fa un ús adequat de l&#39;encapsulació, l&#39;herència i el polimorfisme.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: La separació entre el model, vista i controlador està ben implementada, seguint majoritàriament els principis del patró MVC. El codi és clar i estructurat, amb algunes àrees que podrien millorar-se per aconseguir una millor modularitat i mantenibilitat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: Composer i l&#39;autoloading estan configurats correctament, amb una estructura de projectes ben definida.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Les proves unitàries estan completes i cobreixen la majoria dels casos, incloent-hi la gestió de sessions i la lògica del joc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: El logger està ben implementat, amb esdeveniments i errors registrats adequadament en diferents fitxers o canals.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: La documentació amb PHPDoc és completa per a totes les classes i mètodes, amb descripcions clares i detallades.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi està ben escrit, seguint les convencions de nomenclatura i les bones pràctiques de desenvolupament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;strong-4-punts-excel-lent-strong&quot; tabindex=&quot;-1&quot;&gt;&lt;strong&gt;4 punts: Excel·lent&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;POO&lt;/strong&gt;: El disseny de classes està ben organitzat, és reutilitzable i implementa clarament els principis de la programació orientada a objectes. El codi és elegant i eficient.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MVC&lt;/strong&gt;: Excel·lent separació entre el model, vista i controlador, seguint rigorosament els principis del patró MVC. El codi està ben organitzat, modular i fàcil de mantenir, cosa que facilita l&#39;escalabilitat del projecte. Hi ha una clara distinció de responsabilitats entre les diferents capes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Composer i Autoloading&lt;/strong&gt;: S&#39;utilitza Composer de manera excel·lent, amb una configuració avançada de l&#39;autoloading i una estructura de projecte organitzada i modular.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proves amb PHPUnit&lt;/strong&gt;: Les proves són exhaustives, cobrint totes les funcionalitats i considerant casos límit, amb ús de mocks quan necessari.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logger amb Monolog&lt;/strong&gt;: S&#39;utilitza el logger de manera avançada, amb diferents handlers per registrar informació, errors, i fer un seguiment detallat del flux del joc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació amb PHPDoc&lt;/strong&gt;: La documentació amb PHPDoc és excel·lent, ben estructurada i completa, facilitant la comprensió i el manteniment del projecte.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualitat del Codi&lt;/strong&gt;: El codi és de qualitat professional, net, ben organitzat, i segueix rigorosament les millors pràctiques de programació.&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/14-enunciat-dels-projectes/" >
        </entry>
        <entry>
            <title>
                13. Exercicis
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/13-exercicis/</id>
            <content type="html">
                &lt;h3 id=&quot;bateria-d-exercicis-solucionats-per-a-la-unitat-de-programacio-orientada-a-objectes&quot; tabindex=&quot;-1&quot;&gt;Bateria d&#39;Exercicis Solucionats per a la Unitat de Programació Orientada a Objectes&lt;/h3&gt;
&lt;h5 id=&quot;exercici-1-crear-una-classe-basica&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Crear una Classe Bàsica&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe &lt;code&gt;Cotxe&lt;/code&gt; que tinga les propietats &lt;code&gt;marca&lt;/code&gt; i &lt;code&gt;model&lt;/code&gt;. Afegeix un mètode &lt;code&gt;mostraInformacio&lt;/code&gt; que retorne un string amb la marca i el model del cotxe.&lt;/li&gt;
&lt;li&gt;Crea una instància de la classe &lt;code&gt;Cotxe&lt;/code&gt;, assigna-li una marca i un model, i mostra la informació utilitzant el mètode &lt;code&gt;mostraInformacio&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Cotxe {
    public $marca;
    public $model;

    public function mostraInformacio() {
        return &amp;quot;Marca: &amp;quot; . $this-&amp;gt;marca . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;model;
    }
}
 
$cotxe = new Cotxe();
$cotxe-&amp;gt;marca = &amp;quot;Toyota&amp;quot;;
$cotxe-&amp;gt;model = &amp;quot;Corolla&amp;quot;;
echo $cotxe-&amp;gt;mostraInformacio(); // Output: Marca: Toyota, Model: Corolla
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;exercici-2-afegir-un-constructor-i-destructor&quot; tabindex=&quot;-1&quot;&gt;Exercici 2. Afegir un Constructor i destructor&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Modifica la classe &lt;code&gt;Cotxe&lt;/code&gt; per afegir un constructor que prenga com a paràmetres la &lt;code&gt;marca&lt;/code&gt; i el &lt;code&gt;model&lt;/code&gt;, i que establisca aquestes propietats automàticament.&lt;/li&gt;
&lt;li&gt;Afegeix un destructor a la classe &lt;code&gt;Cotxe&lt;/code&gt; que mostre un missatge quan l&#39;objecte és destruït. Crea un objecte i permet que es destruïsca al final del programa.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Cotxe {
    public $marca;
    public $model;

    public function __construct($marca, $model) {
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }
    public function __destruct() {
        echo &amp;quot;L&#39;objecte Cotxe ha estat destruït.&#92;n&amp;quot;;
    }

    public function mostraInformacio() {
        return &amp;quot;Marca: &amp;quot; . $this-&amp;gt;marca . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;model;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;exercici-3-encapsulacio-de-propietats&quot; tabindex=&quot;-1&quot;&gt;Exercici 3. Encapsulació de Propietats&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Modifica la classe &lt;code&gt;Cotxe&lt;/code&gt; per a que les propietats &lt;code&gt;marca&lt;/code&gt; i &lt;code&gt;model&lt;/code&gt; siguen privades. Afegeix mètodes públics &lt;code&gt;getMarca&lt;/code&gt;, &lt;code&gt;setMarca&lt;/code&gt;, &lt;code&gt;getModel&lt;/code&gt;, i &lt;code&gt;setModel&lt;/code&gt; per accedir i modificar aquestes propietats.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Cotxe {
    private $marca;
    private $model;

    public function __construct($marca, $model) {
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }

    public function getMarca() {
        return $this-&amp;gt;marca;
    }

    public function setMarca($marca) {
        $this-&amp;gt;marca = $marca;
    }

    public function getModel() {
        return $this-&amp;gt;model;
    }

    public function setModel($model) {
        $this-&amp;gt;model = $model;
    }

    public function mostraInformacio() {
        return &amp;quot;Marca: &amp;quot; . $this-&amp;gt;getMarca() . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;getModel();
    }
}

$cotxe = new Cotxe(&amp;quot;Ford&amp;quot;, &amp;quot;Fiesta&amp;quot;);
echo $cotxe-&amp;gt;mostraInformacio(); // Output: Marca: Ford, Model: Fiesta
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;exercici-4-herencia-i-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Exercici 4. Herència i Polimorfisme&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe &lt;code&gt;Vehicle&lt;/code&gt; amb una propietat &lt;code&gt;tipus&lt;/code&gt;. A continuació, crea una classe &lt;code&gt;Motocicleta&lt;/code&gt; que herete de &lt;code&gt;Vehicle&lt;/code&gt; i tinga una propietat &lt;code&gt;cilindrada&lt;/code&gt;. Afegeix un mètode a &lt;code&gt;Motocicleta&lt;/code&gt; que retorne el tipus i la cilindrada.&lt;/li&gt;
&lt;li&gt;Crea una funció &lt;code&gt;mostraDetallsVehicle&lt;/code&gt; que accepte un objecte de tipus &lt;code&gt;Vehicle&lt;/code&gt; i mostre les seues propietats. Prova aquesta funció amb objectes de &lt;code&gt;Cotxe&lt;/code&gt; i &lt;code&gt;Motocicleta&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Vehicle {
    protected $tipus;

    public function __construct($tipus) {
        $this-&amp;gt;tipus = $tipus;
    }

    public function mostraDetalls() {
        return &amp;quot;Tipus: &amp;quot; . $this-&amp;gt;tipus;
    }
}

class Cotxe extends Vehicle {
    private $marca;
    private $model;

    public function __construct($marca, $model) {
        parent::__construct(&amp;quot;Cotxe&amp;quot;);
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }

    public function mostraDetalls() {
        return parent::mostraDetalls() . &amp;quot;, Marca: &amp;quot; . $this-&amp;gt;marca . &amp;quot;, Model: &amp;quot; . $this-&amp;gt;model;
    }
}

class Motocicleta extends Vehicle {
    private $cilindrada;

    public function __construct($cilindrada) {
        parent::__construct(&amp;quot;Motocicleta&amp;quot;);
        $this-&amp;gt;cilindrada = $cilindrada;
    }

    public function mostraDetalls() {
        return parent::mostraDetalls() . &amp;quot;, Cilindrada: &amp;quot; . $this-&amp;gt;cilindrada;
    }
}

function mostraDetallsVehicle(Vehicle $vehicle) {
    echo $vehicle-&amp;gt;mostraDetalls() . &amp;quot;&#92;n&amp;quot;;
}

$cotxe = new Cotxe(&amp;quot;Toyota&amp;quot;, &amp;quot;Corolla&amp;quot;);
$moto = new Motocicleta(600);

mostraDetallsVehicle($cotxe); // Output: Tipus: Cotxe, Marca: Toyota, Model: Corolla
mostraDetallsVehicle($moto);  // Output: Tipus: Motocicleta, Cilindrada: 600
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;exercici-5-implementacio-del-patro-mvc-amb-vehicles&quot; tabindex=&quot;-1&quot;&gt;Exercici 5. Implementació del Patró MVC amb Vehicles&lt;/h5&gt;
&lt;p&gt;Continuant amb l&#39;exercici anterior on has creat les classes &lt;code&gt;Vehicle&lt;/code&gt;, &lt;code&gt;Cotxe&lt;/code&gt;, i &lt;code&gt;Motocicleta&lt;/code&gt;, ara refactoritzaràs el codi per seguir el patró Model-Vista-Controlador (MVC). El teu objectiu és separar la lògica de negoci (models) de la presentació (vistes) i gestionar la interacció entre aquestes capes mitjançant un controlador.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Model&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Refactoritza les classes &lt;code&gt;Vehicle&lt;/code&gt;, &lt;code&gt;Cotxe&lt;/code&gt;, i &lt;code&gt;Motocicleta&lt;/code&gt; perquè representen el model de negoci i només contenen la lògica relacionada amb la gestió de vehicles.&lt;/li&gt;
&lt;li&gt;Assegura&#39;t que els models no contenen cap codi de presentació.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear les Vistes&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crea vistes separades per mostrar els detalls dels vehicles:
&lt;ul&gt;
&lt;li&gt;Una vista HTML que mostre la informació dels vehicles en format HTML.&lt;/li&gt;
&lt;li&gt;Una vista en text simple que mostre els detalls dels vehicles en un format de text senzill.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Crear el Controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un controlador que gestione la interacció entre els models i les vistes.&lt;/li&gt;
&lt;li&gt;El controlador ha de ser capaç de rebre una sol·licitud per mostrar un vehicle i triar la vista adequada per mostrar-ne els detalls.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Models

class Vehicle {
    protected $tipus;

    public function __construct($tipus) {
        $this-&amp;gt;tipus = $tipus;
    }

    public function getTipus() {
        return $this-&amp;gt;tipus;
    }
}

class Cotxe extends Vehicle {
    private $marca;
    private $model;

    public function __construct($marca, $model) {
        parent::__construct(&amp;quot;Cotxe&amp;quot;);
        $this-&amp;gt;marca = $marca;
        $this-&amp;gt;model = $model;
    }

    public function getMarca() {
        return $this-&amp;gt;marca;
    }

    public function getModel() {
        return $this-&amp;gt;model;
    }
}

class Motocicleta extends Vehicle {
    private $cilindrada;

    public function __construct($cilindrada) {
        parent::__construct(&amp;quot;Motocicleta&amp;quot;);
        $this-&amp;gt;cilindrada = $cilindrada;
    }

    public function getCilindrada() {
        return $this-&amp;gt;cilindrada;
    }
}

// Vistes

class VehicleView {
    public function renderHtml(Vehicle $vehicle) {
        $output = &amp;quot;&amp;lt;p&amp;gt;Tipus: &amp;quot; . $vehicle-&amp;gt;getTipus() . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        if ($vehicle instanceof Cotxe) {
            $output .= &amp;quot;&amp;lt;p&amp;gt;Marca: &amp;quot; . $vehicle-&amp;gt;getMarca() . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
            $output .= &amp;quot;&amp;lt;p&amp;gt;Model: &amp;quot; . $vehicle-&amp;gt;getModel() . &amp;quot;&amp;lt;/p&amp;gt;&amp;quot;;
        } elseif ($vehicle instanceof Motocicleta) {
            $output .= &amp;quot;&amp;lt;p&amp;gt;Cilindrada: &amp;quot; . $vehicle-&amp;gt;getCilindrada() . &amp;quot; cc&amp;lt;/p&amp;gt;&amp;quot;;
        }
        return $output;
    }

    public function renderText(Vehicle $vehicle) {
        $output = &amp;quot;Tipus: &amp;quot; . $vehicle-&amp;gt;getTipus() . &amp;quot;&#92;n&amp;quot;;
        if ($vehicle instanceof Cotxe) {
            $output .= &amp;quot;Marca: &amp;quot; . $vehicle-&amp;gt;getMarca() . &amp;quot;&#92;n&amp;quot;;
            $output .= &amp;quot;Model: &amp;quot; . $vehicle-&amp;gt;getModel() . &amp;quot;&#92;n&amp;quot;;
        } elseif ($vehicle instanceof Motocicleta) {
            $output .= &amp;quot;Cilindrada: &amp;quot; . $vehicle-&amp;gt;getCilindrada() . &amp;quot; cc&#92;n&amp;quot;;
        }
        return $output;
    }
}

// Controlador

class VehicleController {
    private $view;

    public function __construct(VehicleView $view) {
        $this-&amp;gt;view = $view;
    }

    public function mostrarVehicle(Vehicle $vehicle, $format = &#39;html&#39;) {
        if ($format === &#39;html&#39;) {
            echo $this-&amp;gt;view-&amp;gt;renderHtml($vehicle);
        } else {
            echo $this-&amp;gt;view-&amp;gt;renderText($vehicle);
        }
    }
}

// Exemple d&#39;ús

$view = new VehicleView();
$controller = new VehicleController($view);

$cotxe = new Cotxe(&amp;quot;Toyota&amp;quot;, &amp;quot;Corolla&amp;quot;);
$moto = new Motocicleta(600);

// Mostrar en HTML
$controller-&amp;gt;mostrarVehicle($cotxe, &#39;html&#39;);
$controller-&amp;gt;mostrarVehicle($moto, &#39;html&#39;);

// Mostrar en Text
$controller-&amp;gt;mostrarVehicle($cotxe, &#39;text&#39;);
$controller-&amp;gt;mostrarVehicle($moto, &#39;text&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-5-classes-abstractes-i-interficies&quot; tabindex=&quot;-1&quot;&gt;Exercici 5. Classes Abstractes i Interfícies&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe abstracta &lt;code&gt;Figura&lt;/code&gt; amb un mètode abstracte &lt;code&gt;calculaArea&lt;/code&gt;. Després, crea classes &lt;code&gt;Cercle&lt;/code&gt; i &lt;code&gt;Rectangle&lt;/code&gt; que estiguen basades en &lt;code&gt;Figura&lt;/code&gt; i implementen el mètode &lt;code&gt;calculaArea&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Defineix una interfície &lt;code&gt;OperacionsBàsiques&lt;/code&gt; amb els mètodes &lt;code&gt;suma&lt;/code&gt; i &lt;code&gt;resta&lt;/code&gt;. Implementa aquesta interfície en una classe &lt;code&gt;CalculadoraSimple&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
abstract class Figura {
    abstract public function calculaArea();
}

class Cercle extends Figura {
    private $radi;

    public function __construct($radi) {
        $this-&amp;gt;radi = $radi;
    }

    public function calculaArea() {
        return pi() * $this-&amp;gt;radi * $this-&amp;gt;radi;
    }
}

class Rectangle extends Figura {
    private $ample;
    private $llarg;

    public function __construct($ample, $llarg) {
        $this-&amp;gt;ample = $ample;
        $this-&amp;gt;llarg = $llarg;
    }

    public function calculaArea() {
        return $this-&amp;gt;ample * $this-&amp;gt;llarg;
    }
}

$cercle = new Cercle(5);
$rectangle = new Rectangle(4, 6);

echo &amp;quot;Àrea del cercle: &amp;quot; . $cercle-&amp;gt;calculaArea() . &amp;quot;&#92;n&amp;quot;; // Output: Àrea del cercle: 78.5398
echo &amp;quot;Àrea del rectangle: &amp;quot; . $rectangle-&amp;gt;calculaArea() . &amp;quot;&#92;n&amp;quot;; // Output: Àrea del rectangle: 24

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
interface OperacionsBàsiques {
    public function suma($a, $b);
    public function resta($a, $b);
}

class CalculadoraSimple implements OperacionsBàsiques {
    public function suma($a, $b) {
        return $a + $b;
    }

    public function resta($a, $b) {
        return $a - $b;
    }
}

$calculadora = new CalculadoraSimple();
echo &amp;quot;Suma: &amp;quot; . $calculadora-&amp;gt;suma(5, 3) . &amp;quot;&#92;n&amp;quot;; // Output: Suma: 8
echo &amp;quot;Resta: &amp;quot; . $calculadora-&amp;gt;resta(5, 3) . &amp;quot;&#92;n&amp;quot;; // Output: Resta: 2
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-6-utilitzar-traits&quot; tabindex=&quot;-1&quot;&gt;Exercici 6.  Utilitzar Traits&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea un trait &lt;code&gt;Informacio&lt;/code&gt; amb un mètode &lt;code&gt;mostraInformacio&lt;/code&gt;. Inclou aquest trait en les classes &lt;code&gt;Cotxe&lt;/code&gt; i &lt;code&gt;Motocicleta&lt;/code&gt;, i utilitza&#39;l per mostrar informació addicional.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
trait Informacio {
    public function mostraInformacio() {
        return &amp;quot;Aquest és un objecte de tipus &amp;quot; . get_class($this);
    }
}

class Cotxe {
    use Informacio;
}

class Motocicleta {
    use Informacio;
}

$cotxe = new Cotxe();
$moto = new Motocicleta();

echo $cotxe-&amp;gt;mostraInformacio() . &amp;quot;&#92;n&amp;quot;; // Output: Aquest és un objecte de tipus Cotxe
echo $moto-&amp;gt;mostraInformacio() . &amp;quot;&#92;n&amp;quot;; // Output: Aquest és un objecte de tipus Motocicleta
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-7-gestionar-excepcions&quot; tabindex=&quot;-1&quot;&gt;Exercici 7.  Gestionar Excepcions&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Escriu una funció &lt;code&gt;divideix&lt;/code&gt; que prenga dos nombres com a paràmetres i retorne el resultat de la divisió. Si el segon nombre és zero, llença una excepció amb un missatge adequat. Captura aquesta excepció quan crides a la funció i mostra un missatge d&#39;error.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
function divideix($a, $b) {
    if ($b == 0) {
        throw new Exception(&amp;quot;No es pot dividir per zero.&amp;quot;);
    }
    return $a / $b;
}

try {
    echo divideix(10, 2) . &amp;quot;&#92;n&amp;quot;; // Output: 5
    echo divideix(10, 0) . &amp;quot;&#92;n&amp;quot;; // Aquesta línia llançarà una excepció
} catch (Exception $e) {
    echo &amp;quot;Error: &amp;quot; . $e-&amp;gt;getMessage() . &amp;quot;&#92;n&amp;quot;; // Output: Error: No es pot dividir per zero.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-8-proves-amb-php-unit&quot; tabindex=&quot;-1&quot;&gt;Exercici 8. Proves amb PHPUnit&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea una classe &lt;code&gt;Calculadora&lt;/code&gt; amb els mètodes &lt;code&gt;suma&lt;/code&gt; i &lt;code&gt;resta&lt;/code&gt;. Escriu una prova unitària amb PHPUnit per verificar que aquests mètodes funcionen correctament.&lt;/li&gt;
&lt;li&gt;Afegeix un mètode &lt;code&gt;divideix&lt;/code&gt; a la classe &lt;code&gt;Calculadora&lt;/code&gt; que llance una excepció quan es divideix per zero. Escriu una prova unitària que assegure que aquesta excepció es llança correctament.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Arxiu: tests/CalculadoraTest.php
use PHPUnit&#92;Framework&#92;TestCase;

class Calculadora {
    public function suma($a, $b) {
        return $a + $b;
    }

    public function resta($a, $b) {
        return $a - $b;
    }
}

class CalculadoraTest extends TestCase {
    public function testSuma() {
        $calculadora = new Calculadora();
        $resultat = $calculadora-&amp;gt;suma(2, 3);
        $this-&amp;gt;assertEquals(5, $resultat);
    }

    public function testResta() {
        $calculadora = new Calculadora();
        $resultat = $calculadora-&amp;gt;resta(5, 3);
        $this-&amp;gt;assertEquals(2, $resultat);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; 
// Arxiu: tests/CalculadoraTest.php
use PHPUnit&#92;Framework&#92;TestCase;

class Calculadora {
    public function divideix($a, $b) {
        if ($b == 0) {
            throw new InvalidArgumentException(&amp;quot;No es pot dividir per zero.&amp;quot;);
        }
        return $a / $b;
    }
}

class CalculadoraTest extends TestCase {
    public function testDivideix() {
        $this-&amp;gt;expectExceptionclass;
        
        $calculadora = new Calculadora();
        $calculadora-&amp;gt;divideix(5, 0);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-9-espais-de-noms-namespaces&quot; tabindex=&quot;-1&quot;&gt;Exercici 9. Espais de Noms (Namespaces)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea un espai de noms &lt;code&gt;App&#92;Models&lt;/code&gt; i defineix una classe &lt;code&gt;Usuari&lt;/code&gt; dins d&#39;aquest espai de noms. Afegeix un mètode &lt;code&gt;getNomComplet&lt;/code&gt; que retorne el nom complet de l&#39;usuari.&lt;/li&gt;
&lt;li&gt;En un fitxer separat, importa la classe &lt;code&gt;Usuari&lt;/code&gt; de l&#39;espai de noms &lt;code&gt;App&#92;Models&lt;/code&gt; i crea una instància d&#39;aquesta classe. Utilitza el mètode &lt;code&gt;getNomComplet&lt;/code&gt; per mostrar el nom complet d&#39;un usuari.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Arxiu: src/Models/Usuari.php
namespace App&#92;Models;

class Usuari {
    private $nom;
    private $cognom;

    public function __construct($nom, $cognom) {
        $this-&amp;gt;nom = $nom;
        $this-&amp;gt;cognom = $cognom;
    }

    public function getNomComplet() {
        return $this-&amp;gt;nom . &amp;quot; &amp;quot; . $this-&amp;gt;cognom;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;
// Arxiu: index.php
require &#39;vendor/autoload.php&#39;;

use App&#92;Models&#92;Usuari;

$usuari = new Usuari(&amp;quot;Joan&amp;quot;, &amp;quot;Garcia&amp;quot;);
echo $usuari-&amp;gt;getNomComplet(); // Output: Joan Garcia
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-10-autoloading-i-composer&quot; tabindex=&quot;-1&quot;&gt;Exercici 10. Autoloading i Composer&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Configura un projecte PHP amb Composer que utilitze l&#39;autoloading PSR-4. Crea l&#39;estructura de directoris &lt;code&gt;src/Models&lt;/code&gt; i col·loca una classe &lt;code&gt;Producte&lt;/code&gt; dins de &lt;code&gt;src/Models&lt;/code&gt;. Verifica que l&#39;autoloading funcione correctament instanciant la classe &lt;code&gt;Producte&lt;/code&gt; en un fitxer separat.&lt;/li&gt;
&lt;li&gt;Afegeix la llibreria &lt;code&gt;monolog/monolog&lt;/code&gt; al projecte utilitzant Composer. Crea una instància de &lt;code&gt;Logger&lt;/code&gt; i afegeix una entrada al registre de logs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crea l&#39;estructura de directoris src/Models i col·loca el següent codi a src/Models/Producte.php:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App&#92;Models;

class Producte {
    private $nom;

    public function __construct($nom) {
        $this-&amp;gt;nom = $nom;
    }

    public function getNom() {
        return $this-&amp;gt;nom;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Configura l&#39;autoloading en composer.json:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;autoload&amp;quot;: {
        &amp;quot;psr-4&amp;quot;: {
            &amp;quot;App&#92;&#92;&amp;quot;: &amp;quot;src/&amp;quot;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Executa composer dump-autoload per generar els fitxers d&#39;autoload.&lt;/li&gt;
&lt;li&gt;Utilitza la classe producte:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Arxiu: index.php
require &#39;vendor/autoload.php&#39;;

use App&#92;Models&#92;Producte;

$producte = new Producte(&amp;quot;Ordinador&amp;quot;);
echo $producte-&amp;gt;getNom(); // Output: Ordinador
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;Afegeix Monolog a composer.json:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require monolog/monolog
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Utilitza Monolog per crear un logger:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

$log = new Logger(&#39;nom_aplicacio&#39;);
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::WARNING));

// Afegeix una entrada al log
$log-&amp;gt;warning(&#39;Aquesta és una entrada d&#39;advertència&#39;);
$log-&amp;gt;error(&#39;Aquesta és una entrada d&#39;error&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-11-logger&quot; tabindex=&quot;-1&quot;&gt;Exercici 11. Logger&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Utilitzant la llibreria &lt;code&gt;Monolog&lt;/code&gt;, crea un logger que escriga missatges a un fitxer &lt;code&gt;app.log&lt;/code&gt;. Configura el logger per registrar missatges d&#39;informació i d&#39;error.&lt;/li&gt;
&lt;li&gt;Configura un logger que escriga missatges de registre tant a un fitxer com a la consola. Prova el logger registrant missatges d&#39;error.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;

$log = new Logger(&#39;nom_aplicacio&#39;);
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::INFO));
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::ERROR));

// Registra missatges d&#39;informació i d&#39;error
$log-&amp;gt;info(&#39;Aquesta és una entrada d’informació&#39;);
$log-&amp;gt;error(&#39;Aquesta és una entrada d’error&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Monolog&#92;Logger;
use Monolog&#92;Handler&#92;StreamHandler;
use Monolog&#92;Handler&#92;ErrorLogHandler;

$log = new Logger(&#39;nom_aplicacio&#39;);
$log-&amp;gt;pushHandler(new StreamHandler(&#39;app.log&#39;, Logger::WARNING));
$log-&amp;gt;pushHandler(new ErrorLogHandler());

// Registra missatges d’error al fitxer i a la consola
$log-&amp;gt;error(&#39;Aquesta és una entrada d’error&#39;);

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-12-documentacio&quot; tabindex=&quot;-1&quot;&gt;Exercici 12. Documentació&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Documenta la classe &lt;code&gt;Producte&lt;/code&gt; creada en l&#39;exercici anterior utilitzant comentaris PHPDoc. Assegura&#39;t d&#39;incloure la descripció de la classe, les propietats, i els mètodes.&lt;/li&gt;
&lt;li&gt;Utilitza una eina com &lt;code&gt;phpDocumentor&lt;/code&gt; per generar la documentació automàtica del codi PHP del projecte, incloent-hi la classe &lt;code&gt;Producte&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
namespace App&#92;Models;

/**
 * Classe Producte
 *
 * Representa un producte amb un nom.
 */
class Producte {
    /**
     * @var string El nom del producte
     */
    private $nom;

    /**
     * Constructor de la classe Producte
     *
     * @param string $nom El nom del producte
     */
    public function __construct($nom) {
        $this-&amp;gt;nom = $nom;
    }

    /**
     * Obté el nom del producte
     *
     * @return string El nom del producte
     */
    public function getNom() {
        return $this-&amp;gt;nom;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Instal·la phpDocumentor globalment o com a dependència de desenvolupament:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require --dev phpdocumentor/phpdocumentor
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Genera la documentació:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;vendor/bin/phpdoc -d src -t docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest comandament generarà la documentació a la carpeta docs.&lt;/p&gt;
&lt;h4 id=&quot;exercici-13-generacio-de-pd-fs-amb-dom-pdf&quot; tabindex=&quot;-1&quot;&gt;Exercici 13. Generació de PDFs amb DomPDF&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Instal·la la llibreria &lt;code&gt;dompdf/dompdf&lt;/code&gt; amb Composer. Crea un script PHP que genere un PDF senzill amb un títol i un paràgraf de text.&lt;/li&gt;
&lt;li&gt;Crea un PDF utilitzant DomPDF que incloga una taula amb dades i una imatge. Assegura&#39;t que el PDF es renderitze correctament i que la imatge s&#39;incloga en el document.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Solucio&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instal·la DomPDF amb Composer:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require dompdf/dompdf
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Crea un script PHP que generi un PDF senzill:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Dompdf&#92;Dompdf;

$dompdf = new Dompdf();
$html = &#39;&amp;lt;h1&amp;gt;Informe de Vendes&amp;lt;/h1&amp;gt;&amp;lt;p&amp;gt;Aquest és un informe de les vendes.&amp;lt;/p&amp;gt;&#39;;

$dompdf-&amp;gt;loadHtml($html);
$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;landscape&#39;);
$dompdf-&amp;gt;render();
$dompdf-&amp;gt;stream(&#39;informe.pdf&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Crea un PDF amb una taula i una imatge:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require &#39;vendor/autoload.php&#39;;

use Dompdf&#92;Dompdf;

$dompdf = new Dompdf();
$html = &#39;
    &amp;lt;h1&amp;gt;Informe de Productes&amp;lt;/h1&amp;gt;
    &amp;lt;table border=&amp;quot;1&amp;quot; cellpadding=&amp;quot;10&amp;quot;&amp;gt;
        &amp;lt;thead&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;th&amp;gt;Producte&amp;lt;/th&amp;gt;
                &amp;lt;th&amp;gt;Preu&amp;lt;/th&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/thead&amp;gt;
        &amp;lt;tbody&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;Ordinador&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;500€&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
            &amp;lt;tr&amp;gt;
                &amp;lt;td&amp;gt;Teclat&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;20€&amp;lt;/td&amp;gt;
            &amp;lt;/tr&amp;gt;
        &amp;lt;/tbody&amp;gt;
    &amp;lt;/table&amp;gt;
    &amp;lt;img src=&amp;quot;https://example.com/imatge.png&amp;quot; alt=&amp;quot;Imatge de Producte&amp;quot; /&amp;gt;
&#39;;

$dompdf-&amp;gt;loadHtml($html);
$dompdf-&amp;gt;setPaper(&#39;A4&#39;, &#39;portrait&#39;);
$dompdf-&amp;gt;render();
$dompdf-&amp;gt;stream(&amp;quot;informe_productes.pdf&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/13-exercicis/" >
        </entry>
        <entry>
            <title>
                12. Referències Bibliogràfiques
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/12-referencies-bibliografiques/</id>
            <content type="html">
                &lt;h3 id=&quot;programacio-orientada-a-objectes-en-php&quot; tabindex=&quot;-1&quot;&gt;Programació Orientada a Objectes en PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;PHP Objects, Patterns, and Practice&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per M. Zandstra. Apress, 2017. ISBN: 978-1-4842-1361-3. Aquest llibre és un recurs essencial per entendre els fonaments de la programació orientada a objectes en PHP, així com patrons de disseny.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Learning PHP, MySQL &amp;amp; JavaScript: With jQuery, CSS &amp;amp; HTML5&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Robin Nixon. O&#39;Reilly Media, 2018. ISBN: 978-1-4919-2070-2. Ofereix una introducció completa a la programació amb PHP, incloent-hi el model d&#39;objectes de PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;constructors-i-destructors&quot; tabindex=&quot;-1&quot;&gt;Constructors i Destructors&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Constructors and Destructors&lt;/strong&gt;&lt;br /&gt;
Documentació oficial de PHP sobre constructors i destructors en la programació orientada a objectes. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.decon.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.decon.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;encapsulacio-i-visibilitat&quot; tabindex=&quot;-1&quot;&gt;Encapsulació i Visibilitat&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Visibility&lt;/strong&gt;&lt;br /&gt;
Secció del manual oficial de PHP que explica les paraules clau &lt;code&gt;public&lt;/code&gt;, &lt;code&gt;protected&lt;/code&gt;, i &lt;code&gt;private&lt;/code&gt;, així com el concepte d&#39;encapsulació. Accessible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.visibility.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.visibility.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;herencia-i-polimorfisme&quot; tabindex=&quot;-1&quot;&gt;Herència i Polimorfisme&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Programming PHP&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Kevin Tatroe, Peter MacIntyre, i Rasmus Lerdorf. O&#39;Reilly Media, 2013. ISBN: 978-1-4493-5053-6. Aquest llibre cobreix àmpliament els conceptes d&#39;herència i polimorfisme en PHP, proporcionant exemples pràctics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Manual: Inheritance&lt;/strong&gt;&lt;br /&gt;
Documentació oficial de PHP que tracta sobre l&#39;herència en classes, incloent el polimorfisme. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.inheritance.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.inheritance.php&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;classes-abstractes-i-interficies&quot; tabindex=&quot;-1&quot;&gt;Classes Abstractes i Interfícies&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Interfaces and Abstract Classes&lt;/strong&gt;&lt;br /&gt;
Explicació oficial de les classes abstractes i les interfícies en PHP. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.interfaces.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.interfaces.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;nombres-magics-i-metodes-magics&quot; tabindex=&quot;-1&quot;&gt;Nombres màgics i Metodes màgics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Magic Methods&lt;/strong&gt;&lt;br /&gt;
Guia completa sobre els mètodes màgics en PHP, com &lt;code&gt;__construct()&lt;/code&gt;, &lt;code&gt;__destruct()&lt;/code&gt;, &lt;code&gt;__get()&lt;/code&gt;, &lt;code&gt;__set()&lt;/code&gt;, entre altres. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.magic.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.magic.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;trait-en-php&quot; tabindex=&quot;-1&quot;&gt;Trait en PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;PHP Manual: Traits&lt;/strong&gt;&lt;br /&gt;
Documentació sobre traits en PHP, que permeten reutilitzar codi entre diferents classes. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.traits.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.traits.php&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;excepcions-en-php&quot; tabindex=&quot;-1&quot;&gt;Excepcions en PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;The Pragmatic Programmer: Your Journey to Mastery&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per David Thomas i Andrew Hunt. Addison-Wesley Professional, 2019. ISBN: 978-0-1359-5202-8. Inclou bones pràctiques per a la gestió d&#39;excepcions, aplicables també a PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Manual: Exceptions&lt;/strong&gt;&lt;br /&gt;
Secció del manual de PHP dedicada a les excepcions, explicant com llençar i capturar excepcions en PHP. Accessible a &lt;a href=&quot;https://www.php.net/manual/en/language.exceptions.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.exceptions.php&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;proves-amb-php-unit&quot; tabindex=&quot;-1&quot;&gt;Proves amb PHPUnit&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Modern PHP: New Features and Good Practices&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Josh Lockhart. O&#39;Reilly Media, 2015. ISBN: 978-1-4919-2904-0. Aquest llibre inclou una secció sobre proves amb PHPUnit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHPUnit Documentation&lt;/strong&gt;&lt;br /&gt;
Documentació oficial de PHPUnit, que cobreix com escriure i executar proves unitàries en PHP. Accessible a &lt;a href=&quot;https://phpunit.de/documentation.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://phpunit.de/documentation.html&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eines-de-desenvolupament-i-autocarrega&quot; tabindex=&quot;-1&quot;&gt;Eines de Desenvolupament i Autocàrrega&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Composer Documentation&lt;/strong&gt;&lt;br /&gt;
Accessible des de &lt;a href=&quot;https://getcomposer.org/doc/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://getcomposer.org/doc/&lt;/a&gt;. Composer és l&#39;eina estàndard per a la gestió de dependències en PHP, i inclou suport per a l&#39;autocàrrega de classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Manual: Autoloading Classes&lt;/strong&gt;&lt;br /&gt;
Guia sobre el mecanisme d&#39;autocàrrega en PHP, que facilita la inclusió automàtica de classes en els teus projectes. Disponible a &lt;a href=&quot;https://www.php.net/manual/en/language.oop5.autoload.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.php.net/manual/en/language.oop5.autoload.php&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;poo-avancada-patrons-de-disseny&quot; tabindex=&quot;-1&quot;&gt;POO Avançada: Patrons de Disseny&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Head First Design Patterns&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Eric Freeman i Elisabeth Robson. O&#39;Reilly Media, 2020. ISBN: 978-1-4919-7175-9. Un recurs excel·lent per aprendre patrons de disseny aplicables a PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;PHP Design Patterns&amp;quot;&lt;/strong&gt;&lt;br /&gt;
per Stephan Schmidt. Publicat per Packt Publishing, 2008. ISBN: 978-1-84719-255-3. Aquest llibre explora com aplicar patrons de disseny en projectes PHP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;webs-de-referencia-addicionals&quot; tabindex=&quot;-1&quot;&gt;Webs de Referència Addicionals&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP: The Right Way&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://phptherightway.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://phptherightway.com/&lt;/a&gt;. Una guia per a desenvolupar aplicacions PHP seguint les millors pràctiques de la indústria.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stack Overflow&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/tagged/php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/tagged/php&lt;/a&gt;. Una font d&#39;informació valuosa per resoldre problemes específics de PHP i discutir amb altres desenvolupadors.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/12-referencies-bibliografiques/" >
        </entry>
        <entry>
            <title>
                11. Proves amb PHPUNIT
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/11-proves-amb-phpunit/</id>
            <content type="html">
                &lt;p&gt;El curs passat, dins del mòdul de Entorns de Desenvolupament*, estudiarieu la importància de la realització de proves, així com les proves unitàries mitjançant &lt;a href=&quot;https://junit.org/junit5/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JUnit&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/05/tdd.png&quot; alt=&quot;tdd.png|300&quot; width=&quot;300px&quot; /&gt;&lt;br /&gt;
Hui dia és de gran importància seguir una bona metodologia de proves, sent el desenvolupament dirigit per les proves (Test Driven Development / TDD) un dels enfocaments més emprats, el qual consisteix en:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Escriure el test, i com no hi ha codi implementat, la prova falle (roig).&lt;/li&gt;
&lt;li&gt;Escriure el codi d&#39;aplicació perquè la prova funcione (verda).&lt;/li&gt;
&lt;li&gt;refactoritzar el codi de l&#39;aplicació amb l&#39;ajuda de la prova per a comprovar que no trenquem res (refactor).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En el cas de PHP, l&#39;eina que s&#39;utilitza és &lt;em&gt;PHPUnit&lt;/em&gt; (&lt;a href=&quot;https://phpunit.de/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://phpunit.de/&lt;/a&gt;), que com el seu nom indica, està basada en JUnit. La versió actual és la 9.0.&lt;/p&gt;
&lt;h3 id=&quot;introduccio-a-php-unit&quot; tabindex=&quot;-1&quot;&gt;Introducció a PHPUnit&lt;/h3&gt;
&lt;p&gt;PHPUnit és un framework de proves popular per a PHP que suporta tant proves unitàries com proves d&#39;integració. És àmpliament utilitzat en la comunitat PHP per la seua simplicitat i eficàcia. Les proves unitàries es centren en provar components o mètodes individuals, mentre que les proves d&#39;integració asseguren que les diferents parts del sistema funcionen conjuntament com s&#39;espera.&lt;/p&gt;
&lt;h4 id=&quot;instal-lacio&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h4&gt;
&lt;p&gt;Per començar a utilitzar PHPUnit, cal instal·lar-lo. La manera recomanada és a través de Composer. Executa la següent comanda en el terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;composer require --dev phpunit/phpunit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquesta comanda afegirà PHPUnit com a dependència de desenvolupament en el teu projecte.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] &amp;quot;Llibreries de desenvolupament&amp;quot;&lt;br /&gt;
Les llibreries que es col·loquen en &lt;code&gt;require-dev&lt;/code&gt; són les de desenvolupament i &lt;em&gt;testing&lt;/em&gt;, de manera que no s&#39;instal·laran en un entorn de producció.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Una vegada instal·lat, podem configurar PHPUnit creant un fitxer phpunit.xml en l&#39;arrel del projecte per especificar la configuració de les proves:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;phpunit bootstrap=&amp;quot;vendor/autoload.php&amp;quot;&amp;gt;
    &amp;lt;testsuites&amp;gt;
        &amp;lt;testsuite name=&amp;quot;Application Test Suite&amp;quot;&amp;gt;
            &amp;lt;directory&amp;gt;./tests&amp;lt;/directory&amp;gt;
        &amp;lt;/testsuite&amp;gt;
    &amp;lt;/testsuites&amp;gt;
&amp;lt;/phpunit&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;estructura-d-un-test&quot; tabindex=&quot;-1&quot;&gt;Estructura d’un test&lt;/h4&gt;
&lt;p&gt;Els tests en PHPUnit són classes PHP que hereten de PHPUnit&#92;Framework&#92;TestCase. Cada mètode dins d&#39;aquestes classes que comence amb test serà executat com una prova.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php

use PHPUnit&#92;Framework&#92;TestCase;

class CalculadoraTest extends TestCase {
    public function testSuma() {
        $calculadora = new Calculadora();
        $resultat = $calculadora-&amp;gt;suma(2, 3);
        $this-&amp;gt;assertEquals(5, $resultat);
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;execucio-de-proves&quot; tabindex=&quot;-1&quot;&gt;Execució de Proves&lt;/h4&gt;
&lt;p&gt;Per executar les proves, podem utilitzar la següent comanda:&lt;/p&gt;
&lt;p&gt;vendor/bin/phpunit&lt;/p&gt;
&lt;p&gt;Aquesta comanda cercarà els arxius de prova en el directori especificat (per defecte tests) i executarà totes les proves.&lt;/p&gt;
&lt;h4 id=&quot;tipus-de-proves&quot; tabindex=&quot;-1&quot;&gt;Tipus de  proves&lt;/h4&gt;
&lt;p&gt;Amb PHPUnit, podem realitzar diversos tipus de proves, entre elles:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proves Unitàries&lt;/strong&gt;: Verifiquen el funcionament d&#39;una unitat de codi individual, com una funció o mètode.&lt;/p&gt;
&lt;p&gt;Exemple de prova unitària:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;public function testResta() {
$calculadora = new Calculadora();
$resultat = $calculadora-&amp;gt;resta(5, 3);
$this-&amp;gt;assertEquals(2, $resultat);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Proves Funcionals&lt;/strong&gt;: Verifiquen que un conjunt de mòduls funciona correctament conjuntament. Aquestes proves poden simular interaccions de l&#39;usuari en un sistema web, encara que això es fa millor amb frameworks especialitzats per a proves funcionals.&lt;br /&gt;
&lt;strong&gt;Proves d&#39;Integració&lt;/strong&gt;: Comproven que diferents mòduls o serveis funcionen correctament quan es combinen.&lt;/p&gt;
&lt;h4 id=&quot;assercions&quot; tabindex=&quot;-1&quot;&gt;Assercions&lt;/h4&gt;
&lt;p&gt;Les assercions permeten comprovar el resultat dels mètodes que volem provar. Les assercions esperen que el predicat sempre siga vertader.&lt;/p&gt;
&lt;p&gt;PHPUnit ofereix les següent assercions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assertTrue&lt;/code&gt; / &lt;code&gt;assertFalse&lt;/code&gt;: Comprova que la condició donada siga avaluada com true / false&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertEquals&lt;/code&gt; / &lt;code&gt;assertSame&lt;/code&gt;: Comprova que dues variables siguen iguals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertNotEquals&lt;/code&gt; / &lt;code&gt;assertNotSame&lt;/code&gt;: Comprova que dues variables NO siguen iguals&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertNull&lt;/code&gt;: Comprova que un valor és null.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Same&lt;/code&gt; → comprova els tipus. Si no coincideixen els tipus i els valors, l&#39;asserció fallarà&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equals&lt;/code&gt; → sense comprovació estricta&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertArrayHasKey&lt;/code&gt; / &lt;code&gt;assertArrayNotHasKey&lt;/code&gt;: Comprova que un array posseïsca un &lt;em&gt;key&lt;/em&gt; determinat / o NO ho posseïsca&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertArraySubset&lt;/code&gt;: Comprova que un array posseïsca un altre array com subset del mateix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertAttributeContains&lt;/code&gt; / &lt;code&gt;assertAttributeNotContains&lt;/code&gt;: Comprova que un atribut d&#39;una classe continga una variable determinada / o NO continga una variable determinada&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assertAttributeEquals&lt;/code&gt;: Comprova que un atribut d&#39;una classe siga igual a una variable determinada.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;proves-amb-dades&quot; tabindex=&quot;-1&quot;&gt;Proves amb dades&lt;/h4&gt;
&lt;p&gt;Les proves en PHPUnit poden utilitzar data providers per executar el mateix test amb diferents dades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;/**
 * @dataProvider proveidorDeDades
 */
public function testMultiplica($a, $b, $esperat) {
    $calculadora = new Calculadora();
    $this-&amp;gt;assertEquals($esperat, $calculadora-&amp;gt;multiplica($a, $b));
}

public function proveidorDeDades() {
    return [
        [2, 3, 6],
        [0, 5, 0],
        [-1, 5, -5],
    ];
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;mocks&quot; tabindex=&quot;-1&quot;&gt;Mocks&lt;/h4&gt;
&lt;p&gt;Els mocks són objectes simulats que ens permeten aïllar la unitat de codi que estem provant. PHPUnit facilita la creació de mocks per a classes o interfícies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$mock = $this-&amp;gt;createMockclass;
$mock-&amp;gt;method(&#39;obtenirDades&#39;)-&amp;gt;willReturn(&#39;Dades simulades&#39;);

$calculadora = new Calculadora($mock);
$resultat = $calculadora-&amp;gt;processaDades();
$this-&amp;gt;assertEquals(&#39;Resultat esperat&#39;, $resultat);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;provant-excepcions&quot; tabindex=&quot;-1&quot;&gt;Provant excepcions&lt;/h4&gt;
&lt;p&gt;Les proves a més de comprovar que les classes funcionen com s&#39;espera, han de cobrir tots els casos possibles. Així doncs, hem de poder fer proves que esperen que es llance una excepció (i que el missatge continga una certa informació):&lt;/p&gt;
&lt;p&gt;Per a això, s&#39;utilitzen les següent expectatives:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expectExceptionclass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectExceptionCode(codigoExcepcion)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectExceptionMessage(missatge)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De la mateixa manera que abans, primer es posa l&#39;expectativa, i després es provoca que es llance l&#39;excepció:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
public function testExcepcio() {
    $this-&amp;gt;expectExceptionclass;

    $calculadora = new Calculadora();
    $calculadora-&amp;gt;divideix(5, 0);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;conclusio&quot; tabindex=&quot;-1&quot;&gt;Conclusió&lt;/h4&gt;
&lt;p&gt;Les proves són crucials per a assegurar que el nostre codi PHP és fiable i manté la seua funcionalitat al llarg del temps. Utilitzar PHPUnit ens proporciona les eines necessàries per a escriure proves eficaces i mantenir el nostre projecte en un estat saludable.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/11-proves-amb-phpunit/" >
        </entry>
        <entry>
            <title>
                10. Documentación con phpDocumentor
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/10-documentacion-con-php-documentor/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://www.phpdoc.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;phpDocumentor&lt;/a&gt; és l&#39;eina per a documentar el codi PHP. És similar en propòsit i funcionament a &lt;em&gt;Javadoc&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Així doncs, és un eina que facilita la documentació del codi PHP, creant un lloc web amb l&#39;API de l&#39;aplicació.&lt;/p&gt;
&lt;p&gt;Es basa en l&#39;ús d&#39;anotacions sobre els docblocks. Per a posar-ho en marxa, en el nostre cas ens decantarem per utilitzar la imatge que ja existeix de Docker.&lt;/p&gt;
&lt;h3 id=&quot;instal-lacio&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h3&gt;
&lt;h5 id=&quot;pas-1-instal-lacio-amb-docker&quot; tabindex=&quot;-1&quot;&gt;Pas 1: Instal·lació amb Docker&lt;/h5&gt;
&lt;p&gt;Primer, cal assegurar-se tenir Docker instal·lat i funcionant al  sistema. Després, s&#39;ha de descarregar i executar el contenidor de phpDocumentor utilitzant la següent comanda:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker pull phpdoc/phpdoc
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&quot;pas-2-generacio-de-documentacio&quot; tabindex=&quot;-1&quot;&gt;Pas 2: Generació de Documentació&lt;/h5&gt;
&lt;p&gt;Un cop tinguem la imatge, podem utilitzar-la per generar la documentació. El procés bàsic implica muntar els fitxers de codi dins del contenidor Docker i executar phpDocumentor sobre aquests fitxers.&lt;/p&gt;
&lt;p&gt;Ací hi ha un exemple de com fer-ho:&lt;/p&gt;
&lt;p&gt;En el cas d&#39;usar &lt;em&gt;Docker&lt;/em&gt;, usarem el següent comando per a executar-lo (crea el contenidor, executa el comando que li demanem, i automàticament l&#39;esborra):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;docker run --rm -v $(pwd):/data phpdoc/phpdoc:latest run -d /data/src -t /data/docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquesta comanda fa el següent:&lt;/p&gt;
&lt;p&gt;--rm: Això elimina el contenidor després d&#39;executar-lo, així no es queden contenidors inactius.&lt;br /&gt;
-v &lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;53.548ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 23668.1 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(389,0)&quot;&gt;&lt;path data-c=&quot;1D45D&quot; d=&quot;M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(892,0)&quot;&gt;&lt;path data-c=&quot;1D464&quot; d=&quot;M580 385Q580 406 599 424T641 443Q659 443 674 425T690 368Q690 339 671 253Q656 197 644 161T609 80T554 12T482 -11Q438 -11 404 5T355 48Q354 47 352 44Q311 -11 252 -11Q226 -11 202 -5T155 14T118 53T104 116Q104 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Q21 293 29 315T52 366T96 418T161 441Q204 441 227 416T250 358Q250 340 217 250T184 111Q184 65 205 46T258 26Q301 26 334 87L339 96V119Q339 122 339 128T340 136T341 143T342 152T345 165T348 182T354 206T362 238T373 281Q402 395 406 404Q419 431 449 431Q468 431 475 421T483 402Q483 389 454 274T422 142Q420 131 420 107V100Q420 85 423 71T442 42T487 26Q558 26 600 148Q609 171 620 213T632 273Q632 306 619 325T593 357T580 385Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1608,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2128,0)&quot;&gt;&lt;path data-c=&quot;29&quot; d=&quot;M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(2794.8,0)&quot;&gt;&lt;path data-c=&quot;3A&quot; d=&quot;M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;TeXAtom&quot; data-mjx-texclass=&quot;ORD&quot; transform=&quot;translate(3350.6,0)&quot;&gt;&lt;g data-mml-node=&quot;mo&quot;&gt;&lt;path data-c=&quot;2F&quot; d=&quot;M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3850.6,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4370.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4899.6,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5260.6,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6067.3,0)&quot;&gt;&lt;path data-c=&quot;3A&quot; d=&quot;M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(6623.1,0)&quot;&gt;&lt;path data-c=&quot;1D440&quot; d=&quot;M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7674.1,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8246.1,0)&quot;&gt;&lt;path data-c=&quot;1D45B&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8846.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9207.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9736.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10202.1,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(10500.1,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11020.1,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11365.1,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(11816.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(12282.1,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(12715.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(13076.1,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(13561.1,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(14012.1,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(14357.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(14886.1,0)&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(15319.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(15680.1,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(16252.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(16781.1,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(17079.1,0)&quot;&gt;&lt;path data-c=&quot;1D451&quot; d=&quot;M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(17599.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(18065.1,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(18363.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(18724.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(19190.1,0)&quot;&gt;&lt;path data-c=&quot;1D462&quot; d=&quot;M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(19762.1,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(20231.1,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(20576.1,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(21045.1,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(21406.1,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(21872.1,0)&quot;&gt;&lt;path data-c=&quot;1D45A&quot; d=&quot;M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(22750.1,0)&quot;&gt;&lt;path data-c=&quot;1D44E&quot; d=&quot;M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(23279.1,0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;w&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;)&lt;/mo&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mrow data-mjx-texclass=&quot;ORD&quot;&gt;&lt;mo&gt;/&lt;/mo&gt;&lt;/mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;M&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;(pwd)) al directori /data dins del contenidor. Hauràs de reemplaçar $(pwd) amb el camí on està el teu codi font si no estàs executant aquesta comanda des del directori del teu projecte.&lt;br /&gt;
-d /data/src: Especifica el directori dins del contenidor on es troba el teu codi font. Reemplaça /data/src amb el camí corresponent dins del contenidor si és diferent.&lt;br /&gt;
-t /data/docs: Especifica on vols que es generi la documentació dins del contenidor. En aquest cas, es generarà dins de /data/docs.&lt;/p&gt;
&lt;h5 id=&quot;pas-3-acces-a-la-documentacio-generada&quot; tabindex=&quot;-1&quot;&gt;Pas 3: Accés a la Documentació Generada&lt;/h5&gt;
&lt;p&gt;Una vegada generada, la documentació estarà dins del directori que especificat (en aquest cas, &lt;code&gt;docs&lt;/code&gt; dins del directori docs de projecte). Pots obrir els fitxers HTML amb qualsevol navegador per veure la documentació.&lt;/p&gt;
&lt;h3 id=&quot;doc-block&quot; tabindex=&quot;-1&quot;&gt;DocBlock&lt;/h3&gt;
&lt;p&gt;Un &lt;em&gt;docblock&lt;/em&gt; és el bloc de codi que es col·loca damunt d&#39;un recurs. El seu format és:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
/**
* Sumari*, una sola línia

* Descripció* que pot utilitzar diverses línies
* i que ofereix detalls de l&#39;element o referències
* per a ampliar la informació

* @param string $miArgumento amb una descripció* de l&#39;argument
* que pot usar diverses línies.

* @return void
*/
function miFuncion(tipo $miArgumento)
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;documentant-el-codi&quot; tabindex=&quot;-1&quot;&gt;Documentant el codi&lt;/h3&gt;
&lt;p&gt;En tots els elements, ademas del sumari i/o descripció, posarem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;En les classes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@author&lt;/code&gt; nom &lt;code&gt;&amp;lt;email&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@package&lt;/code&gt; ruta del namespace&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;En les propietats:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@var&lt;/code&gt; tipus descripció&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;En els mètodes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@param&lt;/code&gt; tipus $nomene descripció&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@throws&lt;/code&gt; ClaseException descripció&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@return&lt;/code&gt; tipus descripció&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vegem-ho amb un exemple. Suposem que tenim una classe que representa un client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
/**
* Classe que representa un client
* 
* El client s&#39;encarrega d&#39;emmagatzemar els suports que té llogat,
* de manera que podem llogar i retornar productes mitjançant les operacions
* homònimes.
* 
* @package Dwes&#92;Videoclub&#92;Model
* @author Aitor Medrano &amp;lt;a.medrano@edu.gva.es&amp;gt;
*/
class Cliente {

    public string $nombre; 
    private string $numero;

    /**
    * Colecció de soports alquilats
    * @var array&amp;lt;Soporte&amp;gt; 
    */
    private $soportesAlquilados[];

    /*
    * Comprova si el suport rebut ja el té llogat el client
    * @param Suport $suporte Suport a comprovar
    * @return bool true si ho té llogat
    /
    public function tieneAlquilado(Soporte $soporte) : bool { 
        // ...
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si generem la documentació i obrim amb un navegador l&#39;arxiu &lt;code&gt;docs/api/index.html&lt;/code&gt; podrem navegar fins a la classe `Client:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/05/phpdoc.png&quot; alt=&quot;phpdoc.png&quot; /&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/10-documentacion-con-php-documentor/" >
        </entry>
        <entry>
            <title>
                1. Concepte de classes i Objectes
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/1-concepte-de-classes-i-objectes/</id>
            <content type="html">
                &lt;p&gt;PHP segueix un paradigma de programació orientada a objectes (POO) basada en classes.&lt;/p&gt;
&lt;p&gt;Un classe és un plantilla que defineix les propietats i mètodes per a poder crear objectes. D&#39;aquest manera, un objecte és una instància d&#39;una classe.&lt;/p&gt;
&lt;p&gt;Tant les propietats com els mètodes es defineixen amb una visibilitat (qui pot accedir)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Privat - &lt;code&gt;private&lt;/code&gt;: Només pot accedir la pròpia classe.&lt;/li&gt;
&lt;li&gt;Protegit - &lt;code&gt;protected&lt;/code&gt;: Només pot accedir la pròpia classe o els seus descendents.&lt;/li&gt;
&lt;li&gt;Público - &lt;code&gt;public&lt;/code&gt;: Pot accedir qualsevol altra classe.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Per a declarar una classe, s&#39;utilitza la paraula clau &lt;code&gt;class&lt;/code&gt; seguit del nom de la classe. Per a instanciar un objecte a partir de la classe, s&#39;utilitza &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class NomClase {
// propiedades
// y métodos
}

$ob = new NomClase();
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!important] &amp;quot;Classes amb majúscula&amp;quot;&lt;br /&gt;
Totes les classes comencen per lletra majúscula.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quan un projecte creix, és normal modelar les classes mitjançant UML (recordeu Entorns de Desenvolupament?). La classes es representen mitjançant un quadrat, separant el nom, de les propietats i els mètodes:&lt;/p&gt;
&lt;p&gt;![UML|500](/img/user/01 Apuntes/DAW/PHP Teoria Batoi/imagenes/03/uml.png)&lt;/p&gt;
&lt;p&gt;Una vegada que hem creat un objecte, s&#39;utilitza l&#39;operador &lt;code&gt;-&amp;gt;&lt;/code&gt; per a accedir a una propietat o un mètode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$objeto-&amp;gt;propiedad;
$objeto-&amp;gt;método(parámetros);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si des de dins de la classe, volem accedir a una propietat o mètode de la mateixa classe, utilitzarem la referència &lt;code&gt;$this&lt;/code&gt;;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$this-&amp;gt;propiedad;
$this-&amp;gt;método(parámetros);  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Així doncs, com a exemple, codificaríem una persona en el fitxer &lt;code&gt;Persona.php&lt;/code&gt; com:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
class Persona {
    private string $nombre;

    public function setNombre(string $nom) {
        $this-&amp;gt;nombre=$nom;
    }

    public function imprimir(){
        echo $this-&amp;gt;nombre;
        echo &#39;&amp;lt;br&amp;gt;&#39;;
    }
}

$bruno = new Persona(); // creamos un objeto
$bruno-&amp;gt;setNombre(&amp;quot;Bruno Díaz&amp;quot;);
$bruno-&amp;gt;imprimir();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Encara que es poden declarar diverses classes en el mateix arxiu, és una mala pràctica. Així doncs, cada fitxer contedrá una sola classe, i es nomenarà amb el nom de la classe.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/4-programacion-orientada-a-objetos-php/1-concepte-de-classes-i-objectes/" >
        </entry>
        <entry>
            <title>
                Programación en Web
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/3-programacion-en-web/programacion-en-web/</id>
            <content type="html">
                &lt;h1 id=&quot;programacio-web&quot; tabindex=&quot;-1&quot;&gt;Programació Web&lt;/h1&gt;
&lt;h2 id=&quot;1-mecanismes-per-al-manteniment-de-la-informacio-en-aplicacions-web&quot; tabindex=&quot;-1&quot;&gt;1.  Mecanismes per al Manteniment de la Informació en Aplicacions Web&lt;/h2&gt;
&lt;p&gt;HTTP és un protocol &lt;strong&gt;stateless&lt;/strong&gt;, sense estat. En les aplicacions web modernes, és essencial gestionar l&#39;estat del client per proporcionar una experiència d&#39;usuari fluida i personalitzada.&lt;br /&gt;
Per això, se simula l&#39;estat mitjançant l&#39;ús de cookies, tokens o la sessió. L&#39;estat és necessari per a processos com ara el carret de la compra, operacions associades a un usuari, etc...&lt;br /&gt;
A continuació es detallen diversos mecanismes per mantenir aquesta informació, així com els seus avantatges i desavantatges.&lt;/p&gt;
&lt;h3 id=&quot;cookies&quot; tabindex=&quot;-1&quot;&gt;Cookies&lt;/h3&gt;
&lt;p&gt;Les &lt;strong&gt;cookies&lt;/strong&gt; són petits fitxers de text emmagatzemats al navegador de l&#39;usuari. Són àmpliament utilitzades per mantenir l&#39;estat del client entre sol·licituds HTTP, ja que HTTP és un protocol sense estat.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-de-les-cookies&quot; tabindex=&quot;-1&quot;&gt;Avantatges de les Cookies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Persistència&lt;/strong&gt;: Les cookies poden mantenir-se durant períodes llargs definits per l&#39;atribut &lt;code&gt;expires&lt;/code&gt; o &lt;code&gt;max-age&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibilitat&lt;/strong&gt;: Es poden accedir des de qualsevol pàgina del mateix domini.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simplicitat&lt;/strong&gt;: Fàcils d&#39;implementar i gestionar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-de-les-cookies&quot; tabindex=&quot;-1&quot;&gt;Desavantatges de les Cookies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;: Poden ser objectiu d&#39;atacs com &lt;strong&gt;XSS (Cross-Site Scripting)&lt;/strong&gt; si no es gestionen correctament.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Limitacions de mida&lt;/strong&gt;: Les cookies estan limitades a 4KB de dades.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privadesa&lt;/strong&gt;: Les dades de l&#39;usuari poden ser vulnerables si no es protegeixen adequadament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;millors-practiques&quot; tabindex=&quot;-1&quot;&gt;Millors Pràctiques&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Utilitzar l&#39;atribut &lt;code&gt;HttpOnly&lt;/code&gt; per evitar l&#39;accés a les cookies des de JavaScript.&lt;/li&gt;
&lt;li&gt;Configurar &lt;code&gt;SameSite&lt;/code&gt; per prevenir atacs CSRF.&lt;/li&gt;
&lt;li&gt;Emmagatzemar únicament informació essencial i no sensible.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sessions&quot; tabindex=&quot;-1&quot;&gt;Sessions&lt;/h3&gt;
&lt;p&gt;Les &lt;strong&gt;sessions&lt;/strong&gt; són un mecanisme que permet associar dades a un usuari durant una sessió específica. Aquestes dades s&#39;emmagatzemen al servidor, mentre que el client només guarda un identificador de sessió.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-de-les-sessions&quot; tabindex=&quot;-1&quot;&gt;Avantatges de les Sessions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;: Les dades sensibles es mantenen al servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Capacitat d&#39;emmagatzematge&lt;/strong&gt;: No limitades per la mida de les cookies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compartició de dades&lt;/strong&gt;: Facilita la compartició d&#39;estat entre diferents components d&#39;una aplicació web.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-de-les-sessions&quot; tabindex=&quot;-1&quot;&gt;Desavantatges de les Sessions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escalabilitat&lt;/strong&gt;: Requereix memòria addicional al servidor, la qual cosa pot ser problemàtica amb molts usuaris.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistència limitada&lt;/strong&gt;: Normalment només duren mentre el navegador està obert, tret que es configuri d&#39;una altra manera.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;millors-practiques-1&quot; tabindex=&quot;-1&quot;&gt;Millors Pràctiques&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Emmagatzemar únicament referències o identificadors a la sessió.&lt;/li&gt;
&lt;li&gt;Utilitzar eines com Redis per a una gestió eficient de sessions en entorns escalables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;web-storage&quot; tabindex=&quot;-1&quot;&gt;Web Storage&lt;/h3&gt;
&lt;p&gt;El &lt;strong&gt;Web Storage&lt;/strong&gt; és una API del navegador que permet emmagatzemar dades al client de manera més senzilla i amb més capacitat que les cookies tradicionals. Inclou dos mecanismes principals: &lt;code&gt;localStorage&lt;/code&gt; i &lt;code&gt;sessionStorage&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;caracteristiques-del-web-storage&quot; tabindex=&quot;-1&quot;&gt;Característiques del Web Storage&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;localStorage&lt;/code&gt;&lt;/strong&gt;: Permet emmagatzemar dades que persisteixen fins que s&#39;elimina explícitament, fins i tot després de tancar el navegador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;sessionStorage&lt;/code&gt;&lt;/strong&gt;: Les dades es mantenen només durant la sessió del navegador i s&#39;esborren quan es tanca la pestanya o finestra.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;avantatges&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Capacitat d&#39;Emmagatzematge&lt;/strong&gt;: Ofereix més espai (fins a 5-10MB) que les cookies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API Simple&lt;/strong&gt;: Proporciona una interfície senzilla per emmagatzemar i recuperar dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;usos-comuns&quot; tabindex=&quot;-1&quot;&gt;Usos Comuns&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Manteniment de l&#39;Estat del Client&lt;/strong&gt;: Pot guardar dades de sessió i preferències de l&#39;usuari que no cal enviar al servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sincronització amb l&#39;Entorn Servidor&lt;/strong&gt;: Es pot utilitzar per emmagatzemar dades que després es sincronitzen amb el servidor, millorant el rendiment i l&#39;experiència d&#39;usuari.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;consideracions-de-seguretat&quot; tabindex=&quot;-1&quot;&gt;Consideracions de Seguretat&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Accessibilitat&lt;/strong&gt;: Les dades són accessibles per JavaScript, per la qual cosa s&#39;ha de tenir cura amb les vulnerabilitats XSS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dades Sensibles&lt;/strong&gt;: Evita emmagatzemar dades sensibles o confidencials.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tot i que &lt;strong&gt;Web Storage&lt;/strong&gt; s&#39;executa al costat del client, entendre les seves funcionalitats pot ajudar els desenvolupadors del servidor a dissenyar sistemes més robustos i eficaços, on la cooperació entre client i servidor maximitza l&#39;eficiència de l&#39;aplicació web.&lt;/p&gt;
&lt;h3 id=&quot;tokens-d-autenticacio&quot; tabindex=&quot;-1&quot;&gt;Tokens d&#39;Autenticació&lt;/h3&gt;
&lt;p&gt;Els &lt;strong&gt;JSON Web Tokens (JWT)&lt;/strong&gt; són un estàndard obert que defineix una manera compacta i autònoma d&#39;enviar informació entre dues parts de manera segura com a objecte JSON. S&#39;utilitzen habitualment per a l&#39;autenticació en aplicacions web.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-dels-jwt&quot; tabindex=&quot;-1&quot;&gt;Avantatges dels JWT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Estatut autònom&lt;/strong&gt;: Porten tota la informació necessària, eliminant la necessitat de mantenir sessions al servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escalabilitat&lt;/strong&gt;: Milloren l&#39;escalabilitat en aplicacions distribuïdes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;: Es poden signar digitalment per assegurar la seva autenticitat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-dels-jwt&quot; tabindex=&quot;-1&quot;&gt;Desavantatges dels JWT&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Revocació complexa&lt;/strong&gt;: Una vegada emesos, és difícil revocar-los sense mantenir una llista negra.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sobrecarrega de dades&lt;/strong&gt;: Si els tokens són grans, poden afectar el rendiment, especialment en xarxes de baixa latència.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;millors-practiques-2&quot; tabindex=&quot;-1&quot;&gt;Millors Pràctiques&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Utilitzar signatura HS256 o RS256 per garantir la integritat del token.&lt;/li&gt;
&lt;li&gt;No emmagatzemar dades sensibles directament al token.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cache-del-navegador&quot; tabindex=&quot;-1&quot;&gt;Cache del Navegador&lt;/h3&gt;
&lt;p&gt;El &lt;strong&gt;cache del navegador&lt;/strong&gt; s&#39;utilitza per emmagatzemar còpies temporals de recursos web per millorar el rendiment i reduir la càrrega del servidor.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-del-cache&quot; tabindex=&quot;-1&quot;&gt;Avantatges del Cache&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Rendiment&lt;/strong&gt;: Redueix el temps de càrrega dels recursos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Optimització&lt;/strong&gt;: Disminueix l&#39;ample de banda requerit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-del-cache&quot; tabindex=&quot;-1&quot;&gt;Desavantatges del Cache&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistència&lt;/strong&gt;: Pot servir dades obsoletes si no es gestiona correctament.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control&lt;/strong&gt;: Requereix configuració per evitar el caching indesitjat de dades dinàmiques.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;millors-practiques-3&quot; tabindex=&quot;-1&quot;&gt;Millors Pràctiques&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Configurar els encapçalaments HTTP correctament (&lt;code&gt;Cache-Control&lt;/code&gt;, &lt;code&gt;ETag&lt;/code&gt;) per gestionar l&#39;actualització de recursos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sincronitzacio-offline&quot; tabindex=&quot;-1&quot;&gt;Sincronització Offline&lt;/h3&gt;
&lt;p&gt;La &lt;strong&gt;sincronització offline&lt;/strong&gt; es refereix a la capacitat d&#39;una aplicació web de funcionar sense connexió a Internet, sincronitzant dades quan es recupera la connexió.&lt;/p&gt;
&lt;h4 id=&quot;tecniques-i-eines&quot; tabindex=&quot;-1&quot;&gt;Tècniques i Eines&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IndexedDB&lt;/strong&gt;: Emmagatzema grans volums de dades estructurades dins del navegador.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Service Workers&lt;/strong&gt;: Gestionen peticions de xarxa, proporcionant funcionalitats offline i cache avançat.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;millors-practiques-4&quot; tabindex=&quot;-1&quot;&gt;Millors Pràctiques&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Gestionar conflictes de dades quan es torna a estar en línia.&lt;/li&gt;
&lt;li&gt;Utilitzar estratègies de sincronització optimitzades per minimitzar l&#39;ample de banda i el temps de sincronització.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;seguretat-de-les-cookies-i-sessions&quot; tabindex=&quot;-1&quot;&gt;Seguretat de les Cookies i Sessions&lt;/h3&gt;
&lt;p&gt;La &lt;strong&gt;seguretat&lt;/strong&gt; és fonamental en la gestió de cookies i sessions per protegir les dades dels usuaris de possibles atacs.&lt;/p&gt;
&lt;h4 id=&quot;practiques-de-seguretat&quot; tabindex=&quot;-1&quot;&gt;Pràctiques de Seguretat&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSRF&lt;/strong&gt;: Utilitzar tokens CSRF per validar sol·licituds d&#39;accions sensibles.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;XSS&lt;/strong&gt;: Sanear les dades d&#39;entrada i utilitzar capçaleres de seguretat (&lt;code&gt;Content-Security-Policy&lt;/code&gt;) per prevenir XSS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure Flag&lt;/strong&gt;: Marcar les cookies amb l&#39;atribut &lt;code&gt;Secure&lt;/code&gt; perquè només s&#39;enviïn a través de connexions HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;conclusio&quot; tabindex=&quot;-1&quot;&gt;Conclusió&lt;/h4&gt;
&lt;p&gt;La selecció del mecanisme adequat per al manteniment de l&#39;estat en una aplicació web depèn de les necessitats específiques de l&#39;aplicació, el volum de dades, els requisits de seguretat i l&#39;arquitectura del sistema. Avaluar cada tècnica pel que fa a avantatges i desavantatges ajudarà a prendre decisions informades i construir aplicacions web més segures i eficients.&lt;/p&gt;
&lt;h2 id=&quot;2-exemples-de-cookies-i-sessions-en-php&quot; tabindex=&quot;-1&quot;&gt;2.Exemples de Cookies i Sessions en PHP&lt;/h2&gt;
&lt;h3 id=&quot;cookies-1&quot; tabindex=&quot;-1&quot;&gt;Cookies&lt;/h3&gt;
&lt;p&gt;Les cookies s&#39;emmagatzemen en el array global &lt;code&gt;$_COOKIE&lt;/code&gt;. El que col·loquem dins del array, es guardarà en el client. Cal tindre present que el client pot no voler emmagatzemar-les.&lt;/p&gt;
&lt;p&gt;Existeix una limitació de 20 cookies per domini i 300 en total en el navegador.&lt;/p&gt;
&lt;p&gt;En PHP, per a crear una cookie s&#39;utilitza la funció &lt;code&gt;setcookie&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
setcookie(
    &#39;nom_cookie&#39;,
    &#39;valor_cookie&#39;,
    [
        &#39;expires&#39; =&amp;gt; time() + 3600, // 1 hora
        &#39;path&#39; =&amp;gt; &#39;/&#39;,
        &#39;domain&#39; =&amp;gt; &#39;&#39;, // Domini actual
        &#39;secure&#39; =&amp;gt; true, // Només HTTPS
        &#39;httponly&#39; =&amp;gt; true, // Només accessible via HTTP
        &#39;samesite&#39; =&amp;gt; &#39;Lax&#39; // o &#39;Strict&#39; o &#39;None&#39;
    ]
);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Destacar que el nom no pot contindre espais ni el caràcter &lt;code&gt;;&lt;/code&gt;. Respecte al contingut de la cookie, no pot superar els 4 KB.&lt;/p&gt;
&lt;h4 id=&quot;consideracions-de-seguretat-per-a-cookies&quot; tabindex=&quot;-1&quot;&gt;Consideracions de seguretat per a cookies:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;HTTPOnly&lt;/strong&gt;: Assegura&#39;t que les cookies que contenen informació sensible no siguin accessibles per JavaScript utilitzant l&#39;atribut HttpOnly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Secure&lt;/strong&gt;: Utilitza l&#39;atribut Secure per assegurar que les cookies només es transmeten en connexions HTTPS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SameSite&lt;/strong&gt;: Defineix correctament l&#39;atribut SameSite per a prevenir atacs CSRF (Cross-Site Request Forgery).&lt;/p&gt;
&lt;p&gt;Per exemple, mitjançant &lt;em&gt;cookies&lt;/em&gt; podem comprovar la quantitat de visites diferents que realitza un usuari:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
$accesosPagina = 0;
if (isset($_COOKIE[&#39;accesos&#39;])) { 
    $accesosPagina = $_COOKIE[&#39;accesos&#39;]; // recuperamos una cookie
    setcookie(&#39;accesos&#39;, ++$accesosPagina); // le asignamos un valor
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! tip &amp;quot;Inspeccionant les cookies&amp;quot;&lt;br /&gt;
Si volem veure que contenen les cookies que tenim emmagatzemades en el navegador, es pot comprovar el seu valor en Dev Tools --&amp;gt; Application --&amp;gt; Storage&lt;/p&gt;
&lt;p&gt;El temps de vida de les cookies pot ser tan llarg com el lloc web en el qual resideixen. Elles seguiran ací, fins i tot si el navegador està tancat o obert.&lt;/p&gt;
&lt;p&gt;Per a esborrar una cookie es pot posar que expiren en el passat:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
setcookie(nombre, &amp;quot;&amp;quot;, 1) // pasado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;O que caduquen dins d&#39;un període de temps deteminado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
setcookie(nombre, valor, time() + 3600) // Caducan dentro de una hora
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/04/04cookies.png&quot; alt=&quot;04cookies.png|700&quot; width=&quot;700px&quot; /&gt;&lt;br /&gt;
S&#39;utilitzen per a:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recordar els inicis de sessió&lt;/li&gt;
&lt;li&gt;Emmagatzemar valors temporals d&#39;usuari&lt;/li&gt;
&lt;li&gt;Si un usuari està navegant per una llista paginada d&#39;articles, ordenats d&#39;una certa manera, podem emmagatzemar l&#39;ajust de la classificació.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L&#39;alternativa en el client per a emmagatzemar informació en el navegador és l&#39;objecte &lt;a href=&quot;https://developer.mozilla.org/es/docs/web/api/window/localstorage&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;LocalStorage&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sessio&quot; tabindex=&quot;-1&quot;&gt;Sessió&lt;/h3&gt;
&lt;p&gt;La sessió afig la gestió de l&#39;estat a HTTP, emmagatzemant en aquest cas la informació en el servidor.&lt;br /&gt;
Cada visitant té un ID de sessió únic, el qual per defecte s&#39;emmagatzema en una cookie denominada &lt;code&gt;PHPSESSID&lt;/code&gt;.&lt;br /&gt;
Si el client no té les cookies actives, l&#39;ID es propaga en cada URL dins del mateix domini.&lt;br /&gt;
Cada sessió té associat un magatzem de dades mitjançant el array global &lt;code&gt;$_SESSION&lt;/code&gt;, en el qual podem emmagatzemar i recuperar informació.&lt;/p&gt;
&lt;p&gt;La sessió comença en executar un script PHP. Es genera un nou ID i es carreguen les dades del magatzem:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/04/04sesion.png&quot; alt=&quot;04sesion.png|700&quot; width=&quot;700px&quot; /&gt;&lt;br /&gt;
Les operacions que podem realitzar amb la sessió són:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
session_start(); // carga la sesión
session_regenerate_id(true); // regenera el id
session_id() // devuelve el id
$_SESSION[clave] = valor; // inserción
session_destroy(); // destruye la sesión
unset($_SESSION[clave]; // borrado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Veurem mitjançant un exemple com podem inserir en un pàgina dades en la sessió per a posteriorment en una altra pàgina accedir a aqueixes dades. Per exemple, en &lt;code&gt;sesion.php&lt;/code&gt; tindríem&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Iniciar sessió
session_start();
session_regenerate_id(true);

// Establir valors de sessió
$_SESSION[&#39;usuari&#39;] = &#39;JohnDoe&#39;;
$_SESSION[&#39;rol&#39;] = &#39;admin&#39;;

?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I posteriorment podem accedir a la sessió en &lt;code&gt;sesion1.php&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
session_start();
// Recuperar valors de sessió
echo &#39;Usuari: &#39; . $_SESSION[&#39;usuari&#39;] . &#39;&amp;lt;br&amp;gt;&#39;;
echo &#39;Rol: &#39; . $_SESSION[&#39;rol&#39;] . &#39;&amp;lt;br&amp;gt;&#39;;

// Tancar sessió de forma segura
session_unset();  // Eliminar totes les variables de sessió
session_destroy();  // Destruir la sessió
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!note] &amp;quot;Configurant la sessió en &lt;code&gt;php.ini&lt;/code&gt;&amp;quot;&lt;br /&gt;
Les següent propietats de &lt;code&gt;php.ini&lt;/code&gt; permeten configurar alguns aspectes de la sessió: * &lt;code&gt;session.save_handler&lt;/code&gt;: controlador que gestiona com s&#39;emmagatzema (&lt;code&gt;files&lt;/code&gt;)&lt;br /&gt;
* &lt;code&gt;session.save_path&lt;/code&gt;: ruta on s&#39;emmagatzemen els arxius amb les dades (si tenim un clúster, podríem usar &lt;code&gt;/mnt/sessions&lt;/code&gt; en tots els servidor de manera que apunten a una carpeta compartida)&lt;br /&gt;
* &lt;code&gt;session.name&lt;/code&gt;: nom de la sessió (&lt;code&gt;PHSESSID&lt;/code&gt;)&lt;br /&gt;
* &lt;code&gt;session.acte_start&lt;/code&gt;: Es pot fer que s&#39;autocarregue amb cada script. Per defecte està deshabilitat&lt;br /&gt;
* &lt;code&gt;session.cookie_lifetime&lt;/code&gt;: temps de vida per defecte&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Més informació en la &lt;a href=&quot;https://www.php.net/manual/es/session.configuration.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentació oficial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;serialitzacio-en-php&quot; tabindex=&quot;-1&quot;&gt;Serialització en PHP&lt;/h3&gt;
&lt;p&gt;La serialització és el procés de convertir una estructura de dades o un objecte en una seqüència de caràcters que pot ser fàcilment emmagatzemada o transmesa i després reconstruïda. PHP proporciona dos funcions principals per a això: serialize() i unserialize().&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;serialize()&lt;br /&gt;
La funció serialize() en PHP s&#39;utilitza per a convertir una estructura de dades o un objecte en una representació de cadena.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$data = array(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;);
$serialized_data = serialize($data);
echo $serialized_data;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eixida&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;a:3:{i:0;s:1:&amp;quot;a&amp;quot;;i:1;s:1:&amp;quot;b&amp;quot;;i:2;s:1:&amp;quot;c&amp;quot;;}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;unserialize()&lt;br /&gt;
La funció unserialize() en PHP s&#39;utilitza per a convertir la representació de cadena serialitzada de nou en una estructura de dades o un objecte.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;$original_data = unserialize($serialized_data);
print_r($original_data);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Eixida&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;Array
(
    [0] =&amp;gt; a
    [1] =&amp;gt; b
    [2] =&amp;gt; c
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;utilitzant-amb-sessions&quot; tabindex=&quot;-1&quot;&gt;Utilitzant amb Sessions&lt;/h4&gt;
&lt;p&gt;Les sessions en PHP permeten emmagatzemar informació d&#39;usuari per ser utilitzada en diverses pàgines. Pot ser útil serialitzar dades per a emmagatzemar-les en una sessió:&lt;/p&gt;
&lt;p&gt;Iniciant una sessió i emmagatzemant dades serialitzades:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;session_start();
session_regenerate_id(true);

$data = array(&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;);
$_SESSION[&#39;data_serialitzada&#39;] = serialize($data);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;session_start();

if (isset($_SESSION[&#39;data_serialitzada&#39;])) {
$data = unserialize($_SESSION[&#39;data_serialitzada&#39;]);
print_r($data);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consideracions de Seguretat:&lt;br /&gt;
És crucial entendre que la funció unserialize() pot ser perillosa si s&#39;usa amb dades que no són de confiança, ja que podria portar a l&#39;execució de codi arbitrari. Per això, mai has de deserialitzar dades que vinguen d&#39;una font desconeguda o no fiable sense validar-les prèviament.&lt;/p&gt;
&lt;h2 id=&quot;3-autenticacio-d-usuaris&quot; tabindex=&quot;-1&quot;&gt;3.Autenticació d&#39;usuaris&lt;/h2&gt;
&lt;h3 id=&quot;mecanismes-d-autenticacio-d-usuaris&quot; tabindex=&quot;-1&quot;&gt;Mecanismes d&#39;Autenticació d&#39;Usuaris&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mecanisme d&#39;Autenticació&lt;/th&gt;
&lt;th&gt;Característiques&lt;/th&gt;
&lt;th&gt;Avantatges&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Bàsica (usuari/contrasenya)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Es requereix un nom d&#39;usuari i una contrasenya per accedir.&lt;/td&gt;
&lt;td&gt;Fàcil d&#39;implementar, àmpliament utilitzada.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cookies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Emmagatzema informació d&#39;autenticació en el navegador de l&#39;usuari.&lt;/td&gt;
&lt;td&gt;Persistència d&#39;inici de sessió, personalització d&#39;experiència.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sessions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Manté l&#39;estat d&#39;autenticació en el servidor amb una identificació de sessió única.&lt;/td&gt;
&lt;td&gt;Major seguretat, evita la necessitat d&#39;emmagatzemar informació sensible al client.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;OAuth&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Permet als usuaris accedir a recursos sense compartir les seves credencials.&lt;/td&gt;
&lt;td&gt;Seguretat millorada, experiència d&#39;usuari simplificada.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;JWT (JSON Web Token)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Utilitza tokens basats en JSON per a l&#39;autenticació.&lt;/td&gt;
&lt;td&gt;Lliure d&#39;estat, fàcil de compartir entre diferents serveis.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SAML (Security Assertion Markup Language)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Utilitza XML per a intercanviar dades d&#39;autenticació entre l&#39;usuari i el servei.&lt;/td&gt;
&lt;td&gt;Integració amb sistemes d&#39;autenticació empresarial, alt nivell de seguretat.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Autenticació multifactor (MFA)&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Requereix múltiples formes de verificació (per exemple, contrasenya + codi SMS).&lt;/td&gt;
&lt;td&gt;Seguretat augmentada, redueix el risc de compromís de comptes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;exemple-amb-sessions&quot; tabindex=&quot;-1&quot;&gt;Exemple amb sessions&lt;/h4&gt;
&lt;p&gt;Una sessió estableix una relació anònima amb un usuari particular, de manera que podem saber si és el mateix usuari entre dues peticions diferents. Si preparem un sistema de login, podrem saber qui utilitza la nostra aplicació.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Llista d&#39;usuaris predefinits amb contrasenyes en text pla
$users = [
    &#39;user1@example.com&#39; =&amp;gt; &#39;password1&#39;,
    &#39;user2@example.com&#39; =&amp;gt; &#39;password2&#39;,
];

// Convertir les contrasenyes a un format encriptat
foreach ($users as $email =&amp;gt; $password) {
    $users[$email] = password_hash($password, PASSWORD_BCRYPT);
}

// Formulari d&#39;autenticació
if (isset($_POST[&#39;login&#39;])) {
    $email = $_POST[&#39;email&#39;];
    $password = $_POST[&#39;password&#39;];

    if (isset($users[$email]) &amp;amp;&amp;amp; password_verify($password, $users[$email])) {
        // L&#39;usuari està autenticat
        session_start();
        $_SESSION[&#39;user&#39;] = $email;
        echo &amp;quot;Login successful. Welcome, &amp;quot; . $email;
    } else {
        // Credencials incorrectes
        echo &amp;quot;Invalid email or password.&amp;quot;;
    }
}
?&amp;gt;
&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;
    Email: &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; required&amp;gt;
    Password: &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; required&amp;gt;
    &amp;lt;button type=&amp;quot;submit&amp;quot; name=&amp;quot;login&amp;quot;&amp;gt;Login&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquest exemple mostra com mantenir l&#39;estat de la sessió d&#39;un usuari una vegada autenticat.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
session_start();

if (!isset($_SESSION[&#39;user&#39;])) {
    header(&amp;quot;Location: login.php&amp;quot;);
    exit();
}

// Mostra la pàgina només si l&#39;usuari està autenticat
echo &amp;quot;Welcome, &amp;quot; . $_SESSION[&#39;user&#39;];
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finalment, necessitem l&#39;opció de tancar la sessió que col·loquem en &lt;code&gt;logout.php&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Recuperamos la información de la sesión
session_start();

// Y la destruimos
session_destroy();
header(&amp;quot;Location: index.php&amp;quot;);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;!!! warning &amp;quot;Autenticació en producció&amp;quot;&lt;br /&gt;
En l&#39;actualitat l&#39;autenticació d&#39;usuari no es realitza gestionant la sessió direcamente, sinó que es realitza mitjançant algun framekwork que abstrau tot el procés o la integració de mecanismes d&#39;autenticació tipus &lt;em&gt;OAuth&lt;/em&gt;, com estudiarem en l&#39;última unitat mitjançant &lt;em&gt;Laravel&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;exemple-amb-cookies&quot; tabindex=&quot;-1&quot;&gt;Exemple amb cookies&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
// Llista d&#39;usuaris predefinits amb contrasenyes en text pla
$users = [
    &#39;user1@example.com&#39; =&amp;gt; &#39;password1&#39;,
    &#39;user2@example.com&#39; =&amp;gt; &#39;password2&#39;,
];

// Convertir les contrasenyes a un format encriptat
foreach ($users as $email =&amp;gt; $password) {
    $users[$email] = password_hash($password, PASSWORD_BCRYPT);
}

if (isset($_POST[&#39;login&#39;])) {
    $email = $_POST[&#39;email&#39;];
    $password = $_POST[&#39;password&#39;];

    if (isset($users[$email]) &amp;amp;&amp;amp; password_verify($password, $users[$email])) {
        // Establir una cookie d&#39;autenticació
        setcookie(&amp;quot;user&amp;quot;, $email, time() + (86400 * 30), &amp;quot;/&amp;quot;); // 86400 = 1 dia
        echo &amp;quot;Login successful. Welcome, &amp;quot; . $email;
    } else {
        // Credencials incorrectes
        echo &amp;quot;Invalid email or password.&amp;quot;;
    }
}

// Llegir la cookie
if (isset($_COOKIE[&#39;user&#39;])) {
    echo &amp;quot;Welcome back, &amp;quot; . $_COOKIE[&#39;user&#39;];
}
?&amp;gt;
&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;
    Email: &amp;lt;input type=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; required&amp;gt;
    Password: &amp;lt;input type=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; required&amp;gt;
    &amp;lt;button type=&amp;quot;submit&amp;quot; name=&amp;quot;login&amp;quot;&amp;gt;Login&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning] &amp;quot;Seguretat en cookies&amp;quot;&lt;br /&gt;
Les cookies són vulnerables a atacs com &lt;em&gt;Cross-Site Scripting (XSS)&lt;/em&gt; i &lt;em&gt;Cross-Site Request Forgery (CSRF)&lt;/em&gt;. Per a protegir-les, s&#39;ha de configurar la cookie com a segura i només accessible a través de la web.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;exemple-amb-jwt&quot; tabindex=&quot;-1&quot;&gt;Exemple amb JWT&lt;/h4&gt;
&lt;p&gt;Aquest exemple mostra com generar i verificar un JWT per a l&#39;autenticació.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
function base64UrlEncode($data) {
    return rtrim(strtr(base64_encode($data), &#39;+/&#39;, &#39;-_&#39;), &#39;=&#39;);
}

function base64UrlDecode($data) {
    return base64_decode(strtr($data, &#39;-_&#39;, &#39;+/&#39;));
}

function createJWT($header, $payload, $secret) {
    $headerEncoded = base64UrlEncode(json_encode($header));
    $payloadEncoded = base64UrlEncode(json_encode($payload));

    $signature = hash_hmac(&#39;sha256&#39;, &amp;quot;$headerEncoded.$payloadEncoded&amp;quot;, $secret, true);
    $signatureEncoded = base64UrlEncode($signature);

    return &amp;quot;$headerEncoded.$payloadEncoded.$signatureEncoded&amp;quot;;
}

function verifyJWT($jwt, $secret) {
    list($headerEncoded, $payloadEncoded, $signatureEncoded) = explode(&#39;.&#39;, $jwt);

    $signature = base64UrlDecode($signatureEncoded);
    $expectedSignature = hash_hmac(&#39;sha256&#39;, &amp;quot;$headerEncoded.$payloadEncoded&amp;quot;, $secret, true);

    if ($signature === $expectedSignature) {
        return json_decode(base64UrlDecode($payloadEncoded));
    }

    return false;
}

// Exemples d&#39;ús
$header = [&#39;alg&#39; =&amp;gt; &#39;HS256&#39;, &#39;typ&#39; =&amp;gt; &#39;JWT&#39;];
$payload = [&#39;email&#39; =&amp;gt; &#39;user1@example.com&#39;, &#39;exp&#39; =&amp;gt; time() + 3600];
$secret = &#39;your_secret_key&#39;;

$jwt = createJWT($header, $payload, $secret);
echo &amp;quot;JWT: &amp;quot; . $jwt . &amp;quot;&#92;n&amp;quot;;

$decoded = verifyJWT($jwt, $secret);
if ($decoded) {
    echo &amp;quot;JWT valid: &amp;quot; . json_encode($decoded) . &amp;quot;&#92;n&amp;quot;;
} else {
    echo &amp;quot;Invalid JWT.&#92;n&amp;quot;;
}
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exemple-amb-mfa&quot; tabindex=&quot;-1&quot;&gt;Exemple amb MFA&lt;/h4&gt;
&lt;p&gt;Aquest exemple mostra com afegir una capa addicional d&#39;autenticació amb un codi MFA.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
session_start();

function sendMFACode() {
    $code = rand(100000, 999999);
    $_SESSION[&#39;mfa_code&#39;] = $code;

    // Simular enviament de codi via email o SMS
    echo &amp;quot;Verification code: $code&amp;quot;; // En un entorn real, envia el codi per email o SMS.
}

function verifyMFACode($inputCode) {
    return isset($_SESSION[&#39;mfa_code&#39;]) &amp;amp;&amp;amp; $inputCode == $_SESSION[&#39;mfa_code&#39;];
}

if (isset($_POST[&#39;send_code&#39;])) {
    sendMFACode();
}

if (isset($_POST[&#39;verify_code&#39;])) {
    if (verifyMFACode($_POST[&#39;mfa_code&#39;])) {
        echo &amp;quot;MFA successful.&amp;quot;;
    } else {
        echo &amp;quot;Invalid verification code.&amp;quot;;
    }
}
?&amp;gt;
&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;
    &amp;lt;button type=&amp;quot;submit&amp;quot; name=&amp;quot;send_code&amp;quot;&amp;gt;Send MFA Code&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&amp;lt;form method=&amp;quot;post&amp;quot;&amp;gt;
    MFA Code: &amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;mfa_code&amp;quot; required&amp;gt;
    &amp;lt;button type=&amp;quot;submit&amp;quot; name=&amp;quot;verify_code&amp;quot;&amp;gt;Verify MFA Code&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exemple-amb-o-auth&quot; tabindex=&quot;-1&quot;&gt;Exemple amb OAuth&lt;/h4&gt;
&lt;p&gt;Per a OAuth, es pot utilitzar un proveïdor extern com Google per autenticar els usuaris. Ho vorem més avant.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;?php
require_once &#39;vendor/autoload.php&#39;;

$provider = new League&#92;OAuth2&#92;Client&#92;Provider&#92;Google([
    &#39;clientId&#39;     =&amp;gt; &#39;your-client-id&#39;,
    &#39;clientSecret&#39; =&amp;gt; &#39;your-client-secret&#39;,
    &#39;redirectUri&#39;  =&amp;gt; &#39;your-redirect-url&#39;,
]);

if (!isset($_GET[&#39;code&#39;])) {
    $authUrl = $provider-&amp;gt;getAuthorizationUrl();
    $_SESSION[&#39;oauth2state&#39;] = $provider-&amp;gt;getState();
    header(&#39;Location: &#39; . $authUrl);
    exit;
} elseif (empty($_GET[&#39;state&#39;]) || ($_GET[&#39;state&#39;] !== $_SESSION[&#39;oauth2state&#39;])) {
    unset($_SESSION[&#39;oauth2state&#39;]);
    exit(&#39;Invalid state&#39;);
} else {
    $token = $provider-&amp;gt;getAccessToken(&#39;authorization_code&#39;, [
        &#39;code&#39; =&amp;gt; $_GET[&#39;code&#39;]
    ]);

    $user = $provider-&amp;gt;getResourceOwner($token);
    $userData = $user-&amp;gt;toArray();

    // Mostra la informació de l&#39;usuari
    echo &#39;Hello, &#39; . $userData[&#39;name&#39;];
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;4-referencies-addicionals&quot; tabindex=&quot;-1&quot;&gt;4. Referències Addicionals&lt;/h2&gt;
&lt;p&gt;A continuació es presenten diverses referències que poden ajudar-te a aprofundir en el tema de la gestió de sessions i cookies en PHP.&lt;/p&gt;
&lt;h3 id=&quot;documentacio-oficial-de-php&quot; tabindex=&quot;-1&quot;&gt;Documentació Oficial de PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Sessions a PHP&lt;/strong&gt;: La documentació oficial de PHP proporciona informació detallada sobre l&#39;ús de sessions, incloent-hi exemples pràctics i consells de millors pràctiques.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/es/book.session.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sessions a PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cookies a PHP&lt;/strong&gt;: Trobaràs informació oficial sobre com treballar amb cookies en PHP, amb descripcions d&#39;atributs com &lt;code&gt;HttpOnly&lt;/code&gt;, &lt;code&gt;Secure&lt;/code&gt; i &lt;code&gt;SameSite&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/es/function.setcookie.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cookies a PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;articles-i-blocs-tecnics&quot; tabindex=&quot;-1&quot;&gt;Articles i Blocs Tècnics&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Sessions: Tips &amp;amp; Tricks&lt;/strong&gt;: Aquest article discuteix tècniques avançades per gestionar sessions en PHP, amb exemples i millors pràctiques per a la seguretat.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.php.net/manual/en/features.sessions.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PHP Sessions: Tips &amp;amp; Tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Handling Cookies Securely in PHP&lt;/strong&gt;: Una guia sobre com manejar cookies de manera segura, destacant estratègies per protegir les dades de l&#39;usuari.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://paragonie.com/blog/2015/04/secure-authentication-php-with-long-term-persistence&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Handling Cookies Securely in PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;llibres-sobre-php&quot; tabindex=&quot;-1&quot;&gt;Llibres sobre PHP&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;Modern PHP: New Features and Good Practices&amp;quot;&lt;/strong&gt; de Josh Lockhart: Aquest llibre cobreix les novetats de PHP i les millors pràctiques, incloent la seguretat de sessions i cookies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;PHP Objects, Patterns, and Practice&amp;quot;&lt;/strong&gt; de M. Zandstra: Proporciona una visió profunda sobre el disseny de programari amb PHP, incloent-hi aspectes de seguretat relacionats amb sessions i cookies.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;guies-de-seguretat-en-desenvolupament-web&quot; tabindex=&quot;-1&quot;&gt;Guies de Seguretat en Desenvolupament Web&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OWASP Secure Coding Practices&lt;/strong&gt;: Aquesta guia de OWASP ofereix una ràpida referència sobre les millors pràctiques de codificació segura, útils per a protegir les teves aplicacions web.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://owasp.org/www-project-secure-coding-practices-quick-reference-guide/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;OWASP Secure Coding Practices&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;OWASP Cheat Sheet on Session Management&lt;/strong&gt;: Una fitxa de referència ràpida de OWASP sobre la gestió de sessions, proporcionant consells de seguretat essencials.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;OWASP Cheat Sheet on Session Management&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;conferencies-i-videos-educatius&quot; tabindex=&quot;-1&quot;&gt;Conferències i Vídeos Educatius&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PHP Conference YouTube Channel&lt;/strong&gt;: El canal de YouTube de PHP Conference ofereix vídeos de conferències i xerrades que cobreixen una varietat de temes, incloent sessions i seguretat.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/user/phpvideos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PHP Conference YouTube Channel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Laracasts&lt;/strong&gt;: Ofereix vídeos d&#39;alta qualitat sobre desenvolupament en PHP i Laravel, amb temes rellevants per a sessions i cookies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://laracasts.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Laracasts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tutorials-online-i-plataformes-educatives&quot; tabindex=&quot;-1&quot;&gt;Tutorials Online i Plataformes Educatives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Stack Overflow PHP Sessions Tag&lt;/strong&gt;: Un lloc de consulta on trobar respostes a preguntes freqüents sobre la gestió de sessions en PHP.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/tagged/php+session&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Stack Overflow PHP Sessions Tag&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cursos a Udemy sobre PHP&lt;/strong&gt;: Cursos que cobreixen des de conceptes bàsics fins a avançats de PHP, incloent-hi la gestió de sessions i cookies.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.udemy.com/topic/php/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cursos a Udemy sobre PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-exercicis&quot; tabindex=&quot;-1&quot;&gt;5.Exercicis&lt;/h2&gt;
&lt;h3 id=&quot;bateria-d-exercicis-solucionats-per-a-la-unitat-de-programacio-web&quot; tabindex=&quot;-1&quot;&gt;Bateria d&#39;Exercicis Solucionats per a la Unitat de Programació web&lt;/h3&gt;
&lt;h4 id=&quot;exercici-1-crear-una-sessio&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Crear una sessió&lt;/h4&gt;
&lt;p&gt;1.Crea una pàgina PHP que inicialitze una sessió i emmagatzeme el nom i el rol d&#39;un usuari en variables de sessió. Mostra aquests valors a la pàgina web.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;```php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
// Iniciar sessió&lt;br /&gt;
session_start();&lt;/p&gt;
&lt;p&gt;// Emmagatzemar informació de l&#39;usuari en la sessió&lt;br /&gt;
$_SESSION[&#39;nom&#39;] = &#39;Joan&#39;;&lt;br /&gt;
$_SESSION[&#39;rol&#39;] = &#39;Administrador&#39;;&lt;/p&gt;
&lt;p&gt;echo &#39;Benvingut, &#39; . $_SESSION[&#39;nom&#39;] . &#39;&lt;br /&gt;&#39;;&lt;br /&gt;
echo &#39;Rol: &#39; . $_SESSION[&#39;rol&#39;] . &#39;&lt;br /&gt;&#39;;&lt;br /&gt;
?&amp;gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-2-regenerar-l-id-de-sessio&quot; tabindex=&quot;-1&quot;&gt;Exercici 2: Regenerar l&#39;ID de sessió&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Modifica l&#39;exercici anterior per regenerar l&#39;ID de sessió just després d&#39;emmagatzemar la informació de l&#39;usuari.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;```php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
// Iniciar sessió&lt;br /&gt;
session_start();&lt;/p&gt;
&lt;p&gt;// Emmagatzemar informació de l&#39;usuari en la sessió&lt;br /&gt;
$_SESSION[&#39;nom&#39;] = &#39;Joan&#39;;&lt;br /&gt;
$_SESSION[&#39;rol&#39;] = &#39;Administrador&#39;;&lt;/p&gt;
&lt;p&gt;// Regenerar l&#39;ID de sessió&lt;br /&gt;
session_regenerate_id(true);&lt;/p&gt;
&lt;p&gt;echo &#39;Benvingut, &#39; . $_SESSION[&#39;nom&#39;] . &#39;&lt;br /&gt;&#39;;&lt;br /&gt;
echo &#39;Rol: &#39; . $_SESSION[&#39;rol&#39;] . &#39;&lt;br /&gt;&#39;;&lt;br /&gt;
?&amp;gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-3-tancar-la-sessio&quot; tabindex=&quot;-1&quot;&gt;Exercici 3: Tancar la sessió&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Escriu un script PHP que elimine totes les variables de sessió i destrueixi la sessió quan l&#39;usuari tanqui sessió.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;```php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
// Iniciar sessió&lt;br /&gt;
session_start();&lt;/p&gt;
&lt;p&gt;// Eliminar totes les variables de sessió&lt;br /&gt;
session_unset();&lt;/p&gt;
&lt;p&gt;// Destruir la sessió&lt;br /&gt;
session_destroy();&lt;br /&gt;
?&amp;gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-4-crear-una-cookie-segura&quot; tabindex=&quot;-1&quot;&gt;Exercici 4: Crear una cookie segura&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Escriu un script PHP per crear una cookie que emmagatzeme el nom d&#39;usuari amb els atributs de seguretat &lt;code&gt;HttpOnly&lt;/code&gt;, &lt;code&gt;Secure&lt;/code&gt; i &lt;code&gt;SameSite&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;&lt;code&gt;php     &amp;lt;?php     // Crear una cookie segura     setcookie(         &#39;nom_usuari&#39;,         &#39;Joan&#39;,         [             &#39;expires&#39; =&amp;gt; time() + 3600, // 1 hora             &#39;path&#39; =&amp;gt; &#39;/&#39;,             &#39;domain&#39; =&amp;gt; &#39;&#39;, // Domini actual             &#39;secure&#39; =&amp;gt; true, // Només HTTPS             &#39;httponly&#39; =&amp;gt; true, // Només accessible via HTTP             &#39;samesite&#39; =&amp;gt; &#39;Lax&#39; // o &#39;Strict&#39; o &#39;None&#39;         ]     );     ?&amp;gt;     &lt;/code&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-5-llegir-i-modificar-una-cookie&quot; tabindex=&quot;-1&quot;&gt;Exercici 5: Llegir i modificar una cookie&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea una pàgina PHP que llegeixca el valor d&#39;una cookie anomenada &lt;code&gt;nom_usuari&lt;/code&gt; i la modifique afegint un prefix de salutació.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;```php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
// Llegir el valor de la cookie&lt;br /&gt;
if (isset($_COOKIE[&#39;nom_usuari&#39;])) {&lt;br /&gt;
$nomUsuari = $_COOKIE[&#39;nom_usuari&#39;];&lt;br /&gt;
echo &#39;Hola, &#39; . $nomUsuari;&lt;/p&gt;
&lt;p&gt;// Modificar el valor de la cookie&lt;br /&gt;
$salutacio = &#39;Hola, &#39; . $nomUsuari;&lt;br /&gt;
setcookie(&#39;nom_usuari&#39;, $salutacio, time() + 3600, &#39;/&#39;);&lt;br /&gt;
} else {&lt;br /&gt;
echo &#39;Cookie not found.&#39;;&lt;br /&gt;
}&lt;br /&gt;
?&amp;gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-6-aplicacio-de-gestio-d-usuaris-amb-sessions&quot; tabindex=&quot;-1&quot;&gt;Exercici 6: Aplicació de gestió d&#39;usuaris amb sessions&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Desenvolupa una aplicació PHP amb dos scripts: un per iniciar sessió i un altre per tancar sessió. L&#39;aplicació ha de permetre que l&#39;usuari introdueixca el seu nom d&#39;usuari i vega un missatge de benvinguda una vegada haja iniciat sessió.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;```php&lt;br /&gt;
&lt;!-- login.php --&gt;&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
session_start();&lt;/p&gt;
&lt;p&gt;if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39;) {&lt;br /&gt;
$nomUsuari = $_POST[&#39;nom_usuari&#39;];&lt;/p&gt;
&lt;p&gt;// Emmagatzemar el nom d&#39;usuari en la sessió&lt;br /&gt;
$_SESSION[&#39;nom_usuari&#39;] = $nomUsuari;&lt;/p&gt;
&lt;p&gt;// Redireccionar a la pàgina de benvinguda&lt;br /&gt;
header(&#39;Location: welcome.php&#39;);&lt;br /&gt;
exit();&lt;br /&gt;
}&lt;br /&gt;
?&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;!DOCTYPE html&gt;&lt;br /&gt;
&lt;html&gt;&lt;br /&gt;
&lt;head&gt;&lt;br /&gt;
&lt;title&gt;Iniciar Sessió&lt;/title&gt;&lt;br /&gt;
&lt;/head&gt;&lt;br /&gt;
&lt;body&gt;&lt;br /&gt;
&lt;h2&gt;Iniciar Sessió&lt;/h2&gt;&lt;br /&gt;
&lt;form method=&quot;post&quot; action=&quot;https://pedroporo.github.io/login.php&quot;&gt;&lt;br /&gt;
&lt;label for=&quot;nom_usuari&quot;&gt;Nom d&#39;usuari:&lt;/label&gt;&lt;br /&gt;
&lt;input type=&quot;text&quot; id=&quot;nom_usuari&quot; name=&quot;nom_usuari&quot; required=&quot;&quot; /&gt;&lt;br /&gt;
&lt;button type=&quot;submit&quot;&gt;Iniciar Sessió&lt;/button&gt;&lt;br /&gt;
&lt;/form&gt;&lt;br /&gt;
&lt;/body&gt;&lt;br /&gt;
&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;p&gt;```php&lt;br /&gt;
&lt;!-- logout.php --&gt;&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
session_start();&lt;/p&gt;
&lt;p&gt;// Tancar sessió de forma segura&lt;br /&gt;
session_unset();&lt;br /&gt;
session_destroy();&lt;/p&gt;
&lt;p&gt;// Redireccionar a la pàgina de login&lt;br /&gt;
header(&#39;Location: login.php&#39;);&lt;br /&gt;
exit();&lt;br /&gt;
?&amp;gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;p&gt;```php&lt;br /&gt;
&lt;!-- wellcome.php --&gt;&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
session_start();&lt;/p&gt;
&lt;p&gt;if (!isset($_SESSION[&#39;nom_usuari&#39;])) {&lt;br /&gt;
// Redireccionar a la pàgina de login si no s&#39;ha iniciat sessió&lt;br /&gt;
header(&#39;Location: login.php&#39;);&lt;br /&gt;
exit();&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;$nomUsuari = $_SESSION[&#39;nom_usuari&#39;];&lt;br /&gt;
?&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;!DOCTYPE html&gt;&lt;br /&gt;
&lt;html&gt;&lt;br /&gt;
&lt;head&gt;&lt;br /&gt;
&lt;title&gt;Benvingut&lt;/title&gt;&lt;br /&gt;
&lt;/head&gt;&lt;br /&gt;
&lt;body&gt;&lt;br /&gt;
&lt;h2&gt;Benvingut, !&lt;/h2&gt;&lt;br /&gt;
&lt;p&gt;Aquesta és la teva pàgina de benvinguda.&lt;/p&gt;&lt;br /&gt;
&lt;a href=&quot;https://pedroporo.github.io/logout.php&quot;&gt;Tancar Sessió&lt;/a&gt;&lt;br /&gt;
&lt;/body&gt;&lt;br /&gt;
&lt;/html&gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;h4 id=&quot;exercici-7-aplicacio-de-gestio-de-preferencies-amb-cookies&quot; tabindex=&quot;-1&quot;&gt;Exercici 7: Aplicació de gestió de preferències amb cookies&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Crea una aplicació PHP que permeta als usuaris seleccionar el seu color preferit, emmagatzemant aquesta informació en una cookie. La pàgina hauria de mostrar el color preferit de l&#39;usuari en futures visites.&lt;/li&gt;
&lt;/ol&gt;
&lt;details&gt;
&lt;summary&gt;Solució&lt;/summary&gt;
&lt;p&gt;```php&lt;br /&gt;
&amp;lt;?php&lt;br /&gt;
// Llegir el color preferit de la cookie&lt;br /&gt;
&lt;mjx-container class=&quot;MathJax&quot; jax=&quot;SVG&quot; style=&quot;direction: ltr; position: relative;&quot;&gt;&lt;svg style=&quot;overflow: visible; min-height: 1px; min-width: 1px; vertical-align: -0.566ex;&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;22.23ex&quot; height=&quot;2.262ex&quot; role=&quot;img&quot; focusable=&quot;false&quot; viewBox=&quot;0 -750 9825.6 1000&quot; aria-hidden=&quot;true&quot;&gt;&lt;g stroke=&quot;currentColor&quot; fill=&quot;currentColor&quot; stroke-width=&quot;0&quot; transform=&quot;scale(1,-1)&quot;&gt;&lt;g data-mml-node=&quot;math&quot;&gt;&lt;g data-mml-node=&quot;mi&quot;&gt;&lt;path data-c=&quot;1D450&quot; d=&quot;M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(433,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(918,0)&quot;&gt;&lt;path data-c=&quot;1D459&quot; d=&quot;M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1216,0)&quot;&gt;&lt;path data-c=&quot;1D45C&quot; d=&quot;M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(1701,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2152,0)&quot;&gt;&lt;path data-c=&quot;1D443&quot; d=&quot;M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(2903,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3354,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(3820,0)&quot;&gt;&lt;path data-c=&quot;1D453&quot; d=&quot;M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4370,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(4836,0)&quot;&gt;&lt;path data-c=&quot;1D45F&quot; d=&quot;M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5287,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(5632,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(6270.8,0)&quot;&gt;&lt;path data-c=&quot;3D&quot; d=&quot;M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7326.6,0)&quot;&gt;&lt;path data-c=&quot;1D456&quot; d=&quot;M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(7671.6,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8140.6,0)&quot;&gt;&lt;path data-c=&quot;1D460&quot; d=&quot;M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(8609.6,0)&quot;&gt;&lt;path data-c=&quot;1D452&quot; d=&quot;M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mi&quot; transform=&quot;translate(9075.6,0)&quot;&gt;&lt;path data-c=&quot;1D461&quot; d=&quot;M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;g data-mml-node=&quot;mo&quot; transform=&quot;translate(9436.6,0)&quot;&gt;&lt;path data-c=&quot;28&quot; d=&quot;M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z&quot; style=&quot;stroke-width: 3;&quot;&gt;&lt;/path&gt;&lt;/g&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;&lt;mjx-assistive-mml unselectable=&quot;on&quot; display=&quot;inline&quot; style=&quot;top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; position: absolute; padding: 1px 0px 0px 0px; border: 0px; display: block; width: auto; overflow: hidden;&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;P&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;f&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&quot;false&quot;&gt;(&lt;/mo&gt;&lt;/math&gt;&lt;/mjx-assistive-mml&gt;&lt;/mjx-container&gt;_COOKIE[&#39;color_preferit&#39;]) ? $_COOKIE[&#39;color_preferit&#39;] : &#39;blau&#39;;&lt;/p&gt;
&lt;p&gt;if ($_SERVER[&#39;REQUEST_METHOD&#39;] === &#39;POST&#39;) {&lt;br /&gt;
$colorPreferit = $_POST[&#39;color_preferit&#39;];&lt;/p&gt;
&lt;p&gt;// Emmagatzemar el color preferit en una cookie&lt;br /&gt;
setcookie(&#39;color_preferit&#39;, $colorPreferit, time() + 3600, &#39;/&#39;);&lt;br /&gt;
}&lt;br /&gt;
?&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;!DOCTYPE html&gt;&lt;br /&gt;
&lt;html&gt;&lt;br /&gt;
&lt;head&gt;&lt;br /&gt;
&lt;title&gt;Preferències de Color&lt;/title&gt;&lt;br /&gt;
&lt;/head&gt;&lt;br /&gt;
&lt;body style=&quot;background-color: &lt;?php echo $colorPreferit; ?&gt;&quot;&gt;&lt;br /&gt;
&lt;h2&gt;Preferències de Color&lt;/h2&gt;&lt;br /&gt;
&lt;form method=&quot;post&quot;&gt;&lt;br /&gt;
&lt;label for=&quot;color_preferit&quot;&gt;Color preferit:&lt;/label&gt;&lt;br /&gt;
&lt;select id=&quot;color_preferit&quot; name=&quot;color_preferit&quot;&gt;&lt;br /&gt;
&amp;lt;option value=&amp;quot;blau&amp;quot; &amp;gt;Blau&lt;br /&gt;
&amp;lt;option value=&amp;quot;vermell&amp;quot; &amp;gt;Vermell&lt;br /&gt;
&amp;lt;option value=&amp;quot;verd&amp;quot; &amp;gt;Verd&lt;br /&gt;
&lt;/select&gt;&lt;br /&gt;
&lt;button type=&quot;submit&quot;&gt;Guardar&lt;/button&gt;&lt;br /&gt;
&lt;/form&gt;&lt;br /&gt;
&lt;/body&gt;&lt;br /&gt;
&lt;/html&gt;&lt;br /&gt;
```&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&quot;exercicis-proposats&quot; tabindex=&quot;-1&quot;&gt;Exercicis proposats&lt;/h3&gt;
&lt;h4 id=&quot;exercici-1-sistema-de-carret-de-compres-sense-base-de-dades&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Sistema de Carret de Compres sense Base de Dades&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Descripció:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Desenvolupa una aplicació PHP que permeta als usuaris afegir productes a un carret de compres i mostrar el contingut del carret. Utilitza sessions per a mantindre l&#39;estat del carret entre pàgines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requisits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear una pàgina on l&#39;usuari puga seleccionar productes.&lt;/li&gt;
&lt;li&gt;Afegir els productes seleccionats a un carret emmagatzemat en una sessió.&lt;/li&gt;
&lt;li&gt;Mostrar un resum del carret amb els productes afegits i les seues quantitats.&lt;/li&gt;
&lt;li&gt;Permetre que l&#39;usuari elimine productes del carret.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;ca&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Selecció de productes&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Afegir productes al carret&amp;lt;/h1&amp;gt;
    &amp;lt;form action=&amp;quot;carret.php&amp;quot; method=&amp;quot;POST&amp;quot;&amp;gt;
        &amp;lt;label for=&amp;quot;producte&amp;quot;&amp;gt;Tria un producte:&amp;lt;/label&amp;gt;
        &amp;lt;select name=&amp;quot;producte&amp;quot; id=&amp;quot;producte&amp;quot;&amp;gt;
            &amp;lt;option value=&amp;quot;Poma&amp;quot;&amp;gt;Poma&amp;lt;/option&amp;gt;
            &amp;lt;option value=&amp;quot;Plàtan&amp;quot;&amp;gt;Plàtan&amp;lt;/option&amp;gt;
            &amp;lt;option value=&amp;quot;Taronja&amp;quot;&amp;gt;Taronja&amp;lt;/option&amp;gt;
        &amp;lt;/select&amp;gt;
        &amp;lt;input type=&amp;quot;submit&amp;quot; value=&amp;quot;Afegir al carret&amp;quot;&amp;gt;
    &amp;lt;/form&amp;gt;
    &amp;lt;a href=&amp;quot;carret.php&amp;quot;&amp;gt;Veure carret&amp;lt;/a&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;exercici-2-autenticacio-basica-d-usuaris-amb-sessions&quot; tabindex=&quot;-1&quot;&gt;Exercici 2: Autenticació Bàsica d&#39;Usuaris amb Sessions&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Descripció:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Crea una aplicació PHP que permeta als usuaris iniciar sessió mitjançant un formulari. Utilitza sessions per a mantindre l&#39;estat d&#39;autenticació de l&#39;usuari i mostrar missatges personalitzats basats en aquest estat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requisits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear un formulari d&#39;inici de sessió que sol·licite el nom d&#39;usuari i la contrasenya.&lt;/li&gt;
&lt;li&gt;Emmagatzemar l&#39;estat d&#39;autenticació en una sessió després de verificar les credencials.&lt;/li&gt;
&lt;li&gt;Mostrar una pàgina de benvinguda personalitzada per a l&#39;usuari autenticat.&lt;/li&gt;
&lt;li&gt;Proporcionar un enllaç per a tancar sessió i destruir la sessió.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;exercici-3-recordatori-d-usuari-amb-cookies&quot; tabindex=&quot;-1&quot;&gt;Exercici 3: Recordatori d&#39;Usuari amb Cookies&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Descripció:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Afig una funcionalitat de &amp;quot;recordar-me&amp;quot; a l&#39;exercici anterior que emmagatzeme el nom d&#39;usuari en una cookie i permeta a l&#39;usuari ser recordat en futures visites al lloc web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requisits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Afig una opció de &amp;quot;recordar-me&amp;quot; al formulari d&#39;inici de sessió.&lt;/li&gt;
&lt;li&gt;Emmagatzemar el nom d&#39;usuari en una cookie quan l&#39;opció és seleccionada.&lt;/li&gt;
&lt;li&gt;Comprovar la cookie en futures visites i iniciar sessió automàticament si la cookie existeix.&lt;/li&gt;
&lt;li&gt;Assegurar que les cookies es configuren amb atributs de seguretat adequats (&lt;code&gt;HttpOnly&lt;/code&gt;, &lt;code&gt;Secure&lt;/code&gt;, &lt;code&gt;SameSite&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;exercici-4-formulari-de-contacte-amb-proteccio-csrf&quot; tabindex=&quot;-1&quot;&gt;Exercici 4: Formulari de Contacte amb Protecció CSRF&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Descripció:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Desenvolupa un formulari de contacte que permeta als usuaris enviar missatges i implementa protecció CSRF per a assegurar que les sol·licituds siguen legítimes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requisits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear un formulari de contacte amb camps per al nom, correu electrònic i missatge.&lt;/li&gt;
&lt;li&gt;Generar i emmagatzemar un token CSRF en una sessió quan es carrega el formulari.&lt;/li&gt;
&lt;li&gt;Incloure el token CSRF com a camp ocult en el formulari.&lt;/li&gt;
&lt;li&gt;Verificar el token CSRF quan s&#39;envia el formulari i mostrar un missatge de confirmació si és vàlid.&lt;/li&gt;
&lt;li&gt;Mostrar un missatge d&#39;error si el token CSRF no és vàlid o no existeix.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;exercici-5-seguiment-d-activitat-de-l-usuari-amb-sessions&quot; tabindex=&quot;-1&quot;&gt;Exercici 5: Seguiment d&#39;Activitat de l&#39;Usuari amb Sessions&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Descripció:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Crea un sistema que registre les pàgines visitades per l&#39;usuari durant una sessió i mostre aquesta informació quan l&#39;usuari visita una pàgina d&#39;activitat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Requisits:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emmagatzemar una llista de pàgines visitades per l&#39;usuari en una sessió.&lt;/li&gt;
&lt;li&gt;Actualitzar la llista de pàgines cada vegada que l&#39;usuari visite una nova pàgina.&lt;/li&gt;
&lt;li&gt;Crear una pàgina que mostre l&#39;historial de pàgines visitades durant la sessió actual.&lt;/li&gt;
&lt;li&gt;Assegurar que l&#39;historial es restableix quan l&#39;usuari tanca la sessió.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;a-href-10solucions-html-tema-3-programacio-web-target-blank-class-external-link-solucions-a&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://pedroporo.github.io/10solucions.html#tema-3-programacio-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solucions&lt;/a&gt;&lt;/h3&gt;
&lt;h2 id=&quot;6-enunciats-dels-projectes&quot; tabindex=&quot;-1&quot;&gt;6. Enunciats dels projectes&lt;/h2&gt;
&lt;h3 id=&quot;per-als-dos-projectes&quot; tabindex=&quot;-1&quot;&gt;Per als dos projectes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Autenticació de Jugadors:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un sistema d&#39;autenticació bàsic que permeta als jugadors iniciar sessió abans de començar el joc. Utilitza sessions per a mantindre l&#39;estat d&#39;autenticació.&lt;/li&gt;
&lt;li&gt;Ha de servir per als dos jocs, &amp;quot;Penjat&amp;quot; i &amp;quot;4 en Ratlla&amp;quot;.&lt;/li&gt;
&lt;li&gt;Fes que una vegada autenticar l&#39;usuari puga triar a quin joc vol jugar (en la mateix pàgina).&lt;/li&gt;
&lt;li&gt;Protegeix els jocs per tal que no es puga jugar en cas de no estar autenticat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;projecte-penjat&quot; tabindex=&quot;-1&quot;&gt;Projecte Penjat&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Manteniment de l&#39;Estat del Joc amb Sessions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilitza sessions per a emmagatzemar l&#39;estat actual del joc, incloent la paraula a endevinar, lletres endevinades, i el nombre d&#39;intents restants.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gestió de la Sessió del Joc:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Afegeix funcionalitats per a reiniciar el joc en qualsevol moment, reinicialitzant les variables de sessió per a començar una nova partida.&lt;/li&gt;
&lt;li&gt;Afegeix una opció per a tancar sessió i finalitzar la partida actual.&lt;/li&gt;
&lt;li&gt;Afegeix un funció per a saver si el joc ha acabat, ja siga perquè s&#39;han endevinat totes les lletres o s&#39;haguen arribat al màxim número d&#39;intents permesos.&lt;/li&gt;
&lt;li&gt;Controla el final del joc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cookies per a Recordar Jugadors:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa cookies per a recordar els jugadors entre visites, permetent que l&#39;usuari siga recordat si selecciona una opció de &amp;quot;Recordar-me&amp;quot; durant l&#39;inici de sessió.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Seguretat i Autenticació:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un sistema d&#39;autenticació bàsic per a garantir que només els jugadors autenticats puguen accedir al joc.&lt;/li&gt;
&lt;li&gt;Utilitza sessions per a mantenir l&#39;estat d&#39;autenticació i controlar l&#39;accés a les funcionalitats del joc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;consideracions-addicionals&quot; tabindex=&quot;-1&quot;&gt;Consideracions Addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Resiliència del Joc:&lt;/strong&gt; Implementa la lògica necessària per a manejar intents invàlids i mostrar missatges d&#39;error adequats.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Millores d&#39;Interfície:&lt;/strong&gt; Afegix un enllaç o botó per a tancar sessió i una opció per a reiniciar el joc.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;projecte-and-quot-4-en-ratlla-and-quot&quot; tabindex=&quot;-1&quot;&gt;Projecte &amp;quot;4 en Ratlla&amp;quot;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Gestió de l&#39;Estat de la Graella amb Sessions:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Utilitza sessions per a emmagatzemar l&#39;estat actual de la graella i el torn del jugador. Això permet mantenir la partida entre sol·licituds.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Manteniment de la Sessió entre Jugadors:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emmagatzema l&#39;identificador de cada jugador en sessions per a assegurar que el torn actual siga persistent entre sol·licituds.&lt;/li&gt;
&lt;li&gt;Afegeix funcionalitats per a reiniciar el joc en qualsevol moment, reinicialitzant les variables de sessió per a començar una nova partida.&lt;/li&gt;
&lt;li&gt;Afegeix una opció per a tancar sessió i finalitzar la partida actual.&lt;/li&gt;
&lt;li&gt;Afegeix un funció per a saver si el joc ha acabat, ja siga perquè s&#39;ha fet 4 en ratlla  o s&#39;haja completat el tauler.&lt;/li&gt;
&lt;li&gt;Controla el final del joc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cookies per a la Persistència d&#39;Usuaris:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Permet l&#39;ús de cookies per a recordar els jugadors entre visites si han seleccionat &amp;quot;Recordar-me&amp;quot;. Utilitza cookies per a emmagatzemar l&#39;últim jugador autenticat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Seguretat i Autenticació:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa un sistema d&#39;autenticació bàsic per a garantir que només els jugadors autenticats puguen accedir al joc.&lt;/li&gt;
&lt;li&gt;Utilitza sessions per a mantenir l&#39;estat d&#39;autenticació i controlar l&#39;accés a les funcionalitats del joc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Addicional&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implementa la lògica per tal que el segon jugador siga la màquina (pots adaptar i/o millorar l&#39;algorisme de baix).&lt;/li&gt;
&lt;li&gt;Controla el joc per a que no es puga seguir jugant una vegada acabat.&lt;/li&gt;
&lt;li&gt;Implementa un sistema de puntuació que otorgue 2 punts al guanyador i 1 a cadascú en cas d&#39;empat.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt; 
function jugar(&amp;amp;$graella,$jugadorActual){

       $opponent = $jugadorActual === 1 ? 2 : 1;
   
       // Comprovar si pots guanyar
       for ($col = 1; $col &amp;lt;= COLUMNES; $col++) {
           if (isValidMove($graella, $col)) {
               $tempBoard = $graella;
               $coord = ferMoviment($tempBoard, $col, $jugadorActual);
               
               if (fi_joc($tempBoard, $coord)) {
                   return ferMoviment($graella,$col,$jugadorActual); // Guanyar immediatament
               }
           }
       }
   
       // Comprovar si l&#39;oponent pot guanyar i bloquejar
       for ($col = 1; $col &amp;lt;= COLUMNES; $col++) {
           if (isValidMove($graella, $col)) {
               $tempBoard = $graella;
               $coord = ferMoviment($tempBoard, $col, $opponent);
               if (fi_joc($tempBoard, $coord )) {
                   return ferMoviment($graella,$col,$jugadorActual); // Bloquejar
               }
           }
       }
   
       // Estratègia: buscar el millor moviment
       // Podem afegir més lògica aquí per seleccionar el millor moviment
       $possibles = array();
       for ($col = 1; $col &amp;lt;= COLUMNES; $col++) {
           if (isValidMove($graella, $col)) {
               $possibles[] = $col; 
           }
       }
       if (count($possibles)&amp;gt;2) {
           $random = rand(-1,1);
       }
       $middle = (int) (count($possibles) / 2)+$random;
       $inthemiddle = $possibles[$middle];
       return ferMoviment($graella, $inthemiddle, $jugadorActual); 
   
       return -1; // Totes les columnes estan plenes
}

&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;consideracions-addicionals-1&quot; tabindex=&quot;-1&quot;&gt;Consideracions Addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Lògica de Torn de Jugadors:&lt;/strong&gt; Implementa la lògica necessària per a canviar de torn entre els jugadors utilitzant sessions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reinici de Partida:&lt;/strong&gt; Afegeix una opció per a reiniciar el joc, que ha de restablir les sessions i permetre començar de nou.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interfície d&#39;Usuari Amigable:&lt;/strong&gt; Assegura&#39;t que la interfície d&#39;usuari és clara i proporciona indicacions visuals dels moviments i torns dels jugadors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rubrica-d-avaluacio&quot; tabindex=&quot;-1&quot;&gt;Rúbrica d&#39;Avaluació&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Criteri&lt;/th&gt;
&lt;th&gt;Excel·lent (4)&lt;/th&gt;
&lt;th&gt;Bé (3)&lt;/th&gt;
&lt;th&gt;Adequat (2)&lt;/th&gt;
&lt;th&gt;Insuficient (1)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Funcionalitat del Joc&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;El joc està completament funcional i sense errors.&lt;/td&gt;
&lt;td&gt;El joc està majoritàriament funcional amb errors mínims.&lt;/td&gt;
&lt;td&gt;El joc és funcional, però conté errors significatius.&lt;/td&gt;
&lt;td&gt;El joc no és funcional o està incomplet.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ús de Sessions&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Sessions ben implementades per a mantenir l&#39;estat del joc.&lt;/td&gt;
&lt;td&gt;Sessions utilitzades correctament amb alguns problemes menors.&lt;/td&gt;
&lt;td&gt;Sessions utilitzades, però amb deficiències importants.&lt;/td&gt;
&lt;td&gt;No s&#39;han utilitzat sessions o són incorrectes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Ús de Cookies&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Cookies ben utilitzades per a recordar els jugadors.&lt;/td&gt;
&lt;td&gt;Cookies utilitzades adequadament amb algunes millores possibles.&lt;/td&gt;
&lt;td&gt;Cookies utilitzades amb limitacions evidents.&lt;/td&gt;
&lt;td&gt;No s&#39;han utilitzat cookies o són incorrectes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Autenticació d&#39;Usuaris&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Autenticació segura i efectiva implementada.&lt;/td&gt;
&lt;td&gt;Autenticació implementada amb alguns problemes.&lt;/td&gt;
&lt;td&gt;Autenticació present però amb deficiències notables.&lt;/td&gt;
&lt;td&gt;No s&#39;ha implementat autenticació o és incorrecta.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Interfície d&#39;Usuari&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Interfície atractiva i fàcil d&#39;utilitzar.&lt;/td&gt;
&lt;td&gt;Interfície clara amb algunes millores possibles.&lt;/td&gt;
&lt;td&gt;Interfície funcional però poc intuïtiva.&lt;/td&gt;
&lt;td&gt;Interfície confusa i difícil d&#39;utilitzar.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Totes les mesures de seguretat implementades correctament.&lt;/td&gt;
&lt;td&gt;Seguretat adequada amb algunes millores possibles.&lt;/td&gt;
&lt;td&gt;Mesures de seguretat bàsiques implementades.&lt;/td&gt;
&lt;td&gt;No s&#39;han tingut en compte mesures de seguretat.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Comentaris i Codi&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Codi ben comentat i fàcilment llegible.&lt;/td&gt;
&lt;td&gt;Codi clar amb comentaris adequats.&lt;/td&gt;
&lt;td&gt;Codi llegible però amb pocs comentaris.&lt;/td&gt;
&lt;td&gt;Codi desordenat i sense comentaris.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Innovació i Creativitat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;El projecte mostra innovació significativa.&lt;/td&gt;
&lt;td&gt;Algunes idees creatives han estat implementades.&lt;/td&gt;
&lt;td&gt;Alguna creativitat present, però limitada.&lt;/td&gt;
&lt;td&gt;Cap creativitat o innovació en el projecte.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Punts addicionals&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;1 punt per cadascúna aconseguida.&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;explicacio-dels-criteris&quot; tabindex=&quot;-1&quot;&gt;Explicació dels Criteris&lt;/h3&gt;
&lt;h4 id=&quot;funcionalitat-del-joc&quot; tabindex=&quot;-1&quot;&gt;Funcionalitat del Joc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; El joc funciona completament segons les especificacions, amb totes les funcionalitats implementades i sense errors. Els jugadors poden interaccionar amb el joc tal com s&#39;esperava i totes les accions es realitzen correctament.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; El joc no és funcional, falten parts importants del codi o el joc no es pot jugar correctament.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;us-de-sessions&quot; tabindex=&quot;-1&quot;&gt;Ús de Sessions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; Les sessions s&#39;utilitzen eficaçment per a mantenir l&#39;estat del joc i de l&#39;usuari entre sol·licituds. Les dades de la sessió es gestionen de manera adequada per a preservar l&#39;experiència de l&#39;usuari.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; No s&#39;han utilitzat sessions o la seva implementació és incorrecta, la qual cosa afecta negativament l&#39;experiència de l&#39;usuari.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;us-de-cookies&quot; tabindex=&quot;-1&quot;&gt;Ús de Cookies&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; Les cookies s&#39;utilitzen de manera efectiva per a recordar els jugadors entre sessions, amb la configuració adequada d&#39;atributs de seguretat (&lt;code&gt;HttpOnly&lt;/code&gt;, &lt;code&gt;Secure&lt;/code&gt;, &lt;code&gt;SameSite&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; No s&#39;han utilitzat cookies o la seva implementació és incorrecta, amb una configuració de seguretat deficient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;autenticacio-d-usuaris&quot; tabindex=&quot;-1&quot;&gt;Autenticació d&#39;Usuaris&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; L&#39;autenticació dels usuaris és segura i eficient, amb mecanismes adequats per a validar les credencials i protegir la informació dels usuaris.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; No s&#39;ha implementat un sistema d&#39;autenticació o el sistema present és insegur i defectuós.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;interficie-d-usuari&quot; tabindex=&quot;-1&quot;&gt;Interfície d&#39;Usuari&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; La interfície d&#39;usuari és atractiva, clara i fàcil de navegar, proporcionant una experiència d&#39;usuari òptima.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; La interfície és confusa, difícil d&#39;utilitzar o inacabada.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;seguretat&quot; tabindex=&quot;-1&quot;&gt;Seguretat&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; Totes les mesures de seguretat necessàries han estat implementades, incloent-hi la validació de dades d&#39;entrada, protecció CSRF i altres pràctiques de seguretat recomanades.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; No s&#39;han tingut en compte mesures de seguretat, deixant el projecte vulnerable a possibles atacs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;comentaris-i-codi&quot; tabindex=&quot;-1&quot;&gt;Comentaris i Codi&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; El codi està ben comentat, és llegible i segueix bones pràctiques de programació.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; El codi està desordenat, difícil de llegir i manca de comentaris explicatius.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;innovacio-i-creativitat&quot; tabindex=&quot;-1&quot;&gt;Innovació i Creativitat&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Excel·lent (4):&lt;/strong&gt; El projecte mostra un alt grau d&#39;innovació i creativitat, oferint característiques o enfocaments únics que milloren el joc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Insuficient (1):&lt;/strong&gt; El projecte manca de creativitat o innovació, seguint únicament les instruccions bàsiques sense cap valor afegit.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;notes-addicionals&quot; tabindex=&quot;-1&quot;&gt;Notes Addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistència del Codi:&lt;/strong&gt; S&#39;espera que el codi sigui consistent, utilitzant convencions de noms adequades i estructures de codi clares.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Adaptació de les Necessitats:&lt;/strong&gt; Els criteris poden ser adaptats segons les necessitats específiques del curs o dels projectes individuals.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-autoavaluacio-gestio-de-sessions-i-cookies&quot; tabindex=&quot;-1&quot;&gt;7. Autoavaluació: Gestió de Sessions i Cookies&lt;/h2&gt;
&lt;h4 id=&quot;exercici-1-funcions-de-les-cookies&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Funcions de les Cookies&lt;/h4&gt;
&lt;h5 id=&quot;pregunta&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és la funció principal de les cookies en el context del desenvolupament web?&lt;/p&gt;
&lt;h5 id=&quot;opcions&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1a&quot; name=&quot;question1&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q1a&quot;&gt;a) Guardar els fitxers de l&#39;usuari al servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1b&quot; name=&quot;question1&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q1b&quot;&gt;b) Emmagatzemar informació del client per personalitzar l&#39;experiència d&#39;usuari.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1c&quot; name=&quot;question1&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q1c&quot;&gt;c) Executar codi al servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q1d&quot; name=&quot;question1&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q1d&quot;&gt;d) Controlar la velocitat de la connexió a Internet.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer1()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result1&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer1() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question1&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Emmagatzemar informació del client per personalitzar l&#39;experiència d&#39;usuari.&quot;;
    document.getElementById(&#39;result1&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-2-seguretat-de-les-cookies&quot; tabindex=&quot;-1&quot;&gt;Exercici 2: Seguretat de les Cookies&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-1&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quins atributs de seguretat haurien de tindre les cookies per protegir-les contra atacs?&lt;/p&gt;
&lt;h5 id=&quot;opcions-1&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q2a&quot; name=&quot;question2&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q2a&quot;&gt;a) Secure&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q2b&quot; name=&quot;question2&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q2b&quot;&gt;b) HttpOnly&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q2c&quot; name=&quot;question2&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q2c&quot;&gt;c) SameSite&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q2d&quot; name=&quot;question2&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q2d&quot;&gt;d) CrossSite&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer2()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result2&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer2() {
    var correctAnswers = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;];
    var checkboxes = document.getElementsByName(&#39;question2&#39;);
    var userAnswers = [];
    for (var i = 0; i &lt; checkboxes.length; i++) {
        if (checkboxes[i].checked) {
            userAnswers.push(checkboxes[i].value);
        }
    }
    userAnswers.sort();
    var resultText = (JSON.stringify(userAnswers) === JSON.stringify(correctAnswers))
        ? &quot;Correcte!&quot;
        : &quot;Incorrecte. Les respostes correctes són a) Secure, b) HttpOnly, c) SameSite.&quot;;
    document.getElementById(&#39;result2&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-3-creacio-de-sessions-en-php&quot; tabindex=&quot;-1&quot;&gt;Exercici 3: Creació de Sessions en PHP&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-2&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quin dels següents passos és necessari per iniciar una sessió en PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-2&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3a&quot; name=&quot;question3&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q3a&quot;&gt;a) Cridar a la funció session_start().&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3b&quot; name=&quot;question3&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q3b&quot;&gt;b) Utilitzar la funció session_open().&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3c&quot; name=&quot;question3&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q3c&quot;&gt;c) Assignar un valor a la variable $_SESSION.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q3d&quot; name=&quot;question3&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q3d&quot;&gt;d) No es necessita cap funció especial.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer3()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result3&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer3() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question3&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Cridar a la funció session_start().&quot;;
    document.getElementById(&#39;result3&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-4-manteniment-d-informacio-en-sessions&quot; tabindex=&quot;-1&quot;&gt;Exercici 4: Manteniment d&#39;Informació en Sessions&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-3&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Com es pot mantindre la informació d&#39;un usuari durant la sessió d&#39;una aplicació web?&lt;/p&gt;
&lt;h5 id=&quot;opcions-3&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4a&quot; name=&quot;question4&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q4a&quot;&gt;a) Utilitzant la variable global $GLOBALS.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4b&quot; name=&quot;question4&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q4b&quot;&gt;b) Utilitzant la variable $_SESSION.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4c&quot; name=&quot;question4&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q4c&quot;&gt;c) Utilitzant la variable $_COOKIE.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q4d&quot; name=&quot;question4&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q4d&quot;&gt;d) Utilitzant arxius temporals al servidor.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer4()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result4&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer4() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question4&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Utilitzant la variable $_SESSION.&quot;;
    document.getElementById(&#39;result4&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-5-funcions-de-php-per-a-sessions&quot; tabindex=&quot;-1&quot;&gt;Exercici 5: Funcions de PHP per a Sessions&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-4&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina funció de PHP es fa servir per destruir una sessió?&lt;/p&gt;
&lt;h5 id=&quot;opcions-4&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5a&quot; name=&quot;question5&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q5a&quot;&gt;a) session_destroy()&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5b&quot; name=&quot;question5&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q5b&quot;&gt;b) session_unset()&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5c&quot; name=&quot;question5&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q5c&quot;&gt;c) session_delete()&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q5d&quot; name=&quot;question5&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q5d&quot;&gt;d) session_end()&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer5()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result5&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer5() {
    var correctAnswer = &quot;a&quot;;
    var radios = document.getElementsByName(&#39;question5&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) session_destroy().&quot;;
    document.getElementById(&#39;result5&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-6-avantatges-de-les-sessions&quot; tabindex=&quot;-1&quot;&gt;Exercici 6: Avantatges de les Sessions&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-5&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quins són els avantatges d&#39;utilitzar sessions en lloc de cookies per a mantenir l&#39;estat de l&#39;usuari?&lt;/p&gt;
&lt;h5 id=&quot;opcions-5&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q6a&quot; name=&quot;question6&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q6a&quot;&gt;a) Les sessions poden emmagatzemar més informació perquè es guarden al servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q6b&quot; name=&quot;question6&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q6b&quot;&gt;b) Les sessions són més segures perquè no s&#39;envien al client.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q6c&quot; name=&quot;question6&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q6c&quot;&gt;c) Les sessions redueixen la càrrega del servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;q6d&quot; name=&quot;question6&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q6d&quot;&gt;d) Les sessions no necessiten ser configurades amb atributs de seguretat.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer6()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result6&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer6() {
    var correctAnswers = [&quot;a&quot;, &quot;b&quot;];
    var checkboxes = document.getElementsByName(&#39;question6&#39;);
    var userAnswers = [];
    for (var i = 0; i &lt; checkboxes.length; i++) {
        if (checkboxes[i].checked) {
            userAnswers.push(checkboxes[i].value);
        }
    }
    userAnswers.sort();
    var resultText = (JSON.stringify(userAnswers) === JSON.stringify(correctAnswers))
        ? &quot;Correcte!&quot;
        : &quot;Incorrecte. Les respostes correctes són a) Les sessions poden emmagatzemar més informació perquè es guarden al servidor, b) Les sessions són més segures perquè no s&#39;envien al client.&quot;;
    document.getElementById(&#39;result6&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-7-autenticacio-d-usuaris&quot; tabindex=&quot;-1&quot;&gt;Exercici 7: Autenticació d&#39;Usuaris&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-6&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quina és la pràctica recomanada per assegurar la identitat d&#39;un usuari en una aplicació web?&lt;/p&gt;
&lt;h5 id=&quot;opcions-6&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7a&quot; name=&quot;question7&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;q7a&quot;&gt;a) Utilitzar noms d&#39;usuari i contrasenyes emmagatzemades com a cookies.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7b&quot; name=&quot;question7&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;q7b&quot;&gt;b) Utilitzar sessions per mantenir l&#39;estat d&#39;autenticació després d&#39;iniciar sessió.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7c&quot; name=&quot;question7&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;q7c&quot;&gt;c) Emmagatzemar la contrasenya de l&#39;usuari a la URL.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;q7d&quot; name=&quot;question7&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;q7d&quot;&gt;d) No utilitzar cap forma d&#39;autenticació.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer7()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result7&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer7() {
    var correctAnswer = &quot;b&quot;;
    var radios = document.getElementsByName(&#39;question7&#39;);
    var userAnswer;
    for (var i = 0; i &lt; radios.length; i++) {
        if (radios[i].checked) {
            userAnswer = radios[i].value;
            break;
        }
    }
    var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) Utilitzar sessions per mantenir l&#39;estat d&#39;autenticació després d&#39;iniciar sessió.&quot;;
    document.getElementById(&#39;result7&#39;).innerText = resultText;
}
&lt;/script&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/3-programacion-en-web/programacion-en-web/" >
        </entry>
        <entry>
            <title>
                Introducción a PHP
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/notes/01 Apuntes/DAW/PHP Teoria Batoi/2. Introduccion a PHP/Introducción a PHP/</id>
            <content type="html">
                &lt;p&gt;&lt;code&gt;=&lt;/code&gt;, `&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notes/01 Apuntes/DAW/PHP Teoria Batoi/2. Introduccion a PHP/Introducción a PHP/" >
        </entry>
        <entry>
            <title>
                1.1 Entornos de desarrollo
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/1-arquitecturas-web/1-1-entornos-de-desarrollo/</id>
            <content type="html">
                &lt;h1 id=&quot;entorn-de-desenvolupament&quot; tabindex=&quot;-1&quot;&gt;Entorn de desenvolupament&lt;/h1&gt;
&lt;p&gt;Pera fer correr les aplicacions de servidor ens cal, com a mínim, un &lt;strong&gt;servidor web&lt;/strong&gt;, l&#39;interpret de &lt;strong&gt;php&lt;/strong&gt; i un &lt;strong&gt;motor de base de dades&lt;/strong&gt;. Hem de distinguir l&#39;&lt;strong&gt;entorn de desenvolupament&lt;/strong&gt;, on anem a programar i mantindre la nostra aplicació, de l&#39;&lt;strong&gt;entorn de producció&lt;/strong&gt;, on anem a executar-la.&lt;br /&gt;
Normalment el primer depén de nosaltres mentre que el segon pot dependre de l&#39;empresa on s&#39;allotjarà la nostra web. Per a preparar el nostre entorn de desenvolupament podem optar per:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qualsevol solució &lt;strong&gt;LAMP&lt;/strong&gt; (Linux, Apache, Mysql, PHP). Als que haurem d&#39;afegir, una vegada els projectes es facen grans &lt;strong&gt;composer, git i les opcions de la part de client&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Una màquina virtual ja configurada.&lt;/li&gt;
&lt;li&gt;Una solució docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La primera solució és senzilla d&#39;implementar però no hauria de ser la nostra primera opció per:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estem possant en funcionament en la nostra màquina una sèrie de serveis que normalment no fariem, baixant el rendiment de la màquina i obrint vulnerabilitats.&lt;/li&gt;
&lt;li&gt;Si treballem en grup, les instal·lacions i el funcionament no són iguals, depenen del sistema operatiu que té instal·lat cadascú. Allò que li funciona a ú  pot ser no li funciona a un altre. Això és inevitable quan el projecte es complica i es perd molt de temps.&lt;/li&gt;
&lt;li&gt;Passa el mateix quan passem a l&#39;entorn de producció.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La segona solució soluciona els dos primers problemes, doncs tots els desenvolupadors poden tindre virtualitzada, la mateixa màquina. Encara que si la màquina no la fem nosaltres sinó que utilitzem alguna ja configurada (&lt;strong&gt;vagrant&lt;/strong&gt;) o si ens cal instal·lar alguna cosa més, ho hauria de fer tot l&#39;equip.&lt;/p&gt;
&lt;p&gt;Així i tot, tindriem les següents desaventatges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A l&#39;instal·lar una maquina virtual sencera ocupa recursos del sistema.&lt;/li&gt;
&lt;li&gt;La màquina instal·la més coses de les necessàries habitualment.&lt;/li&gt;
&lt;li&gt;No reprodueix l&#39;entorn de producció.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pot ser molt útil, per exemple, quan la fem servir per desenvolupar en un framework, que ja ve configurat per fer-lo funcionar inmediatament i amb totes les característiques instal·lades.&lt;/p&gt;
&lt;p&gt;La tercera opció té les següents característiques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Al principi és més difícil de possar en funcionamet ja que calen coneixements de docker.&lt;/li&gt;
&lt;li&gt;Tots els desenvolupadors comparteixen entorn encara que utilitzen màquines o sistemes operatius diferents.&lt;/li&gt;
&lt;li&gt;Si hi ha algun canvi de configuració de l&#39;entorn és fácilment transladable a tots els desenvolupadors.&lt;/li&gt;
&lt;li&gt;Es poden crear tants entorns  de desenvolupament com projectes diferents hi hajen.&lt;/li&gt;
&lt;li&gt;Els contenidors ocupen pocs recursos.&lt;/li&gt;
&lt;li&gt;Els projectes es poden possar en producció utilitzan una solució docker de manera inmediata.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;xampp&quot; tabindex=&quot;-1&quot;&gt;XAMPP&lt;/h3&gt;
&lt;p&gt;XAMPP (&lt;a href=&quot;https://www.apachefriends.org/es/index.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.apachefriends.org/es/index.html&lt;/a&gt;) és una distribució composta amb el programari necessari per a desenvolupar en entorn servidor. Es compon de les següents eines sobre la base de les seues sigles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;X per al sistema operatiu (d&#39;aquí ve que es conega altrament com LAMP o WAMP).&lt;/li&gt;
&lt;li&gt;A per a Apatxe.&lt;/li&gt;
&lt;li&gt;M per a MySQL / MariaDB. També inclou phpMyAdmin per a l&#39;administració de la base de dades des d&#39;una interfície web.&lt;/li&gt;
&lt;li&gt;P per a PHP.&lt;/li&gt;
&lt;li&gt;l&#39;última P per a Perl.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Des de la pròpia pàgina es pot descarregar l&#39;arxiu executable per al sistema operatiu del nostre ordinador. Es recomana llegir la FAQ de cada sistema operatiu amb instruccions per a la seua posada en marxa.&lt;/p&gt;
&lt;p&gt;!!! note &amp;quot;XAMPP en Windows&amp;quot;&lt;br /&gt;
Si treballes amb el teu propi ordinador, XAMPP és una solució més senzilla que Docker, sobretot si treballes amb Windows com a sistema operatiu.&lt;/p&gt;
&lt;h3 id=&quot;docker&quot; tabindex=&quot;-1&quot;&gt;Docker&lt;/h3&gt;
&lt;p&gt;Docker (&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.docker.com&lt;/a&gt;) és un gestor de contenidors, considerant un contenidor com un mètode de virtualització del sistema operatiu.&lt;/p&gt;
&lt;p&gt;L&#39;ús de contenidors requereix menys recursos que una màquina virtual, per tant, el seu llançament i detenció són més ràpids que les màquines virtuals.&lt;/p&gt;
&lt;p&gt;Així doncs, &lt;em&gt;Docker&lt;/em&gt; permet crear, provar i implementar aplicacions ràpidament, a partir d&#39;una sèrie de plantilles que es coneixen com a &lt;strong&gt;imatges&lt;/strong&gt; de &lt;em&gt;Docker&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Per a això és necessari tindre instal·lat &lt;strong&gt;Docker Desktop&lt;/strong&gt; (&lt;a href=&quot;https://www.docker.com/products/docker-desktop&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.docker.com/products/docker-desktop&lt;/a&gt;) en els nostres entorns de desenvolupament (el qual ja inclou en &lt;strong&gt;nucli&lt;/strong&gt; de &lt;em&gt;Docker&lt;/em&gt; i l&#39;eina &lt;strong&gt;docker compose&lt;/strong&gt;). Per a instal·lar-ho en Windows, és necessari instal·lar prèviament &lt;strong&gt;WSL 2&lt;/strong&gt;, el qual és un subsistema de &lt;em&gt;Linux&lt;/em&gt; dins de &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Al llarg del curs anirem creant diferents contenidors amb els serveis necessaris, de manera que cada vegada només treballem amb el programari mínim.&lt;/p&gt;
&lt;p&gt;!!! caution &amp;quot;Versions&amp;quot;&lt;br /&gt;
Al llarg del curs usarem PHP &lt;code&gt;8.1&lt;/code&gt;. Respecte a &lt;em&gt;Docker&lt;/em&gt;, per a escriure les anotacions hem utilitzat la versio &lt;code&gt;20.10&lt;/code&gt; i la versio &lt;code&gt;2.19&lt;/code&gt; de &lt;strong&gt;docker compose&lt;/strong&gt;. Finalment, la versió de &lt;em&gt;Docker Desktop&lt;/em&gt; que hem utilitzat és la &lt;code&gt;4.0&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&quot;instal-lacio-de-docker&quot; tabindex=&quot;-1&quot;&gt;Instal·lació de docker&lt;/h4&gt;
&lt;p&gt;La instal·lació de docker dependrà del sistema operatiu que estem utilitzant. Ací anem a vore la que efecturan els que utilitzen linux, amb el sistema operatiu linux-mint o ubuntu , que és el que ve instal·lat en les imatges suministrades. Per a mac o windows s&#39;haurà de mirar la pàgina web de &lt;a href=&quot;https://www.docker.com/get-started&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;docker&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ens donem privilegis&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo su
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Utilitzant els repositoris de docker l&#39;instal·lem:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable&amp;quot; | tee /etc/apt/sources.list.d/docker.list

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

apt update

apt install docker-ce docker-ce-cli containerd.io pigz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Donem permisos a l&#39;usuari afegint-lo al grup de docker&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On $USER és el teu usuari.&lt;/p&gt;
&lt;p&gt;També haurem d&#39;instal·lar el docker-compose&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;curl -SL &amp;quot;https://github.com/docker/compose/releases/download/v2.10.2/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose

chmod +x /usr/local/bin/docker-compose
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I provem&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker --version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Faltarà engegar el servei de docker per a poder executar contenidors&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo systemctl start docker.service
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;plantilla-servidor-web-php&quot; tabindex=&quot;-1&quot;&gt;Plantilla Servidor Web + PHP&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; es basa en l&#39;ús d&#39;imatges per a crear contenidors. &lt;em&gt;Docker Compose&lt;/em&gt; simplifica el treball amb múltiples contenidors, i per això, per a facilitar l&#39;arranc, ens centrarem en &lt;em&gt;Docker Compose&lt;/em&gt; utilitzant una plantilla que únicament contindrà com a serveis Nginx i PHP.&lt;br /&gt;
Per a facilitar la posada en marxa, us facilite un repositori en &lt;a href=&quot;https://pedroporo.github.io/#GitHub-Classroom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;github classroom&lt;/a&gt; &lt;a href=&quot;https://classroom.github.com/a/hrZehkpi&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nginx/PHP&lt;/a&gt; disponible per a la seua descàrrega. &lt;strong&gt;L&#39;haureu de possar en un directori fàcilment localitzable i amb un nom significatiu, ja que serà el vostre directori de treball&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Dins d&#39;este repositori, el fitxer &lt;strong&gt;&#39;docker-compose.yaml&#39;&lt;/strong&gt; indica quines màquines ha de montar i té el següent aspecte&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Nginx i PHP&amp;quot;&lt;/p&gt;
&lt;p&gt;``` yaml&lt;br /&gt;
# Services&lt;br /&gt;
services:&lt;/p&gt;
&lt;p&gt;# Nginx Service&lt;br /&gt;
nginx:&lt;br /&gt;
image: nginx:1.19&lt;br /&gt;
ports:&lt;br /&gt;
- 80:80&lt;br /&gt;
volumes:&lt;br /&gt;
- ./src:/var/www/php&lt;br /&gt;
- ./.docker/nginx/conf.d:/etc/nginx/conf.d&lt;br /&gt;
depends_on:&lt;br /&gt;
- php&lt;/p&gt;
&lt;p&gt;# PHP Service&lt;br /&gt;
php:&lt;br /&gt;
build: ./.docker/php/&lt;br /&gt;
working_dir: /var/www/php&lt;br /&gt;
expose:&lt;br /&gt;
- 9000&lt;br /&gt;
volumes:&lt;br /&gt;
- ./src:/var/www/php&lt;br /&gt;
- ./.docker/php/conf.d/Xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini&lt;br /&gt;
- ./.docker/php/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini&lt;/p&gt;
&lt;p&gt;# Más info en&lt;br /&gt;
# &lt;a href=&quot;https://tech.osteel.med/posts/docker-for-local-web-development-part-1-a-basic-lemp-stack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://tech.osteel.med/posts/docker-for-local-web-development-part-1-a-basic-lemp-stack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;# Lanzar con&lt;br /&gt;
# docker-compose up -d&lt;/p&gt;
&lt;p&gt;# Ver los logs con&lt;br /&gt;
# docker-compose logs -f&lt;/p&gt;
&lt;p&gt;```&lt;br /&gt;
Per arrencar les màquines o podem fer des de la consola amb&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si volem accedir a un terminal interactiu dins del contenidor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;docker exec -it nombreContenedor bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Altres comandos que podem arribar a utilitzar són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt;: Veure els contenidors que es estan executant&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker ps -a&lt;/code&gt;: Veure tots els contenidors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker start nombreContenedor&lt;/code&gt;: Arrancar un contenidor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt;: Veure les imatges que tenim descarregades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una altra forma més senzilla per a llançar de nou els contenidors i gestionar-los una vegada creats és utilitzar la interfície gràfica que ofereix Docker Desktop:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/01/dockerdesktop.png&quot; alt=&quot;dockerdesktop.png&quot; /&gt;&lt;br /&gt;
!!! tip &amp;quot;Docker stack&amp;quot;&lt;br /&gt;
Existeixen diverses opcions mitjançant Docker que ofereixen solucions completes i empaquetes per a tot el stack de desenvolupament. En posteriors sessions utilitzarem tant &lt;em&gt;Devilbox&lt;/em&gt; (&lt;a href=&quot;http://devilbox.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://devilbox.org&lt;/a&gt;) com &lt;em&gt;Laradock&lt;/em&gt; (&lt;a href=&quot;https://laradock.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://laradock.io&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;!!! question &amp;quot;Però vull saver com funciona...&amp;quot;&lt;br /&gt;
En el mòdul de Desplegament d&#39;aplicacions estudiareu en profunditat, a més de Docker, Apatxe i altres serveis que ens serviran d&#39;ajuda per al desenvolupament en entorn servidor.&lt;/p&gt;
&lt;h3 id=&quot;tot-funciona&quot; tabindex=&quot;-1&quot;&gt;Tot funciona&lt;/h3&gt;
&lt;p&gt;Heu de comprovar que a l&#39;accedir a &lt;code&gt;http://localhost&lt;/code&gt; en el vostre navegador se us obre una pàgina de salutació.&lt;/p&gt;
&lt;h3 id=&quot;entorn-de-desenvolupament-1&quot; tabindex=&quot;-1&quot;&gt;Entorn de desenvolupament&lt;/h3&gt;
&lt;p&gt;En este curso utilitzarem &lt;a href=&quot;https://www.jetbrains.com/phpstorm/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;PHP Storm&lt;/strong&gt;&lt;/a&gt; com a entorn de desenvolupament. Existixen altres alternatives, com &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&quot;instal-lacio&quot; tabindex=&quot;-1&quot;&gt;Instal·lació&lt;/h4&gt;
&lt;p&gt;Podem fer-ho de manera automàtica utilitzant snap. Per fer-ho amb linux-mint&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;sudo rm /etc/apt/preferences.d/nosnap.pref
sudo apt update
sudo apt install snapd
sudo snap install phpstorm --classic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;També es pot instal·lar baixant-se el paquet de la pàgina web.&lt;/p&gt;
&lt;h5 id=&quot;llicencia&quot; tabindex=&quot;-1&quot;&gt;Llicència&lt;/h5&gt;
&lt;p&gt;Podeu sol·licitar una llicència a &lt;a href=&quot;mailto:i.gomismullor@edu.gva.es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;i.gomismullor@edu.gva.es&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;entorn-de-proves&quot; tabindex=&quot;-1&quot;&gt;Entorn de proves&lt;/h3&gt;
&lt;p&gt;La màquina docker ve configurada amb &lt;strong&gt;&lt;a href=&quot;https://codeception.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;codeception&lt;/a&gt;&lt;/strong&gt; i una col·leció de proves per als exercicis que desenvoluparem al llarg de les primeres unitats.&lt;br /&gt;
S&#39;ha creat un shell per executar totes les proves&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;sh test.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;git-hub-classroom&quot; tabindex=&quot;-1&quot;&gt;GitHub Classroom&lt;/h3&gt;
&lt;p&gt;Us podeu &lt;a href=&quot;https://classroom.github.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;registrar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metodologia de treball amb el github classroom&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se proporcionarà a l&#39;alumnat un enllaç amb la invitació.&lt;/li&gt;
&lt;li&gt;Accedint a l&#39;enllaç a cada alumne se li crearà un repositori individual en l&#39;organització.&lt;/li&gt;
&lt;li&gt;L&#39;alumnat treballa en el seu repositori assignat. Se&#39;l pot baixar per treballar en local.&lt;/li&gt;
&lt;li&gt;Inicialment, l&#39;alumne crea una branca nova sobre la que va a treballar.&lt;/li&gt;
&lt;li&gt;Quan vullga sol.licitar ajuda o revisió del professor, l&#39;alumne genera una pull request a la branca principal del seu repositori en la que cita al professor per tal que reba una notificació.&lt;/li&gt;
&lt;li&gt;El profesor proporciona retroalimentació mitjançant comentaris en la pull request o en un determinat commit individual.&lt;/li&gt;
&lt;li&gt;Opcionalment es poden utilitzar els issues y les cites d&#39;usuari per sol·licitar la intervenció del profesor.&lt;/li&gt;
&lt;li&gt;Quan l&#39;alumne finalitza la tasca, genera una últim pull request&lt;/li&gt;
&lt;li&gt;El profesor revisa la pull request i opcionalment fa comentaris.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;referencies&quot; tabindex=&quot;-1&quot;&gt;Referències&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Curs de introducció a Docker, per &lt;em&gt;Sergi García Barea&lt;/em&gt; : &lt;a href=&quot;https://sergarb1.github.io/CursoIntroduccionADocker/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://sergarb1.github.io/CursoIntroduccionADocker/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Article &lt;a href=&quot;https://www.arquitecturajava.com/arquitecturas-web-y-su-evolucion/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arquitectures Web i sa evolució&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;videos&quot; tabindex=&quot;-1&quot;&gt;Videos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://laracasts.com/series/php-for-beginners-2023-edition/episodes/1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Triar un llenguatge de programació&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://laracasts.com/series/php-for-beginners-2023-edition/episodes/2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instal.Lació entorn de desenvolupament&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/1-arquitecturas-web/1-1-entornos-de-desarrollo/" >
        </entry>
        <entry>
            <title>
                1. Arquitecturas WEB
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/1-arquitecturas-web/1-arquitecturas-web/</id>
            <content type="html">
                &lt;h1 id=&quot;arquitectures-web&quot; tabindex=&quot;-1&quot;&gt;Arquitectures Web&lt;/h1&gt;
&lt;p&gt;Una arquitectura web defineix l&#39;estructura i el comportament dels components d&#39;una aplicació web, incloent com es comuniquen entre ells i amb els usuaris finals. Aquesta arquitectura pot abastar des de la interfície d&#39;usuari en el client fins als serveis de backend i bases de dades en el servidor.&lt;/p&gt;
&lt;p&gt;Les arquitectures web són fonamentals en el desenvolupament d&#39;aplicacions web modernes per diverses raons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Escalabilitat&lt;/strong&gt;: Les arquitectures ben dissenyades permeten que les aplicacions web gestionen un nombre creixent d&#39;usuaris i dades sense sacrificar el rendiment. Per exemple, una arquitectura de microserveis facilita l&#39;escalabilitat horitzontal, ja que cada servei es pot escalar independentment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mantenibilitat&lt;/strong&gt;: Una bona arquitectura facilita el manteniment i l&#39;actualització de les aplicacions. Mitjançant la separació de preocupacions (per exemple, en una arquitectura de tres capes), es poden fer canvis en una part del sistema sense afectar altres parts.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;: Les arquitectures web poden incorporar diverses capes de seguretat per protegir les dades i les comunicacions. Això inclou mesures com l&#39;autenticació, l&#39;autorització, la xifratge de dades, i la protecció contra atacs comuns com les injeccions SQL i el cross-site scripting (XSS).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendiment&lt;/strong&gt;: L&#39;arquitectura de l&#39;aplicació web afecta directament el seu rendiment. Una arquitectura ben dissenyada optimitza el temps de resposta i la gestió de recursos, millorant l&#39;experiència de l&#39;usuari. L&#39;ús de tècniques com la caché, el balanç de càrrega, i la compressió de contingut són exemples d&#39;estratègies per millorar el rendiment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flexibilitat i Adaptabilitat&lt;/strong&gt;: Les arquitectures modernes permeten l&#39;ús de diverses tecnologies i eines per a diferents parts del sistema, proporcionant flexibilitat i permetent una adaptació ràpida als canvis tecnològics. Això és especialment rellevant amb l&#39;adopció de pràctiques DevOps i l&#39;ús de contenidors i orquestradors com Docker i Kubernetes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Col·laboració i Desplegament&lt;/strong&gt;: Un bon disseny arquitectònic facilita la col·laboració entre equips de desenvolupament, ja que clarifica les responsabilitats i els punts d&#39;integració. També permet un desplegament més eficient i automatitzat, reduint els riscos d&#39;errors i millorant el temps de lliurament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-tipus-d-arquitectures-web&quot; tabindex=&quot;-1&quot;&gt;1.Tipus d&#39;Arquitectures Web&lt;/h2&gt;
&lt;p&gt;A continuació, es descriuen alguns dels principals tipus d&#39;arquitectures web, cadascun amb les seves pròpies característiques, avantatges i desavantatges:&lt;/p&gt;
&lt;h3 id=&quot;arquitectura-client-servidor&quot; tabindex=&quot;-1&quot;&gt;Arquitectura Client-Servidor&lt;/h3&gt;
&lt;p&gt;En aquest model, el client (generalment un navegador web) envia sol·licituds al servidor, que processa aquestes sol·licituds i envia les respostes corresponents.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Diagrama:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/01/clienteservidor.png&quot; alt=&quot;clienteservidor.png&quot; /&gt;&lt;br /&gt;
&lt;strong&gt;Característiques:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El client és responsable de la interfície d&#39;usuari.&lt;/li&gt;
&lt;li&gt;El servidor maneja la lògica d&#39;aplicació i l&#39;accés a les dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Avantatges:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separació de responsabilitats.&lt;/li&gt;
&lt;li&gt;Facilita el manteniment i la seguretat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Desavantatges:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pot tenir problemes de rendiment amb moltes sol·licituds simultànies.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;arquitectura-de-tres-capes&quot; tabindex=&quot;-1&quot;&gt;Arquitectura de Tres Capes&lt;/h3&gt;
&lt;p&gt;Aquesta arquitectura divideix l&#39;aplicació en tres nivells: la capa de presentació, la capa de lògica d&#39;aplicació, i la capa de dades.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Diagrama:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/01/model3capes.png&quot; alt=&quot;model3capes.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Característiques:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La capa de presentació gestiona la interfície d&#39;usuari.&lt;/li&gt;
&lt;li&gt;La capa de lògica d&#39;aplicació processa les dades i executa la lògica de negoci.&lt;/li&gt;
&lt;li&gt;La capa de dades emmagatzema i recupera la informació.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Avantatges:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilita l&#39;escalabilitat.&lt;/li&gt;
&lt;li&gt;Millora la seguretat, ja que les dades no són directament accessibles des del client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Desavantatges:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pot ser més complexa de desenvolupar i mantenir.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;arquitectura-de-microserveis&quot; tabindex=&quot;-1&quot;&gt;Arquitectura de Microserveis&lt;/h3&gt;
&lt;p&gt;Els microserveis descomponen una aplicació en una sèrie de serveis petits i independents, cadascun executant una funció específica.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Diagrama:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/01/microserveis.png&quot; alt=&quot;microserveis.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Característiques:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada microservei es pot desplegar, actualitzar, i escalar independentment.&lt;/li&gt;
&lt;li&gt;Utilitzen protocols lleugers com HTTP/REST o gRPC per comunicar-se.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Avantatges:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Millora l&#39;escalabilitat i la flexibilitat.&lt;/li&gt;
&lt;li&gt;Facilita l&#39;ús de diferents tecnologies per a diferents serveis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Desavantatges:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pot ser complexa de gestionar i coordinar.&lt;/li&gt;
&lt;li&gt;Requereix una infraestructura de desplegament i monitorització més robusta.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;recursos-addicionals&quot; tabindex=&quot;-1&quot;&gt;Recursos Addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentació sobre Arquitectures de Software:&lt;/strong&gt; &lt;a href=&quot;https://martinfowler.com/architecture/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Software Architecture Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tutorial de Microserveis:&lt;/strong&gt; &lt;a href=&quot;https://www.tutorialspoint.com/microservice_architecture/index.htm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Microservices Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;resum&quot; tabindex=&quot;-1&quot;&gt;Resum&lt;/h4&gt;
&lt;p&gt;Les arquitectures web són fonamentals per al desenvolupament d&#39;aplicacions eficients i escalables. La selecció de l&#39;arquitectura adequada depèn de les necessitats específiques del projecte, incloent-hi consideracions de rendiment, escalabilitat, seguretat i mantenibilitat.&lt;/p&gt;
&lt;h2 id=&quot;2-pagines-web-estatiques-vs-dinamiques&quot; tabindex=&quot;-1&quot;&gt;2. Pàgines Web Estàtiques vs. Dinàmiques&lt;/h2&gt;
&lt;h3 id=&quot;pagines-estatiques&quot; tabindex=&quot;-1&quot;&gt;Pàgines estàtiques&lt;/h3&gt;
&lt;p&gt;Les pàgines web estàtiques són aquelles en què el contingut no canvia en funció de les accions de l&#39;usuari. Estan construïdes amb HTML i CSS, i cada pàgina es carrega de manera independent des del servidor.&lt;/p&gt;
&lt;h4 id=&quot;avantatges&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Senzillesa:&lt;/strong&gt; Fàcils de crear i mantenir.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendiment:&lt;/strong&gt; Temps de càrrega ràpid perquè no requereixen processament addicional.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seguretat:&lt;/strong&gt; Menys vulnerabilitats, ja que no hi ha lògica de servidor ni bases de dades.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges&quot; tabindex=&quot;-1&quot;&gt;Desavantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Flexibilitat:&lt;/strong&gt; Difícils de modificar a gran escala sense eines automatitzades.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interactivitat:&lt;/strong&gt; Limitada, ja que no poden respondre a les accions de l&#39;usuari de manera dinàmica.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exemple-practic&quot; tabindex=&quot;-1&quot;&gt;Exemple Pràctic&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Pàgina Estàtica&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body { font-family: Arial, sans-serif; }
        .content { margin: 20px; }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
    &amp;lt;h1&amp;gt;Benvingut!&amp;lt;/h1&amp;gt;
    &amp;lt;p&amp;gt;Aquesta és una pàgina web estàtica.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;pagines-dinamiques&quot; tabindex=&quot;-1&quot;&gt;Pàgines dinàmiques&lt;/h3&gt;
&lt;p&gt;Les pàgines web dinàmiques són aquelles en què el contingut pot canviar en funció de les accions de l&#39;usuari o altres factors. Utilitzen &lt;strong&gt;llenguatges de guions&lt;/strong&gt; o d&#39;scripting. Els llenguatges de guions sovint s’utilitzen per ampliar les prestacions que ofereix un altre llenguatge, entorn o aplicació. En aquest sentit són molt utilitzats en el desenvolupament d’aplicacions web:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Scripts de navegadors web.&lt;/strong&gt; S’utilitzen per ampliar les capacitats de l’HTML i per inserir accions en pàgines web. Permeten crear efectes especials i aporten interactivitat. Els scripts són interpretats i executats en la màquina client pel navegador web, el qual ha d’incorporar l’intèrpret del llenguatge. Un exemple de llenguatge d’aquest tipus molt utilitzat és JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scripts de servidor.&lt;/strong&gt; Són programes que permeten donar funcionalitats a les pàgines web que no es poden resoldre només amb els scripts de navegador. Els scripts de servidor permeten dotar de certa “intel·ligència” els llocs web, la qual cosa fa que generin pàgines diferents segons les circumstàncies. Exemples de llenguatges de servidor són PHP, Python, Node.js, entre altres.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;avantatges-1&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Actualització en Temps Real&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Les pàgines es poden actualitzar automàticament sense necessitat de recarregar tota la pàgina.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cas d&#39;Ús:&lt;/strong&gt; Un portal de notícies que mostra articles nous sense necessitat de recarregar la pàgina.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Personalització del Contingut&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Permet adaptar el contingut a les preferències i el comportament de l&#39;usuari.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cas d&#39;Ús:&lt;/strong&gt; Una botiga en línia que mostra recomanacions de productes basades en l&#39;historial de navegació i compres de l&#39;usuari.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Interactivitat Avançada&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Facilita la creació d&#39;aplicacions web interactives que poden respondre a les accions de l&#39;usuari en temps real.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cas d&#39;Ús:&lt;/strong&gt; Aplicacions de xarxes socials que mostren actualitzacions i notificacions en temps real.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Gestió Eficient de Contingut&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Permet gestionar grans quantitats de contingut de manera més eficient, mostrant només el contingut rellevant en funció de la sol·licitud de l&#39;usuari.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cas d&#39;Ús:&lt;/strong&gt; Un sistema de gestió de continguts (CMS) que permet als administradors editar i publicar articles de manera dinàmica.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-1&quot; tabindex=&quot;-1&quot;&gt;Desavantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complexitat:&lt;/strong&gt; Més difícils de crear i mantenir, ja que requereixen programació tant al client com al servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rendiment:&lt;/strong&gt; Poden ser més lentes a causa de la necessitat de processament al servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Seguretat:&lt;/strong&gt; Exposades a més vulnerabilitats, com injeccions SQL, si no es prenen les precaucions adequades.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;impacte-en-aplicacions-modernes&quot; tabindex=&quot;-1&quot;&gt;Impacte en Aplicacions Modernes&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Millora de l&#39;Experiència d&#39;Usuari&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Les aplicacions modernes utilitzen la generació dinàmica de pàgines per oferir una experiència més fluida i responsiva. Per exemple, aplicacions com Gmail i Google Docs permeten als usuaris interactuar amb el contingut en temps real sense interrupcions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Optimització del Rendiment&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La generació dinàmica de pàgines permet carregar només el contingut necessari, reduint la càrrega inicial i millorant el rendiment general de l&#39;aplicació. Això és especialment útil en aplicacions complexes amb molta interactivitat.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Capacitat de Resposta a les Sol·licituds de l&#39;Usuari&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Aplicacions com Facebook i Twitter utilitzen la generació dinàmica per actualitzar el feed en temps real, oferint als usuaris informació actualitzada immediatament.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;exemple-practic-php&quot; tabindex=&quot;-1&quot;&gt;Exemple Pràctic (PHP)&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Pàgina Dinàmica&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body { font-family: Arial, sans-serif; }
        .content { margin: 20px; }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;Benvingut!&amp;lt;/h1&amp;gt;
        &amp;lt;p&amp;gt;Aquesta pàgina ha estat generada a les &amp;lt;?php echo date(&#39;H:i:s&#39;); ?&amp;gt;.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comparativa-entre-pagines-web-estatiques-i-dinamiques&quot; tabindex=&quot;-1&quot;&gt;Comparativa entre Pàgines Web Estàtiques i Dinàmiques&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Característica&lt;/th&gt;
&lt;th&gt;Pàgines Web Estàtiques&lt;/th&gt;
&lt;th&gt;Pàgines Web Dinàmiques&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Contingut&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Fix, no canvia&lt;/td&gt;
&lt;td&gt;Variable, pot canviar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Complexitat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Baixa&lt;/td&gt;
&lt;td&gt;Alta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Interactivitat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Limitada&lt;/td&gt;
&lt;td&gt;Alta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Rendiment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Alt&lt;/td&gt;
&lt;td&gt;Pot ser baix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Alta&lt;/td&gt;
&lt;td&gt;Depèn de la implementació&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Flexibilitat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Baixa&lt;/td&gt;
&lt;td&gt;Alta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SEO&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Bona&lt;/td&gt;
&lt;td&gt;Depèn de la implementació&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Temps de Desenvolupament&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Curt&lt;/td&gt;
&lt;td&gt;Llarg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Actualització del Contingut&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Manual&lt;/td&gt;
&lt;td&gt;Automàtica&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Cost de Manteniment&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Baix&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src=&quot;https://pedroporo.github.io/img/user/01%20Apuntes/DAW/PHP%20Teoria%20Batoi/imagenes/01/paginadinamica.png&quot; alt=&quot;paginadinamica.png&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;recursos-addicionals-1&quot; tabindex=&quot;-1&quot;&gt;Recursos Addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.example.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Article sobre els avantatges de les pàgines dinàmiques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.example.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curs sobre generació dinàmica de pàgines web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de HTML:&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN HTML Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de CSS:&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN CSS Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de PHP:&lt;/strong&gt; &lt;a href=&quot;https://www.php.net/docs.php&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PHP Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de JavaScript (MDN):&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN JavaScript Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de Node.js:&lt;/strong&gt; &lt;a href=&quot;https://nodejs.org/en/docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Node.js Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de React:&lt;/strong&gt; &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;React Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;resum-1&quot; tabindex=&quot;-1&quot;&gt;Resum&lt;/h4&gt;
&lt;p&gt;Les pàgines web estàtiques són adequades per a llocs web senzills amb contingut fix, mentre que les pàgines web dinàmiques són necessàries per a aplicacions més complexes que requereixen interactivitat i contingut variable. La decisió entre utilitzar una pàgina estàtica o dinàmica dependrà de les necessitats específiques del projecte i dels recursos disponibles. Les SPA ofereixen una experiència d&#39;usuari molt rica però poden tenir desavantatges en termes de SEO i temps de càrrega inicial.&lt;/p&gt;
&lt;h2 id=&quot;3-models-d-execucio&quot; tabindex=&quot;-1&quot;&gt;3. Models d&#39;Execució&lt;/h2&gt;
&lt;p&gt;Els models d&#39;execució de codi en el desenvolupament web es poden dividir principalment en dos tipus: execució al client i execució al servidor. Cada model té les seves pròpies característiques, avantatges i desavantatges que cal considerar a l&#39;hora de dissenyar una aplicació web.&lt;/p&gt;
&lt;h3 id=&quot;execucio-de-codi-al-client-front-end&quot; tabindex=&quot;-1&quot;&gt;Execució de Codi al Client (FrontEnd)&lt;/h3&gt;
&lt;p&gt;L&#39;execució de codi al client es realitza al navegador web de l&#39;usuari. Els llenguatges utilitzats principalment per a l&#39;execució al client són HTML, CSS i JavaScript.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-2&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Interactivitat:&lt;/strong&gt; Permet la creació d&#39;experiències d&#39;usuari riques i interactives.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reducció de la càrrega del servidor:&lt;/strong&gt; El processament es fa al dispositiu de l&#39;usuari, disminuint la càrrega del servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actualització instantània:&lt;/strong&gt; Canvis en l&#39;UI poden ser reflectits immediatament sense necessitat de recarregar la pàgina.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-2&quot; tabindex=&quot;-1&quot;&gt;Desavantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Seguretat:&lt;/strong&gt; El codi del client és visible i modificable pels usuaris, la qual cosa pot representar un risc de seguretat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compatibilitat:&lt;/strong&gt; Pot haver-hi diferències en la manera com diferents navegadors interpreten el codi.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemple de codi&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Exemple Client&amp;lt;/title&amp;gt;
    &amp;lt;style&amp;gt;
        body { font-family: Arial, sans-serif; }
        .content { margin: 20px; }
    &amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
        &amp;lt;h1&amp;gt;Hola, món!&amp;lt;/h1&amp;gt;
        &amp;lt;button onclick=&amp;quot;mostrarMissatge()&amp;quot;&amp;gt;Fes clic aquí&amp;lt;/button&amp;gt;
        &amp;lt;p id=&amp;quot;missatge&amp;quot;&amp;gt;&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;

    &amp;lt;script&amp;gt;
        function mostrarMissatge() {
            document.getElementById(&#39;missatge&#39;).innerText = &#39;Has fet clic al botó!&#39;;
        }
    &amp;lt;/script&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;execucio-de-codi-al-servidor-back-end&quot; tabindex=&quot;-1&quot;&gt;Execució de Codi al Servidor (BackEnd)&lt;/h3&gt;
&lt;p&gt;L&#39;execució de codi al servidor es realitza al servidor web abans que els resultats es retornin al navegador del client. Els llenguatges habituals inclouen PHP, Python, Ruby, Node.js, entre altres.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-3&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Seguretat:&lt;/strong&gt; El codi del servidor no és accessible pels usuaris finals, la qual cosa augmenta la seguretat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Potència:&lt;/strong&gt; Els servidors solen ser més potents que els dispositius dels usuaris, permetent processar operacions més complexes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-3&quot; tabindex=&quot;-1&quot;&gt;Desavantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Latència:&lt;/strong&gt; Les sol·licituds al servidor poden ser lentes a causa de la distància física i la càrrega del servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escalabilitat:&lt;/strong&gt; Pot ser necessari més esforç per escalar una aplicació a mesura que augmenta el nombre d&#39;usuaris.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemple de codi&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-node.js&quot;&gt;// server.js
const http = require(&#39;http&#39;);

const hostname = &#39;127.0.0.1&#39;;
const port = 3000;

const server = http.createServer((req, res) =&amp;gt; {
res.statusCode = 200;
res.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);
res.end(&#39;Hola, món!&#92;n&#39;);
});

server.listen(port, hostname, () =&amp;gt; {
console.log(`El servidor s&#39;està executant a http://${hostname}:${port}/`);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;single-page-application-spa&quot; tabindex=&quot;-1&quot;&gt;Single Page Application (SPA)&lt;/h3&gt;
&lt;p&gt;Una Single Page Application (SPA) és un tipus d&#39;aplicació web que carrega una única pàgina HTML i dinàmicament actualitza el contingut a mesura que l&#39;usuari interactua amb l&#39;aplicació, utilitzant JavaScript per a gestionar la lògica i les actualitzacions de la interfície d&#39;usuari.&lt;/p&gt;
&lt;h4 id=&quot;avantatges-4&quot; tabindex=&quot;-1&quot;&gt;Avantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Experiència d&#39;usuari millorada:&lt;/strong&gt; Les SPA ofereixen una navegació més ràpida i fluida, similar a una aplicació d&#39;escriptori.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Menys càrrega del servidor:&lt;/strong&gt; Menys sol·licituds al servidor ja que només es carrega una pàgina inicialment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Desenvolupament modular:&lt;/strong&gt; Facilita la creació de components reutilitzables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;desavantatges-4&quot; tabindex=&quot;-1&quot;&gt;Desavantatges&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SEO:&lt;/strong&gt; Les SPA poden ser menys amigables amb els motors de cerca.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Carregada inicial:&lt;/strong&gt; Pot requerir una major càrrega inicial de recursos, afectant el temps de càrrega inicial.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Gestió de l&#39;estat complexa:&lt;/strong&gt; Pot ser més complicat gestionar l&#39;estat de l&#39;aplicació.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exemple Pràctic (React)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-jsx&quot;&gt;// index.html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
    &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
    &amp;lt;title&amp;gt;Exemple SPA&amp;lt;/title&amp;gt;
    &amp;lt;script defer src=&amp;quot;bundle.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;root&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

// index.js
import React, { useState } from &#39;react&#39;;
import ReactDOM from &#39;react-dom&#39;;

function App() {
    const [message, setMessage] = useState(&#39;&#39;);

    const handleClick = () =&amp;gt; {
        setMessage(&#39;Has fet clic al botó!&#39;);
    };

    return (
        &amp;lt;div&amp;gt;
            &amp;lt;h1&amp;gt;Hola, món!&amp;lt;/h1&amp;gt;
            &amp;lt;button onClick={handleClick}&amp;gt;Fes clic aquí&amp;lt;/button&amp;gt;
            &amp;lt;p&amp;gt;{message}&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
    );
}

ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;root&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comparativa-entre-execucio-de-codi-al-client-al-servidor-i-el-spa&quot; tabindex=&quot;-1&quot;&gt;Comparativa entre Execució de Codi al Client,al Servidor i el SPA&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Característica&lt;/th&gt;
&lt;th&gt;Client-Side&lt;/th&gt;
&lt;th&gt;Server-Side&lt;/th&gt;
&lt;th&gt;Single Page Application (SPA)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Execució&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Navegador del client&lt;/td&gt;
&lt;td&gt;Servidor&lt;/td&gt;
&lt;td&gt;Navegador del client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Llenguatges&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;JavaScript, HTML, CSS&lt;/td&gt;
&lt;td&gt;PHP, Node.js, Python, Java&lt;/td&gt;
&lt;td&gt;JavaScript, HTML, CSS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Temps de Resposta&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Immediata (després de la càrrega)&lt;/td&gt;
&lt;td&gt;Depèn de la comunicació amb el servidor&lt;/td&gt;
&lt;td&gt;Baixa (després de la càrrega inicial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Més exposat a vulnerabilitats&lt;/td&gt;
&lt;td&gt;Més controlat&lt;/td&gt;
&lt;td&gt;Mitjana&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Recursos&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Limitats pels recursos del client&lt;/td&gt;
&lt;td&gt;Recursos del servidor&lt;/td&gt;
&lt;td&gt;Limitats pels recursos del client&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Accés a Dades&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No pot accedir directament a bases de dades&lt;/td&gt;
&lt;td&gt;Accés directe a bases de dades&lt;/td&gt;
&lt;td&gt;Generalment via API&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Interactivitat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Elevada, pot respondre ràpidament a les accions de l&#39;usuari&lt;/td&gt;
&lt;td&gt;Més difícil d&#39;aconseguir sense Ajax o websockets&lt;/td&gt;
&lt;td&gt;Molt Alta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Processament&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Menys capacitat de procés&lt;/td&gt;
&lt;td&gt;Alta capacitat de procés&lt;/td&gt;
&lt;td&gt;Processament distribuit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Carrega del servidor&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Baixa&lt;/td&gt;
&lt;td&gt;Alta&lt;/td&gt;
&lt;td&gt;Baixa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Latència&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Baixa&lt;/td&gt;
&lt;td&gt;Pot ser alta&lt;/td&gt;
&lt;td&gt;Baixa (després de la càrrega inicial)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Accés a recursos locals&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Limitat al navegador&lt;/td&gt;
&lt;td&gt;Complet accés al sistema del servidor&lt;/td&gt;
&lt;td&gt;Limitat al navegador&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SEO&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Mitjana&lt;/td&gt;
&lt;td&gt;Alta&lt;/td&gt;
&lt;td&gt;Baixa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Temps de càrrega inicial&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Ràpid&lt;/td&gt;
&lt;td&gt;Depèn de la complexitat&lt;/td&gt;
&lt;td&gt;Pot ser lent&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;comparativa-entre-desenvolupadors&quot; tabindex=&quot;-1&quot;&gt;Comparativa entre desenvolupadors&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Perfil&lt;/th&gt;
&lt;th&gt;Ferramenta&lt;/th&gt;
&lt;th&gt;Tecnologia&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Front-end&lt;/em&gt; / client&lt;/td&gt;
&lt;td&gt;Navegador Web&lt;/td&gt;
&lt;td&gt;HTML + CSS + JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;Back-end&lt;/em&gt; / servidor&lt;/td&gt;
&lt;td&gt;Servidor Web + BBDD&lt;/td&gt;
&lt;td&gt;PHP, Python, Ruby, Java / JSP, .Net / .asp&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;!!! tip &amp;quot;Perfil &lt;em&gt;Full-stack&lt;/em&gt;&amp;quot;&lt;br /&gt;
En les ofertes de treball quan fan referència a un &lt;strong&gt;Full-stack developer&lt;/strong&gt;, estan buscant un perfil que domina tant el &lt;strong&gt;front-end&lt;/strong&gt; com el &lt;strong&gt;back-end&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&quot;recursos-addicionals-2&quot; tabindex=&quot;-1&quot;&gt;Recursos addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Documentació de JavaScript (MDN):&lt;/strong&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN JavaScript Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Guia de Node.js:&lt;/strong&gt; &lt;a href=&quot;https://nodejs.org/en/docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Node.js Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentació de React:&lt;/strong&gt; &lt;a href=&quot;https://reactjs.org/docs/getting-started.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;React Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;resum-2&quot; tabindex=&quot;-1&quot;&gt;Resum&lt;/h4&gt;
&lt;p&gt;La decisió sobre si utilitzar l&#39;execució de codi al client, al servidor o una SPA depèn de les necessitats específiques de l&#39;aplicació i els recursos disponibles. Comprendre les diferències clau i els avantatges de cada model ajudarà a prendre decisions informades i a desenvolupar aplicacions web eficients i segures.&lt;/p&gt;
&lt;h2 id=&quot;4-servidors-web&quot; tabindex=&quot;-1&quot;&gt;4. Servidors Web&lt;/h2&gt;
&lt;p&gt;Un servidor web és un programa que serveix contingut web estàtic com HTML, CSS, JavaScript, imatges i altres fitxers als clients a través del protocol HTTP o HTTPS. El servidor web gestiona les sol·licituds entrants dels clients (navegadors web) i retorna les respostes adequades.&lt;/p&gt;
&lt;h3 id=&quot;funcionalitats-dels-servidors-web&quot; tabindex=&quot;-1&quot;&gt;Funcionalitats dels Servidors Web&lt;/h3&gt;
&lt;h4 id=&quot;servei-de-contingut-estatic&quot; tabindex=&quot;-1&quot;&gt;Servei de Contingut Estàtic&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Proporciona fitxers estàtics com HTML, CSS, JavaScript, imatges i altres recursos directament als clients.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Quan un usuari sol·licita una pàgina HTML, el servidor web envia el fitxer HTML corresponent al navegador de l&#39;usuari.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;gestio-de-peticions-http&quot; tabindex=&quot;-1&quot;&gt;Gestió de Peticions HTTP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Maneja sol·licituds HTTP de clients, com GET, POST, PUT, DELETE, i retorna les respostes adequades amb els codis d&#39;estat corresponents.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Un servidor web processa una sol·licitud GET per una pàgina web i retorna el contingut de la pàgina amb un codi d&#39;estat 200 (OK).&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;redireccio-i-reescriptura-d-ur-ls&quot; tabindex=&quot;-1&quot;&gt;Redirecció i Reescriptura d&#39;URLs&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Permet la redirecció de peticions a diferents URLs i la reescriptura d&#39;URLs per millorar l&#39;accessibilitat i la SEO.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Reescriptura d&#39;URLs amigables per als usuaris, com convertir &lt;code&gt;example.com/page?id=123&lt;/code&gt; a &lt;code&gt;example.com/page/123&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;suport-per-a-https&quot; tabindex=&quot;-1&quot;&gt;Suport per a HTTPS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Proporciona connexions segures utilitzant el protocol HTTPS, que xifra les dades entre el client i el servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Un servidor web configurat amb un certificat SSL/TLS que permet connexions segures a través de HTTPS.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;exemples-de-servidors-web&quot; tabindex=&quot;-1&quot;&gt;Exemples de Servidors Web&lt;/h3&gt;
&lt;h4 id=&quot;apache-http-server&quot; tabindex=&quot;-1&quot;&gt;Apache HTTP Server&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Un servidor web de codi obert molt utilitzat, conegut per la seva flexibilitat i extensibilitat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Suport per a mòduls que afegeixen funcionalitats com l&#39;autenticació, la reescriptura d&#39;URLs i la compressió de contingut.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;nginx&quot; tabindex=&quot;-1&quot;&gt;Nginx&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Un servidor web i servidor intermediari de codi obert, dissenyat per gestionar moltes connexions simultànies amb un ús eficient dels recursos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Actua com a servidor proxy invers, equilibrador de càrrega i servidor de fitxers estàtics.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;microsoft-internet-information-services-iis&quot; tabindex=&quot;-1&quot;&gt;Microsoft Internet Information Services (IIS)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Un servidor web i d&#39;aplicacions de Microsoft per a plataformes Windows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Suport per a aplicacions &lt;a href=&quot;http://asp.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ASP.NET&lt;/a&gt;, autenticació integrada i eines de gestió robustes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;mecanismes-d-execucio-de-codi-en-servidors-web&quot; tabindex=&quot;-1&quot;&gt;Mecanismes d&#39;Execució de Codi en Servidors Web&lt;/h3&gt;
&lt;h4 id=&quot;llenguatges-interpretats-php-python&quot; tabindex=&quot;-1&quot;&gt;Llenguatges interpretats: PHP, Python&lt;/h4&gt;
&lt;p&gt;El codi es processa línia per línia en temps real, permetent una major flexibilitat durant el desenvolupament, ja que els canvis poden ser implementats i testats immediatament sense necessitat de recompilar tot el projecte.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-php&quot;&gt;    &amp;lt;html&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;h1&amp;gt;&amp;lt;?php echo &amp;quot;Hola, món!&amp;quot;; ?&amp;gt;&amp;lt;/h1&amp;gt;
    &amp;lt;/body&amp;gt;
    &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;llenguatges-compilats-java&quot; tabindex=&quot;-1&quot;&gt;Llenguatges compilats: Java&lt;/h4&gt;
&lt;p&gt;El codi es compila abans de ser executat, el que significa que és transformat en un format executable per la màquina abans de la seva execució. Això sol millorar el rendiment, ja que el codi compilat s&#39;executa més ràpidament que el codi interpretat.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;  // Exemple simplificat d&#39;un servlet Java
  import java.io.*;
  import javax.servlet.*;
  import javax.servlet.http.*;
  
  public class HelloWorldServlet extends HttpServlet {
  public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws ServletException, IOException {
      response.setContentType(&amp;quot;text/html&amp;quot;);
      PrintWriter out = response.getWriter();
      out.println(&amp;quot;&amp;lt;h1&amp;gt;Hola, món!&amp;lt;/h1&amp;gt;&amp;quot;);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;intermediari-node-js&quot; tabindex=&quot;-1&quot;&gt;Intermediari: Node.js&lt;/h4&gt;
&lt;p&gt;Permet la programació asíncrona i escalable amb JavaScript, oferint la capacitat de gestionar moltes connexions simultànies de manera eficient. Això és especialment útil per a aplicacions que necessiten alta concurrència, com aplicacions en temps real.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    const express = require(&#39;express&#39;);
    const app = express();
    
    app.get(&#39;/&#39;, (req, res) =&amp;gt; {
    res.send(&#39;Hola, món!&#39;);
    });
    
    app.listen(3000, () =&amp;gt; {
    console.log(&#39;Servidor escoltant a http://localhost:3000&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;llenguatges-i-tecnologies-de-programacio-web-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;Llenguatges i Tecnologies de Programació Web en Entorn Servidor&lt;/h3&gt;
&lt;p&gt;Els mecanismes d&#39;execució de codi en els servidors web permeten que les aplicacions generin contingut dinàmic, gestionin dades i interaccions d&#39;usuaris de manera eficient. A continuació es descriuen diversos llenguatges i com funcionen en el context del servidor.&lt;/p&gt;
&lt;h4 id=&quot;php&quot; tabindex=&quot;-1&quot;&gt;PHP&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; PHP és un llenguatge interpretat popularment utilitzat per a la creació de pàgines web dinàmiques.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mecanisme:&lt;/strong&gt; El codi PHP s&#39;incrusta dins dels fitxers HTML i es processa en temps real pel servidor web abans de ser enviat al client.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;node-js&quot; tabindex=&quot;-1&quot;&gt;Node.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Node.js permet la programació asíncrona i escalable amb JavaScript.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mecanisme:&lt;/strong&gt; Utilitza un model basat en esdeveniments que permet la gestió de moltes connexions simultànies sense bloquejar-se.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;java-jsp-servlets&quot; tabindex=&quot;-1&quot;&gt;Java (JSP/Servlets)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Java s&#39;utilitza per a aplicacions empresarials amb alta complexitat i escalabilitat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mecanisme:&lt;/strong&gt; El codi Java es compila abans d&#39;executar-se, millorant el rendiment. Els servlets i JSP gestionen les sol·licituds HTTP i generen contingut dinàmic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;python-django-flask&quot; tabindex=&quot;-1&quot;&gt;Python (Django/Flask)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Python és conegut per la seva sintaxi clara i les seves biblioteques extensives. Django i Flask són frameworks populars.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mecanisme:&lt;/strong&gt; Django utilitza un ORM per interactuar amb bases de dades, mentre que Flask és més lleuger i flexible.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;from flask import Flask

app = Flask(__name__)

@app.route(&#39;/&#39;)
def hello_world():
return &#39;Hola, món!&#39;

if __name__ == &#39;__main__&#39;:
app.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;ruby-ruby-on-rails&quot; tabindex=&quot;-1&quot;&gt;Ruby (Ruby on Rails)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Ruby és apreciat per la seva elegància i facilitat d&#39;ús. Ruby on Rails és un framework popular.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mecanisme:&lt;/strong&gt; Ruby on Rails segueix el patró MVC, facilitant el desenvolupament d&#39;aplicacions web estructurades.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class WelcomeController &amp;lt; ApplicationController
def index
render plain: &amp;quot;Hola, món!&amp;quot;
end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;go&quot; tabindex=&quot;-1&quot;&gt;Go&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Go és un llenguatge de programació desenvolupat per Google, conegut per la seva eficiència i concurrència.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mecanisme:&lt;/strong&gt; Go permet la creació de servidors web ràpids i escalables, utilitzant goroutines per gestionar múltiples connexions de manera eficient.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;package main

import (
&amp;quot;fmt&amp;quot;
&amp;quot;net/http&amp;quot;
)

func helloHandler(w http.ResponseWriter, r *http.Request) {
fmt.Fprintf(w, &amp;quot;Hola, món!&amp;quot;)
}

func main() {
http.HandleFunc(&amp;quot;/&amp;quot;, helloHandler)
http.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;comparativa-entre-llenguatges&quot; tabindex=&quot;-1&quot;&gt;Comparativa entre llenguatges&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Llenguatge&lt;/th&gt;
&lt;th&gt;Avantatges&lt;/th&gt;
&lt;th&gt;Desavantatges&lt;/th&gt;
&lt;th&gt;Usos Comuns&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;PHP&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Amplament utilitzat, gran comunitat, fàcil d&#39;aprendre&lt;/td&gt;
&lt;td&gt;Seguretat (cal bones pràctiques), rendiment inferior a altres llenguatges&lt;/td&gt;
&lt;td&gt;Aplicacions web, CMS com WordPress&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Python&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Senzillesa i llegibilitat, gran quantitat de biblioteques, potent per a prototips&lt;/td&gt;
&lt;td&gt;Rendiment inferior en algunes àrees, gestió de concurrència&lt;/td&gt;
&lt;td&gt;Aplicacions web (Django, Flask), anàlisi de dades&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Node.js&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Alta velocitat, no bloqueig (event-driven), gran ecosistema (NPM)&lt;/td&gt;
&lt;td&gt;Pot ser complicat per a grans aplicacions, gestió de callbacks&lt;/td&gt;
&lt;td&gt;Aplicacions en temps real, serveis web&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Java&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Rendiment elevat, robustesa, seguretat, escalabilitat&lt;/td&gt;
&lt;td&gt;Verborrea, aprenentatge més complex&lt;/td&gt;
&lt;td&gt;Aplicacions empresarials, sistemes grans, Android&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;recursos-addicionals-3&quot; tabindex=&quot;-1&quot;&gt;Recursos Addicionals:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/Server-side/Introduction&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Client-side vs Server-side&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Apache HTTP Server Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nginx.org/en/docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nginx Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/iis/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Microsoft IIS Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/php/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;W3Schools: PHP Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nodejs.org/en/docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Node.js Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/stable/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Django Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/en/2.0.x/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Flask Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://guides.rubyonrails.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ruby on Rails Guides&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://golang.org/doc/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Go Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codementor.io/@iliawebdev/top-programming-languages-for-web-development-in-2021-1hzczfuoei&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comparació de llenguatges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.educacionit.com/2018/04/10/4-criterios-para-elegir-tu-primer-lenguaje-de-programacion/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Criteris per apendre un llenguatge de programació&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;resum-3&quot; tabindex=&quot;-1&quot;&gt;Resum&lt;/h4&gt;
&lt;p&gt;Un servidor web serveix contingut estàtic com HTML, CSS, JavaScript i imatges als clients a través de HTTP o HTTPS. Gestiona sol·licituds entrants i retorna respostes adequades. Exemples de servidors web inclouen Apache, Nginx i Microsoft IIS, cadascun amb funcionalitats úniques com la redirecció d&#39;URLs, suport per a HTTPS i gestió de peticions HTTP. A més, utilitzen llenguatges interpretats (PHP, Python), compilats (Java) i intermediaris (Node.js) per executar codi.&lt;/p&gt;
&lt;h2 id=&quot;5-servidors-d-aplicacions&quot; tabindex=&quot;-1&quot;&gt;5. Servidors d&#39;Aplicacions&lt;/h2&gt;
&lt;p&gt;Un servidor d&#39;aplicacions és un tipus de servidor dissenyat per executar aplicacions web dinàmiques i gestionar la lògica de negoci d&#39;una aplicació. Aquest servidor actua com una capa intermèdia entre el client (navegador web) i les bases de dades o altres serveis de backend, proporcionant un entorn d&#39;execució per a aplicacions web.&lt;/p&gt;
&lt;h3 id=&quot;principals-funcionalitats-dels-servidors-d-aplicacions&quot; tabindex=&quot;-1&quot;&gt;Principals Funcionalitats dels Servidors d&#39;Aplicacions&lt;/h3&gt;
&lt;h4 id=&quot;gestio-de-sessions&quot; tabindex=&quot;-1&quot;&gt;Gestió de Sessions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Manteniment de l&#39;estat de l&#39;usuari durant la seva interacció amb l&#39;aplicació.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Sessions PHP que emmagatzemen informació de l&#39;usuari.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;concurrencia&quot; tabindex=&quot;-1&quot;&gt;Concurrència&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Capacitat per gestionar múltiples peticions simultànies de manera eficient.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Node.js gestiona peticions de manera asíncrona.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;seguretat&quot; tabindex=&quot;-1&quot;&gt;Seguretat&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Autenticació i autorització dels usuaris per accedir a diferents parts de l&#39;aplicació.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Utilització de JWT (JSON Web Tokens) per autenticar usuaris en una aplicació Node.js.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;relacio-entre-servidors-web-i-servidors-d-aplicacions&quot; tabindex=&quot;-1&quot;&gt;Relació entre Servidors Web i Servidors d&#39;Aplicacions&lt;/h3&gt;
&lt;h4 id=&quot;integracio-i-col-laboracio&quot; tabindex=&quot;-1&quot;&gt;Integració i Col·laboració&lt;/h4&gt;
&lt;p&gt;Els servidors web treballen conjuntament amb els servidors d&#39;aplicacions per gestionar les sol·licituds de manera eficient. Mentre que el servidor web maneja les sol·licituds HTTP i serveix contingut estàtic, el servidor d&#39;aplicacions processa la lògica de negoci i genera contingut dinàmic.&lt;/p&gt;
&lt;h4 id=&quot;exemple-de-configuracio&quot; tabindex=&quot;-1&quot;&gt;Exemple de Configuració&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Servidor Web (Nginx):&lt;/strong&gt; Actua com a proxy invers, encaminant les sol·licituds dinàmiques al servidor d&#39;aplicacions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Servidor d&#39;Aplicacions (Node.js):&lt;/strong&gt; Gestiona les sol·licituds dinàmiques, executa la lògica de negoci i retorna les respostes al servidor web.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Configuració de Nginx com a Proxy Invers&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-nginx&quot;&gt;server {
   listen 80;
   server_name example.com;

   location / {
       proxy_pass http://localhost:3000;
       proxy_set_header Host $host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-Forwarded-Proto $scheme;
   }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Configuració servidor d&#39;aplicacions Node.js&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const express = require(&#39;express&#39;);
const app = express();

app.get(&#39;/&#39;, (req, res) =&amp;gt; {
    res.send(&#39;Hola, món!&#39;);
});

app.listen(3000, () =&amp;gt; {
    console.log(&#39;Servidor escoltant a http://localhost:3000&#39;);
});  

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquesta col·laboració permet una gestió eficient de les sol·licituds i una millor distribució de la càrrega, millorant el rendiment i l&#39;escalabilitat de les aplicacions web.&lt;/p&gt;
&lt;h3 id=&quot;exemples-de-servidors-d-aplicacions&quot; tabindex=&quot;-1&quot;&gt;Exemples de Servidors d&#39;Aplicacions&lt;/h3&gt;
&lt;h4 id=&quot;apache-tomcat&quot; tabindex=&quot;-1&quot;&gt;Apache Tomcat&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Un servidor d&#39;aplicacions de codi obert per a aplicacions web Java.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Suporta servlets Java i JavaServer Pages (JSP), facilitant l&#39;execució d&#39;aplicacions Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;microsoft-internet-information-services-iis-1&quot; tabindex=&quot;-1&quot;&gt;Microsoft Internet Information Services (IIS)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Un servidor web i d&#39;aplicacions de Microsoft per a plataformes Windows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Suporta aplicacions &lt;a href=&quot;http://asp.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ASP.NET&lt;/a&gt;, autenticació integrada, i eines de gestió robustes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;j-boss-eap-enterprise-application-platform&quot; tabindex=&quot;-1&quot;&gt;JBoss EAP (Enterprise Application Platform)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Un servidor d&#39;aplicacions Java EE de codi obert desenvolupat per Red Hat.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Proporciona un entorn robust per a la implementació d&#39;aplicacions empresarials amb suport per a diversos frameworks Java.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;node-js-1&quot; tabindex=&quot;-1&quot;&gt;Node.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Una plataforma per a l&#39;execució de codi JavaScript en el servidor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Funcionalitats:&lt;/strong&gt; Permet la programació asíncrona, ideal per a aplicacions en temps real i escalables com xats i jocs multijugador.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;!!! info&lt;br /&gt;
Tant els servidors web com els servidors d&#39;aplicacions s&#39;estudien en el mòdul de &amp;quot;Desplegament d&#39;Aplicacions Web&amp;quot;.&lt;/p&gt;
&lt;h4 id=&quot;recursos-addicionals-4&quot; tabindex=&quot;-1&quot;&gt;Recursos addicionals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.redhat.com/en/topics/middleware/what-is-an-application-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;What is an Application Server?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Apache Tomcat Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JBoss Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://javaee.github.io/glassfish/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GlassFish Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/projects/spring-framework&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Spring Framework Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;resum-4&quot; tabindex=&quot;-1&quot;&gt;Resum&lt;/h4&gt;
&lt;p&gt;Els servidors d&#39;aplicacions executen aplicacions dinàmiques i proporcionen serveis empresarials. Es diferencien dels servidors web en què no només serveixen contingut estàtic, sinó que també processen lògica d&#39;aplicació i interaccions de base de dades. Exemples inclouen Apache Tomcat, JBoss i GlassFish, utilitzats per a aplicacions Java. També donen suport a tecnologies com servlets, JSP, EJB i frameworks com Spring, facilitant la construcció d&#39;aplicacions robustes i escalables.&lt;/p&gt;
&lt;h2 id=&quot;6-frameworks-de-programacio-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;6.Frameworks de Programació en Entorn Servidor&lt;/h2&gt;
&lt;p&gt;Un framework és una plataforma de desenvolupament que proporciona una estructura estandarditzada per a la creació d&#39;aplicacions web. Facilita i accelera el procés de desenvolupament oferint biblioteques de codi preescrit, components reutilitzables i un conjunt de bones pràctiques. Els frameworks ajuden els desenvolupadors a centrar-se en la funcionalitat de l&#39;aplicació en lloc de preocupar-se pels aspectes bàsics i repetitius de la programació.&lt;/p&gt;
&lt;h3 id=&quot;principals-frameworks-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;Principals Frameworks en Entorn Servidor&lt;/h3&gt;
&lt;h4 id=&quot;express-js&quot; tabindex=&quot;-1&quot;&gt;Express.js&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Express.js és un framework web minimalista per a Node.js. Proporciona eines senzilles i flexibles per a la creació d&#39;aplicacions web i API.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Característiques:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Middleware per a gestionar peticions HTTP.&lt;/li&gt;
&lt;li&gt;Sistema d&#39;enrutament senzill i modular.&lt;/li&gt;
&lt;li&gt;Suport per a motors de plantilles com Pug i EJS.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avantatges:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Lleuger i flexible.&lt;/li&gt;
&lt;li&gt;Gran comunitat de suport i moltes extensions disponibles.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconvenients:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Requereix més configuració manual comparat amb altres frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;django&quot; tabindex=&quot;-1&quot;&gt;Django&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Django és un framework de programació web d&#39;alt nivell per a Python que permet un desenvolupament ràpid i un disseny net i pragmàtic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Característiques:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Inclou un ORM (Object-Relational Mapping) potent.&lt;/li&gt;
&lt;li&gt;Sistema d&#39;administració automàtic.&lt;/li&gt;
&lt;li&gt;Seguretat integrada.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avantatges:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Promou les bones pràctiques de desenvolupament.&lt;/li&gt;
&lt;li&gt;Molt complet, amb moltes funcionalitats &amp;quot;out-of-the-box&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconvenients:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Pot ser massa gran per a aplicacions petites.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;laravel&quot; tabindex=&quot;-1&quot;&gt;Laravel&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Descripció:&lt;/strong&gt; Laravel és un framework PHP elegant i expressiu que ofereix un conjunt complet d&#39;eines i recursos per a construir aplicacions web.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Característiques:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Sistema d&#39;enrutament senzill i potent.&lt;/li&gt;
&lt;li&gt;Eloquent ORM per a una interacció fàcil amb bases de dades.&lt;/li&gt;
&lt;li&gt;Sistema de templates Blade.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Avantatges:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Gran comunitat i abundant documentació.&lt;/li&gt;
&lt;li&gt;Facilitat per a desenvolupar aplicacions robustes i escalables.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconvenients:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Pot tenir una corba d&#39;aprenentatge per als nous desenvolupadors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;comparativa-dels-frameworks&quot; tabindex=&quot;-1&quot;&gt;Comparativa dels Frameworks&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Característica&lt;/th&gt;
&lt;th&gt;Express.js&lt;/th&gt;
&lt;th&gt;Django&lt;/th&gt;
&lt;th&gt;Laravel&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Idioma de programació&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;JavaScript&lt;/td&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ORM&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No integrat, però es pot utilitzar Sequelize o Mongoose&lt;/td&gt;
&lt;td&gt;Sí (integrat)&lt;/td&gt;
&lt;td&gt;Sí (integrat, Eloquent ORM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sistema d&#39;enrutament&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Motor de plantilles&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Suport per Pug, EJS, etc.&lt;/td&gt;
&lt;td&gt;Sí (Django Templates)&lt;/td&gt;
&lt;td&gt;Sí (Blade)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Sistema d&#39;administració&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Sí&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Comunitat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Gran&lt;/td&gt;
&lt;td&gt;Gran&lt;/td&gt;
&lt;td&gt;Gran&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Facilitat d&#39;aprenentatge&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Moderada&lt;/td&gt;
&lt;td&gt;Moderada&lt;/td&gt;
&lt;td&gt;Moderada&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Documentació&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Excel·lent&lt;/td&gt;
&lt;td&gt;Excel·lent&lt;/td&gt;
&lt;td&gt;Excel·lent&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Seguretat&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Depèn de la configuració&lt;/td&gt;
&lt;td&gt;Alta, amb funcions integrades&lt;/td&gt;
&lt;td&gt;Alta, amb funcions integrades&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;com-trieu-un-framework&quot; tabindex=&quot;-1&quot;&gt;Com Trieu un Framework?&lt;/h3&gt;
&lt;p&gt;La selecció del framework adequat per a un projecte depèn de diversos factors:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tipus de Projecte:&lt;/strong&gt; Aplicacions en temps real, aplicacions CRUD, aplicacions amb necessitats específiques de seguretat, etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Idioma de Programació:&lt;/strong&gt; Si el teu equip està més familiaritzat amb JavaScript, Python o PHP, per exemple.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Escalabilitat i Rendiment:&lt;/strong&gt; Alguns frameworks són més adequats per a aplicacions petites, mentre que altres gestionen millor aplicacions de gran escala.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ecosistema i Comunitat:&lt;/strong&gt; La disponibilitat de biblioteques, plugins i la mida de la comunitat poden influir en la decisió.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Facilitat d&#39;ús i Documentació:&lt;/strong&gt; Un bon framework ha de tenir una documentació clara i fàcil d&#39;entendre, així com una corba d&#39;aprenentatge adequada per al teu equip.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;recursos-addicionals-5&quot; tabindex=&quot;-1&quot;&gt;Recursos Addicionals:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Node.js Official Documentation:&lt;/strong&gt; &lt;a href=&quot;https://nodejs.org/en/docs/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Express.js Official Documentation:&lt;/strong&gt; &lt;a href=&quot;https://expressjs.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Express.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django Official Documentation:&lt;/strong&gt; &lt;a href=&quot;https://docs.djangoproject.com/en/stable/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Laravel Documentation:&lt;/strong&gt; &lt;a href=&quot;https://laravel.com/docs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Laravel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-entorn-de-treball&quot; tabindex=&quot;-1&quot;&gt;7. Entorn de treball&lt;/h2&gt;
&lt;h3 id=&quot;entorn-de-desenvolupament-integrat-ide&quot; tabindex=&quot;-1&quot;&gt;Entorn de desenvolupament integrat (IDE)&lt;/h3&gt;
&lt;p&gt;En este curso utilitzarem &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/a&gt; com a editor  de codi. Existixen altres alternatives, com  &lt;a href=&quot;https://www.jetbrains.com/phpstorm/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;PHP Storm&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;git-hub-classroom&quot; tabindex=&quot;-1&quot;&gt;GitHub Classroom&lt;/h3&gt;
&lt;p&gt;Us haureu de &lt;a href=&quot;https://classroom.github.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;registrar&lt;/a&gt; ja que l&#39;utilitzarem durant el curs per la còpia  de repositoris i entrega de treballs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Metodologia de treball amb el github classroom&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Se proporcionarà a l&#39;alumnat un enllaç amb la invitació.&lt;/li&gt;
&lt;li&gt;Accedint a l&#39;enllaç a cada alumne se li crearà un repositori individual en l&#39;organització.&lt;/li&gt;
&lt;li&gt;L&#39;alumnat treballa en el seu repositori assignat. Se&#39;l pot baixar per treballar en local.&lt;/li&gt;
&lt;li&gt;Inicialment, l&#39;alumne crea una branca nova sobre la que va a treballar.&lt;/li&gt;
&lt;li&gt;Quan vullga sol.licitar ajuda o revisió del professor, l&#39;alumne genera una pull request a la branca principal del seu repositori en la que cita al professor per tal que reba una notificació.&lt;/li&gt;
&lt;li&gt;El profesor proporciona retroalimentació mitjançant comentaris en la pull request o en un determinat commit individual.&lt;/li&gt;
&lt;li&gt;Opcionalment es poden utilitzar els issues y les cites d&#39;usuari per sol·licitar la intervenció del profesor.&lt;/li&gt;
&lt;li&gt;Quan l&#39;alumne finalitza la tasca, genera una últim pull request&lt;/li&gt;
&lt;li&gt;El profesor revisa la pull request i opcionalment fa comentaris.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;entorns-de-desenvolupament-local&quot; tabindex=&quot;-1&quot;&gt;Entorns de desenvolupament local&lt;/h3&gt;
&lt;p&gt;Pera fer correr les aplicacions de servidor ens cal, com a mínim, un &lt;strong&gt;servidor web&lt;/strong&gt;, l&#39;interpret de &lt;strong&gt;php&lt;/strong&gt; i un &lt;strong&gt;motor de base de dades&lt;/strong&gt;. Hem de distinguir l&#39;&lt;strong&gt;entorn de desenvolupament&lt;/strong&gt;, on anem a programar i mantindre la nostra aplicació, de l&#39;&lt;strong&gt;entorn de producció&lt;/strong&gt;, on anem a executar-la.&lt;br /&gt;
Normalment el primer depén de nosaltres mentre que el segon pot dependre de l&#39;empresa on s&#39;allotjarà la nostra web. Per a preparar el nostre entorn de desenvolupament podem optar per:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Qualsevol solució &lt;strong&gt;LAMP&lt;/strong&gt; (Linux, Apache, Mysql, PHP). Als que haurem d&#39;afegir, una vegada els projectes es facen grans &lt;strong&gt;composer, git i les opcions de la part de client&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Una màquina virtual ja configurada.&lt;/li&gt;
&lt;li&gt;Una solució docker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La primera solució és senzilla d&#39;implementar però no hauria de ser la nostra primera opció per:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Estem possant en funcionament en la nostra màquina una sèrie de serveis que normalment no fariem, baixant el rendiment de la màquina i obrint vulnerabilitats.&lt;/li&gt;
&lt;li&gt;Si treballem en grup, les instal·lacions i el funcionament no són iguals, depenen del sistema operatiu que té instal·lat cadascú. Allò que li funciona a ú  pot ser no li funciona a un altre. Això és inevitable quan el projecte es complica i es perd molt de temps.&lt;/li&gt;
&lt;li&gt;Passa el mateix quan passem a l&#39;entorn de producció.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La segona solució soluciona els dos primers problemes, doncs tots els desenvolupadors poden tindre virtualitzada, la mateixa màquina. Encara que si la màquina no la fem nosaltres sinó que utilitzem alguna ja configurada (&lt;strong&gt;vagrant&lt;/strong&gt;) o si ens cal instal·lar alguna cosa més, ho hauria de fer tot l&#39;equip.&lt;/p&gt;
&lt;p&gt;Així i tot, tindriem les següents desaventatges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A l&#39;instal·lar una maquina virtual sencera ocupa recursos del sistema.&lt;/li&gt;
&lt;li&gt;La màquina instal·la més coses de les necessàries habitualment.&lt;/li&gt;
&lt;li&gt;No reprodueix l&#39;entorn de producció.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La tercera opció té les següents característiques:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Al principi és més difícil de possar en funcionamet ja que calen coneixements de docker.&lt;/li&gt;
&lt;li&gt;Tots els desenvolupadors comparteixen entorn encara que utilitzen màquines o sistemes operatius diferents.&lt;/li&gt;
&lt;li&gt;Si hi ha algun canvi de configuració de l&#39;entorn és fácilment transladable a tots els desenvolupadors.&lt;/li&gt;
&lt;li&gt;Es poden crear tants entorns  de desenvolupament com projectes diferents hi hajen.&lt;/li&gt;
&lt;li&gt;Els contenidors ocupen pocs recursos.&lt;/li&gt;
&lt;li&gt;Els projectes es poden possar en producció utilitzan una solució docker de manera inmediata.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;xampp&quot; tabindex=&quot;-1&quot;&gt;XAMPP&lt;/h3&gt;
&lt;p&gt;XAMPP (&lt;a href=&quot;https://www.apachefriends.org/es/index.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.apachefriends.org/es/index.html&lt;/a&gt;) és una distribució composta amb el programari necessari per a desenvolupar en entorn servidor. Es compon de les següents eines sobre la base de les seues sigles:&lt;br /&gt;
Des de la pròpia pàgina es pot descarregar l&#39;arxiu executable per al sistema operatiu del nostre ordinador. Es recomana llegir la FAQ de cada sistema operatiu amb instruccions per a la seua posada en marxa.&lt;/p&gt;
&lt;p&gt;!!! note &amp;quot;Acrònim&amp;quot;&lt;br /&gt;
* X per al sistema operatiu (d&#39;aquí ve que es conega altrament com LAMP o WAMP).&lt;br /&gt;
* A per a Apatxe.&lt;br /&gt;
* M per a MySQL / MariaDB. També inclou phpMyAdmin per a l&#39;administració de la base de dades des d&#39;una interfície web.&lt;br /&gt;
* P per a PHP.&lt;br /&gt;
* P per a Perl.&lt;/p&gt;
&lt;p&gt;!!! note &amp;quot;XAMPP en Windows&amp;quot;&lt;br /&gt;
Si treballes amb el teu propi ordinador, XAMPP és una solució més senzilla que Docker, sobretot si treballes amb Windows com a sistema operatiu.&lt;/p&gt;
&lt;h3 id=&quot;docker&quot; tabindex=&quot;-1&quot;&gt;Docker&lt;/h3&gt;
&lt;p&gt;Docker (&lt;a href=&quot;https://www.docker.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.docker.com&lt;/a&gt;) és un gestor de contenidors, considerant un contenidor com un mètode de virtualització del sistema operatiu.&lt;br /&gt;
L&#39;ús de contenidors requereix menys recursos que una màquina virtual, per tant, el seu llançament i detenció són més ràpids que les màquines virtuals.&lt;/p&gt;
&lt;p&gt;Així doncs, &lt;em&gt;Docker&lt;/em&gt; permet crear, provar i implementar aplicacions ràpidament, a partir d&#39;una sèrie de plantilles que es coneixen com a &lt;strong&gt;imatges&lt;/strong&gt; de &lt;em&gt;Docker&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Per a això, instal·larem &lt;strong&gt;Docker Desktop&lt;/strong&gt; (&lt;a href=&quot;https://www.docker.com/products/docker-desktop&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.docker.com/products/docker-desktop&lt;/a&gt;) en els nostres entorns de desenvolupament (el qual ja inclou en &lt;strong&gt;nucli&lt;/strong&gt; de &lt;em&gt;Docker&lt;/em&gt; i l&#39;eina &lt;strong&gt;docker compose&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Al llarg del curs anirem creant diferents contenidors amb els serveis necessaris, de manera que cada vegada només treballem amb el programari mínim.&lt;/p&gt;
&lt;p&gt;!!! note &amp;quot;Docker en windows&amp;quot;&lt;br /&gt;
Per a instal·lar-ho en Windows, és necessari instal·lar prèviament &lt;strong&gt;WSL 2&lt;/strong&gt;, el qual és un subsistema de &lt;em&gt;Linux&lt;/em&gt; dins de &lt;em&gt;Windows&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id=&quot;plantilla-inicial-servidor-web-nginx-php-my-sql-php-my-admin&quot; tabindex=&quot;-1&quot;&gt;Plantilla Inicial : Servidor Web nginx + PHP + MySQL + phpMyAdmin&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Docker&lt;/strong&gt; es basa en l&#39;ús d&#39;imatges per a crear contenidors. &lt;em&gt;Docker Compose&lt;/em&gt; simplifica el treball amb múltiples contenidors, i per això, per a facilitar l&#39;arranc, ens centrarem en &lt;em&gt;Docker Compose&lt;/em&gt; utilitzant una plantilla que únicament contindrà com a serveis Nginx i PHP.&lt;br /&gt;
Per a facilitar la posada en marxa, us facilite un repositori, disponible per a la seua descarrega mitjançant el &lt;strong&gt;git clone&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Grup A: &lt;a href=&quot;https://pedroporo.github.io/#GitHub-Classroom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;github classroom&lt;/a&gt; &lt;a href=&quot;https://classroom.github.com/a/y5FOCalw&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nginx/PHP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Grup B: &lt;a href=&quot;https://pedroporo.github.io/#GitHub-Classroom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;github classroom&lt;/a&gt; &lt;a href=&quot;https://classroom.github.com/a/k_osQPW4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Nginx/PHP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;L&#39;haureu de possar en un directori fàcilment localitzable i amb un nom significatiu, ja que serà el vostre directori de treball&lt;/strong&gt;.&lt;br /&gt;
Dins d&#39;este repositori, el fitxer &lt;strong&gt;&#39;docker-compose.yaml&#39;&lt;/strong&gt; indica quines màquines ha de montar i té el següent aspecte&lt;/p&gt;
&lt;p&gt;=== &amp;quot;Nginx i PHP&amp;quot;&lt;/p&gt;
&lt;p&gt;``` yaml&lt;br /&gt;
# Services&lt;br /&gt;
services:&lt;/p&gt;
&lt;p&gt;# Nginx Service&lt;br /&gt;
nginx:&lt;br /&gt;
image: nginx:1.19&lt;br /&gt;
ports:&lt;br /&gt;
- 80:80&lt;br /&gt;
volumes:&lt;br /&gt;
- ./src:/var/www/php&lt;br /&gt;
- ./.docker/nginx/conf.d:/etc/nginx/conf.d&lt;br /&gt;
depends_on:&lt;br /&gt;
- php&lt;/p&gt;
&lt;p&gt;# PHP Service&lt;br /&gt;
php:&lt;br /&gt;
build: ./.docker/php/&lt;br /&gt;
working_dir: /var/www/php&lt;br /&gt;
expose:&lt;br /&gt;
- 9000&lt;br /&gt;
volumes:&lt;br /&gt;
- ./src:/var/www/php&lt;br /&gt;
- ./.docker/php/conf.d/Xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini&lt;br /&gt;
- ./.docker/php/conf.d/error_reporting.ini:/usr/local/etc/php/conf.d/error_reporting.ini&lt;/p&gt;
&lt;p&gt;```&lt;br /&gt;
Per arrencar les màquines o podem fer des de la consola amb&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;docker compose up -d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si volem accedir a un terminal interactiu dins del contenidor:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-console&quot;&gt;docker exec -it nombreContenedor bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Altres comandos que podem arribar a utilitzar són:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker ps&lt;/code&gt;: Veure els contenidors que es estan executant&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker ps -a&lt;/code&gt;: Veure tots els contenidors&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker start nombreContenedor&lt;/code&gt;: Arrancar un contenidor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker images&lt;/code&gt;: Veure les imatges que tenim descarregades&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;!!! tip &amp;quot;Docker stack&amp;quot;&lt;br /&gt;
Existeixen diverses opcions mitjançant Docker que ofereixen solucions completes i empaquetes per a tot el stack de desenvolupament. Com a exemple tenim  &lt;em&gt;Devilbox&lt;/em&gt; (&lt;a href=&quot;http://devilbox.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://devilbox.org&lt;/a&gt;) i &lt;em&gt;Laradock&lt;/em&gt; (&lt;a href=&quot;https://laradock.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://laradock.io&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Una altra forma més senzilla per a llançar de nou els contenidors i gestionar-los una vegada creats és utilitzar la interfície gràfica que ofereix Docker Desktop:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://pedroporo.github.io/imagenes/01/dockerdesktop.png&quot; /&gt;
  &lt;figcaption&gt;Arranc de contenidor mitjançant Docker Desktop&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;!!! note &amp;quot;Tot funciona&amp;quot;&lt;br /&gt;
Heu de comprovar que a l&#39;accedir a &lt;code&gt;http://localhost/phpinfo.php&lt;/code&gt; en el vostre navegador se us obre una pàgina amb la configuració de php.&lt;br /&gt;
També si accediu a &lt;code&gt;http://localhost:8000&lt;/code&gt; veureu la pàgina d&#39;accès a phpmyadmin.&lt;/p&gt;
&lt;p&gt;!!! important &amp;quot;Directoris de php&amp;quot;&lt;br /&gt;
Si us fixeu en les carpetes que us ha creat el repositori veureu que les pàgines que pot executar (directori arrel de la nostra web) es troba a php/src. Les pàgines que anem a crear , de moment, les haureu de ficar ahí.&lt;/p&gt;
&lt;h2 id=&quot;8-referencies&quot; tabindex=&quot;-1&quot;&gt;8. Referències&lt;/h2&gt;
&lt;h3 id=&quot;llibres-recomanats&quot; tabindex=&quot;-1&quot;&gt;Llibres Recomanats&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.amazon.com/Web-Architecture-Concepts-Richard-N-Taylor/dp/0134765048&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web Architecture: Core Concepts&lt;/a&gt;&lt;/strong&gt; de Richard N. Taylor, Nenad Medvidovic i Eric Dashofy&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Aquest llibre ofereix una visió profunda sobre els conceptes bàsics i els principis fonamentals de les arquitectures web, incloent-hi patrons de disseny i les millors pràctiques.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/restful-web-apis/9781449358063/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;RESTful Web APIs&lt;/a&gt;&lt;/strong&gt; de Leonard Richardson i Mike Amundsen&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Se centra en el disseny i la construcció d&#39;APIs web RESTful, un component essencial de les arquitectures modernes basades en serveis web.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.oreilly.com/library/view/building-microservices/9781491950340/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Building Microservices: Designing Fine-Grained Systems&lt;/a&gt;&lt;/strong&gt; de Sam Newman&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Explora el disseny de microserveis, una arquitectura emergent que permet crear aplicacions escalables i flexibles.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;documentacio-oficial-i-guies&quot; tabindex=&quot;-1&quot;&gt;Documentació Oficial i Guies&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://12factor.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;The Twelve-Factor App&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Una metodologia per construir aplicacions web modernes que són fàcilment escalables i mantenibles.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://web.dev/progressive-web-apps/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentació de l&#39;Arquitectura de PWA (Progressive Web Apps)&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Guia detallada sobre el disseny i la implementació d&#39;aplicacions web progressives, que combinen el millor de les aplicacions web i mòbils.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cursos-en-linia&quot; tabindex=&quot;-1&quot;&gt;Cursos en Línia&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.coursera.org/learn/web-app&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Coursera - Web Application Architectures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Curs que proporciona una visió general de les arquitectures d&#39;aplicacions web, incloent-hi clients i servidors, HTTP, i serveis web.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.udacity.com/course/full-stack-web-developer-nanodegree--nd0044&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Udacity - Full Stack Web Developer Nanodegree&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Aquest programa cobreix temes com arquitectures de servidor, autenticació, i API RESTful.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;recursos-addicionals-6&quot; tabindex=&quot;-1&quot;&gt;Recursos Addicionals&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://microservices.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Microservices.io&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Recursos sobre patrons de microserveis, arquitectures i millors pràctiques per implementar microserveis amb èxit.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://martinfowler.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Martin Fowler&#39;s Blog&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Un blog que cobreix diversos aspectes de l&#39;arquitectura del programari, incloent-hi articles sobre disseny de microserveis i altres arquitectures emergents.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;exemples-i-tutorials&quot; tabindex=&quot;-1&quot;&gt;Exemples i Tutorials&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;DigitalOcean Community Tutorials&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Ofereix tutorials pràctics sobre una àmplia gamma de temes relacionats amb l&#39;arquitectura web, des de configuració de servidors fins a desplegament d&#39;aplicacions.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Learn/Server-side&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mozilla Developer Network (MDN) Web Docs&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Un recurs complet per aprendre sobre tecnologies del costat del servidor, protocols web, i altres conceptes clau de les arquitectures web.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;repositoris-de-codi&quot; tabindex=&quot;-1&quot;&gt;Repositoris de Codi&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/binhnguyennus/awesome-scalability&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Awesome Scalability&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Una col·lecció de recursos i exemples sobre escalabilitat, arquitectures web i disseny de sistemes distribuits.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/search?q=microservices&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub Microservices Examples&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Repositoris de codi font en GitHub que il·lustren com implementar microserveis i altres arquitectures web modernes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;9-auto-avaluacio&quot; tabindex=&quot;-1&quot;&gt;9.AutoAvaluació&lt;/h2&gt;
&lt;h4 id=&quot;exercici-1-models-d-execucio-de-codi&quot; tabindex=&quot;-1&quot;&gt;Exercici 1: Models d&#39;execució de codi&lt;/h4&gt;
&lt;h5 id=&quot;pregunta&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Explica les principals diferències entre el model d&#39;execució de codi en client i en servidor.&lt;/p&gt;
&lt;h5 id=&quot;opcions&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;a&quot; name=&quot;question1&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;a&quot;&gt;a) El codi en client s&#39;executa al servidor, mentre que el codi en servidor s&#39;executa al navegador del client.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;b&quot; name=&quot;question1&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;b&quot;&gt;b) El codi en client s&#39;executa al navegador del client, mentre que el codi en servidor s&#39;executa al servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;c&quot; name=&quot;question1&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;c&quot;&gt;c) Ambdós s&#39;executen al servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;d&quot; name=&quot;question1&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;d&quot;&gt;d) Ambdós s&#39;executen al navegador del client.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer1()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result1&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer1() {
  var correctAnswer = &quot;b&quot;;
  var radios = document.getElementsByName(&#39;question1&#39;);
  var userAnswer;
  for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
      userAnswer = radios[i].value;
      break;
    }
  }
  var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és b) El codi en client s&#39;executa al navegador del client, mentre que el codi en servidor s&#39;executa al servidor.&quot;;
  document.getElementById(&#39;result1&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-2-avantatges-de-la-generacio-dinamica-de-pagines&quot; tabindex=&quot;-1&quot;&gt;Exercici 2: Avantatges de la generació dinàmica de pàgines&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-1&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quins són els avantatges de la generació dinàmica de pàgines web? Selecciona totes les que apliquen.&lt;/p&gt;
&lt;h5 id=&quot;opcions-1&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt1&quot; name=&quot;question2&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;opt1&quot;&gt;a) Reducció de la càrrega del servidor.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt2&quot; name=&quot;question2&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;opt2&quot;&gt;b) Personalització del contingut per usuari.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt3&quot; name=&quot;question2&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;opt3&quot;&gt;c) Major interactivitat amb l&#39;usuari.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt4&quot; name=&quot;question2&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;opt4&quot;&gt;d) Menor temps de càrrega inicial de la pàgina.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer2()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result2&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer2() {
  var correctAnswers = [&quot;b&quot;, &quot;c&quot;];
  var checkboxes = document.getElementsByName(&#39;question2&#39;);
  var userAnswers = [];
  for (var i = 0, length = checkboxes.length; i &lt; length; i++) {
    if (checkboxes[i].checked) {
      userAnswers.push(checkboxes[i].value);
    }
  }
  var resultText = (userAnswers.length === correctAnswers.length &amp;&amp; userAnswers.every((val, index) =&gt; val === correctAnswers[index])) 
                    ? &quot;Correcte!&quot; 
                    : &quot;Incorrecte. Les respostes correctes són b) Personalització del contingut per usuari i c) Major interactivitat amb l&#39;usuari.&quot;;
  document.getElementById(&#39;result2&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-3-mecanismes-d-execucio-de-codi-en-els-servidors-web&quot; tabindex=&quot;-1&quot;&gt;Exercici 3: Mecanismes d&#39;execució de codi en els servidors web&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-2&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quins dels següents són mecanismes d&#39;execució de codi en els servidors web?&lt;/p&gt;
&lt;h5 id=&quot;opcions-2&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;a&quot; name=&quot;question3&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;a&quot;&gt;a) CGI (Common Gateway Interface).&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;b&quot; name=&quot;question3&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;b&quot;&gt;b) API Gateway.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;c&quot; name=&quot;question3&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;c&quot;&gt;c) Servlets.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;d&quot; name=&quot;question3&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;d&quot;&gt;d) Totes les anteriors.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer3()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result3&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer3() {
  var correctAnswer = &quot;d&quot;;
  var radios = document.getElementsByName(&#39;question3&#39;);
  var userAnswer;
  for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
      userAnswer = radios[i].value;
      break;
    }
  }
  var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és d) Totes les anteriors.&quot;;
  document.getElementById(&#39;result3&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-4-funcionalitats-dels-servidors-d-aplicacions&quot; tabindex=&quot;-1&quot;&gt;Exercici 4: Funcionalitats dels servidors d&#39;aplicacions&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-3&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quines són algunes de les funcionalitats proporcionades pels servidors d&#39;aplicacions?&lt;/p&gt;
&lt;h5 id=&quot;opcions-3&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt1&quot; name=&quot;question4&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;opt1&quot;&gt;a) Gestió de sessions.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt2&quot; name=&quot;question4&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;opt2&quot;&gt;b) Autenticació d&#39;usuaris.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt3&quot; name=&quot;question4&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;opt3&quot;&gt;c) Generació de pàgines estàtiques.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt4&quot; name=&quot;question4&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;opt4&quot;&gt;d) Gestió de transaccions.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer4()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result4&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer4() {
  var correctAnswers = [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;];
  var checkboxes = document.getElementsByName(&#39;question4&#39;);
  var userAnswers = [];
  for (var i = 0, length = checkboxes.length; i &lt; length; i++) {
    if (checkboxes[i].checked) {
      userAnswers.push(checkboxes[i].value);
    }
  }
  var resultText = (userAnswers.length === correctAnswers.length &amp;&amp; userAnswers.every((val, index) =&gt; val === correctAnswers[index])) 
                    ? &quot;Correcte!&quot; 
                    : &quot;Incorrecte. Les respostes correctes són a) Gestió de sessions, b) Autenticació d&#39;usuaris, d) Gestió de transaccions.&quot;;
  document.getElementById(&#39;result4&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-5-llenguatges-i-tecnologies-relacionades-amb-la-programacio-web-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;Exercici 5: Llenguatges i tecnologies relacionades amb la programació web en entorn servidor&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-4&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quins dels següents llenguatges i tecnologies són utilitzats en la programació web en entorn servidor?&lt;/p&gt;
&lt;h5 id=&quot;opcions-4&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt1&quot; name=&quot;question5&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;opt1&quot;&gt;a) PHP.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt2&quot; name=&quot;question5&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;opt2&quot;&gt;b) SQL.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt3&quot; name=&quot;question5&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;opt3&quot;&gt;c) HTML.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt4&quot; name=&quot;question5&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;opt4&quot;&gt;d) JavaScript.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt5&quot; name=&quot;question5&quot; value=&quot;e&quot; /&gt;
  &lt;label for=&quot;opt5&quot;&gt;e) Java.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer5()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result5&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer5() {
  var correctAnswers = [&quot;a&quot;, &quot;b&quot;, &quot;e&quot;];
  var checkboxes = document.getElementsByName(&#39;question5&#39;);
  var userAnswers = [];
  for (var i = 0, length = checkboxes.length; i &lt; length; i++) {
    if (checkboxes[i].checked) {
      userAnswers.push(checkboxes[i].value);
    }
  }
  var resultText = (userAnswers.length === correctAnswers.length &amp;&amp; userAnswers.every((val, index) =&gt; val === correctAnswers[index])) 
                    ? &quot;Correcte!&quot; 
                    : &quot;Incorrecte. Les respostes correctes són a) PHP, b) SQL, e) Java.&quot;;
  document.getElementById(&#39;result5&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-6-integracio-dels-llenguatges-de-marques-amb-els-llenguatges-de-programacio&quot; tabindex=&quot;-1&quot;&gt;Exercici 6: Integració dels llenguatges de marques amb els llenguatges de programació&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-5&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Com s&#39;integren els llenguatges de marques com HTML amb els llenguatges de programació com PHP?&lt;/p&gt;
&lt;h5 id=&quot;opcions-5&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;radio&quot; id=&quot;a&quot; name=&quot;question6&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;a&quot;&gt;a) Utilitzant etiquetes especials de PHP dins del codi HTML.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;b&quot; name=&quot;question6&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;b&quot;&gt;b) Convertint tot el codi HTML a PHP.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;c&quot; name=&quot;question6&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;c&quot;&gt;c) No es poden integrar.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;radio&quot; id=&quot;d&quot; name=&quot;question6&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;d&quot;&gt;d) Utilitzant un altre llenguatge de programació per connectar-los.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer6()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result6&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer6() {
  var correctAnswer = &quot;a&quot;;
  var radios = document.getElementsByName(&#39;question6&#39;);
  var userAnswer;
  for (var i = 0, length = radios.length; i &lt; length; i++) {
    if (radios[i].checked) {
      userAnswer = radios[i].value;
      break;
    }
  }
  var resultText = userAnswer === correctAnswer ? &quot;Correcte!&quot; : &quot;Incorrecte. La resposta correcta és a) Utilitzant etiquetes especials de PHP dins del codi HTML.&quot;;
  document.getElementById(&#39;result6&#39;).innerText = resultText;
}
&lt;/script&gt;
&lt;h4 id=&quot;exercici-7-eines-i-frameworks-de-programacio-en-entorn-servidor&quot; tabindex=&quot;-1&quot;&gt;Exercici 7: Eines i frameworks de programació en entorn servidor&lt;/h4&gt;
&lt;h5 id=&quot;pregunta-6&quot; tabindex=&quot;-1&quot;&gt;Pregunta:&lt;/h5&gt;
&lt;p&gt;Quines són algunes de les eines i frameworks més utilitzats en la programació web en entorn servidor?&lt;/p&gt;
&lt;h5 id=&quot;opcions-6&quot; tabindex=&quot;-1&quot;&gt;Opcions:&lt;/h5&gt;
&lt;form&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt1&quot; name=&quot;question7&quot; value=&quot;a&quot; /&gt;
  &lt;label for=&quot;opt1&quot;&gt;a) Laravel.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt2&quot; name=&quot;question7&quot; value=&quot;b&quot; /&gt;
  &lt;label for=&quot;opt2&quot;&gt;b) Django.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt3&quot; name=&quot;question7&quot; value=&quot;c&quot; /&gt;
  &lt;label for=&quot;opt3&quot;&gt;c) React.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt4&quot; name=&quot;question7&quot; value=&quot;d&quot; /&gt;
  &lt;label for=&quot;opt4&quot;&gt;d) Node.js.&lt;/label&gt;&lt;br /&gt;
  &lt;input type=&quot;checkbox&quot; id=&quot;opt5&quot; name=&quot;question7&quot; value=&quot;e&quot; /&gt;
  &lt;label for=&quot;opt5&quot;&gt;e) Spring Boot.&lt;/label&gt;&lt;br /&gt;&lt;br /&gt;
  &lt;input type=&quot;button&quot; value=&quot;Comprovar&quot; onclick=&quot;checkAnswer7()&quot; /&gt;
&lt;/form&gt;
&lt;p id=&quot;result7&quot;&gt;&lt;/p&gt;
&lt;script&gt;
function checkAnswer7() {
  var correctAnswers = [&quot;a&quot;, &quot;b&quot;, &quot;d&quot;, &quot;e&quot;];
  var checkboxes = document.getElementsByName(&#39;question7&#39;);
  var userAnswers = [];
  for (var i = 0, length = checkboxes.length; i &lt; length; i++) {
    if (checkboxes[i].checked) {
      userAnswers.push(checkboxes[i].value);
    }
  }
  var resultText = (userAnswers.length === correctAnswers.length &amp;&amp; userAnswers.every((val, index) =&gt; val === correctAnswers[index])) 
                    ? &quot;Correcte!&quot; 
                    : &quot;Incorrecte. Les respostes correctes són a) Laravel, b) Django, d) Node.js, e) Spring Boot.&quot;;
  document.getElementById(&#39;result7&#39;).innerText = resultText;
}
&lt;/script&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/php-teoria-batoi/1-arquitecturas-web/1-arquitecturas-web/" >
        </entry>
        <entry>
            <title>
                xx-tests
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/xx-tests/</id>
            <content type="html">
                &lt;h2 id=&quot;usar-tdd-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Usar TDD en Javascript&lt;/h2&gt;
&lt;p&gt;Lo más sencillo es usar alguna librería como &lt;strong&gt;Jest&lt;/strong&gt;, &lt;strong&gt;Mocha&lt;/strong&gt; o &lt;strong&gt;Vitests&lt;/strong&gt; (una adaptación de &lt;em&gt;Jest&lt;/em&gt; para &lt;em&gt;Vite&lt;/em&gt;). Se trata de librerías que se ejecutan sobre &lt;em&gt;Node.js&lt;/em&gt; y permiten crear tests tanto síncronos como asíncronos. Para usarlo necesitaremos tener &lt;strong&gt;npm&lt;/strong&gt; instalado.&lt;/p&gt;
&lt;h2 id=&quot;uso-de-vitest&quot; tabindex=&quot;-1&quot;&gt;Uso de Vitest&lt;/h2&gt;
&lt;p&gt;Podéis obtener información sobre cómo hacer test con &lt;em&gt;Vitest&lt;/em&gt; en muchas páginas de Internet como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/tests.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://vitejs.dev/guide/features.html#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vitest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;uso-de-mocha&quot; tabindex=&quot;-1&quot;&gt;Uso de Mocha&lt;/h2&gt;
&lt;p&gt;Para instalarlo ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g mocha    # lo instalamos globalmente para que esté disponible para todos los proyectos
npm init                # crea en el directorio el package.json
npm install chai     # en vez de chai podríamos usar assert, should, etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La librería &lt;em&gt;Chai&lt;/em&gt; permite 3 tipos de sentencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts&lt;/li&gt;
&lt;li&gt;expects&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros vamos a usar &lt;em&gt;asserts&lt;/em&gt; por lo que es lo que deberemos importar en los ficheros de tests.&lt;/p&gt;
&lt;p&gt;Dentro de nuestro proyecto crearemos una carpeta donde guardaremos los ficheros JS de los tests (podemos llamarla &#39;&lt;em&gt;tests&lt;/em&gt;&#39;) y en cada fichero importaremos &lt;em&gt;chai&lt;/em&gt; y los ficheros necesarios. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;tests/store.specs.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const Store = require(&#39;../store.class.js&#39;);

describe(&#39;Store&#39;, () =&amp;gt; {

	it(&#39;should had an integer id&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.id, &#39;integer&#39;, &#39;La id no es un entero&#39;)
	});

	it(&#39;should had an empty array of products&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.products, &#39;array&#39;, &#39;Products no es un array&#39;)
		assert.lengthOf(foo.products, 0, &#39;Products no es un array vacío&#39;)
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder importar un módulo con &lt;em&gt;require&lt;/em&gt; debemos haberlo exprtado previamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;store.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Store {
    constructor (id) {
        this.id=id;
        this.products=[];
    }
    ...
}
 module.exports = Store;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ejecutar todos los tests de nuestro proyecto ejecutaremos desde la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si sólo queremos pasar uno lo indicamos en el comando: &lt;code&gt;mocha tests/store.specs.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos hacer que &lt;em&gt;mocha&lt;/em&gt; escuche en segundo plano y se ejecute automáticamente cada vez que hacemos algún cambio en un fichero con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;el-fichero-de-tests&quot; tabindex=&quot;-1&quot;&gt;El fichero de tests&lt;/h2&gt;
&lt;p&gt;Debemos importar le librería &lt;em&gt;Chai&lt;/em&gt; y el fichero con el código a testear como hemov visto antes. El fichero con el código que debe exportar la clase o función que contiene con &lt;code&gt;module.exports&lt;/code&gt;. Si queremos exportar varias funciones exportaremos un objeto con todas ellas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;module.exports = {
    addItem,
    removeItem
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras importar los ficheros pondremos el &lt;em&gt;describe&lt;/em&gt; y los bloques &lt;em&gt;it&lt;/em&gt; que queramos y dentro de cada uno los &lt;em&gt;aasert&lt;/em&gt; necesarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const index = require(&#39;../index.js&#39;);

describe(&#39;manage items&#39;, () =&amp;gt; {
	it(&#39;add a new item&#39;, function() {
		let myItem = ...;
		assert.typeOf(item, &#39;object&#39;, &#39;No crea un objeto sino &#39;+typeof(item) );
		assert.equal(item.units, 0);
	});
	
	if (&#39;change an item () =&amp;gt; {
	...
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;algunas-sentecias-em-assert-em&quot; tabindex=&quot;-1&quot;&gt;Algunas sentecias &lt;em&gt;assert&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Estas&lt;br /&gt;
Aquí tenéis un pequeño resumen de algunas de las sentencias que podemos usar. Recordad que todas pueden tener un último parámetro opcional que es un mensaje a mostrar en caso de que falle esta comprobación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.equal(actual, esperado): comprueba que sea el mismo valor, pero sin comprobar los tupos (usa ==, no ===)&lt;/li&gt;
&lt;li&gt;.notEqual(actual, esperado)&lt;/li&gt;
&lt;li&gt;.strictEqual, .notStrictEqual: igual pero hace la compribaciónestricta (===)&lt;/li&gt;
&lt;li&gt;.deepEqual, notDeepEqual: hace una comprobación de cada propiedad del objeto pasado&lt;/li&gt;
&lt;li&gt;.match(valor, regexp), .notMatch: comprueba si el valor cumple o no la expresión regular pasada&lt;/li&gt;
&lt;li&gt;.isAbove(actual, esperado): comprueba que actual &amp;gt; esperado&lt;/li&gt;
&lt;li&gt;.isAtLeast(actual, esperado): comprueba que actual &amp;gt;= esperado&lt;/li&gt;
&lt;li&gt;.isBelow, .isAtMost: comprueba que sea &amp;lt; o &amp;lt;= respectivamente&lt;/li&gt;
&lt;li&gt;.isTrue, .isNotTrue, .isFalse, .isNotFalse, .isNull, .isNotNull, .isUndefined, .isDefined, .isNaN, .isNotNaN, .isFunction, .isNotFunction, .isObject, .isNotObject, .isArray, .isNotArray, .isString, .isNotString, .isNumber, .isNotNumber, .isBoolean, .isNotBoolean, .isFinite&lt;/li&gt;
&lt;li&gt;.exists(valor), .notExists: comprueba que valor no sea (o sea) &lt;em&gt;null&lt;/em&gt; o &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;.typeOf(valor, tipo), .notTypeOf: indica si valor es o no del tipo indicado, que puede ser &#39;string&#39;, &#39;number&#39;, boolean&#39;, &#39;array&#39;, &#39;object&#39;, &#39;null&#39;, &#39;undefined&#39;, &#39;regexp&#39;, ...&lt;/li&gt;
&lt;li&gt;.instanceOf(objeto, Clase), .notInstanceOf: indica si un objeto es o no una instancia de la clase indicada&lt;/li&gt;
&lt;li&gt;.include(string/array/objeto, substring/elemento/propiedad:valor): comprueba si la subcadena existe en el string o el elemento se encuentra en el array (usa =&lt;mark&gt;) o si existe la propiedad o propiedades pasadas y su valor es estrictamente (&lt;/mark&gt;=) igual al indicado.&lt;/li&gt;
&lt;li&gt;.notInclude&lt;/li&gt;
&lt;li&gt;.property(objeto, propiedad), .notProperty: comprueba si el objeto posee o no la propiedad pasada&lt;/li&gt;
&lt;li&gt;.lengthOf(string/array, num): comprueba que la longitud de la cadena o el array sea la indicada&lt;/li&gt;
&lt;li&gt;.isEmpty(string/array/object), .isNotEmpty: comprueba que la cadena sea &#39;&#39;, el array [] o el objeto {}, o no.&lt;/li&gt;
&lt;li&gt;.throws(funcion, [errorLike/string], [string]): para comprobar que la función lanza un error del tipo indicado (TypeError, RangeError, ...) e incluso con el mensaje indicado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la [página de &lt;em&gt;Chai&lt;/em&gt;])&lt;a href=&quot;https://www.chaijs.com/api/assert/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.chaijs.com/api/assert/&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tests-de-funciones-asincronas-con-promesas&quot; tabindex=&quot;-1&quot;&gt;Tests de funciones asíncronas con promesas&lt;/h2&gt;
&lt;p&gt;Si hacemos llamadas asíncronas Mocha permite testearlas tras el .then o el .catch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;API de artículos&#39;, () =&amp;gt; {
	it(&#39;should return the article 3&#39;, function() {
		return getArticulo(3)
			.then(art =&amp;gt; {
				assert.instanceOf(art, Articulos);
				assert.equal(art.id, 3);
			})
	});
	it(&#39;should return an error&#39;, function() {
		return getArticulo(undefined)
			.catch(err =&amp;gt; {
				...
			})
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-hooks-em-de-mocha&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Hooks&lt;/em&gt; de Mocha&lt;/h2&gt;
&lt;p&gt;Nos permiten ejecutar código en momentos puntuales. Reciben como parámetro la función a ejecutar. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before(): el código se ejecutará una vez antes del primer test del bloque &lt;em&gt;describe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;beforeEach(): se ejecutará antes de cada test&lt;/li&gt;
&lt;li&gt;after(), afterEach(): lo mismo pero tras ejecutar los tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tests-para-la-ui&quot; tabindex=&quot;-1&quot;&gt;Tests para la UI&lt;/h2&gt;
&lt;p&gt;Necesitaremos alguna librería que nos permita contruir escenarios de navegación como &lt;em&gt;CasperJS&lt;/em&gt; y otra que imite al navegador como &lt;em&gt;PhantomJS&lt;/em&gt; (para WebKit) o &lt;em&gt;SlimerJS&lt;/em&gt; (para Gecko).&lt;/p&gt;
&lt;p&gt;Hay muchas páginas que nos enseñan a usar Mocha para testear la UI como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/ykyuen/web-ui-testing-in-nodejs--kda&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web UI Testing in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/nilayshah/2018/01/21/ui-test-automation-with-node-js-typescript-mocha-and-selenium/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UI Test Automation with Node.js, TypeScript, Mocha and Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itnext.io/automated-ui-testing-with-selenium-and-javascript-90bbe7ca13a3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI Testing with Selenium and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tariqul.islam.rony/automated-ui-ux-testing-with-puppeteer-mocha-and-chai-800cfb028ab9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI/UX Testing with Puppeteer Mocha and Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/xx-tests/" >
        </entry>
        <entry>
            <title>
                ejercicios
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/ejercicios/</id>
            <content type="html">
                &lt;h1 id=&quot;ejercicios-de-javascript&quot; tabindex=&quot;-1&quot;&gt;Ejercicios de Javascript&lt;/h1&gt;
&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;  &lt;em&gt;generated with &lt;a href=&quot;https://github.com/thlorenz/doctoc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;DocToc&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejercicios-de-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejercicios de Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#1--sintaxis&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1.- Sintaxis&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#11-frase&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1.1 Frase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#2--arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2.- Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#3--poo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3.- POO&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#31--productos-de-un-almac%C3%A9n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3.1.- Productos de un almacén&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#32--carro-de-compra&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3.2.- Carro de compra&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#4--dom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;4.- DOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#5--bom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;5.- BOM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#6--eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;6.- Eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#7--objetos-globales&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;7.- Objetos globales&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#8--ajax&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;8.- Ajax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#9--apis&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;9.- APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h2 id=&quot;1-sintaxis&quot; tabindex=&quot;-1&quot;&gt;1.- Sintaxis&lt;/h2&gt;
&lt;h3 id=&quot;1-1-frase&quot; tabindex=&quot;-1&quot;&gt;1.1 Frase&lt;/h3&gt;
&lt;p&gt;Vamos a pedir al usuario que introduzca una frase y a continuación mostraremos en la consola:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el número de letras y de palabras que tiene&lt;/li&gt;
&lt;li&gt;la frase en mayúsculas&lt;/li&gt;
&lt;li&gt;la frase con la primera letra de cada palabra en mayúsculas&lt;/li&gt;
&lt;li&gt;la frase escrita con las letras al revés&lt;/li&gt;
&lt;li&gt;la frase escrita con las palabras al revés&lt;/li&gt;
&lt;li&gt;si es o no un palíndromo (si se lee igual al revés) pero omitiendo espacios en blanco y sin diferenciar mayúsculas y minúsculas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ej.: con la frase introducida “&lt;em&gt;La ruta nos aporto otro paso natural&lt;/em&gt;” se mostraría&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;36 letras y 7 palabras&lt;br /&gt;
LA RUTA NOS APORTO OTRO PASO NATURAL&lt;br /&gt;
La Ruta Nos Aporto Otro Paso Natural&lt;br /&gt;
larutan osap orto otropa son atur aL&lt;br /&gt;
natural paso otro aporto nos ruta La&lt;br /&gt;
Sí es un palíndromo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Intenta usar en cada caso el bucle más adecuado. Las funciones &lt;code&gt;split&lt;/code&gt; y &lt;code&gt;join&lt;/code&gt; (lo opuesto) de String y Array nos pueden ayudar a algunas cosas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RECUERDA&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el código deberá estar en un fichero externo y se incluirá al final del body&lt;/li&gt;
&lt;li&gt;debes comentarlo para tener claro qué hace&lt;/li&gt;
&lt;li&gt;tanto el código JS como el HTML deben estar correctamente indentados&lt;/li&gt;
&lt;li&gt;ten en cuenta los datos que pueden “estropearnos” el programa: introducir un dato de un tipo que no te esperas, omitir algún parámetro, ...&lt;/li&gt;
&lt;li&gt;usa las recomendaciones indicadas: &#39;use strict&#39;, ...&lt;/li&gt;
&lt;li&gt;el código debe ser lo más limpio y claro posible, sin variables o código innecesario&lt;/li&gt;
&lt;li&gt;siempre es bueno refactorizar el código: cuando nuestro programa ya funciona bien le damos un “repaso” para mejorar su claridad (y lo volvemos a probar)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-arrays&quot; tabindex=&quot;-1&quot;&gt;2.- Arrays&lt;/h2&gt;
&lt;p&gt;Vamos a hacer un programa que va pidiendo al usuario que introduzca las notas de un examen y las va guardando en un array. El usuario puede introducir una sóla nota o varias separadas por un guión (ej. 4,5 - 6 - 8,75) y se continuará pidiendo notas al usuario hasta que éste pulse &#39;Cancelar&#39;. Recuerda que en Javascript el símbolo decimal es el punto pero el usuario puede introducir decimales con la coma.&lt;/p&gt;
&lt;p&gt;Cada nota introducida se almacenará en un array y una vez que estén todas se mostrará por la consola:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el array con los datos suministrados por el usuario&lt;/li&gt;
&lt;li&gt;el array &amp;quot;limpiado&amp;quot;: quitaremos del mismo todo lo que no sean números o no estén entre 0 y 10&lt;/li&gt;
&lt;li&gt;el nº total de aprobados y sus notas&lt;/li&gt;
&lt;li&gt;el nº total de suspensos y sus notas&lt;/li&gt;
&lt;li&gt;la nota del 1º suspenso y su posición en el array&lt;/li&gt;
&lt;li&gt;la nota media del examen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siempre que sea posible utilizaremos métodos de arrays en lugar de bucles.&lt;/p&gt;
&lt;h2 id=&quot;3-poo&quot; tabindex=&quot;-1&quot;&gt;3.- POO&lt;/h2&gt;
&lt;h3 id=&quot;3-1-productos-de-un-almacen&quot; tabindex=&quot;-1&quot;&gt;3.1.- Productos de un almacén&lt;/h3&gt;
&lt;p&gt;En este ejercicio vamos a trabajar con los productos de un almacén, para lo que crearemos las clases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Product&lt;/em&gt;&lt;/strong&gt;: cada producto será un objeto con las propiedades &lt;em&gt;cod&lt;/em&gt;, &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;price&lt;/em&gt; y &lt;em&gt;units&lt;/em&gt; (las unidades que tenemos de ese producto). Si no le pasamos unidades al constructor su número por defecto será 1. Esta clase tendrá los siguientes métodos:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;changeUnits&lt;/em&gt;&lt;/strong&gt;: recibe la cantidad a aumentar (positiva o negativa) e incrementa (o decrementa) las unidades en la cantidad recibida. Si se intentan restar más unidades de las que hay no hace nada y devuelve &lt;em&gt;false&lt;/em&gt; y en otro caso cambia las unidades y devuelve &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;productImport&lt;/em&gt;&lt;/strong&gt;: devuelve el importe total del producto (su precio multiplicado por el nº de unidades)&lt;/li&gt;
&lt;li&gt;además si se intenta imprimir el producto se mostrará su descripción, sus unidades entre paréntesis, su precio y el importe total, como en el siguiente ejemplo: &lt;code&gt;TV Samsung MP45 (5): 235,95 €/u =&amp;gt; 1179,75 €&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Store&lt;/em&gt;&lt;/strong&gt;: es el almacén de productos y tendrá las propiedades &lt;em&gt;id&lt;/em&gt; (código numérico que nos pasan al crear el almacén) y &lt;em&gt;products&lt;/em&gt; (array de productos que al crearlo estará vacío) y los métodos:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;findProduct&lt;/em&gt;&lt;/strong&gt;: recibe un código de producto y devuelve el producto que tiene dicho código o &lt;em&gt;null&lt;/em&gt; si ese código no existe en el almacén&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;addProduct&lt;/em&gt;&lt;/strong&gt;: recibe como parámetro el código y unidades a añadir y, opcionalmente, el nombre y precio (si se trata de un producto nuevo) y lo añade al almacén. Si ya existe el código suma al producto las unidades indicadas y si no existe crea un nuevo producto en el array. Devuelve &lt;em&gt;true&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;delProduct&lt;/em&gt;&lt;/strong&gt;: recibe como parámetro el código y las unidades a quitar de un producto y lo resta del almacén. Devuelve &lt;em&gt;true&lt;/em&gt; a menos que haya menos unidades de las que quieren restarse, en cuyo caso no hace nada y devuelve &lt;em&gt;false&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;totalImport&lt;/em&gt;&lt;/strong&gt;: devuelve el valor total de los productos del almacén&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;orderByDescrip&lt;/em&gt;&lt;/strong&gt;: devuelve el array de productos ordenado por el nombre&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;orderByUnits&lt;/em&gt;&lt;/strong&gt;: devuelve el array de productos ordenado por unidades descendente&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para probar que funciona correctamente ejecutaremos en nuestro fichero main.js:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let almacen=new Store(1);
almacen.addProduct(1, 4, &#39;TV Samsung MP45&#39;, 345.95);
almacen.addProduct(2, 8, &#39;Portátil Acer Travelmate 200&#39;, 245.95);
almacen.addProduct(3, 15, &#39;Impresora Epson LX-455&#39;, 45.95);
almacen.addProduct(4, 25, &#39;USB Kingston 16GB&#39;, 5.95);

console.log(&#39;LISTADO DEL ALMACÉN&#39;);
almacen.products.forEach(prod=&amp;gt;console.log(prod.toString()));

almacen.addProduct(5, 15, &#39;USB Kingston 64GB&#39;, 15.95);
almacen.delProduct(3, 11);
almacen.delProduct(3, 7);
almacen.addProduct(1, 9);

console.log(&#39;LISTADO DEL ALMACÉN&#39;);
almacen.products.forEach(prod=&amp;gt;console.log(prod.toString()));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además en nuestro main.js haremos que se muestren por consola todos los productos de los que tenemos menos de 5 unidades en stock o cuyo importe es inferior a 150 €.&lt;/p&gt;
&lt;h3 id=&quot;3-2-carro-de-compra&quot; tabindex=&quot;-1&quot;&gt;3.2.- Carro de compra&lt;/h3&gt;
&lt;p&gt;Vamos a permitir que los usuarios hagan compras on-line para lo que crearemos una clase para los carritos de la compra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Cart&lt;/em&gt;&lt;/strong&gt;: esta clase la usaremos para crear carritos de compra con los productos a comprar. Es como la clase &lt;em&gt;Store&lt;/em&gt; pero tiene además la propiedad &lt;em&gt;user&lt;/em&gt; con el identificador del usuario que hace la compra y que nos lo pasarán al crear el carrito. Respecto a sus métodos son igual que los de la clase &lt;em&gt;Store&lt;/em&gt; pero:
&lt;ul&gt;
&lt;li&gt;el método &lt;em&gt;delProduct&lt;/em&gt; eliminará el producto del array de productos si sus unidades son 0&lt;/li&gt;
&lt;li&gt;tendrá dos nuevos métodos &lt;strong&gt;&lt;em&gt;addToCart&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;removeFromCart&lt;/em&gt;&lt;/strong&gt; que nos permitan añadir y quitar productos del carro y que recibirán como parámetros el código del producto y las unidades a añadir o quitar.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTA: la variable del almacén será una variable global en el fichero main.js&lt;/p&gt;
&lt;h2 id=&quot;4-dom&quot; tabindex=&quot;-1&quot;&gt;4.- DOM&lt;/h2&gt;
&lt;p&gt;Vamos a mostrar en una tabla los products de nuestro almacén. Cada fila corresponderá a un producto y se mostrará su código, nombre, unidades, precio por unidad e importe. Debajo de la tabla mostraremos el importe total del almacén. En el fichero &lt;em&gt;index.html&lt;/em&gt; crearemos la tabla vacía y el párrafo para poner el importe total.&lt;/p&gt;
&lt;p&gt;Para simplificar nuestro código a la clase &lt;em&gt;Product&lt;/em&gt; le añadiremos el método &lt;strong&gt;&lt;em&gt;toTR&lt;/em&gt;&lt;/strong&gt; que devolverá el código HTML para mostrar una fila con los datos del producto y a la clase &lt;em&gt;Store&lt;/em&gt; le añadiremos el método &lt;strong&gt;&lt;em&gt;toHTML&lt;/em&gt;&lt;/strong&gt; que devolverá el código HTML que insertaremos dentro de la tabla del almacén.&lt;/p&gt;
&lt;p&gt;Además cada vez que creemos un carrito se mostrará en la página una nueva UL con su código y su usuario. Cada artículo del carro será una LI de la UL y al final habrá una LI con el importe total del carro. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Carro 2 - juan&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 x TV Samsung MP45 (345.95 €) = 345.95 €&lt;/li&gt;
&lt;li&gt;3 x USB Kingston 16GB (5.95 €) = 17.85 €&lt;/li&gt;
&lt;li&gt;Importe total: 353.80 €&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;NOTA: podemos hacer algo para que sea más fácil crear los elementos del DOM tal y como hems hecho para crear la tabla???.&lt;/p&gt;
&lt;p&gt;OPCIONAL: mejorar la presentación usando bootstrap. Pondremos la tabla del almacén y debajo los carritos, 2 por fila.&lt;/p&gt;
&lt;h2 id=&quot;5-bom&quot; tabindex=&quot;-1&quot;&gt;5.- BOM&lt;/h2&gt;
&lt;h2 id=&quot;6-eventos&quot; tabindex=&quot;-1&quot;&gt;6.- Eventos&lt;/h2&gt;
&lt;p&gt;Botones y enlaces para el ejercicio del almacén&lt;/p&gt;
&lt;h2 id=&quot;7-objetos-globales&quot; tabindex=&quot;-1&quot;&gt;7.- Objetos globales&lt;/h2&gt;
&lt;p&gt;Fechas, ...&lt;/p&gt;
&lt;h2 id=&quot;8-ajax&quot; tabindex=&quot;-1&quot;&gt;8.- Ajax&lt;/h2&gt;
&lt;p&gt;Leer y guardar el almacén (y los carritos?)&lt;/p&gt;
&lt;h2 id=&quot;9-ap-is&quot; tabindex=&quot;-1&quot;&gt;9.- APIs&lt;/h2&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/ejercicios/" >
        </entry>
        <entry>
            <title>
                TDD-mocha
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/tdd-mocha/</id>
            <content type="html">
                &lt;h1 id=&quot;desarrollo-guiado-por-pruebas-tdd&quot; tabindex=&quot;-1&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/h1&gt;
&lt;p&gt;Es una forma de programar que consiste en escribir primero las pruebas que deba pasar el código (Test Dirve Development) y después refactorizarlo (&lt;a href=&quot;https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Refactoring&lt;/a&gt;). Para escribir las pruebas generalmente se utilizan las &lt;a href=&quot;https://es.wikipedia.org/wiki/Prueba_unitaria&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pruebas unitarias&lt;/a&gt; (unit test en inglés).&lt;/p&gt;
&lt;p&gt;El ciclo de programación usando TDD tiene tres fases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fase &lt;em&gt;roja&lt;/em&gt;: escribimos el test que cumpla los requerimientos y lo pasamos. Fallará ya que nuestro código no pasa el est (de hecho la primera vez no tenemos ni código)&lt;/li&gt;
&lt;li&gt;Fase &lt;em&gt;verde&lt;/em&gt;: conseguimos que nuestro código pase el test. Ya funciona aunque seguramente no estará muy bien escrito&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactorización&lt;/em&gt;: mejoramos nuestro código&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente y seguidamente se refactoriza el código escrito. El propósito del desarrollo guiado por pruebas es lograr un código limpio que funcione. La idea es que los requisitos sean traducidos a pruebas, de este modo, cuando las pruebas pasen se garantizará que el software cumple con los requisitos que se han establecido.&lt;/p&gt;
&lt;p&gt;Para ello debemos en primer lugar se debe definir una lista de requisitos y después se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elegir un requisito: Se elige de una lista el requisito que se cree que nos dará mayor conocimiento del problema y que a la vez sea fácilmente implementable.&lt;/li&gt;
&lt;li&gt;Escribir una prueba: Se comienza escribiendo una prueba para el requisito. Para ello el programador debe entender claramente las especificaciones y los requisitos de la funcionalidad que está por implementar. Este paso fuerza al programador a tomar la perspectiva de un cliente considerando el código a través de sus interfaces.&lt;/li&gt;
&lt;li&gt;Verificar que la prueba falla: Si la prueba no falla es porque el requisito ya estaba implementado o porque la prueba es errónea.&lt;/li&gt;
&lt;li&gt;Escribir la implementación: Escribir el código más sencillo que haga que la prueba funcione. Se usa la expresión &amp;quot;Déjelo simple&amp;quot; (&amp;quot;Keep It Simple, Stupid!&amp;quot;), conocida como principio KISS.&lt;/li&gt;
&lt;li&gt;Ejecutar las pruebas automatizadas: Verificar si todo el conjunto de pruebas funciona correctamente.&lt;/li&gt;
&lt;li&gt;Eliminación de duplicación: El paso final es la refactorización, que se utilizará principalmente para eliminar código duplicado. Se hace un pequeño cambio cada vez y luego se corren las pruebas hasta que funcionen.&lt;/li&gt;
&lt;li&gt;Actualización de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado. Asimismo se agregan requisitos que se hayan visto como necesarios durante este ciclo y se agregan requisitos de diseño (P. ej que una funcionalidad esté desacoplada de otra).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tener un único repositorio universal de pruebas facilita complementar TDD con otra práctica recomendada por los procesos ágiles de desarrollo, la &amp;quot;Integración Continua&amp;quot;. Integrar continuamente nuestro trabajo con el del resto del equipo de desarrollo permite ejecutar toda batería de pruebas y así descubrir si nuestra última versión es compatible con el resto del sistema. Es recomendable y menos costoso corregir pequeños problemas cada pocas horas que enfrentarse a problemas enormes cerca de la fecha de entrega fijada.&lt;/p&gt;
&lt;p&gt;(Fuente &lt;a href=&quot;https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;usar-tdd-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Usar TDD en Javascript&lt;/h2&gt;
&lt;p&gt;Lo más sencillo es usar alguna librería como &lt;strong&gt;Mocha&lt;/strong&gt;. Se trata de un gramework que se ejecuta sobre &lt;em&gt;Node.js&lt;/em&gt; y permite crear tests tanto síncronos como asíncronos. Para usarlo necesitaremos tener &lt;strong&gt;npm&lt;/strong&gt; instalado. Luego creamos una carpeta para nuestro proyecto y dentro ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g mocha    # lo instalamos globalmente para que esté disponible para todos los proyectos
npm init                # crea en el directorio el package.json
npm install chai     # en vez de chai podríamos usar assert, should, etc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La librería &lt;em&gt;Chai&lt;/em&gt; permite 3 tipos de sentencias:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;asserts&lt;/li&gt;
&lt;li&gt;expects&lt;/li&gt;
&lt;li&gt;should&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros vamos a usar &lt;em&gt;asserts&lt;/em&gt; por lo que es lo que deberemos importar en los ficheros de tests.&lt;/p&gt;
&lt;p&gt;Dentro de nuestro proyecto crearemos una carpeta donde guardaremos los ficheros JS de los tests (podemos llamarla &#39;&lt;em&gt;tests&lt;/em&gt;&#39;) y en cada fichero importaremos &lt;em&gt;chai&lt;/em&gt; y los ficheros necesarios. Ej.:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;tests/store.specs.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const Store = require(&#39;../store.class.js&#39;);

describe(&#39;Store&#39;, () =&amp;gt; {

	it(&#39;should had an integer id&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.id, &#39;integer&#39;, &#39;La id no es un entero&#39;)
	});

	it(&#39;should had an empty array of products&#39;, function() {
		let foo = new Store();
		assert.typeOf(foo.products, &#39;array&#39;, &#39;Products no es un array&#39;)
		assert.lengthOf(foo.products, 0, &#39;Products no es un array vacío&#39;)
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para poder importar un módulo con &lt;em&gt;require&lt;/em&gt; debemos haberlo exprtado previamente:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Fichero &lt;em&gt;store.js&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Store {
    constructor (id) {
        this.id=id;
        this.products=[];
    }
    ...
}
 module.exports = Store;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para ejecutar todos los tests de nuestro proyecto ejecutaremos desde la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si sólo queremos pasar uno lo indicamos en el comando: &lt;code&gt;mocha tests/store.specs.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podemos hacer que &lt;em&gt;mocha&lt;/em&gt; escuche en segundo plano y se ejecute automáticamente cada vez que hacemos algún cambio en un fichero con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;mocha tests --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;el-fichero-de-tests&quot; tabindex=&quot;-1&quot;&gt;El fichero de tests&lt;/h2&gt;
&lt;p&gt;Debemos importar le librería &lt;em&gt;Chai&lt;/em&gt; y el fichero con el código a testear como hemov visto antes. El fichero con el código que debe exportar la clase o función que contiene con &lt;code&gt;module.exports&lt;/code&gt;. Si queremos exportar varias funciones exportaremos un objeto con todas ellas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;module.exports = {
    addItem,
    removeItem
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tras importar los ficheros pondremos el &lt;em&gt;describe&lt;/em&gt; y los bloques &lt;em&gt;it&lt;/em&gt; que queramos y dentro de cada uno los &lt;em&gt;aasert&lt;/em&gt; necesarios:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;const assert = require(&#39;chai&#39;).assert;
const index = require(&#39;../index.js&#39;);

describe(&#39;manage items&#39;, () =&amp;gt; {
	it(&#39;add a new item&#39;, function() {
		let myItem = ...;
		assert.typeOf(item, &#39;object&#39;, &#39;No crea un objeto sino &#39;+typeof(item) );
		assert.equal(item.units, 0);
	});
	
	if (&#39;change an item () =&amp;gt; {
	...
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;algunas-sentecias-em-assert-em&quot; tabindex=&quot;-1&quot;&gt;Algunas sentecias &lt;em&gt;assert&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Estas&lt;br /&gt;
Aquí tenéis un pequeño resumen de algunas de las sentencias que podemos usar. Recordad que todas pueden tener un último parámetro opcional que es un mensaje a mostrar en caso de que falle esta comprobación:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;.equal(actual, esperado): comprueba que sea el mismo valor, pero sin comprobar los tupos (usa ==, no ===)&lt;/li&gt;
&lt;li&gt;.notEqual(actual, esperado)&lt;/li&gt;
&lt;li&gt;.strictEqual, .notStrictEqual: igual pero hace la compribaciónestricta (===)&lt;/li&gt;
&lt;li&gt;.deepEqual, notDeepEqual: hace una comprobación de cada propiedad del objeto pasado&lt;/li&gt;
&lt;li&gt;.match(valor, regexp), .notMatch: comprueba si el valor cumple o no la expresión regular pasada&lt;/li&gt;
&lt;li&gt;.isAbove(actual, esperado): comprueba que actual &amp;gt; esperado&lt;/li&gt;
&lt;li&gt;.isAtLeast(actual, esperado): comprueba que actual &amp;gt;= esperado&lt;/li&gt;
&lt;li&gt;.isBelow, .isAtMost: comprueba que sea &amp;lt; o &amp;lt;= respectivamente&lt;/li&gt;
&lt;li&gt;.isTrue, .isNotTrue, .isFalse, .isNotFalse, .isNull, .isNotNull, .isUndefined, .isDefined, .isNaN, .isNotNaN, .isFunction, .isNotFunction, .isObject, .isNotObject, .isArray, .isNotArray, .isString, .isNotString, .isNumber, .isNotNumber, .isBoolean, .isNotBoolean, .isFinite&lt;/li&gt;
&lt;li&gt;.exists(valor), .notExists: comprueba que valor no sea (o sea) &lt;em&gt;null&lt;/em&gt; o &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;.typeOf(valor, tipo), .notTypeOf: indica si valor es o no del tipo indicado, que puede ser &#39;string&#39;, &#39;number&#39;, boolean&#39;, &#39;array&#39;, &#39;object&#39;, &#39;null&#39;, &#39;undefined&#39;, &#39;regexp&#39;, ...&lt;/li&gt;
&lt;li&gt;.instanceOf(objeto, Clase), .notInstanceOf: indica si un objeto es o no una instancia de la clase indicada&lt;/li&gt;
&lt;li&gt;.include(string/array/objeto, substring/elemento/propiedad:valor): comprueba si la subcadena existe en el string o el elemento se encuentra en el array (usa =&lt;mark&gt;) o si existe la propiedad o propiedades pasadas y su valor es estrictamente (&lt;/mark&gt;=) igual al indicado.&lt;/li&gt;
&lt;li&gt;.notInclude&lt;/li&gt;
&lt;li&gt;.property(objeto, propiedad), .notProperty: comprueba si el objeto posee o no la propiedad pasada&lt;/li&gt;
&lt;li&gt;.lengthOf(string/array, num): comprueba que la longitud de la cadena o el array sea la indicada&lt;/li&gt;
&lt;li&gt;.isEmpty(string/array/object), .isNotEmpty: comprueba que la cadena sea &#39;&#39;, el array [] o el objeto {}, o no.&lt;/li&gt;
&lt;li&gt;.throws(funcion, [errorLike/string], [string]): para comprobar que la función lanza un error del tipo indicado (TypeError, RangeError, ...) e incluso con el mensaje indicado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Más información en la [página de &lt;em&gt;Chai&lt;/em&gt;])&lt;a href=&quot;https://www.chaijs.com/api/assert/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.chaijs.com/api/assert/&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tests-de-funciones-asincronas-con-promesas&quot; tabindex=&quot;-1&quot;&gt;Tests de funciones asíncronas con promesas&lt;/h2&gt;
&lt;p&gt;Si hacemos llamadas asíncronas Mocha permite testearlas tras el .then o el .catch:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;API de artículos&#39;, () =&amp;gt; {
	it(&#39;should return the article 3&#39;, function() {
		return getArticulo(3)
			.then(art =&amp;gt; {
				assert.instanceOf(art, Articulos);
				assert.equal(art.id, 3);
			})
	});
	it(&#39;should return an error&#39;, function() {
		return getArticulo(undefined)
			.catch(err =&amp;gt; {
				...
			})
	});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;em-hooks-em-de-mocha&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Hooks&lt;/em&gt; de Mocha&lt;/h2&gt;
&lt;p&gt;Nos permiten ejecutar código en momentos puntuales. Reciben como parámetro la función a ejecutar. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before(): el código se ejecutará una vez antes del primer test del bloque &lt;em&gt;describe&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;beforeEach(): se ejecutará antes de cada test&lt;/li&gt;
&lt;li&gt;after(), afterEach(): lo mismo pero tras ejecutar los tests&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tests-para-la-ui&quot; tabindex=&quot;-1&quot;&gt;Tests para la UI&lt;/h2&gt;
&lt;p&gt;Necesitaremos alguna librería que nos permita contruir escenarios de navegación como &lt;em&gt;CasperJS&lt;/em&gt; y otra que imite al navegador como &lt;em&gt;PhantomJS&lt;/em&gt; (para WebKit) o &lt;em&gt;SlimerJS&lt;/em&gt; (para Gecko).&lt;/p&gt;
&lt;p&gt;Hay muchas páginas que nos enseñan a usar Mocha para testear la UI como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://dev.to/ykyuen/web-ui-testing-in-nodejs--kda&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web UI Testing in NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/nilayshah/2018/01/21/ui-test-automation-with-node-js-typescript-mocha-and-selenium/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UI Test Automation with Node.js, TypeScript, Mocha and Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itnext.io/automated-ui-testing-with-selenium-and-javascript-90bbe7ca13a3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI Testing with Selenium and JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@tariqul.islam.rony/automated-ui-ux-testing-with-puppeteer-mocha-and-chai-800cfb028ab9&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automated UI/UX Testing with Puppeteer Mocha and Chai&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/tdd-mocha/" >
        </entry>
        <entry>
            <title>
                README
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/readme/</id>
            <content type="html">
                &lt;h1 id=&quot;bloque-1-el-lenguaje-javascript&quot; tabindex=&quot;-1&quot;&gt;BLOQUE 1 - El lenguaje Javascript&lt;/h1&gt;
&lt;p&gt;En este primer bloque vamos a conocer el lenguaje Javascript. El bloque se divide en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n-a-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/01-sintaxis.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;1-Sintaxis&lt;/a&gt;: Variables. Funciones. Estructuras y bucles. Tipos de datos. Buenas prácticas
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/tests.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a los test en Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/02.1-objetos.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2.1-Objetos&lt;/a&gt;: Introducción a los objetos en Javascript&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/02.2-arrays.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;2.2-Arrays&lt;/a&gt;: Métodos. &lt;em&gt;Functional Programming&lt;/em&gt;. Referencia vs copia. Rest y Spread. Desestructuración de arrays. Map. Set
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/03.1-vite.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vite&lt;/a&gt;: Cómo usar vite&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/03.1-webpack.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webpack&lt;/a&gt;: Cómo usar webpack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/03-oop.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3-Programación Orientada a Objetos&lt;/a&gt;: Introducción. Clases. POO en JS5&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/05-BOM.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;4-Browser Object Model - BOM&lt;/a&gt;: Timers. Objetos del BOM (window,&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/09-ajax.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;5-Ajax. Promesas. SPA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/04-DOM.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;6-Document Object Model - DOM&lt;/a&gt;: Acceso a nodos. Acceso desde otros nodos. Manipular el árbol DOM. Atributos de los nodos
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/04.1-MVC.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;6.1-MVC&lt;/a&gt;: Cómo usaremos el patrón MVC para crear la UI de nuestra aplicación&lt;br /&gt;
location, history, otros objetos)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/06-eventos.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;7-Eventos&lt;/a&gt;: Escuchadores. Tipos de eventos. Los objetos &lt;em&gt;this&lt;/em&gt; y &lt;em&gt;event&lt;/em&gt;. Propagación de eventos (&lt;em&gt;bubbling&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/07-globales.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;8-Objetos nativos&lt;/a&gt;: Funciones globales. Objetos nativos del lenguaje: Math, Date, RegExp, ...&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/01%20Apuntes/DAW/Javascript%20Teoria%20Batoi/08-forms.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;9-Validación de formularios&lt;/a&gt;: Validación de formularios. La API de validación de formularios. Expresiones regulares&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/10-apis.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;10-APIs HTML5&lt;/a&gt;: Drag and drop. API Storage. Geolocalización. API de Google Maps&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/11-mas.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;11-Más cosas a aprender...&lt;/a&gt;: WebComponents. WebSockets. WebWorkers. Typescript.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/12-tests.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;12-Tests&lt;/a&gt;: Testear JS con Jest&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;introduccion-a-javascript&quot; tabindex=&quot;-1&quot;&gt;Introducción a Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bloque-1---el-lenguaje-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;BLOQUE 1 - El lenguaje Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n-a-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#un-poco-de-historia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Un poco de historia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soporte-en-los-navegadores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Soporte en los navegadores&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#herramientas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Herramientas&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#la-consola-del-navegador&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;La consola del navegador&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#editores&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Editores&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#editores-on-line&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Editores on-line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#incluir-javascript-en-una-p%C3%A1gina-web&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Incluir javascript en una página web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mostrar-informaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mostrar información&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bibliograf%C3%ADa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bibliografía&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En las páginas web el elemento fundamental es el fichero HTML con la información a mostrar en el navegador. Posteriormente surgió la posibilidad de &amp;quot;decorar&amp;quot; esa información para mejorar su apariencia, lo que dio lugar al CSS. Y también se pensó en dar dinamismo a las páginas y apareció el lenguaje Javascript.&lt;/p&gt;
&lt;p&gt;En un primer momento las 3 cosas estaban mezcladas en el fichero HTML pero eso complicaba bastante el poder leer esa página a la hora de mantenerla por lo que se pensó en separar los 3 elementos básicos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML: se encarga de estructurar la página y proporciona su información, pero es una información estática&lt;/li&gt;
&lt;li&gt;CSS: es lo que da forma a dicha información, permite mejorar su apariencia, permite que se adapte a distintos dispositivos, ...&lt;/li&gt;
&lt;li&gt;Javascript: es el que da vida a un sitio web y le permite reaccionar a las acciones del usuario&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto nuestras aplicaciones tendrán estos 3 elementos y lo recomendable es que estén separados en distintos ficheros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El HTML lo tendremos habitualmente en un fichero index.html, normalmente en una carpeta llamada &lt;em&gt;public&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;El CSS lo tendremos en uno o más ficheros con extensión &lt;em&gt;.css&lt;/em&gt; dentro de una carpeta llamada &lt;em&gt;styles&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;EL JS estará en ficheros con extensión &lt;em&gt;.js&lt;/em&gt; en un directorio llamado &lt;em&gt;scripts&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las características principales de Javascript son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es un lenguaje interpretado, no compilado&lt;/li&gt;
&lt;li&gt;se ejecuta en el lado cliente (en un navegador web), aunque hay implementaciones como NodeJS para el lado servidor&lt;/li&gt;
&lt;li&gt;es un lenguaje orientado a objetos (podemos crear e isntanciar objetos y usar objetos predefinidos del lenguaje) pero basado en prototipos (por debajo un objeto es un prototipo y nosotros podemos crear objetos sin instanciarlos, haciendo copias del prototipo)&lt;/li&gt;
&lt;li&gt;se trata de un lenguaje débilmente tipado, con tipificación dinámica (no se indica el tipo de datos de una variable al declararla e incluso puede cambiarse)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo usaremos para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cambiar el contenido de la página&lt;/li&gt;
&lt;li&gt;Cambiar los atributos de un elemento&lt;/li&gt;
&lt;li&gt;Cambiar la apariencia de algo&lt;/li&gt;
&lt;li&gt;Validar datos de formularios&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sin embargo, por razones de seguridad, Javascript no nos permite hacer cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceder al sistema de ficheros del cliente&lt;/li&gt;
&lt;li&gt;Capturar datos de un servidor (puede pedirlo y el servidor se los servirá, o no)&lt;/li&gt;
&lt;li&gt;Modificar las preferencias del navegador&lt;/li&gt;
&lt;li&gt;Enviar e-mails de forma invisible o crear ventanas sin que el usuario lo vea&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;un-poco-de-historia&quot; tabindex=&quot;-1&quot;&gt;Un poco de historia&lt;/h3&gt;
&lt;p&gt;Javascript es una implementación del lenguaje &lt;strong&gt;ECMAScript&lt;/strong&gt; (el estándar que define sus características). El lenguaje surgió en 1997 y todos los navegadores a partir de 2012 soportan al menos la versión &lt;strong&gt;ES5.1&lt;/strong&gt; completamente. En 2015 se lanzó la 6ª versión, inicialmente llamada &lt;strong&gt;ES6&lt;/strong&gt; y posteriormente renombrada como &lt;strong&gt;ES2015&lt;/strong&gt;, que introdujo importantes mejoras en el lenguaje y que es la versión mínima que usaremos nosotros. Desde entonces van saliendo nuevas versiones cada año que introducen cambios pequeños. La última es la &lt;strong&gt;ES2024&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Las principales mejoras que introdujo ES2015 son: clases de objetos, let, for..of, Map, Set, Arrow functions, Promesas, spread, destructuring, ...&lt;/p&gt;
&lt;h3 id=&quot;soporte-en-los-navegadores&quot; tabindex=&quot;-1&quot;&gt;Soporte en los navegadores&lt;/h3&gt;
&lt;p&gt;Los navegadores no se adaptan inmediatamente a las nuevas versiones de Javascript por lo que puede ser un problema usar una versión muy moderna ya que puede haber partes de los programas que no funcionen en los navegadores de muchos usuarios. En la página de &lt;a href=&quot;https://kangax.github.io/compat-table/es6/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Kangax&lt;/em&gt;&lt;/a&gt; podemos ver la compatibilidad de los diferentes navegadores con las distintas versiones de Javascript. También podemos usar &lt;a href=&quot;https://caniuse.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;CanIUse&lt;/em&gt;&lt;/a&gt; para buscar la compatibilidad de un elemento concreto de Javascript así como de HTML5 o CSS3.&lt;/p&gt;
&lt;p&gt;Si queremos asegurar la máxima compatibilidad debemos usar la versión ES5 (pero nos perdemos muchas mejoras del lenguaje) o mejor, usar la ES6 (o posterior) y después &lt;em&gt;transpilar&lt;/em&gt; nuestro código a la version ES5. De esto se ocupan los &lt;em&gt;transpiladores&lt;/em&gt; (&lt;strong&gt;Babel&lt;/strong&gt; es el más conocido) por lo que no suponen un esfuerzo extra para el programador.&lt;/p&gt;
&lt;h2 id=&quot;herramientas&quot; tabindex=&quot;-1&quot;&gt;Herramientas&lt;/h2&gt;
&lt;h3 id=&quot;la-consola-del-navegador&quot; tabindex=&quot;-1&quot;&gt;La consola del navegador&lt;/h3&gt;
&lt;p&gt;Es la herramienta que más nos va a ayudar a la hora de depurar nuestro código. Abrimos las herramientas para el desarrollador (en Chrome y Firefox pulsando la tecla &lt;em&gt;F12&lt;/em&gt;) y vamos a la pestaña &lt;em&gt;Consola&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;![Consola](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Consola.png)&lt;/p&gt;
&lt;p&gt;Allí vemos mensajes del navegador como errores y advertencias que genera el código y todos los mensajes que pongamos en el código para ayudarnos a depurarlo (usando los comandos &lt;strong&gt;console.log&lt;/strong&gt; y &lt;strong&gt;console.error&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Además en ella podemos escribir instrucciones Javascript que se ejecutarán mostrando su resultado. También la usaremos para mostrar el valor de nuestras variables y para probar código que, una vez que funcione correctamente, lo copiaremos a nuestro programa.&lt;/p&gt;
&lt;p&gt;Podemos obtener ayuda sobre el funcionamiento de la consola en la web de &lt;a href=&quot;https://firefox-source-docs.mozilla.org/devtools-user/web_console/index.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mozilla&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: abre la consola y prueba las funciones &lt;em&gt;alert&lt;/em&gt;, &lt;em&gt;confirm&lt;/em&gt; y &lt;em&gt;prompt&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Siempre depuraremos los programas desde aquí (ponemos puntos de interrupción, vemos el valor de las variables, ...).&lt;/p&gt;
&lt;p&gt;![Consola - depurar](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Consola-depurar.png)&lt;/p&gt;
&lt;p&gt;Es fundamental dedicar tiempo a saber utilizar la consola porque nos facilitará enormemente la tarea de depurar nuestro código. Podéis encontrar infinidad de páginas en internet donde nos explican en profundidad el uso de la consola, como &lt;a href=&quot;https://es.javascript.info/debugging-chrome&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Debugging en el navegador&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;editores&quot; tabindex=&quot;-1&quot;&gt;Editores&lt;/h3&gt;
&lt;p&gt;Podemos usar el que más nos guste, desde editores tan simples como NotePad++ hasta complejos IDEs. La mayoría soportan las últimas versiones de la sintaxis de Javascript (Netbeans, Eclipse, Visual Studio, Sublime, Atom, Kate, Notepad++, ...). Yo voy a utilizar &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt;&lt;/a&gt; o &lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;Sublime text&lt;/strong&gt;&lt;/a&gt; por su sencillez y por los plugins que incorpora para hacer más cómodo mi trabajo. En &lt;em&gt;Visual Studio Code&lt;/em&gt; instalaré algún &lt;em&gt;plugin&lt;/em&gt; como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SonarLint: es más que un &lt;em&gt;linter&lt;/em&gt; y me informa de todo tipo de errores pero también del código que no cumple las recomendaciones (incluye gran número de reglas). Marca el código mientras lo escribimos y además podemos ver todas las advertencias en el panel de Problemas (Ctrl+&lt;/li&gt;
&lt;li&gt;Vetur: lo instalaremos en el segundo bloque. Necesario para trabajar con los ficheros de &lt;em&gt;Vue&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;editores-on-line&quot; tabindex=&quot;-1&quot;&gt;Editores on-line&lt;/h3&gt;
&lt;p&gt;Son muy útiles porque permiten ver el código y el resultado a la vez. Normalmente tienen varias pestañas o secciones de la página donde poner el código HTML, CSS yJavascript y ver su resultado.&lt;/p&gt;
&lt;p&gt;Algunos de los más conocidos son &lt;a href=&quot;https://codesandbox.io/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Codesandbox&lt;/a&gt;, &lt;a href=&quot;https://jsfiddle.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Fiddle&lt;/a&gt;, &lt;a href=&quot;https://plnkr.co/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Plunker&lt;/a&gt;, &lt;a href=&quot;https://codepen.io/pen/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CodePen&lt;/a&gt;, ...aunque hay muchos más.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ejemplo de &#39;Hello World&#39; en Fiddle:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/afabbro/vrVAP/embed/&quot;&gt;&lt;/script&gt;
&lt;blockquote&gt;
&lt;p&gt;Ejemplo de &#39;Hello World&#39; en CodePen:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;kscatcensus&quot; data-slug-hash=&quot;XedLvZ&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;Hello World Codepen&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/kscatcensus/pen/XedLvZ/&quot;&gt;
  Hello World Codepen&lt;/a&gt; by Kevin Schweickhardt (&lt;a href=&quot;https://codepen.io/kscatcensus&quot;&gt;@kscatcensus&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;
&lt;h2 id=&quot;incluir-javascript-en-una-pagina-web&quot; tabindex=&quot;-1&quot;&gt;Incluir javascript en una página web&lt;/h2&gt;
&lt;p&gt;El código Javascript va entre etiquetas &lt;em&gt;&amp;lt;script&amp;gt;&lt;/em&gt;. Puede ponerse en el &lt;em&gt;&amp;lt;head&amp;gt;&lt;/em&gt; o en el &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt;. Funciona como cualquier otra etiqueta y el navegador la interpreta cuando llega a ella (va leyendo y ejecutando el fichero línea a línea). Podéis ver en &lt;a href=&quot;https://www.youtube.com/watch?v=AQn22gjtSWQ&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=2&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este vídeo&lt;/a&gt; un ejemplo muy simple de cómo se ejecuta el código en el HEAD y en el BODY.&lt;/p&gt;
&lt;p&gt;Lo mejor en cuanto a rendimiento es ponerla al final del &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt; para que no se detenga el renderizado de la página mientras se descarga y se ejecuta el código. También podemos ponerlo en el &amp;lt;head&amp;gt; pero usando los atributos &lt;strong&gt;async&lt;/strong&gt; y/o &lt;strong&gt;defer&lt;/strong&gt; (en Internet encontraréis mucha información sobre esta cuestión, por ejemplo &lt;a href=&quot;https://es.javascript.info/script-async-defer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;aquí&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Como se ve en el primer vídeo, es posible poner el código directamente entre la etiqueta &lt;em&gt;&amp;lt;script&amp;gt;&lt;/em&gt;  y su etiqueta de finalización pero lo correcto es que esté en un fichero externo (con extensión &lt;strong&gt;.js&lt;/strong&gt;) que cargamos mediante el atributo &lt;em&gt;src&lt;/em&gt; de la etiqueta. Así conseguimos que la página HTML cargue más rápido (si lo ponemos al final del BODY o usamos &lt;em&gt;async&lt;/em&gt;) y además no mezclar HTML y JS en el mismo fichero, lo mejora la legibilidad del código y facilita su mantenimento:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script src=&amp;quot;./scripts/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mostrar-informacion&quot; tabindex=&quot;-1&quot;&gt;Mostrar información&lt;/h2&gt;
&lt;p&gt;Javascript permite mostrar al usuario ventanas modales para pedirle o mostrarle información. Las funciones que lo hacen son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.alert(mensaje)&lt;/code&gt;: Muesta en una ventana modal &lt;em&gt;mensaje&lt;/em&gt; con un botón de &lt;em&gt;Aceptar&lt;/em&gt; para cerra la ventana.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.confirm(mensaje)&lt;/code&gt;: Muesta en una ventana modal &lt;em&gt;mensaje&lt;/em&gt; con botones de &lt;em&gt;Aceptar&lt;/em&gt; y &lt;em&gt;Cancelar&lt;/em&gt;. La función devuelve &lt;strong&gt;true&lt;/strong&gt; o &lt;strong&gt;false&lt;/strong&gt; en función del botón pulsado por el usuario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.prompt(mensaje [, valor predeterminado])&lt;/code&gt;: Muesta en una ventana modal &lt;em&gt;mensaje&lt;/em&gt; y debajo tiene un campo donde el usuario puede escribir, junto con botones de &lt;em&gt;Aceptar&lt;/em&gt; y &lt;em&gt;Cancelar&lt;/em&gt;. La función devuelve el valor introducido por el usuario como texto (es decir que si introduce 54 lo que se obtiene es &amp;quot;54&amp;quot;) o &lt;strong&gt;false&lt;/strong&gt; si el usuario pulsa &lt;em&gt;Cancelar&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También se pueden escribir las funciones sin &lt;em&gt;window.&lt;/em&gt; (es decir &lt;code&gt;alert(&#39;Hola&#39;)&lt;/code&gt; en vez de &lt;code&gt;window.alert(&#39;Hola&#39;)&lt;/code&gt;) ya que en Javascript todos los métodos y propiedades de los que no se indica de qué objeto son se ejecutan en el objeto &lt;em&gt;window&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos mostrar una información para depurar nuestro código no utilizaremos &lt;em&gt;alert(mensaje)&lt;/em&gt; sino &lt;code&gt;console.log(mensaje)&lt;/code&gt; o &lt;code&gt;console.error(mensaje)&lt;/code&gt;. Estas funciones muestran la información pero en la consola del navegador. La diferencia es que &lt;em&gt;console.error&lt;/em&gt; la muestra como si fuera un error de Javascript.&lt;/p&gt;
&lt;h1 id=&quot;bibliografia&quot; tabindex=&quot;-1&quot;&gt;Bibliografía&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Curso &amp;quot;Programación con JavaScript&amp;quot;. CEFIRE Xest. Arturo Bernal Mayordomo&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLiZCpIzKtvqvt4tcQV4SAvaJn7QMdwUbd&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso de JavaScript y TypeScript&lt;/a&gt; de Arturo Bernal en Youtube&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN Web Docs&lt;/a&gt;. Moz://a. &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developer.mozilla.org/es/docs/Web/JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://librosweb.es/libro/javascript/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción a JavaScript&lt;/a&gt;. Librosweb. &lt;a href=&quot;http://librosweb.es/libro/javascript/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://librosweb.es/libro/javascript/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso de Javascript (Desarrollo web en entorno cliente)&lt;/a&gt;. Ada Lovecode - Didacticode (90 vídeos) de Laura Folgado&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sergarb1/ApuntesDWEC&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Apuntes Desarrollo Web en Entorno Cliente (DWEC)&lt;/a&gt;. Sergi García Barea&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/readme/" >
        </entry>
        <entry>
            <title>
                12-tests
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/12-tests/</id>
            <content type="html">
                &lt;h1 id=&quot;testing&quot; tabindex=&quot;-1&quot;&gt;Testing&lt;/h1&gt;
&lt;p&gt;Tabla de contenidos&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n-al-testing&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción al testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testing-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-npm&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar npm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#transpilar-nuestro-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Transpilar nuestro código&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usando-babel-con-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usando Babel con Jest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usando-webpack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usando Webpack&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#instalar-webpack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Instalar webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejecutar-webpack&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejecutar webpack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enlazar-el-fichero-generado-en-el-html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enlazar el fichero generado en el HTML&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testear-la-ui&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testear la UI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#usar-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar jest&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#matchers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Matchers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#test-suites&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Test suites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mocks&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testear-promesas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testear promesas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#hooks-de-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hooks de Jest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desarrollo-guiado-por-pruebas-tdd&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion-al-testing&quot; tabindex=&quot;-1&quot;&gt;Introducción al testing&lt;/h2&gt;
&lt;p&gt;Es fundamental que nuestro código tenga un cierto nivel de calidad para minimizar los fallos del programa, más cuanto más compleja es la aplicación que estamos desarrollando. Para ello debemos testearlo y dicho testeo seguramente incluirá test automáticos. Dichos test nos permiten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;comprobar que nuestro código responde como se espera de él&lt;/li&gt;
&lt;li&gt;evitar los &lt;em&gt;errores de regresión&lt;/em&gt; (fallos tras incluir una nueva funcionalidad en cosas que antes funcionaban en nuestro programa)&lt;/li&gt;
&lt;li&gt;incluso mejoran la documentación del proyecto ya que el test indica cómo debe funcionar mi código&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Como ya sabéis existen varios tipos de tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;unitarios: prueban un trozo de código que sólo hace una cosa (habitualmente una función)&lt;/li&gt;
&lt;li&gt;de integración: prueban que varias partes del código funcionan bien juntas&lt;/li&gt;
&lt;li&gt;de aceptación: prueba que el código permite hacer algo que el cliente quiere qu pueda hacerse&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De momento desarrollaremos tests unitarios. Estos tienen 3 partes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preparación (&lt;em&gt;Arrange&lt;/em&gt;): perparamos el código para poder probarlo, por ejemplo, creamos las variables u objetos a probar&lt;/li&gt;
&lt;li&gt;Actuación (&lt;em&gt;Act&lt;/em&gt;): realizamos la acción, por ejemplo, llamamos a la función&lt;/li&gt;
&lt;li&gt;Aserción (&lt;em&gt;Assert&lt;/em&gt;): comprobamos que el resultado es el esperado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;wordCount() returns 2 when the input is &amp;quot;Hello world&amp;quot;&#39;, () =&amp;gt; {
  // Arrange
  const string = &#39;Hello world&#39;;
  
  // Act
  const result = wordCount(string);
  
  // Assert
  expect(result).toBe(2);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;testing-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Testing en Javascript&lt;/h1&gt;
&lt;p&gt;Tenemos muchas herramientas para hacer tests unitarios. Usaremos una llamada &lt;strong&gt;&lt;em&gt;Jest&lt;/em&gt;&lt;/strong&gt;. Para instalarla usaremos el gestor de paquetes &lt;strong&gt;&lt;em&gt;npm&lt;/em&gt;&lt;/strong&gt; que es el más utlizado para usar bibliotecas y sus dependencias en el FrontEnd.&lt;/p&gt;
&lt;h2 id=&quot;instalar-npm&quot; tabindex=&quot;-1&quot;&gt;Instalar npm&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;npm&lt;/strong&gt; es el gestor de dependencias de &lt;strong&gt;&lt;em&gt;nodejs&lt;/em&gt;&lt;/strong&gt; y aprenderemos más de él en el bloque de &lt;strong&gt;Vue&lt;/strong&gt;. Debemos instalar &lt;em&gt;NodeJS&lt;/em&gt; para tener npm. Esto podemos hacerlo desde el repositorio de nuestra distribución (con &lt;code&gt;apt install nodejs&lt;/code&gt;) pero no se instalará la última versión. Es mejor seguir las indicaciones de la &lt;a href=&quot;https://nodejs.org/es/download/package-manager/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página oficial de NodeJS&lt;/a&gt;. Aquí tenéis cómo hacerlo para &lt;a href=&quot;https://github.com/nodesource/distributions/blob/master/README.md#debinstall&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;distribuciones basadas en Debian/Ubuntu&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;instalar-jest&quot; tabindex=&quot;-1&quot;&gt;Instalar jest&lt;/h2&gt;
&lt;p&gt;Una vez instalado npm crearemos una carpeta para cada proyecto que vayamos a hacer y lo inicializamos ejecutando dentro de ella:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este comando crea un nuevo proyecto y nos pedirá información sobre el mismo. Cuando nos pregunten por la herramienta para hacer tests escribiremos &lt;strong&gt;jest&lt;/strong&gt;. Tras ello tendremos ya creado el fichero &lt;strong&gt;package.json&lt;/strong&gt; de nuestra aplicación (es el fichero donde se configura el proyecto y sus dependencias). En el apartado de &lt;em&gt;scripts&lt;/em&gt; encontramos uno llamado &lt;em&gt;test&lt;/em&gt; que lo que hace es ejecutar &lt;em&gt;jest&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;&amp;quot;scripts&amp;quot;: {
   &amp;quot;test&amp;quot;: &amp;quot;jest&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora falta instalar jest, lo que haremos con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm install --save-dev jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos instalando jest sólo como dependencia de desarrollo ya que no lo necesitaremos en producción (lo mismo abreviado sería &lt;code&gt;npm i -D jest&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Aunque, como vamos a utilizar &lt;em&gt;jest&lt;/em&gt; en muchos proyectos distintos, es más conveniente instalarlo globalmente con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;npm i -g jest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma no tendremos que instalar &lt;em&gt;jest&lt;/em&gt;  en cada nuevo proyecto, sólo hacer el &lt;code&gt;npm init&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Las dependencias que instalemos están en el directorio &lt;em&gt;node_modules&lt;/em&gt;. Si estamos usando &lt;em&gt;git&lt;/em&gt; debemos asegurarnos de incluir este directorio en nuestro fichero &lt;em&gt;.gitignore&lt;/em&gt; (si no tenemos ese fichero podemos crearlo simplemente con &lt;code&gt;echo &amp;quot;node_modules&amp;quot; &amp;gt; .gitignore&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;transpilar-nuestro-codigo&quot; tabindex=&quot;-1&quot;&gt;Transpilar nuestro código&lt;/h2&gt;
&lt;p&gt;Vamos a crear las funciones de nuestro código en un fichero JS y para que se puedan usar el otro fichero Javascript (el de los tests) debemos exportarlas con &lt;code&gt;module.exports&lt;/code&gt;. El fichero de test deberá importarlas con &lt;code&gt;require&lt;/code&gt; (se explica más adelante, en el apartado de &lt;a href=&quot;https://pedroporo.github.io/#usar-jest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Usar Jest&lt;/a&gt;). Por ejemplo, tenemos un fichero llamado &lt;strong&gt;suma.js&lt;/strong&gt; que contiene la función &lt;em&gt;add&lt;/em&gt; que suma 2 números pasados por parámetro:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function add(a, b) {
  return a + b;
}
module.exports = add;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fichero de test, &lt;strong&gt;suma.test.js&lt;/strong&gt; (normalmente le llamaremos igual pero anteponiendo &lt;em&gt;.test&lt;/em&gt; a la extensión .js) contiene los test a ejecutar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const add = require(&#39;./suma&#39;)

describe(&#39;Addition&#39;, () =&amp;gt; {
    test(&#39;given 3 and 7 as inputs, should return 10&#39;, () =&amp;gt; {
        const expected = 10;
        const actual = add(3,7);
        expect(actual).toEqual(expected)
    });

    test(&#39;given -4 and 2 as inputs, should return -2&#39;, () =&amp;gt; {
        const expected = -2;
        const actual = add(-4,2);
        expect(actual).toEqual(expected)
    });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo que hace es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;importa la función que exporta &lt;em&gt;suma.js&lt;/em&gt; y la almacena en la constante &lt;strong&gt;add&lt;/strong&gt;. Ya pude llamar a esa función&lt;/li&gt;
&lt;li&gt;el bloque &lt;em&gt;describe&lt;/em&gt; permite agrupar varios tests relacionados bajo un mismo nombre&lt;/li&gt;
&lt;li&gt;cada sentencia &lt;em&gt;test&lt;/em&gt; es un test que se realizará&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si ejecutamos los tests en la terminal (&lt;code&gt;npm run test&lt;/code&gt;) muestra un error ya que Jest no sabe cómo gestionar las sentencias ECMAScript &lt;em&gt;import&lt;/em&gt; y &lt;em&gt;export&lt;/em&gt;. Para solucionarlo debemos transpilar nuestro código de manera que Jest pueda entenderlo. Podemos hacerlo de 2 maneras:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;instalando el transpilador &lt;strong&gt;Babel&lt;/strong&gt; y configurando &lt;em&gt;Jest&lt;/em&gt; para que transpile el código&lt;/li&gt;
&lt;li&gt;utilizando un &lt;em&gt;bundler&lt;/em&gt; como &lt;strong&gt;Webpack&lt;/strong&gt;. En este caso no sólo transpilamos el código sino que juntamos todos nuestros ficheros JS en uno sólo que será el que enlazaremos en el fichero HTML de nuestra aplicación. Es la solución si queremos que nuestro código funcione en el navegador además de poder pasar los tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;usando-babel-con-jest&quot; tabindex=&quot;-1&quot;&gt;Usando Babel con Jest&lt;/h3&gt;
&lt;p&gt;Si queremos sólo poder pasar los tests pero no vamos a usar ese código en el navegador sólo tenemos que instalar el transpilador Babel:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm add jest babel-jest @babel/core @babel/preset-env
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y crear 2 ficheros para configurarlo y que sepa trabajar junto a Jest:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;jest.config.json&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;transform&amp;quot;: {
        &amp;quot;^.+&#92;&#92;.jsx?$&amp;quot;: &amp;quot;babel-jest&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.babelrc&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &amp;quot;presets&amp;quot;: [&amp;quot;@babel/preset-env&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ahora ya podemos ejecutar los test y comprobar que nuestro código los pasa.&lt;/p&gt;
&lt;p&gt;En la siguiente página explica cómo configurar npm y jest con babel (sin usar webpack) e integrarlo con Travis-CI, la herramienta de integracion continua de GitHub:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://levelup.gitconnected.com/automate-npm-releases-with-jest-codecov-io-semantic-release-and-travisci-eff812e97541&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Automate NPM releases with Jest, codecov.io, Semantic Release, and TravisCI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;usando-webpack&quot; tabindex=&quot;-1&quot;&gt;Usando Webpack&lt;/h2&gt;
&lt;p&gt;Con la configuración anterior nuestro código es transpilado para ejecutar los tests, pero dará error si intentamos ejecutarlo en el navegador porque allí no está transpilado. Podemos solucionarlo usando &lt;em&gt;webpack&lt;/em&gt; para empaquetar y transpilar el código (por tanto no sería necesario realizar lo indicado en al apartado anterior).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webpack&lt;/a&gt; el un &lt;em&gt;bundler&lt;/em&gt; o empaquetador de código que además puede usar transpiladores para convertir nuestro código que usa versiones modernas de ECMAscript en otro soportado por la mayoría de navegadores.&lt;/p&gt;
&lt;p&gt;Por tanto nos va a permitir, entre otras cosas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tener en nuestro &lt;em&gt;index.html&lt;/em&gt; una sóla entrada de script (&lt;code&gt;&amp;lt;script src=&amp;quot;./dist/main.js&#39;&amp;gt;&lt;/code&gt;) en lugar de una para cada archivo que estemos utilizando (index.js, functions.js, ...)&lt;/li&gt;
&lt;li&gt;Además podremos usar instrucciones como &lt;code&gt;module.exports&lt;/code&gt; para exportar funciones o &lt;code&gt;require&lt;/code&gt; para importarlas en otro fichero Javascript, que sin traspilar provocarían errores en el navegador&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Existen infinidad de páginas que nos enseñan las mil posibilidades que tiene &lt;em&gt;webpack&lt;/em&gt;, pero nosotros por ahora sólo necesitamos:&lt;/p&gt;
&lt;h3 id=&quot;instalar-webpack&quot; tabindex=&quot;-1&quot;&gt;Instalar webpack&lt;/h3&gt;
&lt;p&gt;Tenemos que instalar webpack y webpack-cli. Como son dependencias de desarrollo (en producción no las necesitaremos) ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ejecutar-webpack&quot; tabindex=&quot;-1&quot;&gt;Ejecutar webpack&lt;/h3&gt;
&lt;p&gt;Se ejecuta con el comando &lt;code&gt;npx webpack&lt;/code&gt; y hay que indicarle:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuál es nuestro archivo Javascript principal de nuestro código (si no lo ponemos supondrá que es &lt;strong&gt;./src/index.js&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;cuál será el archivo que creará de salida (por defecto &lt;strong&gt;./dist/main.js&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;si estamos en desarrollo o en producción, para permitir o no depurar el código generado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Siguiendo con el ejemplo anterior de la suma crearemos un fichero &lt;strong&gt;index.js&lt;/strong&gt; dentro de &lt;em&gt;src/&lt;/em&gt; que importará el fichero &lt;em&gt;suma.js&lt;/em&gt; (con el comando &lt;code&gt;require&lt;/code&gt;como se hace en el fichero de tests) y que contendrá el resto de código de la aplicación (como pedir al usuario los números a sumar, mostrar el resultado, ...). Para que webpack empaquete y transpile esos 2 ficheros (index.js y suma.js) ejecutaremos en la terminal:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;enlazar-el-fichero-generado-en-el-html&quot; tabindex=&quot;-1&quot;&gt;Enlazar el fichero generado en el HTML&lt;/h3&gt;
&lt;p&gt;Por último, en nuestro &lt;em&gt;index.html&lt;/em&gt; debemos incluir sólo el &lt;em&gt;main.js&lt;/em&gt; generado por webpack &lt;code&gt;&amp;lt;script src=&amp;quot;dist/main.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;testear-la-ui&quot; tabindex=&quot;-1&quot;&gt;Testear la UI&lt;/h2&gt;
&lt;p&gt;Si queremos hacer tests unitarios de los cambios que produce nuestro código en la página web hay varios frameworks que podemos usar, pero también podemos hacerlo sin usar ninguno, usando sólo los módulos de Node que ya tenemos instalados y &lt;em&gt;Jest&lt;/em&gt;, en concreto su herramienta &lt;em&gt;jsdom&lt;/em&gt; que usa para emular un navegador.&lt;/p&gt;
&lt;p&gt;Para usarlo debemos instalar la librería &lt;a href=&quot;https://testing-library.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testing Library&lt;/a&gt;. Para ello, tras configurar nuestro proyecto con &lt;em&gt;Babel&lt;/em&gt; como hemos visto antes, instalaremos para desarrollo los paquetes &lt;strong&gt;@testing-library/dom&lt;/strong&gt; y &lt;strong&gt;@testing-library/jest-dom&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D @testing-library/dom @testing-library/jest-dom
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el fichero de test debemos poner al principio:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { fireEvent, getByText } = require(&#39;@testing-library/dom&#39;)
import &#39;@testing-library/jest-dom/extend-expect&#39;
import { JSDOM } from &#39;jsdom&#39;
import fs from &#39;fs&#39;
import path from &#39;path&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y antes de ejecutar cada test cargamos nuestra página HTML con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const html = fs.readFileSync(path.resolve(__dirname, &#39;../index.html&#39;), &#39;utf8&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OJO: sólo debemos cargar así la página si confiamos totalmente en el código que vamos a probar (en este caso es nuestro código) y no deberíamos hacerlo para código de terceros.&lt;/p&gt;
&lt;p&gt;Luego ya podemos acceder al HTML y mirar si existen ciertas etiquetas o su contenido, como en este ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { fireEvent, getByText } = require(&#39;@testing-library/dom&#39;)
import &#39;@testing-library/jest-dom/extend-expect&#39;
import { JSDOM } from &#39;jsdom&#39;
import fs from &#39;fs&#39;
import path from &#39;path&#39;

const html = fs.readFileSync(path.resolve(__dirname, &#39;../index.html&#39;), &#39;utf8&#39;);

let dom
let container

describe(&#39;index.html&#39;, () =&amp;gt; {
  beforeEach(() =&amp;gt; {
    // Constructing a new JSDOM with this option is the key
    // to getting the code in the script tag to execute.
    // This is indeed dangerous and should only be done with trusted content.
    // https://github.com/jsdom/jsdom#executing-scripts
    dom = new JSDOM(html, { runScripts: &#39;dangerously&#39; })
    container = dom.window.document.body
  })

  it(&#39;renders a heading element&#39;, () =&amp;gt; {
    expect(container.querySelector(&#39;h1&#39;)).not.toBeNull()
    expect(getByText(container, &#39;Almacén central - ACME SL&#39;)).toBeInTheDocument()
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además de &lt;em&gt;getByText&lt;/em&gt; para comprobar los elementos de la página tenemos otras &lt;a href=&quot;https://testing-library.com/docs/dom-testing-library/api-queries&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;queries&lt;/a&gt; que podemos utilizar.&lt;/p&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://levelup.gitconnected.com/how-to-unit-test-html-and-vanilla-javascript-without-a-ui-framework-c4c89c9f5e56&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to Unit Test HTML and Vanilla JavaScript Without a UI Framework&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;usar-jest&quot; tabindex=&quot;-1&quot;&gt;Usar jest&lt;/h1&gt;
&lt;p&gt;La &lt;a href=&quot;https://jestjs.io/docs/en/getting-started.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial&lt;/a&gt; proporciona muy buena información de cómo usarlo. En resumen, en los ficheros con las funciones que vayamos a testear debemos &#39;&lt;em&gt;exportar&lt;/em&gt;&#39; esas funciones para que las pueda importar el fichero de test. Lo haremos con &lt;code&gt;module.exports&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function suma(a, b) {
  return a + b;
}
module.exports = suma;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si tenemos varias funciones podemos exportar un objeto con todas ellas:&lt;br /&gt;
&lt;code&gt;module.exports&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function suma(a, b) {
  return a + b;
}
module.exports = { suma, resta, multiplica, divide };
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el fichero de test (que normalmente se llamará como el original más &lt;em&gt;test&lt;/em&gt; antes de la extensión, por ejemplo &lt;em&gt;funciones.test.js&lt;/em&gt;) importamos esas funciones con un &lt;code&gt;require&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const suma = require(&#39;./funciones&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y ya podemos acceder llamar a la función &#39;suma&#39; desde el fichero de test. Si queremos importar varias funciones haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const funciones = require(&#39;./funciones&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y accederemos a cada una como &#39;funciones.suma&#39;, ...&lt;/p&gt;
&lt;p&gt;Ya podemos crear nuestro primer test para probar la función suma:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;Suma 1 + 1 devuelve 2&#39;, () =&amp;gt; {
  expect(funciones.suma(1, 1)).toBe(2);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para crear un test usamos la instrucción &lt;code&gt;test&lt;/code&gt; (o &lt;code&gt;it&lt;/code&gt;) a la que le pasamos como primer parámetro un nombre descriptivo de lo que hace y como segundo parámetro la función que realiza el test. En general usaremos &lt;code&gt;expect&lt;/code&gt; y le pasamos como parámetro la llamada a la función a testear y comparamos el resultado devuelto usando un &lt;em&gt;matcher&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;matchers&quot; tabindex=&quot;-1&quot;&gt;Matchers&lt;/h2&gt;
&lt;p&gt;Los más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;toBe()&lt;/strong&gt;: compara el resultado del &lt;em&gt;expect&lt;/em&gt; con lo que le pasamos como parámetro. Sólo sirve para valores primitivos (number, string, boolean, ...) no para arrays ni objetos&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeCLoseTo()&lt;/strong&gt;: se usa para números de punto flotante. &lt;code&gt;expect(0.1 + 0.2).toBe(0.3)&lt;/code&gt; fallaría por el error de redondeo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toEqual()&lt;/strong&gt;: como el anterior pero para objetos y arrays. Comprueba cada uno de los elementos el objeto o array&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeLessThan&lt;/strong&gt;, &lt;strong&gt;toBeLessThanOrEqual&lt;/strong&gt;, &lt;strong&gt;toBeGreaterThan&lt;/strong&gt;, &lt;strong&gt;toBeGreaterThanOrEqual&lt;/strong&gt;: para comparaciones &amp;lt;, &amp;lt;=, &amp;gt;, &amp;gt;=&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeTruthy&lt;/strong&gt;: el valor devuelvo es verdadero o asimilable a verdadero (si fuera la condición de un &lt;em&gt;if&lt;/em&gt; se ejecutaría el &lt;em&gt;then&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeFalsy&lt;/strong&gt;: el valor devuelvo es falso o asimilable a falso (si fuera la condición de un &lt;em&gt;if&lt;/em&gt; se ejecutaría el &lt;em&gt;else&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeUndefined&lt;/strong&gt;: el valor es &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeDefined&lt;/strong&gt;: el valor NO es &lt;em&gt;undefined&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toBeNull&lt;/strong&gt;: el valor devuelto es &lt;em&gt;null&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toMatch&lt;/strong&gt;: el valor devuelto debe cumplir con la expresión regular pasada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toContain&lt;/strong&gt;: el array devuelto debe contener el elemento pasado como parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;toHaveLength&lt;/strong&gt;: el array o el string devueltos debe tener la longitud indicada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para comprobar si una función ha lanzado una excepción se usa &lt;code&gt;toThrow&lt;/code&gt;. Podemos comprobar sólo que haya lanzado un error, que sea de un tipo determinado, el mensaje exacto que tiene o si el mensaje cumple con una expresión regular:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function compileAndroidCode() {
  throw new Error(&#39;you are using the wrong JDK&#39;);
}

test(&#39;compiling android goes as expected&#39;, () =&amp;gt; {
  expect(compileAndroidCode).toThrow();
  expect(compileAndroidCode).toThrow(Error);
  expect(compileAndroidCode).toThrow(&#39;you are using the wrong JDK&#39;);
  expect(compileAndroidCode).toThrow(/JDK/);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos obtener la lsita completa de &lt;em&gt;matchers&lt;/em&gt; en al &lt;a href=&quot;https://jestjs.io/docs/es-ES/expect&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Jest&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;test-suites&quot; tabindex=&quot;-1&quot;&gt;Test suites&lt;/h2&gt;
&lt;p&gt;En muchas ocasiones no vamos a pasar un único test sino un conjunto de ellos. En ese caso podemos agruparlos en un &lt;em&gt;test suite&lt;/em&gt; que definimos con la instruacción &lt;code&gt;describe&lt;/code&gt; a la que pasamos un nombre que la describa y una función que contiene todos los tests a pasar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;describe(&#39;Funciones aritméticas&#39;, () =&amp;gt; {
  test(&#39;Suma 1 + 1 devuelve 2&#39;, () =&amp;gt; {
    expect(funciones.suma(1, 1)).toBe(2);
  });

  test(&#39;Resta 2 - 1 devuelve 1&#39;, () =&amp;gt; {
    expect(funciones.resta(2, 1)).toBe(1);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mocks&quot; tabindex=&quot;-1&quot;&gt;Mocks&lt;/h2&gt;
&lt;p&gt;Muchas veces debemos testear partes del código que llaman a otras funciones pero no nos interesa que se ejecuten esas funciones sino simplemente saber si se han llamado o no y con qué parámetros. Para eso se definen las fuciones &lt;em&gt;mock&lt;/em&gt;. Consiste en declarar en nuestro fichero de test una función a la que llama el código como función de &lt;em&gt;jest&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Por ejemplo, tenemos un método de un controlador llamado &lt;em&gt;addProduct&lt;/em&gt; que llama a otro de la vista llamado &lt;em&gt;renderProduct&lt;/em&gt; para renderizar algo. Nosotros sólo queremos testear que se llama a la vista y que el parámetro que se le pasa es el adecuado. En nuestro test haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;renderProduct = jest.fn();

test(&#39;renderProduct called once with product {id: 1, name: &amp;quot;Prod 1&amp;quot;, price: 49.99}&#39;, () =&amp;gt; {
  const product = {id: 1, name: &amp;quot;Prod 1&amp;quot;, price: 49.99};
  
  renderProduct(product);
  renderProduct({});
  
	expect(renderProduct.mock.calls.length).toBe(2);
	expect(renderProduct.mock.calls[0][0]).toEqual(newProd);
	expect(renderProduct.mock.calls[1][0]).toEqual({});
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En realidad no se llama a la función real sino a la definida por el mock y podemos ver las veces que ha sido llamada (&lt;code&gt;fn.mock.calls.length&lt;/code&gt;) o el primer parámetro pasado en la primera llamada (&lt;code&gt;fn.mock.calls[0][0]&lt;/code&gt;) o en la segunda (&lt;code&gt;fn.mock.calls[1][0]&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Podéis obtener toda la información en la &lt;a href=&quot;https://jestjs.io/docs/en/mock-functions&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de jest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;También podemos encontrar muchos ejemplos en otras webs, como en &lt;a href=&quot;https://books.adalab.es/materiales-front-end-e/sprint-3.-react/3_14_testing_js&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;adalab&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;testear-promesas&quot; tabindex=&quot;-1&quot;&gt;Testear promesas&lt;/h2&gt;
&lt;p&gt;Para testear una función que devuelve una promesa debemos hacerlo de diferente manera. Por ejemplo tenemos una función &#39;getData&#39; que devuelve una promesa. Para testearla:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;getData devuelve un arrya de 3 elementos&#39;, () =&amp;gt; {
  return getData().then(data =&amp;gt; expect(data).toHaveLength(3) );
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No olvidéis poner el &#39;return&#39;, si no el test acabará sin esperar a que se resuelva la promesa. Si lo que queremos es comprobar que la promesa es rechazada haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;test(&#39;getData devuelve un arrya de 3 elementos&#39;, () =&amp;gt; {
  expect.assertions(1);
  return getData().catch(err =&amp;gt; expect(err).toMatch(&#39;404&#39;);
  });
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso esperamos que devuelva un error que contenga &#39;404&#39;. Hay que poner la línea de &lt;code&gt;expect.assertions&lt;/code&gt; para evitar que una promesa cumplida no haga que falle el test.&lt;/p&gt;
&lt;p&gt;En la &lt;a href=&quot;https://jestjs.io/docs/en/asynchronous&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación oficial de Jest&lt;/a&gt; podemos encontrar información de cómo probar todo tipo de llamadas asíncronas (&lt;em&gt;callback&lt;/em&gt;, &lt;em&gt;async/await&lt;/em&gt;, ...).&lt;/p&gt;
&lt;h2 id=&quot;hooks-de-jest&quot; tabindex=&quot;-1&quot;&gt;Hooks de Jest&lt;/h2&gt;
&lt;p&gt;Permiten ejecutar código antes o depués de pasar cada test o el conjunto de ellos. Son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;afterEach()&lt;/strong&gt;: Después de cada prueba.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;afterAll()&lt;/strong&gt;: Después de todas las pruebas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeEach()&lt;/strong&gt;: Antes de cada prueba.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeAll()&lt;/strong&gt;: Antes de todas las pruebas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por ejemplo podemos querer inicializar la base de datos antes de pasar cada test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeAll(() =&amp;gt; {
  initializeCityDatabase();
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si se trata de una función asíncrona habrá que añadirle un &#39;return&#39; igual que hacíamos con las promesas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;beforeAll(() =&amp;gt; {
  return initializeCityDatabase();
});

afterAll(() =&amp;gt; {
  return clearCityDatabase();
});

test(&#39;city database has Vienna&#39;, () =&amp;gt; {
  expect(isCity(&#39;Vienna&#39;)).toBeTruthy();
});

test(&#39;city database has San Juan&#39;, () =&amp;gt; {
  expect(isCity(&#39;San Juan&#39;)).toBeTruthy();
});`
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;desarrollo-guiado-por-pruebas-tdd&quot; tabindex=&quot;-1&quot;&gt;Desarrollo guiado por pruebas (TDD)&lt;/h1&gt;
&lt;p&gt;Es una forma de programar que consiste en escribir primero las pruebas que deba pasar el código (Test Dirve Development) y luego el código que las pase. Por último deberíamos refactorizarlo (&lt;a href=&quot;https://es.wikipedia.org/wiki/Refactorizaci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Refactoring&lt;/a&gt;). Para escribir las pruebas generalmente se utilizan las &lt;a href=&quot;https://es.wikipedia.org/wiki/Prueba_unitaria&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;pruebas unitarias&lt;/a&gt; (unit test en inglés).&lt;/p&gt;
&lt;p&gt;El ciclo de programación usando TDD tiene tres fases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fase &lt;em&gt;roja&lt;/em&gt;: escribimos el test que cumpla los requerimientos y lo pasamos. Fallará ya que nuestro código no pasa el test (de hecho la primera vez no tenemos ni código)&lt;/li&gt;
&lt;li&gt;Fase &lt;em&gt;verde&lt;/em&gt;: conseguimos que nuestro código pase el test. Ya funciona aunque seguramente no estará muy bien escrito&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Refactorización&lt;/em&gt;: mejoramos nuestro código&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente y seguidamente se refactoriza el código escrito. El propósito del desarrollo guiado por pruebas es lograr un código limpio que funcione. La idea es que los requisitos sean traducidos a pruebas, de este modo, cuando las pruebas pasen se garantizará que el software cumple con los requisitos que se han establecido.&lt;/p&gt;
&lt;p&gt;Para ello debemos en primer lugar se debe definir una lista de requisitos y después se ejecuta el siguiente ciclo:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Elegir un requisito: Se elige de una lista el requisito que se cree que nos dará mayor conocimiento del problema y que a la vez sea fácilmente implementable.&lt;/li&gt;
&lt;li&gt;Escribir una prueba: Se comienza escribiendo una prueba para el requisito. Para ello el programador debe entender claramente las especificaciones y los requisitos de la funcionalidad que está por implementar. Este paso fuerza al programador a tomar la perspectiva de un cliente considerando el código a través de sus interfaces.&lt;/li&gt;
&lt;li&gt;Verificar que la prueba falla: Si la prueba no falla es porque el requisito ya estaba implementado o porque la prueba es errónea.&lt;/li&gt;
&lt;li&gt;Escribir la implementación: Escribir el código más sencillo que haga que la prueba funcione. Se usa la expresión &amp;quot;Déjelo simple&amp;quot; (&amp;quot;Keep It Simple, Stupid!&amp;quot;), conocida como principio KISS.&lt;/li&gt;
&lt;li&gt;Ejecutar las pruebas automatizadas: Verificar si todo el conjunto de pruebas funciona correctamente.&lt;/li&gt;
&lt;li&gt;Eliminación de duplicación: El paso final es la refactorización, que se utilizará principalmente para eliminar código duplicado. Se hace un pequeño cambio cada vez y luego se corren las pruebas hasta que funcionen.&lt;/li&gt;
&lt;li&gt;Actualización de la lista de requisitos: Se actualiza la lista de requisitos tachando el requisito implementado. Asimismo se agregan requisitos que se hayan visto como necesarios durante este ciclo y se agregan requisitos de diseño (P. ej que una funcionalidad esté desacoplada de otra).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Tener un único repositorio universal de pruebas facilita complementar TDD con otra práctica recomendada por los procesos ágiles de desarrollo, la &amp;quot;Integración Continua&amp;quot;. Integrar continuamente nuestro trabajo con el del resto del equipo de desarrollo permite ejecutar toda batería de pruebas y así descubrir si nuestra última versión es compatible con el resto del sistema. Es recomendable y menos costoso corregir pequeños problemas cada pocas horas que enfrentarse a problemas enormes cerca de la fecha de entrega fijada.&lt;/p&gt;
&lt;p&gt;(Fuente &lt;a href=&quot;https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt;).&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/12-tests/" >
        </entry>
        <entry>
            <title>
                11-mas
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/11-mas/</id>
            <content type="html">
                &lt;h1 id=&quot;mas-cosas-a-aprender-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Más cosas a aprender en Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A1s-cosas-a-aprender-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Más cosas a aprender en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#webcomponents&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebComponents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#websockets&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#webworkers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebWorkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#typescript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#jquery&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Hace unos años Javscript era considerado un lenguaje de programación de segunda categoría, que se usaba para hacer molestas páginas web. Hoy en día el navegador es la aplicación más importante de un equipo y con él, además de navegar, se ejecutan todo tipo de aplicaciones. Además HTML5 y JavaScript han pasado de estar solo en nuestro navegador a ser un pilar básico de las plataformas móviles, de aplicaciones de escritorio e incluso JavaScript lo encontramos en servidores (con &lt;em&gt;Node.js&lt;/em&gt;) o como lenguaje estándar de algunos entornos de escritorio (como &lt;em&gt;GNOME&lt;/em&gt; para Linux).&lt;/p&gt;
&lt;p&gt;Por ello HTML5 y Javascript siguen su contínuo crecimiento... y su contínua evolución que les permite hacer cada vez más cosas. En esta página vamos a hablar muy brevemente de algunas de las características que están incorporando.&lt;/p&gt;
&lt;h2 id=&quot;web-components&quot; tabindex=&quot;-1&quot;&gt;WebComponents&lt;/h2&gt;
&lt;p&gt;Son distintas tecnologías que podemos usar (todas o alguna de ellas) para crear componentes reutilizables para nuestras páginas HTML. Las tecnologías que hay tras los Web Components son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Custom Elements&lt;/a&gt;: permite crear elementos HTML personalizados, es decir, nuevas etiquetas definidas por nosotros con funcionalidad propia. Por ejemplo&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;comp-calendar
    mode=&amp;quot;month&amp;quot;
    date=&amp;quot;2020-02-23&amp;quot;
    on-select=&amp;quot;dateSelected()&amp;quot; &amp;gt;
&amp;lt;/comp-calendar&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML Templates&lt;/a&gt;: la etiqueta &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; permite definir fragmentos de código HTML que no serán renderizados y que usaremos más adelante. Pueden incluir &lt;strong&gt;slots&lt;/strong&gt; o huecos a los que se pasa un contenido&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Shadow DOM&lt;/a&gt;: permite asociar un DOM oculto a un elemento. Esto permite que tenga su propio código JS y estilos CSS aislados del resto del DOM&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://html.spec.whatwg.org/multipage/webappapis.html#integration-with-the-javascript-module-system&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ES Modules&lt;/a&gt;: Es el estándar de ECMAScript para importar módulos Javascript.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un WebComponent es un elemento que creamos y que tiene su propia representación (HTML) y funcionalidad (establecida con Javascript). Este elemento es reusable y compartible y se contruye sin librerías externas, sólo con HTML5, ES6 y CSS3.&lt;/p&gt;
&lt;p&gt;Algunos ejemplos de componentes útiles que podríamos usar son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;componente para loguearnos mediante Google, Facebook, etc&lt;/li&gt;
&lt;li&gt;componente que me muestre el tiempo en una ciudad&lt;/li&gt;
&lt;li&gt;componente para hacer un modal&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hay infinidad de páginas donde podemos aprender más sobre WebComponents y cómo crear nuestro propio componente, como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/Web_Components&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Web Components | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.webcomponents.org/introduction&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introduction - webcomponents.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lenguajejs.com/webcomponents/introduccion/que-son-webcomponents/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;¿Qué son los WebComponents? - Javascript en español&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=8bcfgXePHnk&amp;amp;feature=em-subs_digest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Carlos Azaustre - Cómo crear un WebComponent de forma nativa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En resumen debemos crear un fichero donde definimos la clase de nuestro componente que debe heredar de &lt;code&gt;HTMLElement&lt;/code&gt;. Es conveniente que su nombre (y por tanto el de la etiqueta que usaremos para mostrarlo) tenga al menos 2 palabras para evitar que pueda entrar en conflicto con posibles futuras etiquetas de HTML (por ejemplo podría ser &amp;lt;social-login&amp;gt; o &amp;lt;my-weather&amp;gt;). En esta clase definiremos el HTML y el estilo que tendrá nuestro componente, así como su comportamiento.&lt;/p&gt;
&lt;p&gt;Actualmente no todos los navegadores ofrecen soporte para WebComponents. Esto junto al hecho de que frameworks como Vue, Angular o React ofrecen soluciones con sus propios componentes han hecho que el uso de los WebComponents no acabe de despegar. A pesar de ello hay lugares como &lt;a href=&quot;https://www.webcomponents.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebComponents.org&lt;/a&gt; donde podemos encontrar un catálogo de componentes hechos y que podemos usar en nuestras páginas.&lt;/p&gt;
&lt;p&gt;Por su parte Google ha desarrollado la librería Polymer para ayudarnos a crear nuestros propios componentes basados en WebComponents y los principales frameworks JS como Angular o Vue permiten crear sus propios componentes de forma muy sencilla, com veremos en el bloque de Vue.&lt;/p&gt;
&lt;h2 id=&quot;web-sockets&quot; tabindex=&quot;-1&quot;&gt;WebSockets&lt;/h2&gt;
&lt;p&gt;WebSockets es una tecnología basada en el protocolo &lt;strong&gt;ws&lt;/strong&gt; que permite establecer una conexión continua &lt;em&gt;full-duplex&lt;/em&gt; entre un cliente (puede ser un navegador) y un servidor. La conexión siempre la abre el cliente pero una vez abierta no se cierra por lo que el servidor puede comunicar en cualquier momento con el cliente y enviarle información.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let exampleSocket=new WebSocket(uri);
exampleWebsocjet.onopen=function(event) {
    console.log(&#39;Se ha establecido la conexión&#39;);
}
exampleSocket.onclose=function(event) {
    console.log(&#39;Se ha cerrado la conexión&#39;);
}
exampleSocket.onerror=function(event) {
    console.log(&#39;Se ha producido un error en la conexión&#39;);
}
exampleSocket.onmessage=function(event) {
    console.log(&#39;Se ha recibido el mensaje:&#39; + event.data);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El &lt;em&gt;uri&lt;/em&gt; de la conexión deberá usar el protocolo &lt;strong&gt;ws&lt;/strong&gt; (o wss), no http (ej. &amp;quot;ws://miservidor.com/socketserver&amp;quot;). El evento &lt;em&gt;open&lt;/em&gt; se produce cuando la propiedad &lt;em&gt;readyState&lt;/em&gt; cambia a OPEN y el &lt;em&gt;close&lt;/em&gt; cuando cambia su valor a CLOSED. Cada vez que se reciba algo del servidor se produce el evento &lt;em&gt;message&lt;/em&gt; y en la propiedad &lt;strong&gt;data&lt;/strong&gt; del mismo tendremos lo que se nos ha enviado.&lt;/p&gt;
&lt;p&gt;Para enviar algo al servidor usamos el mátodo &lt;strong&gt;.send&lt;/strong&gt;. Lo que le enviamos ex texto en formato utf-8 (o un objeto convertido a JSON):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;exampleSocket.send(&#39;Your message&#39;);
exampleSocket.send(JSON.stringify(msg));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos enviar (y recibir) imágenes (convertidas a ArrayBuffer) o ficheros como un objeto Blob.&lt;/p&gt;
&lt;p&gt;Para cerrar la conexión llamamos al método &lt;strong&gt;.close()&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;exampleSocket.close();
console.log(&#39;Conexión cerrada&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para programar la parte del servidor podemos usar librerías que nos ayudan como &lt;a href=&quot;https://github.com/ghedipunk/PHP-WebSockets&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;PHP-WebSockets&lt;/a&gt;, SocketIO, ...&lt;/p&gt;
&lt;p&gt;Las aplicaciones de esta tecnología son muchas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Juegos multjugador&lt;/li&gt;
&lt;li&gt;Aplicaciones de chat&lt;/li&gt;
&lt;li&gt;Actualización en tiempo real de cotizaciones de bolsa, recursos en uso o cualquier otra información&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos practicar con &lt;a href=&quot;https://www.websocket.org/echo.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;www.websocket.org&lt;/a&gt; que tiene un servidor websocket que devuelve lo que le enviamos. En esta web también tenemos ejemplos de aplicaciones.&lt;/p&gt;
&lt;p&gt;Saber más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/WebSockets-840092-dup/Writing_WebSocket_client_applications&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN: Escribiendo aplicaciones con WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://es.javascript.info/websocket&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;WebSocket - El Tutorial de JavaScript Moderno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=ppiAvvkvAz0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Carlos Azaustre: Crear chat con WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;web-workers&quot; tabindex=&quot;-1&quot;&gt;WebWorkers&lt;/h2&gt;
&lt;p&gt;En principio Javascript se ejecuta en un único hilo de ejecución pero esta tecnología permite ejecutar scripts en segundo plano en hilos separados que se ejecutan en segundo plano y se comunican con la tarea que los crea mediante el envío de mensajes.&lt;/p&gt;
&lt;p&gt;Cuando se está ejecutando un script la página no responde hasta que finaliza su ejecución. Si el script lo ejecuta un web worker la página será funcional (podemos interactuar con ella) ya que le ejecución del script se realiza en segundo plano en otro hilo.&lt;/p&gt;
&lt;p&gt;Hay 3 tipos de &lt;em&gt;WebWorkers&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dedicated Workers: Estos son los más comunes y se ejecutan en un hilo dedicado al contexto del script que los creó. No comparten recursos con otros scripts y son útiles para tareas intensivas que requieren mucho procesamiento.&lt;/li&gt;
&lt;li&gt;Shared Workers: Pueden ser compartidos por varios scripts ejecutándose en diferentes ventanas, pestañas o iframes dentro del mismo dominio. Son ideales para aplicaciones que necesitan coordinar tareas entre múltiples instancias de la misma aplicación web.&lt;/li&gt;
&lt;li&gt;Service Workers: Actúan como servidores proxy que se ejecutan en segundo plano y gestionan eventos de red como las peticiones HTTP. Son esenciales para crear aplicaciones web progresivas (PWAs) que funcionen sin conexión y mejoren la velocidad de carga.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis ver un ejemplo de cómo crear un WebWorker para generar números primos en el  &lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/webworkers.html#ejemplo-de-uso-dedicated-worker&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Saber más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/webworkers.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/Guide/Performance/Usando_web_workers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN - Usando WebWorkers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/html5_webworkers.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools - HTML5 Web Workers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;typescript&quot; tabindex=&quot;-1&quot;&gt;Typescript&lt;/h2&gt;
&lt;p&gt;TypeScript es un lenguaje de programación libre y de código abierto desarrollado y mantenido por Microsoft. Es un superconjunto de JavaScript, que esencialmente añade tipado estático y objetos basados en clases. TypeScript extiende la sintaxis de JavaScript, por tanto cualquier código JavaScript existente debería funcionar sin problemas.&lt;/p&gt;
&lt;p&gt;Puede que la principal diferencia entre ambos es que Typescript obliga al tipado de las variables (y por supuesto no permite cambios de tipo) lo que evita muchos errores a la hora de programar.&lt;/p&gt;
&lt;p&gt;Algunos frameworks y librerías, como Angular, utilizan TS en lugar de JS como lenguaje, que luego es transpilado a JS a la hora de generar la aplicación para producción.&lt;/p&gt;
&lt;p&gt;Quizá el inconveniente es que es algo más difícil que JS pero como está basado en él y la sintaxis es prácticamente igual el esfuerzo de aprender TS para un programador JS es muy pequeño.&lt;/p&gt;
&lt;p&gt;Saber más:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/TypeScript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia - Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Typescriptlang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;j-query&quot; tabindex=&quot;-1&quot;&gt;jQuery&lt;/h2&gt;
&lt;p&gt;Se trata de una biblioteca que nos facilita enormemente el trabajo con el DOM ya que tiene &amp;quot;atajos&amp;quot; para muchas instrucciones, por ejemplo para poner &#39;Hola mundo&#39; como contenido de un elemento cuya &lt;em&gt;id&lt;/em&gt; es &lt;code&gt;mensaje&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con Javascript sólo
document.getElementById(&#39;mensaje&#39;).textContent = &#39;Hola mundo&#39;

// Código con jQuery
$(&#39;#mensaje&#39;).text(&#39;Hola mundo&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otra ventaja de jQuery es que permite trabajar con conjuntos de elementos sin tener que hacer un &lt;code&gt;forEach&lt;/code&gt; (lo hace internamente). Por ejemplo para poner un escuchador que muestre un alert &#39;Párrafo pinchado&#39; al hacer click sobre cualquier párrafo de la clase &#39;importante&#39; tendríamos que hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con Javascript sólo
Array.from(document.querySelectorAll(&#39;p.importante&#39;))
.forEach(parrafo =&amp;gt; parrafo.addEventListener(&#39;click&#39;, () =&amp;gt; alert(&#39;Párrafo pinchado&#39;))

// Código con jQuery
$(&#39;p.importante&#39;).click(() =&amp;gt; alert(&#39;Párrafo pinchado&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vemos, básicamente nos permite hacer lo mismo pero escribiendo mucho menos código. También incluye funciones para cosas que en Javascript requieren varias líneas de código como animaciones o Ajax. Por ejemplo una pertición para mostrar en una tabla con id &lt;em&gt;posts&lt;/em&gt; todos los posts del servidor &lt;em&gt;jsonplaceholder&lt;/em&gt; tendremos que hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con Javascript sólo
const SERVER = &#39;https://jsonplaceholder.typicode.com&#39;;

function getPosts() {   // Función que pide los datos al servidor
  return new Promise(function(resolve, reject) {
    let peticion = new XMLHttpRequest();
    peticion.open(&#39;GET&#39;, SERVER + &#39;/posts&#39;);
    peticion.send();
    peticion.addEventListener(&#39;load&#39;, function() {
      if (peticion.status === 200) {
        resolve(JSON.parse(peticion.responseText));
      } else {
        reject(&amp;quot;Error &amp;quot; + this.status + &amp;quot; (&amp;quot; + this.statusText + &amp;quot;) en la petición&amp;quot;);
      }
    })
    peticion.addEventListener(&#39;error&#39;, () =&amp;gt; reject(&#39;Error en la petición HTTP&#39;));
  })
}

function renderPosts() {   // Función que los muestra en la página
  getPosts(idUser)
    .then((posts) =&amp;gt; {
      document.querySelector(&#39;#posts tbody&#39;).innerHTML = &#39;&#39;; // borramos su contenido
      posts.forEach((post) =&amp;gt; {
        const newPost = document.createElement(&#39;tr&#39;);
        newPost.innerHTML = `
          &amp;lt;td&amp;gt;${post.userId}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.id}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.title}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.body}&amp;lt;/td&amp;gt;`;
        document.querySelector(&#39;#posts tbody&#39;).appendChild(newPost);
      })
    })
    .catch((error) =&amp;gt; console.error(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando jQuery es mucho más sencillo. En primer lugar no hay que hacer la función que hace la petición al servidor porque hay uns función que hace eso: &lt;code&gt;$.ajax&lt;/code&gt; y sus derivadas &lt;code&gt;$.get&lt;/code&gt;, &lt;code&gt;$.post&lt;/code&gt;, ... Además la parte de pintar los datos es también mucho más corta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Código con jquery
const SERVER = &#39;https://jsonplaceholder.typicode.com&#39;;

function renderPosts() {   // Función que los muestra en la página
  $.get(SERVER + &#39;/posts&#39;)
    .done((posts) =&amp;gt; {
      $(&#39;#posts tbody&#39;).text(&#39;&#39;);    // borramos el contenido de la tabla
      posts.forEach(post =&amp;gt; $(&#39;#posts tbody&#39;).append(
        `&amp;lt;tr&amp;gt;
          &amp;lt;td&amp;gt;${post.userId}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.id}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.title}&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;${post.body}&amp;lt;/td&amp;gt;
        &amp;lt;/tr&amp;gt;`
      ))
    })
    .fail((error) =&amp;gt; console.error(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Encontraréis infinidad de tutoriales por Internet donde aprender &lt;em&gt;jQuery&lt;/em&gt;, por ejemplo unos vídeos de &lt;a href=&quot;https://didacticode.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Didacticode&lt;/a&gt; que podéis encontrar en &lt;a href=&quot;https://didacticode.com/curso/curso-de-jquery/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://didacticode.com/curso/curso-de-jquery/&lt;/a&gt; (tenéis que registraros para tener acceso a muchos cursos de Javascript y &amp;quot;derivados&amp;quot; pero vale la pena) o directamente en su &lt;a href=&quot;https://www.youtube.com/channel/UCPbFiM-HA4lwJH12JXdXxDA&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;canal de Youtube&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/11-mas/" >
        </entry>
        <entry>
            <title>
                10-apis
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/10-apis/</id>
            <content type="html">
                &lt;h1 id=&quot;ap-is-html-5-drag-and-drop-local-storage-geolocalizacion-api-de-google-maps&quot; tabindex=&quot;-1&quot;&gt;APIs HTML5: Drag And Drop. Local Storage. Geolocalización. API de Google Maps&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#apis-html5-drag-and-drop-local-storage-geolocalizaci%C3%B3n-api-de-google-maps&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;APIs HTML5: Drag And Drop. Local Storage. Geolocalización. API de Google Maps&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#html-drag-and-drop-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;HTML Drag And Drop API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#almacenamiento-en-el-cliente-api-storage&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Almacenamiento en el cliente: API Storage&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a-tener-en-cuenta&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;A tener en cuenta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#storage-vs-cookies&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Storage vs cookies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cookies&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cookies&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#geolocation-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Geolocation API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#google-maps-api&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google Maps API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema varemos diferentes APIs incluidas en HTML5 (como la de Local Storage) y otras que se han hecho muy populares como la de Google Maps.&lt;/p&gt;
&lt;p&gt;HTML5 incluye un buen número de APIs que facilitan el trabajo con cosas complejas, como&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;APIs para manejo de audio y vídeo&lt;/li&gt;
&lt;li&gt;APIs para manejo de formularios&lt;/li&gt;
&lt;li&gt;API de dibujo canvas (en el módulo de DIW)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Aquí comentaremos Storage, Drag&amp;amp;Drop, Geolocation, File Access, Communication, Web Workers, History y Offline&lt;/p&gt;
&lt;h2 id=&quot;html-drag-and-drop-api&quot; tabindex=&quot;-1&quot;&gt;HTML Drag And Drop API&lt;/h2&gt;
&lt;p&gt;Con HTML5 es muy sencillo arrastrar y soltar elementos en una página web. Podemos arrastrar y soltar cualquier nodo DOM (una imagen, un archivo, enlaces, texto seleccionado, ...). Para ello sólo es necesario que ese elemento tenga el atributo &lt;code&gt;dragable=&amp;quot;true&amp;quot;&lt;/code&gt;. Si le ponemos &lt;code&gt;false&lt;/code&gt; no se podrá arrastrar y si no definimos el atributo podrá o no arrastrarse según el valor predeterminado del navegador (en la mayoría son &lt;em&gt;dragables&lt;/em&gt; las imágenes, los links y las selecciones de texto).&lt;/p&gt;
&lt;p&gt;Al arrastrar y soltar intervienen 2 elementos diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el elemento que estamos arrastrando&lt;/li&gt;
&lt;li&gt;el elemento sobre el cual lo soltamos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para poder realizar la operación &lt;em&gt;event&lt;/em&gt; tiene una propiedad llamada &lt;strong&gt;dataTransfer&lt;/strong&gt; que es un objeto en el que almacenamos qué elemento estamos arrastrando (o cualquier otra cosa que queramos) y así cuando se suelte sobre el elemento destino éste último pueda saber quién se le ha soltado.&lt;/p&gt;
&lt;p&gt;Los pasos para arrastrar y soltar un elemento son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El elemento debe ser &lt;strong&gt;&lt;em&gt;draggable&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Capturamos el evento &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;dragstart&lt;/strong&gt;&lt;/a&gt;. Este evento se produce sobre un elemento cuando comenzamos a arrastrarlo. Deberemos almacenar en el &lt;em&gt;dataTransfer&lt;/em&gt; quién está siendo arrastrado (si no guardamos nada se guarda automáticamente su &lt;code&gt;src&lt;/code&gt; si es una imagen o su &lt;code&gt;href&lt;/code&gt; si es un enlace). Indicaremos el tipo del dato que estamos almacenando (texto plano, HTML, fichero, etc) y su valor. Ej.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img id=&amp;quot;imgGoogle&amp;quot; src=&amp;quot;https://upload.wikimedia.org/wikipedia/commons/thumb/5/51/Google.png/320px-Google.png&amp;quot;&amp;gt;
&amp;lt;div id=&amp;quot;zonaDrop1&amp;quot; class=&amp;quot;drop&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Puedes soltar aquí la imagen&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;zonaDrop2&amp;quot; class=&amp;quot;drop&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;Y también aquí&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;imgGoogle&#39;).addEventListener(&#39;dragstart&#39;, (event) =&amp;gt; {
    event.dataTransfer.setData(&#39;text/plain&#39;, event.target.id);  // Estamos guardando el texto &#39;imgGoogle&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Capturamos el evento &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;dragover&lt;/strong&gt;&lt;/a&gt;. Este evento se produce cada pocas décimas de segundo sobre elemento sobre el que se está arrastrando algo. Por defecto no se puede soltar un elemento en ningún sitio así que capturamos este evento para evitar que el navegador haga la acción por defecto e impida que se suelte lo que estamos arrastrando. Ej.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;zonaDrop1&#39;).addEventListener(&#39;dragover&#39;, (event) =&amp;gt; {
    event.preventDefault();
})
document.getElementById(&#39;zonaDrop2&#39;).addEventListener(&#39;dragover&#39;, (event) =&amp;gt; {
    event.preventDefault();
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;Capturamos el evento &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;strong&gt;drop&lt;/strong&gt;&lt;/a&gt;. Este evento se produce sobre elemento sobre el que se suelta lo que estábamos arrastrando. Lo que haremos es evitar el comportamiento por defecto del navegador (que en caso de imágenes o enlaces es cargarlos en la página), obtener quién se ha soltado a partir del objeto &lt;em&gt;dataTransfer&lt;/em&gt; y realizar lo que queramos, que normalmente será añadir el objeto arrastrado como hijo del objeto sobre el que se ha hecho el &lt;em&gt;drop&lt;/em&gt;. Ej.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;zonaDrop1&#39;).addEventListener(&#39;drop&#39;, (event) =&amp;gt; {
    event.preventDefault();
    const data=event.dataTransfer.getData(&amp;quot;text/plain&amp;quot;);      // Obtenemos ìmgGoogle&#39;
    event.target.appendChild(document.getElementById(data));
})
document.getElementById(&#39;zonaDrop2&#39;).addEventListener(&#39;drop&#39;, (event) =&amp;gt; {
    event.preventDefault();
    const data=event.dataTransfer.getData(&amp;quot;text/plain&amp;quot;);      // Obtenemos ìmgGoogle&#39;
    event.target.appendChild(document.getElementById(data));
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver el funcionamiento de este ejemplo:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/bn495ygj/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;NOTA: si hacemos &lt;em&gt;draggable&lt;/em&gt; un elemento, por ejemplo un párrafo, ya no se puede seleccionar con el ratón ya que al pinchar y arrastrar se mueve, no se selecciona. Para poder seleccionarlo debemos pinchar y arrastrar el ratón con las teclas &lt;em&gt;Ctrl+Alt&lt;/em&gt; pulsadas o hacerlo con el teclado. Ejemplo:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/dgyvLtho/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Podemos obtener más información de esta API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: mira y modifica el ejemplo de &lt;a href=&quot;https://www.w3schools.com/html/html5_draganddrop.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt; para entender bien el funcionamiento del Drag&amp;amp;Drop (ten en cuenta que en vez de &lt;code&gt;.addEventListener()&lt;/code&gt; las llamadas a los escuchadores están puestas como atributos del HTML pero el funcionamiento es el mismo).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;almacenamiento-en-el-cliente-api-storage&quot; tabindex=&quot;-1&quot;&gt;Almacenamiento en el cliente: API Storage&lt;/h2&gt;
&lt;p&gt;Antes de HTML5 la única manera que tenían los programadores de guardar algo en el navegador del cliente (como sus preferencias, su idioma predeterminado para nuestra web, etc) era utilizando &lt;em&gt;cookies&lt;/em&gt;. Las cookies tienen muchas limitaciones y es engorroso trabajar con ellas.&lt;/p&gt;
&lt;p&gt;HTML5 incorpora la &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API de Storage&lt;/a&gt; para subsanar esto. Además existen otros métodos de almacenamiento en el cliente más avanzados como &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/IndexedDB_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;IndexedDB&lt;/a&gt; (es un estándar del W3C pero aún con poco soporte entre los navegadores).&lt;/p&gt;
&lt;p&gt;El funcionamiento de la API Storage es muy sencillo: dentro del objeto &lt;em&gt;window&lt;/em&gt; tendremos los objetos &lt;strong&gt;localStorage&lt;/strong&gt; y &lt;strong&gt;sessionStorage&lt;/strong&gt; donde podremos almacenar información en el espacio de almacenamiento local (5 o 10 MB por sitio web según el navegador, que es mucho más de lo que teníamos con las cookies). La principal diferencia entre ellos es que la información almacenada en &lt;em&gt;localStorage&lt;/em&gt; nunca expira, permanece allí hasta que la borremos (nosotros o el usuario) mientras que la almacenada en &lt;em&gt;sessionStorage&lt;/em&gt; se elimina automáticamente al cerrar la sesión el usuario.&lt;/p&gt;
&lt;p&gt;Sólo los navegadores muy antiguos (Internet Explorer 7 y anteriores) no soportan esta característica. Puedo saber si el navegador soporta o no esta API simplemente mirando su &lt;code&gt;typeof&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (typeof(Storage) === &#39;undefined&#39;)    // NO está soportado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tanto &lt;em&gt;localStorage&lt;/em&gt; como &lt;em&gt;sessionStorage&lt;/em&gt; son como un objeto global al que tengo acceso desde el código. Lo que puedo hacer con ellos es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Guardar&lt;/strong&gt; un dato: &lt;code&gt;localStorage.setItem(&#39;dato&#39;, &#39;valor&#39;)&lt;/code&gt; o también &lt;code&gt;localStorage.dato = &#39;valor&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Recuperar&lt;/strong&gt; un dato: &lt;code&gt;let miDato=localStorage.getItem(&#39;dato&#39;)&lt;/code&gt; o también &lt;code&gt;let miDato = localStorage.dato&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Borrar&lt;/strong&gt; datos: &lt;code&gt;localStorage.removeItem(&#39;dato&#39;)&lt;/code&gt; para borrar &#39;dato&#39;. Si quiero borrar TODO lo que tengo &lt;code&gt;localStorage.clear()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Saber &lt;strong&gt;cuántos&lt;/strong&gt; datos tenemos: &lt;code&gt;localStorage.length&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sólo podemos guardar objetos primitivos (cadenas, números, ...) por lo que si queremos guardar un objeto o un array hay que convertirlo a una cadena JSON con &lt;code&gt;localStorage.setItem(&#39;dato&#39;, JSON.stringify(&#39;objeto&#39;))&lt;/code&gt;. Para recuperar el objeto haremos &lt;code&gt;let miObjeto = JSON.parse(localStorage.getItem(&#39;dato&#39;))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cada vez que cambia la información que tenemos en nuestro localStorage se produce un evento &lt;strong&gt;storage&lt;/strong&gt;. Si, por ejemplo, queremos que una ventana actualice su información si otra cambia algún dato del storage haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.addEventListener(&amp;quot;storage&amp;quot;, actualizaDatos);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y la función &#39;actualizaDatos&#39; podrá leer de nuevo lo que hay y actuar en consecuencia.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: comprueba qué tienes almacenado en el localStorage y el sessionStorage de tu navegador. Guarda y recupera algunas variables. Luego cierra el navegador y vuelve a abrir la página. ¿Están las variables guardadas en localStorage? ¿Y las de sessionStorage?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Puedes ver un ejemplo &lt;a href=&quot;https://www.youtube.com/watch?v=ASQQUSFtr8g&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=65&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;en este vídeo&lt;/a&gt; de cómo almacenar en el &lt;em&gt;Storage&lt;/em&gt; datos del usuario.&lt;/p&gt;
&lt;h3 id=&quot;a-tener-en-cuenta&quot; tabindex=&quot;-1&quot;&gt;A tener en cuenta&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;localStorage&lt;/em&gt;, &lt;em&gt;sessionStorage&lt;/em&gt; y &lt;em&gt;cookies&lt;/em&gt; almacenan información en un navegador específico del cliente, y por tanto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No podemos asegurar que permanece ahí&lt;/li&gt;
&lt;li&gt;Puede ser borrada/manipulada&lt;/li&gt;
&lt;li&gt;Puede ser leída, por lo que NO es adecuada para almacenar información sensible pero sí para preferencias del usuario, marcadores de juegos, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podríamos usar &lt;em&gt;localStorage&lt;/em&gt; para almacenar localmente los datos con los que trabaja una aplicación web. Así conseguiríamos minimizan los accesos al servidor y que la velocidad de la aplicación sea mucho mayor al trabajar con datos locales. Pero periódicamente debemos sincronizar la información con el servidor.&lt;/p&gt;
&lt;h3 id=&quot;storage-vs-cookies&quot; tabindex=&quot;-1&quot;&gt;Storage vs cookies&lt;/h3&gt;
&lt;p&gt;Ventajas de localStorage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 o 10 MB de almacenamiento frente a 4 KB de las cookies&lt;/li&gt;
&lt;li&gt;Todas las cookies del dominio se envían al servidor con cada petición al mismo lo que aumenta el tráfico innecesariamente&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ventajas de las cookies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Soportadas por navegadores muy antiguos&lt;/li&gt;
&lt;li&gt;Las cookies ofrecen algo de protección frente a &lt;em&gt;XSS&lt;/em&gt; (&lt;em&gt;Cross-Site Scripting&lt;/em&gt;) y &lt;em&gt;Script injection&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cookies&quot; tabindex=&quot;-1&quot;&gt;Cookies&lt;/h3&gt;
&lt;p&gt;Son pequeños ficheros de texto y tienen las siguientes limitaciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Máximo 300 cookies, si hay más se borran las antiguas&lt;/li&gt;
&lt;li&gt;Máximo 4 KB por cookie, si nos pasamos se truncará&lt;/li&gt;
&lt;li&gt;Máximo 20 cookies por dominio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada cookie almacena los siguientes datos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nombre de la cookie (obligatorio)&lt;/li&gt;
&lt;li&gt;Valor de la misma&lt;/li&gt;
&lt;li&gt;&lt;em&gt;expires&lt;/em&gt;: timestamp en que se borrará (si no pone nada se borra al salir del dominio)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;max-age&lt;/em&gt;: en lugar de &lt;em&gt;expires&lt;/em&gt; podemos indicar aquí los segundos que durará la cookie antes de expirar&lt;/li&gt;
&lt;li&gt;&lt;em&gt;path&lt;/em&gt;: ruta desde dónde es accesible (/: todo el dominio, /xxx: esa carpeta y subcarpetas). Si no se pone nada sólo lo será desde la carpeta actual&lt;/li&gt;
&lt;li&gt;&lt;em&gt;domain&lt;/em&gt;: dominio desde el que es accesible. Si no ponemos nada lo será desde este dominio y sus subdominios&lt;/li&gt;
&lt;li&gt;&lt;em&gt;secure&lt;/em&gt;: si aparece indica que sólo se enviará esta cookie con https&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un ejemplo de cookie sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 UTC;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Se puede acceder a las cookies desde &lt;strong&gt;document.cookie&lt;/strong&gt; que es una cadena con las cookies de nuestras páginas. Para trabajar con ellas conviene que creemos funciones para guardar, leer o borrar cookies, por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear una nueva cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function setCookie(cname, cvalue, cexpires, cpath, cdomain, csecure) {
  document.cookie = cname + &#39;=&#39; + cvalue + 
    (cexpires?&#39;;expires=&#39;+cexpires.toUTCString():&#39;&#39;) + 
    (cpath?&#39;;path=&#39;+cpath:&#39;&#39;) + 
    (cdomain?&#39;;domain=&#39;+cdomain:&#39;&#39;) + 
    (csecure?&#39;;secure&#39;:&#39;&#39;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Leer una cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getCookie(cname) {
    if(document.cookie.length &amp;gt; 0){
        start = document.cookie.indexOf(cname + &#39;=&#39;)
        if (start != -1) {   // Existe la cookie, busquemos dónde acaba su valor
            //El inicio de la cookie, el nombre de la cookie mas les simbolo &#39;=&#39;
            start = start + nombre.length + 1
            //Buscamos el final de la cookie (es el simbolo &#39;;&#39;)
            end = document.cookie.indexOf(&#39;;&#39;, start + cname.length + 1)
            if (end === -1) {   // si no encuentra el ; es que es la última cookie
                end = document.cookie.length;
            }
            return document.cookie.substring(start + cname.length + 1, end)
        }
    }
    return &#39;&#39;   // Si estamos aquí es que no hemos encontrado la cookie
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Borrar una cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function delCookie(cname) {
    return document.cookie = cname + &#39;=;expires=Thu, 01 Jan 1970 00:00:01 GMT;&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver en &lt;a href=&quot;https://www.youtube.com/watch?v=k7pteU48rpc&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=62&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este vídeo&lt;/a&gt; un ejemplo de cómo trabajar con cookies, aunque como ya hemos dicho lo recomendable es trabajar con &lt;em&gt;Storage&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&quot;geolocation-api&quot; tabindex=&quot;-1&quot;&gt;Geolocation API&lt;/h2&gt;
&lt;p&gt;Esta API permite a la aplicación web acceder a la localización del usuario si éste da su permiso. Muchos navegadores sólo permiten usarlo en páginas seguras (https).&lt;/p&gt;
&lt;p&gt;Podemos acceder a esta API mediante el objeto &lt;strong&gt;geolocation&lt;/strong&gt; de &lt;em&gt;navigator&lt;/em&gt;. Para saber si nuestro navegador soporta o no la API podemos hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;if (geolocation in navigator)   // devuelve true si está soportado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obtener la posición este objeto proporciona el método &lt;strong&gt;navigator.geolocation.getCurrentPosition()&lt;/strong&gt; que hace una petición &lt;strong&gt;asíncrona&lt;/strong&gt;. Cuando se reciba la posición se ejecutará la función &lt;em&gt;callback&lt;/em&gt; que pasemos como parámetro y que recibirá las coordenadas de la localización. Podemos pasar otra como segundo parámetro que se ejecutará si se produce algú error y que recibirá un objeto con la propiedad &lt;em&gt;code&lt;/em&gt; que indica el error producido. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;navigator.geolocation.getCurrentPosition(
  (position) =&amp;gt; {
    pinta_posicion(position.coords.latitude, position.coords.longitude)
  },
  (error) =&amp;gt; {
    switch(error.code) {
      case error.PERMISSION_DENIED: // El usuario no autoriza al navegador a acceder a la localización
        msg = &#39;El usuario ha denegado la petición de geolocalización&#39;
        break
      case error.POSITION_UNAVAILABLE: // No se puede obtener la localización
        msg = &#39;La información de localización no está disponible.&#39;
        break
      case error.TIMEOUT: // Ha expirado el tiempo para obtener la localización
        msg = &#39;Ha expirado el tiempo para obtener la localización&#39;
        break
      case error.UNKNOWN_ERROR:
        msg = &#39;Se ha producido un error desconocido.&#39;
        break
    }
    muestra_error(msg)
  }
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos ir obteniendo continuamente la posición podemos usar el método  &lt;strong&gt;.watchPosition()&lt;/strong&gt; que tiene los mismos parámetros y funciona igual pero se ejecuta repetidamente. Este método devuelve un identificador para que lo podemos detener cuando queremos con &lt;strong&gt;.clearWatch(ident)&lt;/strong&gt;. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const watchIdent = navigator.geolocation.watchPosition(
  (position) =&amp;gt; pinta_posicion(position.coords.latitude, position.coords.longitude),
  (error) =&amp;gt; muestra_error(error)
)
...
// Cuando queremos dejar de obtener la posición haremos
navigator.geolocation.clearWatch(watchIdent)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las principales propiedades del objeto de localización (algunas sólo estarán disponible cuando usemos un GPS) son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;coords.latitude: latitud&lt;/li&gt;
&lt;li&gt;coords.longitude: longitud&lt;/li&gt;
&lt;li&gt;coords.accuracy: precisión (en metros)&lt;/li&gt;
&lt;li&gt;coords.altitude: altitud (en metros, sobre el nivel del mar)&lt;/li&gt;
&lt;li&gt;coords.altitudeAccuracy: precisión de la altitud&lt;/li&gt;
&lt;li&gt;coords.heading: orientación (en grados)&lt;/li&gt;
&lt;li&gt;coords.speed: velocidad (en metros/segundo)&lt;/li&gt;
&lt;li&gt;timestamp: tiempo de respuesta UNIX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos pasarle como tercer parámetro al método getCurrentPosition un objeto JSON con una o más de estas propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;enableHighAccuracy: true/false que indica si el dispositivo debe usar todo lo posible para obtener la posición con mayor precisión (por defecto false porque consume más batería y tiempo)&lt;/li&gt;
&lt;li&gt;timeout: milisegundos a esperar para obtener la posición antes de lanzar un error (por defecto es 0, espera indefinidamente)&lt;/li&gt;
&lt;li&gt;maximumAge: milisegundos que guarda la última posición en caché. Si se solicita una nueva posición antes de expirar el&lt;br /&gt;
tiempo, el navegador devuelve directamente el dato almacenado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos obtener más información de esta API en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; y ver y modificar ejemplos en &lt;a href=&quot;http://www.w3schools.com/html/html5_geolocation.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt; y muchas otras páginas. i&lt;/p&gt;
&lt;h2 id=&quot;google-maps-api&quot; tabindex=&quot;-1&quot;&gt;Google Maps API&lt;/h2&gt;
&lt;p&gt;Para poder utilizar la API en primer lugar debemos &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/get-api-key&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;obtener una API KEY&lt;/a&gt; de Google.&lt;/p&gt;
&lt;p&gt;Una vez hecho para incluir un mapa en nuestra web debemos cargar la librería para lo que incluiremos en nuestro código el  script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;&amp;lt;script async defer
  src=&amp;quot;https://maps.googleapis.com/maps/api/js?key=ESCRIBE_AQUI_TU_API_KEY&amp;amp;callback=initMap&amp;quot;&amp;gt;
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(el parámetro &lt;em&gt;callback&lt;/em&gt; será el encargado de llamar a la función &lt;em&gt;initMap()&lt;/em&gt; que inicie el mapa)&lt;/p&gt;
&lt;p&gt;Ahora incluir un mapa es tán sencillo como crear un nuevo objeto de tipo &lt;em&gt;Map&lt;/em&gt; que recibe el elemento DOM donde se pintará (un div normalmente) y un objeto con los parámetros del mapa (como mínimo su centro y el zoom):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let map
function initMap() {
  map = new google.maps.Map(document.getElementById(&#39;map&#39;), {
    center: { lat: 38.6909085, lng: -0.4963000000000193 },
    zoom: 12
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Por su parte añadir un marcador es igual de simple. Creamos una instancia de la clase &lt;em&gt;Marker&lt;/em&gt; a la que le pasamos al menos la posición, el mapa en que se creará y un título para el marcador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let marker = new google.maps.Marker({
  position: { lat: 38.6909085, lng: -0.4963000000000193 },
  map: map,
  title: &#39;CIP FP Batoi&#39;
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí tenéis el ejemplo anterior:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/pqzhd2vm/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Podemos obtener más información de esta API en &lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/tutorial&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google Maps Plataform&lt;/a&gt;, en el tutorial de &lt;a href=&quot;https://www.w3schools.com/graphics/google_maps_intro.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt; y en muchas otras páginas.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/10-apis/" >
        </entry>
        <entry>
            <title>
                09-ajax
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/09-ajax/</id>
            <content type="html">
                &lt;h1 id=&quot;ajax&quot; tabindex=&quot;-1&quot;&gt;Ajax&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ajax&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ajax&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos-http&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos HTTP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#json-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Json Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#rest-client&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;REST client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-objeto-xmlhttprequest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El objeto XMLHttpRequest&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-xmlhttprequest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de XMLHttpRequest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplos-de-env%C3%ADo-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplos de envío de datos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enviar-datos-al-servidor-en-formato-json&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enviar datos al servidor en formato JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enviar-datos-al-servidor-en-formato-uriencoded&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enviar datos al servidor en formato URIEncoded&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#enviar-ficheros-al-servidor-con-formdata&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Enviar ficheros al servidor con FormData&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#callbakcs-promesas-y-asyncawait&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Callbakcs, Promesas y Async/Await&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#si-ajax-fuera-s%C3%ADncrono&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Si Ajax fuera síncrono...&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-mala&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución mala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#algo-mejor-funciones-callback&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Algo mejor: Funciones &lt;em&gt;callback&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#soluci%C3%B3n-buena-promesas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Solución buena: Promesas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#la-mejor-soluci%C3%B3n-usar-asyncawait&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;La mejor solución: usar &lt;em&gt;Async/Await&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-y-m%C3%A9todos-de-la-respuesta-de-fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades y métodos de la respuesta de &lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#gesti%C3%B3n-de-errores-con-fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Gestión de errores con &lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otros-m%C3%A9todos-de-petici%C3%B3n-con-fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otros métodos de petición con &lt;em&gt;fetch&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#hacer-varias-peticiones-simult%C3%A1neamente-promiseall&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hacer varias peticiones simultáneamente. Promise.all&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-bien-el-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar bien el código&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-fichero-env&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#distintas-peticiones-distintos-ficheros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Distintas peticiones, distintos ficheros&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#single-page-application&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Single Page Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#resumen-de-llamadas-as%C3%ADncronas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Resumen de llamadas asíncronas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#cors&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CORS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;AJAX es el acrónimo de &lt;strong&gt;&lt;em&gt;Asynchronous Javascript And XML&lt;/em&gt;&lt;/strong&gt; (Javascript asíncrono y XML) y es lo que usamos para hacer peticiones asíncronas al servidor desde Javascript. Cuando hacemos una petición al servidor no nos responde inmediatamente (la petición tiene que llegar al servidor, procesarse allí y enviarse la respuesta que llegará al cliente).&lt;/p&gt;
&lt;p&gt;Lo que significa &lt;strong&gt;asíncrono&lt;/strong&gt; es que la página no permanecerá bloqueada esperando esa respuesta sino que continuará ejecutando su código e interactuando con el usuario, y en el momento en que llegue la respuesta del servidor se ejecutará la función que indicamos al hacer la llamada Ajax. Respecto a &lt;strong&gt;XML&lt;/strong&gt;, es el formato en que se intercambia la información entre el servidor y el cliente, aunque actualmente el formato más usado es &lt;strong&gt;JSON&lt;/strong&gt; que es más simple y legible.&lt;/p&gt;
&lt;p&gt;Básicamente Ajax nos permite poder mostrar nuevos datos enviados por el servidor sin tener que recargar la página, que continuará disponible mientras se reciben y procesan los datos enviados por el servidor en segundo plano.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;By DanielSHaischt, via Wikimedia Commons [CC BY-SA 3.0 
 (https://creativecommons.org/licenses/by-sa/3.0
)], via Wikimedia Commons&quot; href=&quot;https://commons.wikimedia.org/wiki/File:Ajax-vergleich-en.svg&quot;&gt;&lt;img width=&quot;512&quot; alt=&quot;Ajax-vergleich-en&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/0/0b/Ajax-vergleich-en.svg/512px-Ajax-vergleich-en.svg.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sin Ajax cada vez que necesitamos nuevos datos del servidor la página deja de estar disponible para el usuario hasta que se recarga con lo que envía el servidor. Con Ajax la página está siempre disponible para el usuario y simplemente se modifica (cambiando el DOM) cuando llegan los datos del servidor:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://uniwebsidad.com/static/libros/imagenes/ajax/f0103.gif&quot; alt=&quot;Uniwebsidad: Introducción a Ajax&quot; /&gt;&lt;br /&gt;
&lt;em&gt;Fuente Uniwebsidad&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;metodos-http&quot; tabindex=&quot;-1&quot;&gt;Métodos HTTP&lt;/h3&gt;
&lt;p&gt;Las peticiones Ajax usan el protocolo HTTP (el mismo que utiliza el navegador para cargar una página). Este protocolo envía al servidor unas cabeceras HTTP (con información como el &lt;em&gt;userAgent&lt;/em&gt; del navegador, el idioma, etc), el tipo de petición y, opcionalmente, datos o parámetros (por ejemplo en la petición que procesa un formulario se envían los datos del mismo).&lt;/p&gt;
&lt;p&gt;Hay diferentes tipos de petición que podemos hacer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;: suele usarse para obtener datos sin modificar nada (equivale a un SELECT en SQL). Si enviamos datos (ej. la ID del registro a obtener) suelen ir en la url de la petición (formato URIEncoded). Ej.: locahost/users/3, &lt;a href=&quot;https://jsonplaceholder.typicode.com/users&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://jsonplaceholder.typicode.com/users&lt;/a&gt; o &lt;a href=&quot;https://pedroporo.github.io/www.google.es?search=js&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;www.google.es?search=js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;POST&lt;/strong&gt;: suele usarse para añadir un dato en el servidor (equivalente a un INSERT). Los datos enviados van en el cuerpo de la petición HTTP (igual que sucede al enviar desde el navegador un formulario por POST)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT&lt;/strong&gt;: es similar al &lt;em&gt;POST&lt;/em&gt; pero suele usarse para actualizar datos del servidor (como un UPDATE de SQL). Los datos se envían en el cuerpo de la petición (como en el POST) y la información para identificar el objeto a modificar en la url (como en el GET). El servidor hará un UPDATE sustituyendo el objeto actual por el que se le pasa como parámetro&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: es similar al PUT pero la diferencia es que en el PUT hay que pasar todos los campos del objeto a modificar (los campos no pasados se eliminan del objeto) mientras que en el PATCH sólo se pasan los campos que se quieren cambiar y en resto permanecen como están&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DELETE&lt;/strong&gt;: se usa para eliminar un dato del servidor (como un DELETE de SQL). La información para identificar el objeto a eliminar se envía en la url (como en el GET)&lt;/li&gt;
&lt;li&gt;existen otros tipos que no veremos aquí (como &lt;em&gt;HEAD&lt;/em&gt;, &lt;em&gt;PATCH&lt;/em&gt;, etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El servidor acepta la petición, la procesa y le envía una respuesta al cliente con el recurso solicitado y además unas cabeceras de respuesta (con el tipo de contenido enviado, el idioma, etc) y el código de estado. Los códigos de estado más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2xx: son peticiones procesadas correctamente. Las más usuales son 200 (&lt;em&gt;ok&lt;/em&gt;) o 201 (&lt;em&gt;created&lt;/em&gt;, como respuesta a una petición POST satisfactoria)&lt;/li&gt;
&lt;li&gt;3xx: son códigos de redirección que indican que la petición se redirecciona a otro recurso del servidor, como 301 (el recurso se ha movido permanentemente a otra URL) o 304 (el recurso no ha cambiado desde la última petición por lo que se puede recuperar desde la caché)&lt;/li&gt;
&lt;li&gt;4xx: indican un error por parte del cliente, como 404 (&lt;em&gt;Not found&lt;/em&gt;, no existe el recurso solicitado) o 401 (&lt;em&gt;Not authorized&lt;/em&gt;, el cliente no está autorizado a acceder al recurso solicitado)&lt;/li&gt;
&lt;li&gt;5xx: indican un error por parte del servidor, como 500 (error interno del servidor) o 504 (&lt;em&gt;timeout&lt;/em&gt;, el servidor no responde).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En cuanto a la información enviada por el servidor al cliente normalmente serán datos en formato &lt;strong&gt;JSON&lt;/strong&gt; o XML (cada vez menos usado) que el cliente procesará y mostrará en la página al usuario. También podría ser HTML, texto plano, ...&lt;/p&gt;
&lt;p&gt;El formato &lt;em&gt;JSON&lt;/em&gt; es una forma de convertir un objeto Javascript en una cadena de texto para poderla enviar, por ejemplo el objeto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumno = {
  id: 5,
  nombre: Marta,
  apellidos: Pérez Rodríguez
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se transformaría en la cadena de texto&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;{ &amp;quot;id&amp;quot;: 5, &amp;quot;nombre&amp;quot;: &amp;quot;Marta&amp;quot;, &amp;quot;apellidos&amp;quot;: &amp;quot;Pérez Rodríguez&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;y el array&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnos = [
  {
    id: 5,
    nombre: &amp;quot;Marta&amp;quot;,
    apellidos: &amp;quot;Pérez Rodríguez&amp;quot;
  },
  {
    id: 7,
    nombre: &amp;quot;Joan&amp;quot;,
    apellidos: &amp;quot;Reig Peris&amp;quot;
  },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;en la cadena:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;[{ &amp;quot;id&amp;quot;: 5, &amp;quot;nombre&amp;quot;: Marta, &amp;quot;apellidos&amp;quot;: Pérez Rodríguez }, { &amp;quot;id&amp;quot;: 7, &amp;quot;nombre&amp;quot;: &amp;quot;Joan&amp;quot;, &amp;quot;apellidos&amp;quot;: &amp;quot;Reig Peris&amp;quot; }]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para convertir objetos en cadenas de texto &lt;em&gt;JSON&lt;/em&gt; y viceversa Javascript proporciona 2 funciones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;JSON.stringify(&lt;em&gt;objeto&lt;/em&gt;)&lt;/strong&gt;: recibe un objeto JS y devuelve la cadena de texto correspondiente. Ej.: &lt;code&gt;const cadenaAlumnos = JSON.stringify(alumnos)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JSON.parse(&lt;em&gt;cadena&lt;/em&gt;)&lt;/strong&gt;: realiza el proceso inverso, convirtiendo una cadena de texto en un objeto. Ej.: &lt;code&gt;const alumnos = JSON.parse(cadenaAlumnos)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Vamos a realizar diferentes peticions HTTP a la API &lt;a href=&quot;https://jsonplaceholder.typicode.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://jsonplaceholder.typicode.com&lt;/a&gt;, en concreto trabajaremos contra la tabla &lt;strong&gt;todos&lt;/strong&gt; con tareas para hacer. Las peticiones GET podríamos hacerlas directamente desde el navegador pero para el resto debemos instalar alguna de las extensiones de cliente REST en nuestro navegador. Por tanto instalaremos dicha extensión (por ejemplo &lt;a href=&quot;https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Advanced Rest Client&lt;/em&gt;&lt;/a&gt; para Chrome o &lt;a href=&quot;https://addons.mozilla.org/es/firefox/addon/rested/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Rested&lt;/em&gt;&lt;/a&gt; para Firefox y haremos todas las peticiones desde allí (incluyendo los GET) lo que nos permitirá ver los códigos de estado devueltos, las cabeceras, etc.&lt;/p&gt;
&lt;p&gt;Lo que queremos hacer en este ejercicio es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;obtener todas las tareas (devuelve un array con todas las tareas y el código devuelto será 200 - Ok)&lt;br /&gt;
![GET all](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-GETall.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;obtener la tarea con id 55 (devuelve el objeto de la tarea 55 y el código devuelto será 200 - Ok)&lt;br /&gt;
![GET one](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-GETone.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;obtener la tarea con id 201 (como no existe devolverá un objeto vacío y como código de error 404 - Not found)&lt;br /&gt;
![GET Non Existent](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-GETnonExistent.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;crear una nueva tarea. En el cuerpo de la petición le pasaremos sus datos: userID: 1, title: Prueba de POST y completed: false. No se le pasa la id (de eso se encarga la BBDD). La respuesta debe ser un código 201 (created) y el nuevo registro creado con todos sus datos incluyendo la id. Como es una API de prueba en realidad no lo está añadiendo a la BBDD por lo que si luego hacemos una petición buscando esa id nos dirá que no existe.&lt;br /&gt;
![POST](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-POST.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modificar con un PATCH la tarea con id 55 para que su title sea &#39;Prueba de POST&#39;. Devolverá el nuevo registro con un código 200. Como veis al hacer un PATCH los campos que no se pasan se mantienen como estaban&lt;br /&gt;
![PATCH](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-PATCH.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;modificar con un PUT la tarea con id 55 para que su title sea &#39;Prueba de POST&#39;. Devolverá el nuevo registro con un código 200. Como veis en esta API los campos que no se pasan se eliminan; en otras los campos no pasados se mantienen como estaban&lt;br /&gt;
![PUT](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-PUT.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eliminar la tarea con id 55. Como veis esta API devuelve un objeto vacío al eliminar; otras devuelven el objeto eliminado&lt;br /&gt;
![DELETE](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/Ajax-DELETE.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;json-server&quot; tabindex=&quot;-1&quot;&gt;Json Server&lt;/h3&gt;
&lt;p&gt;Las peticiones Ajax se hacen a un servidor que proporcione una API. Como ahora no tenemos ninguno podemos utilizar Json Server que es un servidor API-REST que funciona bajo Node.js (que ya tenemos instalado para usar NPM) y que utiliza un fichero JSON como contenedor de los datos en lugar de una base de datos.&lt;/p&gt;
&lt;p&gt;Para instalarlo en nuestra máquina (lo instalaremos global para poderlo usar en todas nuestras prácticas) ejecutamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g json-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para que sirva un fichero datos.json:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;json-server datos.json 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le podemos poner la opción &lt;em&gt;&lt;code&gt;--watch&lt;/code&gt;&lt;/em&gt; ( o &lt;code&gt;-w&lt;/code&gt;) para que actualice los datos si se modifica el fichero &lt;em&gt;.json&lt;/em&gt; externamente (si lo editamos).&lt;/p&gt;
&lt;p&gt;El fichero &lt;em&gt;datos.json&lt;/em&gt; será un fichero que contenga un objeto JSON con una propiedad para cada &amp;quot;&lt;em&gt;tabla&lt;/em&gt;&amp;quot; de nuestra BBDD. Por ejemplo, si queremos simular una BBDD con las tablas &lt;em&gt;users&lt;/em&gt; y &lt;em&gt;posts&lt;/em&gt; vacías el contenido del fichero será:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &amp;quot;users&amp;quot;: [],
  &amp;quot;posts&amp;quot;: []
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La API escucha en el puerto 3000 y servirá los diferentes objetos definidos en el fichero &lt;em&gt;.json&lt;/em&gt;. Por ejemplo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/users:&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000/users:&lt;/a&gt; devuelve un array con todos los elementos de la tabla &lt;em&gt;users&lt;/em&gt; del fichero &lt;em&gt;.json&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/users/5:&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000/users/5:&lt;/a&gt; devuelve un objeto con el elemento de la tabla &lt;em&gt;users&lt;/em&gt; cuya propiedad &lt;em&gt;id&lt;/em&gt; valga 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También pueden hacerse peticiones más complejas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://localhost:3000/users?rol=3:&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000/users?rol=3:&lt;/a&gt; devuelve un array con todos los elementos de &lt;em&gt;users&lt;/em&gt; cuya propiedad &lt;em&gt;rol&lt;/em&gt; valga 3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para más información: &lt;a href=&quot;https://github.com/typicode/json-server&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/typicode/json-server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si queremos acceder a la API desde otro equipo (no desde &lt;em&gt;localhost&lt;/em&gt;) tenemos que indicar la IP de la máquina que ejecuta &lt;em&gt;json-server&lt;/em&gt; y que se usará para acceder, por ejemplo si vamos a ejecutarlo en la máquina 192.168.0.10 pondremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-[bash]&quot;&gt;json-server --host 192.168.0.10 datos.json 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la ruta para acceder a la API será &lt;code&gt;http://192.168.0.10:3000&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: instalar json-server en tu máquina. Ejecútalo indicando un nombre de fichero que no existe: como verás crea un fichero json de prueba con 3 tablas: &lt;em&gt;posts&lt;/em&gt;, &lt;em&gt;comments&lt;/em&gt; y &lt;em&gt;profiles&lt;/em&gt;. Ábrelo en tu navegador para ver los datos&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;rest-client&quot; tabindex=&quot;-1&quot;&gt;REST client&lt;/h3&gt;
&lt;p&gt;Para probar las peticiones GET podemos poner la URL en la barra de direcciones del navegador pero para probar el resto de peticiones debemos instalar en nuestro navegador una extensión que nos permita realizar las peticiones indicando el método a usar, las cabeceras a enviar y los datos que enviaremos a servidor, además de la URL.&lt;/p&gt;
&lt;p&gt;Existen multitud de aplicaciones para realizar peticiones HTTP, como &lt;a href=&quot;https://install.advancedrestclient.com/install&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Advanced REST client&lt;/a&gt;. Cada navegador tiene sus propias extensiones para hacer esto, como &lt;a href=&quot;https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo?hl=es&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Advanced Rest Client&lt;/em&gt;&lt;/a&gt; para Chrome o &lt;a href=&quot;https://addons.mozilla.org/es/firefox/addon/restclient/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;RestClient&lt;/em&gt;&lt;/a&gt; para Firefox.&lt;/p&gt;
&lt;h2 id=&quot;el-objeto-xml-http-request&quot; tabindex=&quot;-1&quot;&gt;El objeto XMLHttpRequest&lt;/h2&gt;
&lt;p&gt;Hasta ahora hemos hecho un repaso a lo que es el protocolo HTTP. Ahora que lo tenemos claro y hemos instalado un servidor que nos proporciona una API (json-server) vamos a realizar peticiones HTTP en nuestro código javascript usando Ajax.&lt;/p&gt;
&lt;p&gt;Para hacer una petición debemos crear una instancia del objeto &lt;strong&gt;XMLHttpRequest&lt;/strong&gt; que es el que controlará todo el proceso. Los pasos a seguir son:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Creamos la instancia del objeto: &lt;code&gt;const peticion=new XMLHttpRequest()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Para establecer la comunicación con el servidor ejecutamos el método &lt;strong&gt;.open()&lt;/strong&gt; al que se le pasa como parámetro el tipo de petición (GET, POST, ...) y la URL del servidor: &lt;code&gt;peticion.open(&#39;GET&#39;, &#39;https://jsonplaceholder.typicode.com/users&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;OPCIONAL: Si queremos añadir cabeceras a la petición HTTP llamaremos al método &lt;strong&gt;.setRequestHeader()&lt;/strong&gt;. Por ejemplo si enviamos datos con POST hay que añadir la cabecera &lt;em&gt;Content-type&lt;/em&gt; que le indica al servidor en qué formato van los datos: &lt;code&gt;peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enviamos la petición al servidor con el método &lt;strong&gt;.send()&lt;/strong&gt;. A este método se le pasa como parámetro los datos a enviar al servidor en el cuerpo de la petición (si es un POST, PUT o PATCH le pasaremos una cadena de texto con los datos a enviar: &lt;code&gt;peticion.send(&#39;dato1=&#39;+encodeURIComponent(dato1)+&#39;&amp;amp;dato2=&#39;+encodeURIComponent(dato2))&lt;/code&gt;). Si es una petición GET o DELETE no le pasaremos datos (&lt;code&gt;peticion.send()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Ponemos un escuchador al objeto &lt;em&gt;peticion&lt;/em&gt; para saber cuándo está disponible la respuesta del servidor&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;eventos-de-xml-http-request&quot; tabindex=&quot;-1&quot;&gt;Eventos de XMLHttpRequest&lt;/h3&gt;
&lt;p&gt;Tenemos diferentes eventos que el servidor envía para informarnos del estado de nuestra petición y que nosotros podemos capturar. El evento &lt;strong&gt;readystatechange&lt;/strong&gt; se produce cada vez que el servidor cambia el estado de la petición. Cuando hay un cambio en el estado cambia el valor de la propiedad &lt;strong&gt;readyState&lt;/strong&gt; de la petición. Sus valores posibles son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0: petición no iniciada (se ha creado el objeto XMLHttpRequest)&lt;/li&gt;
&lt;li&gt;1: establecida conexión con el servidor (se ha hecho el &lt;em&gt;open&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;2: petición recibida por el servidor (se ha hecho el &lt;em&gt;send&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;3: se está procesando la petición&lt;/li&gt;
&lt;li&gt;4: petición finalizada y respuesta lista (este es el evento que nos interesa porque ahora tenemos la respuesta disponible)&lt;br /&gt;
A nosotros sólo nos interesa cuando su valor sea 4 que significa que ya están los datos. En ese momento la propiedad &lt;strong&gt;status&lt;/strong&gt; contiene el estado de la petición HTTP (200: &lt;em&gt;Ok&lt;/em&gt;, 404: &lt;em&gt;Not found&lt;/em&gt;, 500: &lt;em&gt;Server error&lt;/em&gt;, ...) que ha devuelto el servidor. Cuando &lt;em&gt;readyState&lt;/em&gt; vale 4 y &lt;em&gt;status&lt;/em&gt; vale 200 tenemos los datos en la propiedad &lt;strong&gt;responseText&lt;/strong&gt; (o &lt;strong&gt;responseXML&lt;/strong&gt; si el servidor los envía en formato XML).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El siguiente ejemplo nos enseña cómo se producen los distintos eventos en una petición asíncrona:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const peticion = new XMLHttpRequest();
console.log(&amp;quot;Estado inicial de la petición: &amp;quot; + peticion.readyState);
peticion.open(&#39;GET&#39;, &#39;https://jsonplaceholder.typicode.com/users&#39;);
console.log(&amp;quot;Estado de la petición tras el &#39;open&#39;: &amp;quot; + peticion.readyState);
peticion.send();
console.log(&amp;quot;Petición hecha&amp;quot;);
peticion.addEventListener(&#39;readystatechange&#39;, function() {
    console.log(&amp;quot;Estado de la petición: &amp;quot; + peticion.readyState);
    if (peticion.readyState === 4) {
        if (peticion.status === 200) {
            console.log(&amp;quot;Datos recibidos:&amp;quot;);
            let usuarios = JSON.parse(peticion.responseText);  // Convertirmos los datos JSON a un objeto
            console.log(usuarios);
        } else {
            console.log(&amp;quot;Error &amp;quot; + peticion.status + &amp;quot; (&amp;quot; + peticion.statusText + &amp;quot;) en la petición&amp;quot;);
        }
    }
})
console.log(&amp;quot;Petición acabada&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado de ejecutar ese código es el siguiente:&lt;/p&gt;
&lt;p&gt;![Ejemplo 1: consola](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/ajax-ej1.png)&lt;/p&gt;
&lt;p&gt;Fijaos cuándo cambia de estado (&lt;em&gt;readyState&lt;/em&gt;) la petición:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vale 0 al crear el objeto XMLHttpRequest&lt;/li&gt;
&lt;li&gt;vale 1 cuando abrimos la conexión con el servidor&lt;/li&gt;
&lt;li&gt;luego se envía al servidor y es éste el que va informando al cliente de cuándo cambia su estado&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MUY IMPORTANTE&lt;/strong&gt;: notad que la última línea (&#39;Petición acabada&#39;) se ejecuta antes que las de &#39;Estado de la petición&#39;. Recordad que es una &lt;strong&gt;petición asíncrona&lt;/strong&gt; y la ejecución del programa continúa sin esperar a que responda el servidor.&lt;/p&gt;
&lt;p&gt;Como normalmente no nos interesa cada cambio en el estado de la petición sino que sólo queremos saber cuándo ha terminado de procesarse tenemos otros eventos que nos pueden ser de utilidad:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;load&lt;/strong&gt;: se produce cuando se recibe la respuesta del servidor. Equivale a &lt;em&gt;readyState===4&lt;/em&gt;. En &lt;em&gt;status&lt;/em&gt; tendremos el estado de la respuesta&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error&lt;/strong&gt;: se produce si sucede algún error al procesar la petición (de red, de servidor, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;timeout&lt;/strong&gt;: si ha transcurrido el tiempo indicado y no se ha recibido respuesta del servidor. Podemos cambiar el tiempo por defecto modificando la propiedad &lt;em&gt;timeout&lt;/em&gt; antes de enviar la petición&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;abort&lt;/strong&gt;: si se cancela la petición (se hace llamando al método &lt;strong&gt;.abort()&lt;/strong&gt; de la petición)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;loadend&lt;/strong&gt;: se produce siempre que termina la petición, independientemente de si se recibe respuesta o sucede algún error (incluyendo un &lt;em&gt;timeout&lt;/em&gt; o un &lt;em&gt;abort&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este es un ejemplo de código que sí podríamos usar para este tipo de peticiones:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const peticion=new XMLHttpRequest();
peticion.open(&#39;GET&#39;, &#39;https://jsonplaceholder.typicode.com/users&#39;);
peticion.send();
peticion.addEventListener(&#39;load&#39;, function() {
    if (peticion.status===200) {
        let usuarios=JSON.parse(peticion.responseText);
        // procesamos los datos que tenemos en usuarios
    } else {
        muestraError(peticion);
    }
})
peticion.addEventListener(&#39;error&#39;, muestraError);
peticion.addEventListener(&#39;abort&#39;, muestraError);
peticion.addEventListener(&#39;timeout&#39;, muestraError);

function muestraError(peticion) {
    if (peticion.status) {
        console.log(&amp;quot;Error &amp;quot;+peticion.status+&amp;quot; (&amp;quot;+peticion.statusText+&amp;quot;) en la petición&amp;quot;);
    } else {
        console.log(&amp;quot;Ocurrió un error o se abortó la conexión&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Recuerda que tratamos con peticiones asíncronas por lo que tras la línea&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;peticion.addEventListener(&#39;load&#39;, function() {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;no se ejecuta la línea siguiente&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    if (peticion.status===200) {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;sino la de&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;peticion.addEventListener(&#39;error&#39;, muestraError);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una petición asíncrona es como pedir una pizza: tras llamar por teléfono lo siguiente no es ir a la puerta a recogerla sino que seguimos haciendo cosas por casa y cuando suena el timbre de casa entonces vamos a la puerta a por ella.&lt;/p&gt;
&lt;h3 id=&quot;ejemplos-de-envio-de-datos&quot; tabindex=&quot;-1&quot;&gt;Ejemplos de envío de datos&lt;/h3&gt;
&lt;p&gt;Podemos enviar datos al servidor en el cuerpo de la petición &lt;em&gt;http&lt;/em&gt;. Siempre deberemos indicar en una cabecera de la petición en qué formato enviamos los datos y en función de dicho formato se hace la petición de diferente manera.&lt;/p&gt;
&lt;p&gt;Vamos a ver algunos ejemplos de envío de datos al servidor con POST. Supondremos que tenemos una página con un formulario para dar de alta nuevos productos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form id=&amp;quot;addProduct&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Nombre: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; id=&amp;quot;name&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;label for=&amp;quot;descrip&amp;quot;&amp;gt;Descripción: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;descrip&amp;quot; id=&amp;quot;descrip&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;

    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Añadir&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;enviar-datos-al-servidor-en-formato-json&quot; tabindex=&quot;-1&quot;&gt;Enviar datos al servidor en formato JSON&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const newProduct={
      name: document.getElementById(&amp;quot;name&amp;quot;).value,
      descrip: document.getElementById(&amp;quot;descrip&amp;quot;).value,
  }    
  const peticion=new XMLHttpRequest();
  peticion.open(&#39;POST&#39;, &#39;https://localhost/products&#39;);
  peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/json&#39;);  // Siempre tiene que estar esta línea si se envían datos
  peticion.send(JSON.stringify(newProduct));              // Hay que convertir el objeto a una cadena de texto JSON para enviarlo
  peticion.addEventListener(&#39;load&#39;, function() {
    // procesamos los datos
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para enviar el objeto hay que convertirlo a una cadena JSON con la función &lt;strong&gt;JSON.stringify()&lt;/strong&gt;. Siempre que enviamos datos al servidor debemos decirle el formato que tienen en la cabecera de &lt;em&gt;Content-type&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/json&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;enviar-datos-al-servidor-en-formato-uri-encoded&quot; tabindex=&quot;-1&quot;&gt;Enviar datos al servidor en formato URIEncoded&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const name=document.getElementById(&amp;quot;name&amp;quot;).value;
  const descrip=document.getElementById(&amp;quot;descrip&amp;quot;).value;

  const peticion=new XMLHttpRequest();
  peticion.open(&#39;GET&#39;, &#39;https://localhost/products&#39;);
  peticion.setRequestHeader(&#39;Content-type&#39;, &#39;application/x-www-form-urlencoded&#39;);
  peticion.send(&#39;name=&#39;+encodeURIComponent(name)+&#39;&amp;amp;descrip=&#39;+encodeURIComponent(descrip));
  peticion.addEventListener(&#39;load&#39;, function() {
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso los datos se envían como hace el navegador por defecto en un formulario. Recordad siempre codificar lo que introduce el usuario para evitar problemas con caracteres no estándar y &lt;strong&gt;ataques &lt;em&gt;SQL Injection&lt;/em&gt;&lt;/strong&gt; u otros.&lt;/p&gt;
&lt;h4 id=&quot;enviar-ficheros-al-servidor-con-form-data&quot; tabindex=&quot;-1&quot;&gt;Enviar ficheros al servidor con FormData&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/XMLHttpRequest/FormData&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;FormData&lt;/a&gt; es una interfaz de XMLHttpRequest que permite construir fácilmente pares de &lt;code&gt;clave=valor&lt;/code&gt; para enviar los datos de un formulario. Se envían en el mismo formato en que se enviarían directamente desde un formulario (&amp;quot;multipart/form-data&amp;quot;) por lo que no hay que poner encabezado de &#39;Content-type&#39;.&lt;/p&gt;
&lt;p&gt;De esta manera podemos enviar ficheros al servidor, no sólo valores de texto.&lt;/p&gt;
&lt;p&gt;Vamos a añadir al formulario un campo donde el usuario pueda subir la foto del producto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form id=&amp;quot;addProduct&amp;quot;&amp;gt;
    &amp;lt;label for=&amp;quot;name&amp;quot;&amp;gt;Nombre: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; id=&amp;quot;name&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;label for=&amp;quot;descrip&amp;quot;&amp;gt;Descripción: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;text&amp;quot; name=&amp;quot;descrip&amp;quot; id=&amp;quot;descrip&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;
    &amp;lt;label for=&amp;quot;photo&amp;quot;&amp;gt;Fotografía: &amp;lt;/label&amp;gt;&amp;lt;input type=&amp;quot;file&amp;quot; name=&amp;quot;photo&amp;quot; id=&amp;quot;photo&amp;quot; required&amp;gt;&amp;lt;br&amp;gt;

    &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Añadir&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos enviar al servidor todo el contenido del formulario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const peticion=new XMLHttpRequest();
  const datosForm = new FormData(document.getElementById(&#39;addProduct&#39;));
  // Automáticamente ha añadido todos los inputs, incluyendo tipo &#39;file&#39;, blob, ...
  // Si quisiéramos añadir algún dato más haríamos:
  formData.append(&#39;otrodato&#39;, 12345);
  // Y lo enviamos
  peticion.open(&#39;POST&#39;, &#39;https://localhost/products&#39;);
  peticion.send(datosForm);
  peticion.addEventListener(&#39;load&#39;, function() {
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos enviar sólo los campos que queramos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;addProduct&#39;).addEEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  ...
  const formData=new FormData();  // creamos un formData vacío
  formData.append(&#39;name&#39;, document.getElementById(&#39;name&#39;).value);
  formData.append(&#39;descrip&#39;, document.getElementById(&#39;descrip&#39;).value);
  formData.append(&#39;photo&#39;, document.getElementById(&#39;photo&#39;).files[0]);

  const peticion=new XMLHttpRequest();
  peticion.open(&#39;POST&#39;, &#39;https://localhost/products&#39;);
  peticion.send(formData);
  peticion.addEventListener(&#39;load&#39;, function() {
    ...
  })
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver más información de cómo usar formData en &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/Guide/Usando_Objetos_FormData&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;callbakcs-promesas-y-async-await&quot; tabindex=&quot;-1&quot;&gt;Callbakcs, Promesas y Async/Await&lt;/h2&gt;
&lt;p&gt;Para ver un ejemplo real de cómo e haría una llamada a Ajax vamos a hacer una página que muestre en una tabla los posts del usuario indicado en un input. En resumen lo que hacemos es:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El usuario de nuestra aplicación introduce el código del usuario del que queremos ver sus posts&lt;/li&gt;
&lt;li&gt;Tenemos un escuchador para que al introducir un código de un usuario llamamos a una función &lt;em&gt;getPosts()&lt;/em&gt; que:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Se encarga de hacer la petición Ajax al servidor&lt;/li&gt;
&lt;li&gt;Si se produce un error se encarga de informar al usuario de nuestra aplicación&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Cuando se reciben los datos del servidor deben pintarse en la tabla&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;si-ajax-fuera-sincrono&quot; tabindex=&quot;-1&quot;&gt;Si Ajax fuera síncrono...&lt;/h3&gt;
&lt;p&gt;Si Ajax no fuera una petición asíncrona el código de todo esto será algo como el siguiente (ATENCIÓN, este código &lt;strong&gt;NO FUNCIONA&lt;/strong&gt;):&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/b0znLwkt/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Pero esto no funciona porque el valor de &lt;code&gt;posts&lt;/code&gt; siempre es &lt;em&gt;undefined&lt;/em&gt;. Esto es porque cuando se llama a &lt;code&gt;getPosts&lt;/code&gt; esta función no devuelve nada (por eso &lt;em&gt;posts&lt;/em&gt; es undefined) sino que devuelve los datos tiempo después, cuando el servidor contesta, pero entonces ya no hay nadie escuchando.&lt;/p&gt;
&lt;h3 id=&quot;solucion-mala&quot; tabindex=&quot;-1&quot;&gt;Solución mala&lt;/h3&gt;
&lt;p&gt;La solución es que todo el código, no sólo de la petición Ajax sino también el de qué hacer con los datos cuando llegan, se encuentre en la función que pide los datos al servidor:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/y8xdk1t4/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Este código sí que funcionaría pero tiene una pega: tenemos que tratar los datos (en este caso pintarlos en la tabla) en la función que gestiona la petición porque es la que sabe cuándo están disponibles esos datos. Y sabemos que una función no debería tener 2 responsabilidades diferentes (obtener los datos del servidor y renderizarlos en la página).&lt;/p&gt;
&lt;h3 id=&quot;algo-mejor-funciones-em-callback-em&quot; tabindex=&quot;-1&quot;&gt;Algo mejor: Funciones &lt;em&gt;callback&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Esto se podría mejorar usando una función &lt;strong&gt;&lt;em&gt;callback&lt;/em&gt;&lt;/strong&gt;. La idea es que creamos una función que procese los datos (&lt;code&gt;renderPosts&lt;/code&gt;) y se la pasamos a &lt;code&gt;getPosts&lt;/code&gt; para que la llame cuando tenga los datos:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/cob8m3zx/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Hemos creado una función que se ocupa de renderizar los datos y se la pasamos a la función que gestiona la petición para que la llame cuando los datos están disponibles. Utilizando la función &lt;em&gt;callback&lt;/em&gt; hemos conseguido que &lt;em&gt;getPosts()&lt;/em&gt; se encargue sólo de obtener los datos y cuando los tenga los pasa a la encargada de pintarlos en la tabla.&lt;/p&gt;
&lt;h3 id=&quot;solucion-buena-promesas&quot; tabindex=&quot;-1&quot;&gt;Solución buena: Promesas&lt;/h3&gt;
&lt;p&gt;Sin embargo hay una forma más limpia de resolver una función asíncrona y que el código se parezca al primero que hicimos que no funcionaba, donde la función &lt;code&gt;getPosts()&lt;/code&gt; sólo debía ocuparse de obtener los datos y devolverlos a quien se los pidió. Ese código era:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    ...
    let idUser = document.getElementById(&#39;id-usuario&#39;).value;
    if (isNaN(idUser) || idUser == &#39;&#39;) {
      alert(&#39;Debes introducir un número&#39;);
    } else {
      const posts = getPosts(idUser);
      // y aquí usamos los datos recibidos, en este caso para pintar los posts
    }
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como dijimos esto NO funciona, a menos que convirtamos a &lt;code&gt;getPosts()&lt;/code&gt; en una &lt;strong&gt;&lt;em&gt;promesa&lt;/em&gt;&lt;/strong&gt;. Cuando se realiza una llamada a una promesa quien la llama puede usar unos métodos (&lt;em&gt;.then()&lt;/em&gt; y &lt;em&gt;.catch()&lt;/em&gt;) que NO SE EJECUTARÁN hasta que la promesa se haya resuelto (es decir, hasta que el servidor haya contestado):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;.then(_function(datos) { ... }_)&lt;/code&gt;&lt;/strong&gt;: se ejecuta cuando la promesa se haya resuelto satisfactoriamente. Su parámetro es una función que recibe como parámetro los datos que haya devuelto la promesa (que serán los datos pedidos al servidor)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.catch(&lt;em&gt;function(datos) { ... }&lt;/em&gt;)&lt;/strong&gt;: se ejecuta cuando se haya rechazado la promesa (si ha fallado, normalmente porque se ha recibido una respuesta errónea del servidor). Esta función recibe como parámetro la información pasada por la promesa al ser rechazada (que será información sobre el error producido).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De esta manera nuestro código quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    ...
    let idUser = document.getElementById(&#39;id-usuario&#39;).value
    if (isNaN(idUser) || idUser == &#39;&#39;) {
      alert(&#39;Debes introducir un número&#39;)
    } else {
      getPosts(idUser)
        .then((posts) =&amp;gt; {  // aquí ya tenemos los datos en &#39;posts&#39;
          tbody.innerHTML = &#39;&#39;
          posts.forEach((post) =&amp;gt; {
            const newPost = document.createElement(&#39;tr&#39;)
            newPost.innerHTML = `
                &amp;lt;td&amp;gt;${post.userId}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${post.id}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${post.title}&amp;lt;/td&amp;gt;
                &amp;lt;td&amp;gt;${post.body}&amp;lt;/td&amp;gt;`
            tbody.appendChild(newPost)
          })
          document.getElementById(&#39;num-posts&#39;).textContent = posts.length
        })
          // en el .catch() está el tratamiento de errores
        .catch((error) =&amp;gt; console.error(error))
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para convertir a &lt;em&gt;&lt;code&gt;getPosts()&lt;/code&gt;&lt;/em&gt; en una promesa sólo tenemos que &amp;quot;envolverla&amp;quot; en la instrucción&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;  return new Promise((resolve, reject) =&amp;gt; {
    // Aquí el contenido de GetPosts()
  })
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto hace que devuelva un objeto de tipo &lt;em&gt;Promise&lt;/em&gt; (&lt;code&gt;return new Promise()&lt;/code&gt;) cuyo parámetro es una función que recibe 2 parámetros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;resolve&lt;/em&gt;&lt;/strong&gt;: función &lt;em&gt;callback&lt;/em&gt; a la que se llamará cuando se resuelva la promesa satisfactoriamente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;reject&lt;/em&gt;&lt;/strong&gt;: función &lt;em&gt;callback&lt;/em&gt; a la que se llamará si se resuelve la promesa con errores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El funcionamiento es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cuando la promesa se resuelva satisfactoriamente &lt;em&gt;getPosts&lt;/em&gt; llama a la función &lt;strong&gt;&lt;em&gt;&lt;code&gt;resolve()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; y le pasa los datos recibidos por el servidor. Esto hace que se ejecute el método &lt;strong&gt;&lt;em&gt;then&lt;/em&gt;&lt;/strong&gt; de la llamada a la promesa que recibirá como parámetro esos datos&lt;/li&gt;
&lt;li&gt;si se produce algún error se rechaza la promesa llamando a la función &lt;strong&gt;&lt;em&gt;&lt;code&gt;reject()&lt;/code&gt;&lt;/em&gt;&lt;/strong&gt; y pasando como parámetro la información del fallo producido y esto hará que se ejecute el &lt;strong&gt;&lt;em&gt;.catch&lt;/em&gt;&lt;/strong&gt; en la función que llamó a la promesa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto nuestra función &lt;em&gt;getPosts&lt;/em&gt; ahora quedará así:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getPosts(idUser) {
  return new Promise((resolve, reject) =&amp;gt; {
    const peticion = new XMLHttpRequest();
    peticion.open(&#39;GET&#39;, SERVER + &#39;/posts?userId=&#39; + idUser);
    peticion.send();
    peticion.addEventListener(&#39;load&#39;, () =&amp;gt; {
      if (peticion.status === 200) {
        resolve(JSON.parse(peticion.responseText));
      } else {
        reject(&amp;quot;Error &amp;quot; + peticion.status + &amp;quot; (&amp;quot; + peticion.statusText + &amp;quot;) en la petición&amp;quot;);
      }
    })
    peticion.addEventListener(&#39;error&#39;, () =&amp;gt; reject(&#39;Error en la petición HTTP&#39;));
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos que el único cambio es la primera línea donde convertimos nuestra función en una promesa, y que luego para &amp;quot;devolver&amp;quot; los datos en lugar de hacer un &lt;em&gt;return&lt;/em&gt;, que ya hemos visto que no funciona, se hace un &lt;em&gt;resolve&lt;/em&gt; si todo ha ido bien o un &lt;em&gt;reject&lt;/em&gt; si ha fallado.&lt;/p&gt;
&lt;p&gt;Desde donde llamamos a la promesa nos suscribimos a ella usando los métodos &lt;strong&gt;&lt;em&gt;.then()&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;.catch()&lt;/em&gt;&lt;/strong&gt; que hemos visto anteriormente.&lt;/p&gt;
&lt;p&gt;Básicamente lo que nos van a proporcionar las promesas es un código más claro y mantenible ya que el código a ejecutar cuando se obtengan los datos asíncronamente estará donde se piden esos datos y no en una función escuchadora o en una función &lt;em&gt;callback&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Utilizando promesas vamos a conseguir que la función que pide los datos sea quien los obtiene y los trate o quien informa si hay un error.&lt;/p&gt;
&lt;p&gt;El código del ejemplo de los posts usando promesas sería el siguiente:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/t4o8vq10/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: Fijaos que los errores del servidor SIEMPRE llegan a la consola. En el ejemplo anterior me aparecerán 2 veces: la primera que es el error original y la segunda donde lo pinto yo con el &lt;code&gt;console.error&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Podéis consultar aprender más en &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Usar_promesas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;la-mejor-solucion-usar-em-async-await-em&quot; tabindex=&quot;-1&quot;&gt;La mejor solución: usar &lt;em&gt;Async/Await&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Las promesas son una mejora respecto a los &lt;em&gt;callbacks&lt;/em&gt; pero aún así el código puede ser difícil de leer y mantener. Para solucionar esto se introdujeron en ES2017 las palabras reservadas &lt;strong&gt;&lt;em&gt;async&lt;/em&gt;&lt;/strong&gt; y &lt;strong&gt;&lt;em&gt;await&lt;/em&gt;&lt;/strong&gt; que permiten escribir código asíncrono de una manera más clara y sencilla.&lt;/p&gt;
&lt;p&gt;La palabra reservada &lt;strong&gt;&lt;em&gt;async&lt;/em&gt;&lt;/strong&gt; se pone delante de una función e indica que esa función va a devolver una promesa. La palabra reservada &lt;strong&gt;&lt;em&gt;await&lt;/em&gt;&lt;/strong&gt; se pone delante de una llamada a una promesa y le indica a Javascript que espere a que esa promesa se resuelva antes de continuar con la ejecución del código.&lt;/p&gt;
&lt;p&gt;Usando esto sí funcionaría el primer ejemplo que hicimos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    let idUser = document.getElementById(&#39;id-usuario&#39;).value;
    if (isNaN(idUser) || idUser == &#39;&#39;) {
      alert(&#39;Debes introducir un número&#39;);
    } else {
      const posts = await getPosts(idUser);
      // y aquí SÍ recibimos los datos porque ponemos AWAIT, en este caso para pintar los posts
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y la función &lt;em&gt;getPosts()&lt;/em&gt; quedaría igual que la que hicimos con promesas.&lt;/p&gt;
&lt;p&gt;Aquí el tratamiento de errores se hace con un &lt;em&gt;try/catch&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    try {
      const posts = await getPosts(idUser);
    } catch (error) {
      console.error(error);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando &lt;em&gt;async/await&lt;/em&gt; nuestro código se asemeja a un código síncrono ya que no continuan ejecutándose las instrucciones que hay después de un &lt;em&gt;await&lt;/em&gt; hasta que esa petición se ha resuelto. Podemos anteponer un &lt;em&gt;await&lt;/em&gt; a cualquier llamada a una función asíncrona, como una promesa, un &lt;em&gt;setTimeout&lt;/em&gt;, ...&lt;/p&gt;
&lt;p&gt;Cualquier función que realice un &lt;em&gt;await&lt;/em&gt; pasa a ser asíncrona ya que no se ejecuta al instante toda ella sino que se espera un tiempo. Para indicarlo debemos anteponer la palabra &lt;strong&gt;async&lt;/strong&gt; a su declaración &lt;em&gt;&lt;code&gt;function&lt;/code&gt;&lt;/em&gt;. Al hacer esto automáticamente se &amp;quot;envuelve&amp;quot; esa función en una promesa (o sea que esa función pasa a devolver una promesa, a la que podríamos ponerle un &lt;code&gt;await&lt;/code&gt; o un &lt;code&gt;.then()&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Podéis ver algunos ejemplos del uso de &lt;em&gt;async / await&lt;/em&gt; en la &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/funcion_asincrona&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de MDN&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;fetch&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Como el código a escribir para hacer una petición Ajax es largo y siempre igual, la &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API Fetch&lt;/a&gt; permite realizar una petición Ajax genérica que directamente devuelve una &lt;strong&gt;promesa&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Básicamente lo que hace es encapsular en una función todo el código que se repite siempre en una petición AJAX (crear la petición, hacer el &lt;em&gt;open&lt;/em&gt;, el &lt;em&gt;send&lt;/em&gt;, escuchar los eventos, ...). La función &lt;em&gt;fetch&lt;/em&gt; se similar a la función &lt;em&gt;getPosts&lt;/em&gt; que hemos creado antes pero genérica para que sirva para cualquier petición pasándole la URL. Lo que internamente hace es algo similar a:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function fetch(url) {
  return new Promise((resolve, reject) =&amp;gt; {
    const peticion = new XMLHttpRequest();
    peticion.open(&#39;GET&#39;, url);
    peticion.send();
    peticion.addEventListener(&#39;load&#39;, () =&amp;gt; {
        resolve(peticion.responseText);
    })
    peticion.addEventListener(&#39;error&#39;, () =&amp;gt; reject(&#39;Network Error&#39;));
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fijaos en 2 cosas que cambian respecto a nuestra función &lt;em&gt;&lt;code&gt;getPosts()&lt;/code&gt;&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;fetch&lt;/em&gt; devuelve los datos &amp;quot;en crudo&amp;quot; por lo que si la respuesta está en formato JSON habrá con convertirlos. Para ello dispone de un método (&lt;strong&gt;&lt;code&gt;.json()&lt;/code&gt;&lt;/strong&gt;) que hace el &lt;code&gt;JSON.parse&lt;/code&gt;. Este método devuelve una nueva promesa a la que nos suscribimos con un nuevo &lt;code&gt;.then&lt;/code&gt;. Ejemplo.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(&#39;https://jsonplaceholder.typicode.com/posts?userId=&#39; + idUser)
  .then(response =&amp;gt; response.json())    // los datos son una cadena JSON
  .then(myData =&amp;gt; {      // ya tenemos los datos en _myData_ como un objeto o array
     // Aquí procesamos los datos (en nuestro ejemplo los pintaríamos en la tabla)
     console.log(myData)
  }) 
  .catch(err =&amp;gt; console.error(err));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ese mismo ejemplo usando &lt;em&gt;async/await&lt;/em&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  const response = await fetch(&#39;https://jsonplaceholder.typicode.com/posts?userId=&#39; + idUser);
  const myData = await response.json();
  console.log(myData);
} catch (err) {
  console.error(err);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;fetch&lt;/em&gt; llama a &lt;em&gt;resolve&lt;/em&gt; siempre que el servidor conteste, &lt;strong&gt;sin comprobar&lt;/strong&gt; si la respuesta es de éxito (200, 201, ...) o de error (4xx, 5xx). Por tanto siempre se ejecutará el &lt;em&gt;then&lt;/em&gt; excepto si se trata de un error de red y el servidor no responde&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;propiedades-y-metodos-de-la-respuesta-de-em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;Propiedades y métodos de la respuesta de &lt;em&gt;fetch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;La respuesta devuelta por &lt;em&gt;fetch()&lt;/em&gt; tiene las siguientes propiedades y métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;status&lt;/strong&gt;: el código de estado devuelto por el servidor (200, 404, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;statusText&lt;/strong&gt;: el texto correspondiente a ese código (Ok, Not found, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ok&lt;/strong&gt;: booleano que vale &lt;em&gt;true&lt;/em&gt; si el status está entre 200 y 299 y &lt;em&gt;false&lt;/em&gt; en caso contrario&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;json()&lt;/strong&gt;: devuelve una promesa que se resolverá con los datos de la respuesta convertidos a un objeto (les hace un &lt;em&gt;JSON.parse()&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;otros métodos para convertir los datos según el formato que tengan: &lt;strong&gt;text()&lt;/strong&gt;, &lt;strong&gt;blob()&lt;/strong&gt;, &lt;strong&gt;formData()&lt;/strong&gt;, ... Todos devuelven una promesa con los datos de distintos formatos convertidos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El ejemplo que hemos visto con las promesas, usando &lt;em&gt;fetch&lt;/em&gt; quedaría:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/wr5ah769/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Este ejemplo fallaría si hubiéramos puesto mal la url: contestaría con un 404 pero se ejecutaría el &lt;em&gt;then&lt;/em&gt; intentando pintar unos posts que no tenemos.&lt;/p&gt;
&lt;p&gt;El ejemplo con &lt;em&gt;async/await&lt;/em&gt; y &lt;em&gt;fetch&lt;/em&gt; sería:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/zghq5dt6/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;h3 id=&quot;gestion-de-errores-con-em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;Gestión de errores con &lt;em&gt;fetch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Según &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Fetch_API&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN&lt;/a&gt; la promesa devuelta por la &lt;em&gt;API fetch&lt;/em&gt; sólo es rechazada en el caso de un error de red, es decir, el &lt;em&gt;.catch&lt;/em&gt; sólo saltará si no hemos recibido respuesta del servidor; en caso contrario la promesa siempre es resuelta.&lt;/p&gt;
&lt;p&gt;Por tanto para saber si se ha resuelto &lt;strong&gt;satisfactoriamente&lt;/strong&gt; o no debemos comprobar la propiedad &lt;strong&gt;&lt;em&gt;.ok&lt;/em&gt;&lt;/strong&gt; de la respuesta. El código correcto del ejemplo anterior gestionando los posibles errores del servidor sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;try {
  const response = await fetch(&#39;https://jsonplaceholder.typicode.com/posts?userId=&#39; + idUser);
  if (!response.ok) {
    throw `Error ${response.status} de la BBDD: ${response.statusText}`
  }
  const myData = await response.json();
  console.log(myData);
} catch (err) {
  console.error(err);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este caso si la respuesta del servidor no es &lt;em&gt;ok&lt;/em&gt; lanzamos un error que es interceptado por nuestro propio &lt;em&gt;catch&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;otros-metodos-de-peticion-con-em-fetch-em&quot; tabindex=&quot;-1&quot;&gt;Otros métodos de petición con &lt;em&gt;fetch&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Los ejemplos anteriores hacen peticiones GET al servidor. Para peticiones que no sean GET la función &lt;em&gt;fetch()&lt;/em&gt; admite un segundo parámetro con un objeto con la información a enviar en la petición HTTP. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(url, {
  method: &#39;POST&#39;, // o &#39;PUT&#39;, &#39;GET&#39;, &#39;DELETE&#39;
  body: JSON.stringify(data), // los datos que enviamos al servidor en el &#39;send&#39;
  headers:{
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
}).then(...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo de una petición para añadir datos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;fetch(url, {
  method: &#39;POST&#39;, 
  body: JSON.stringify(data), // los datos que enviamos al servidor en el &#39;send&#39;
  headers:{
    &#39;Content-Type&#39;: &#39;application/json&#39;
  }
})
.then(response =&amp;gt; {
  if (!response.ok) {
    throw `Error ${response.status} de la BBDD: ${response.statusText}`
  } 
  return response.json()
})
.then(datos =&amp;gt; {
  alert(&#39;Datos recibidos&#39;)
  console.log(datos)
})
.catch(err =&amp;gt; {
  alert(&#39;Error en la petición HTTP: &#39; + err.message);
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis ver mś ejemplos en &lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Fetch_API/Utilizando_Fetch#Enviando_datos_JSON&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; y otras páginas.&lt;/p&gt;
&lt;h2 id=&quot;hacer-varias-peticiones-simultaneamente-promise-all&quot; tabindex=&quot;-1&quot;&gt;Hacer varias peticiones simultáneamente. Promise.all&lt;/h2&gt;
&lt;p&gt;En ocasiones necesitamos hacer más de una petición al servidor. Por ejemplo para obtener los productos y sus categorías podríamos hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getData() {
  getTable(&#39;/categories&#39;)
    .then((categories) =&amp;gt; categories.forEach((category) =&amp;gt; renderCategory(category)))
    .catch((error) =&amp;gt; renderErrorMessage(error))
  getTable(&#39;/products&#39;)
    .then((products) =&amp;gt; products.forEach((product) =&amp;gt; renderProduct(product)))
    .catch((error) =&amp;gt; renderErrorMessage(error))
}

function getTable(table) {
  return new Promise((resolve, reject) =&amp;gt; {
    fetch(SERVER + table)
      .then(response =&amp;gt; {
        if (!response.ok) {
          throw `Error ${response.status} de la BBDD: ${response.statusText}`
        } 
        return response.json()
      })
      .then((data) =&amp;gt; resolve(data))
      .catch((error) =&amp;gt; reject(error))
  })
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero si para renderizar los productos necesitamos tener las categorías este código no nos lo garantiza ya que el servidor podría devolver antes los productos aunque los pedimos después.&lt;/p&gt;
&lt;p&gt;Una solución sería no pedir los productos hasta tener las categorías:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getData() {
  getTable(&#39;/categories&#39;)
    .then((categories) =&amp;gt; {
      categories.forEach((category) =&amp;gt; renderCategory(category))
      getTable(&#39;/products&#39;)
        .then((products) =&amp;gt; products.forEach((product) =&amp;gt; renderProduct(product)))
        .catch((error) =&amp;gt; renderErrorMessage(error))
    })
    .catch((error) =&amp;gt; renderErrorMessage(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;pero esto hará más lento nuestro código al no hacer las 2 peticiones simultáneamente. La solución es usar el método &lt;code&gt;Promise.all()&lt;/code&gt; al que se le pasa un array de promesas a hacer y devuelve una promesa que:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;se resuelve en el momento en que todas las promesas se han resuelto satisfactoriamente o&lt;/li&gt;
&lt;li&gt;se rechaza en el momento en que alguna de las promesas es rechazada&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;El código anterior de forma correcta sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getData() {
  Promise.all([
    getTable(&#39;/categories&#39;)
    getTable(&#39;/products&#39;)
  ])
  .then(([categories, products]) =&amp;gt; {
    categories.forEach((category) =&amp;gt; renderCategory(category))
    products.forEach((product) =&amp;gt; renderProduct(product))
  })
  .catch((error) =&amp;gt; renderErrorMessage(error))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lo mismo pasa si en vez de promesas usamos &lt;em&gt;async/await&lt;/em&gt;. Si hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function getTable(table) {
    const response = await fetch(SERVER + table)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

async function getData() {
  const responseCategories = await getTable(&#39;/categories&#39;);
  const responseProducts = await getTable(&#39;/products&#39;);
  categories.forEach((category) =&amp;gt; renderCategory(category))
  products.forEach((product) =&amp;gt; renderProduct(product))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;tenemos el problema de que no comienza la petición de los productos hasta que se reciben las categorías. La solución con &lt;code&gt;Promise.all()&lt;/code&gt; sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;async function getData() {
  const [categories, products] = await Promise.all([
    getTable(&#39;/categories&#39;)
    getTable(&#39;/products&#39;)
  ])
  categories.forEach((category) =&amp;gt; renderCategory(category))
  products.forEach((product) =&amp;gt; renderProduct(product))
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;organizar-bien-el-codigo&quot; tabindex=&quot;-1&quot;&gt;Organizar bien el código&lt;/h2&gt;
&lt;h3 id=&quot;el-fichero-em-env-em&quot; tabindex=&quot;-1&quot;&gt;El fichero &lt;em&gt;.env&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;En los ejemplos anteriores estamos guardando la URL a la que hacer la petición a la API en una constante a la que estamos llamando &lt;em&gt;SERVER&lt;/em&gt;. Esto plantea algunos problemas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;si tenemos varios ficheros que hacen peticiones a la API deberemos declararla en todos ellos&lt;/li&gt;
&lt;li&gt;si cambia hay que cambiarla en todos los ficheros y en ese caso tenemos que cambiar nuestro código&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para evitarlo podemos almacenar ete tipo de cosas en el fichero &lt;code&gt;.env&lt;/code&gt;. Se trata de un fichero donde guardar las configuraciones de la aplicación, como la URL de la API.&lt;/p&gt;
&lt;p&gt;Por medio de &lt;em&gt;Vite&lt;/em&gt; podemos acceder a todas las variables de &lt;em&gt;.env&lt;/em&gt; que comiencen por VITE_ por medio del objeto &lt;code&gt;import.meta.env&lt;/code&gt; por lo que en nuestro código en vez de darle el valor a &lt;em&gt;SERVER&lt;/em&gt; podríamos haber puesto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SERVER = import.meta.env.VITE_URL_API
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y en el fichero &lt;strong&gt;&lt;em&gt;.env&lt;/em&gt;&lt;/strong&gt; ponemos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;VITE_URL_API=http://localhost:3000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El fichero &lt;em&gt;.env&lt;/em&gt; por defecto se sube al repositorio por lo que no debemos poner información sensible (como usuarios o contraseñas). Para ello tenemos un fichero &lt;strong&gt;&lt;em&gt;.env.local&lt;/em&gt;&lt;/strong&gt; que no se sube, o bien debemos añadir al &lt;em&gt;.gitignore&lt;/em&gt; dicho fichero. Si el fichero con la configuración no lo subimos al repositorio es conveniente tener un fichero &lt;em&gt;.env.exemple&lt;/em&gt;, que sí se sube, con valores predeterminados para las distintas variables, que quien quiera desplegar nuestra aplicación deberá cambiar por sus valores adecuados en producción. Además del &lt;em&gt;.env&lt;/em&gt; y el &lt;em&gt;.env.local&lt;/em&gt; también hay distintos ficheros que son usados en desarrollo (&lt;em&gt;.env.development&lt;/em&gt;) y en producción (&lt;em&gt;.env.production&lt;/em&gt;) y que pueden tener distintos datos según el entorno en que nos encontramos. Por ejemplo en el de desarrollo el valor de &lt;strong&gt;VITE_URL_API&lt;/strong&gt; podría ser &amp;quot;&lt;a href=&quot;http://localhost:3000/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;http://localhost:3000&lt;/a&gt;&amp;quot; si usamos &lt;em&gt;json-server&lt;/em&gt; mientras que en el de producción tendríamos la ruta del servidor de producción de la API.&lt;/p&gt;
&lt;h3 id=&quot;distintas-peticiones-distintos-ficheros&quot; tabindex=&quot;-1&quot;&gt;Distintas peticiones, distintos ficheros&lt;/h3&gt;
&lt;p&gt;Las peticiones a la API deberíamos ponerlas en un fichero aparte para tener nuestro código organizado. Y peticiones a diferentes tipos de datos también deberían estar en ficheros diferentes. Por ejemplo si necesitamos obtener datos de posts y de usuarios podríamos crear una carpeta &lt;code&gt;/repositories&lt;/code&gt; y dentro los ficheros &lt;code&gt;posts.repository.js&lt;/code&gt; y &lt;code&gt;users.repository.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Dentro de cada fichero haremos diferentes funciones y métodos para los diferentes tipos de petición, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SERVER = import.meta.env.VITE_URL_API

async getAllPosts() {
    const response = await fetch(SERVER + &#39;/posts&#39;)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

async getPostById(idPost) {
    const response = await fetch(SERVER + `/posts/${idPost}`)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

async insertPost(newPost) {
    const response = await fetch(SERVER + &#39;/posts&#39;, {
      method: &#39;POST&#39;,
      body: JSON.stringify(newPost),
      headers:{
        &#39;Content-Type&#39;: &#39;application/json&#39;
      }
    })
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
}

export {
  getAllPosts,
  getPostById,
  insertPost
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde necesitemos los datos haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { getAllPosts } from &amp;quot;../repositories/posts.repositories&amp;quot;

const posts = await getAllPosts()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando clases el ejemplo quedaría:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const SERVER = import.meta.env.VITE_URL_API

export default class PostsRepository {
  async getAllPosts() {
    const response = await fetch(SERVER + &#39;/posts&#39;)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
  }

  async getPostById(idPost) {
    const response = await fetch(SERVER + `/posts/${idPost}`)
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
  }

  async insertPost(newPost) {
    const response = await fetch(SERVER + &#39;/posts&#39;, {
      method: &#39;POST&#39;,
      body: JSON.stringify(newPost),
      headers:{
        &#39;Content-Type&#39;: &#39;application/json&#39;
      }
    })
    if (!response.ok) {
      throw `Error ${response.status} de la BBDD: ${response.statusText}`
    }
    const data = await response.json()
    return data
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde necesitemos los datos haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import PostsRepository from &amp;quot;../repositories/posts.repositories&amp;quot;

const repository = new PostsRepository()
const posts = await repository.getAllPosts()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;single-page-application&quot; tabindex=&quot;-1&quot;&gt;Single Page Application&lt;/h2&gt;
&lt;p&gt;Ajax es la base para construir SPAs que permiten al usuario interactuar con una aplicación web como si se tratara de una aplicación de escritorio (sin &amp;quot;esperas&amp;quot; que dejen la página en blanco o no funcional mientras se recarga desde el servidor).&lt;/p&gt;
&lt;p&gt;En una SPA sólo se carga la página de inicio (es la única página que existe) que se va modificando y cambiando sus datos como respuesta a la interacción del usuario. Para obtener los nuevos datos se realizan peticiones al servidor (normalmente Ajax). La respuesta son datos (JSON, XML, …) que se muestran al usuario modificando mediante DOM la página mostrada (o podrían ser trozos de HTML que se cargan en determinadas partes de la página, o ...).&lt;/p&gt;
&lt;h2 id=&quot;resumen-de-llamadas-asincronas&quot; tabindex=&quot;-1&quot;&gt;Resumen de llamadas asíncronas&lt;/h2&gt;
&lt;p&gt;Una llamada Ajax es un tipo de llamada asíncrona que podemos hacer en Javascript aunque hay muchas más, como un &lt;code&gt;setTimeout()&lt;/code&gt; o las funciones manejadoras de eventos. Como hemos visto, para la gestión de las llamadas asíncronas tenemos varios métodos y los más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;funciones &lt;em&gt;callback&lt;/em&gt; (no recomendado)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;promesas&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;async / await&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;librerías, como &lt;a href=&quot;https://axios-http.com/es/docs/intro&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;axios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cuando se produce una llamada asíncrona el orden de ejecución del código no es el que vemos en el programa ya que el código de respuesta de la llamada no se ejecutará hasta completarse esta. Podemos ver &lt;a href=&quot;https://repl.it/DhKt/1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;un ejemplo&lt;/a&gt; de esto extraído de &lt;strong&gt;todoJS&lt;/strong&gt; usando &lt;strong&gt;funciones &lt;em&gt;callback&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Además, si hacemos varias llamadas tampoco sabemos el qué orden se ejecutarán sus respuestas ya que depende de cuándo el servidor finalice cada una, como podemos ver en &lt;a href=&quot;https://repl.it/DhLA/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este otro ejemplo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Si usamos funciones &lt;em&gt;callback&lt;/em&gt; y necesitamos que cada función no se ejecute hasta que haya terminado la anterior debemos llamarla en la respuesta a la función anterior lo que provoca un tipo de código difícil de leer llamado &lt;a href=&quot;https://repl.it/DhLN/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;callback hell&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Para evitar esto surgieron las &lt;strong&gt;&lt;em&gt;promesas&lt;/em&gt;&lt;/strong&gt; que permiten evitar las funciones &lt;em&gt;callback&lt;/em&gt; tan difíciles de leer. Podemos ver &lt;a href=&quot;https://repl.it/DhMA/1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;el primer ejemplo&lt;/a&gt; usando promesas. Y si necesitamos ejecutar secuencialmente las funciones evitaremos la pirámide de llamadas &lt;em&gt;callback&lt;/em&gt; como vemos en &lt;a href=&quot;https://repl.it/DhMK/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este ejemplo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Aún así el código no es muy claro. Para mejorarlo surgió &lt;strong&gt;&lt;em&gt;async&lt;/em&gt; y &lt;em&gt;await&lt;/em&gt;&lt;/strong&gt; como vemos en &lt;a href=&quot;https://repl.it/DhMa/0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este ejemplo&lt;/a&gt;. Estas funciones forman parte del estándar ES2017 por lo que no están soportadas por navegadores muy antiguos (aunque siempre podemos transpilar con &lt;em&gt;Babel&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://www.todojs.com/controlar-la-ejecucion-asincrona/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;todoJs: Controlar la ejecución asíncrona&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;cors&quot; tabindex=&quot;-1&quot;&gt;CORS&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Cross-Origin Resource Sharing&lt;/em&gt; (CORS) es un mecanismo de seguridad que incluyen los navegadores y que por defecto impiden que se pueden realizar peticiones Ajax desde un navegador a un servidor con un dominio diferente al de la página cargada originalmente.&lt;/p&gt;
&lt;p&gt;Si necesitamos hacer este tipo de peticiones necesitamos que el servidor  al que hacemos la petición añada en su respuesta la cabecera &lt;em&gt;Access-Control-Allow-Origin&lt;/em&gt; donde indiquemos el dominio desde el que se pueden hacer peticiones (o &lt;strong&gt;*&lt;/strong&gt; para permitirlas desde cualquier dominio).&lt;/p&gt;
&lt;p&gt;El navegador comprobará las cabeceras de respuesta y si el dominio indicado por ella coincide con el dominio desde el que se hizo la petición, esta se permitirá.&lt;/p&gt;
&lt;p&gt;Como en desarrollo normalmente no estamos en el dominio de producción (para el que se permitirán las peticiones) podemos instalar en el navegador la extensión &lt;em&gt;allow CORS&lt;/em&gt; que al activarla deshabilita la seguridad CORS en el navegador.&lt;/p&gt;
&lt;p&gt;Podéis ampliar la información en numerosaas páginas web como &lt;a href=&quot;https://www.enmilocalfunciona.io/entendiendo-cors-y-aplicando-soluciones/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;quot;Entendiendo CORS y aplicando soluciones&amp;quot;&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/09-ajax/" >
        </entry>
        <entry>
            <title>
                08-forms
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/08-forms/</id>
            <content type="html">
                &lt;h1 id=&quot;validacion-de-formularios&quot; tabindex=&quot;-1&quot;&gt;Validación de formularios&lt;/h1&gt;
&lt;p&gt;Índice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-de-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación de formularios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-del-navegador-incorporada-en-html5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación del navegador incorporada en HTML5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#validaci%C3%B3n-mediante-la-api-de-validaci%C3%B3n-de-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Validación mediante la API de validación de formularios&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#ejemplo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ejemplo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;yup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#expresiones-regulares&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Expresiones regulares&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#patrones&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Patrones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema vamos a ver cómo realizar una de las acciones principales de Javascript que es la validación de formularios en el lado cliente.&lt;/p&gt;
&lt;p&gt;Se trata de una verificación útil porque evita enviar datos al servidor que sabemos que no son válidos pero NUNCA puede sustituir a la validación en el lado servidor ya que en el lado cliente se puede manipular el código desde la consola para que se salte las validaciones que le pongamos.&lt;/p&gt;
&lt;p&gt;Podéis encontrar una guía muy completa de validación de formularios en el lado cliente el la página de &lt;a href=&quot;https://developer.mozilla.org/es/docs/Learn/HTML/Forms/Validacion_formulario_datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN web docs&lt;/a&gt; que ha servido como base para estos apuntes.&lt;/p&gt;
&lt;p&gt;Además, al final de este tema, veremos una pequeña introducción a las expresiones regulares en Javascript.&lt;/p&gt;
&lt;p&gt;Básicamente tenemos 2 maneras de validar un formulario en el lado cliente:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;usar la validación incorporada en HTML5 y dejar que sea el navegador quien se encargue de todo&lt;/li&gt;
&lt;li&gt;realizar nosotros la validación mediante Javascript&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La ventaja de la primera opción es que no tenemos que escribir código sino simplemente poner unos atributos a los INPUT que indiquen qué se ha de validar. La principal desventaja es que no tenemos ningún control sobre el proceso, lo que provocará cosas como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el navegador valida campo a campo: cuando encuentra un error en un campo lo muestra y hasta que no se soluciona no valida el siguiente lo que hace que el proceso sea molesto para el usuario que no ve todo lo que hay mal de una vez&lt;/li&gt;
&lt;li&gt;los mensajes son los predeterminados del navegador y en ocasiones pueden no ser muy claros para el usuario&lt;/li&gt;
&lt;li&gt;los mensajes se muestran en el idioma en que está configurado el navegador, no en el de nuestra página&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;validacion-del-navegador-incorporada-en-html-5&quot; tabindex=&quot;-1&quot;&gt;Validación del navegador incorporada en HTML5&lt;/h3&gt;
&lt;p&gt;Funciona añadiendo atributos a los campos del formulario que queremos validar. Los más usados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt;: indica que el campo es obligatorio. La valdación fallará si no hay nada escrito en el input. En el caso de un grupo de &lt;em&gt;radiobuttons&lt;/em&gt; se pone sobre cualquiera de ellos (o sobre todos) y obliga a que haya seleccionada una opción cualquiera del grupo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt;: obliga a que el contenido del campo cumpla la expresión regular indicada. Por ejemplo para un código postal sería &lt;code&gt;pattern=&amp;quot;^[0-9]{5}$&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minlength&lt;/strong&gt; / &lt;strong&gt;maxlength&lt;/strong&gt;: indica la longitud mínima/máxima del contenido del campo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt; / &lt;strong&gt;max&lt;/strong&gt;: indica el valor mínimo/máximo del contenido de un campo numérico&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También producen errores de validación si el contenido de un campo no se adapta al &lt;em&gt;type&lt;/em&gt; indicado (email, number, ...) o si el valor de un campo numérico no cumple con el &lt;em&gt;step&lt;/em&gt; indicado.&lt;/p&gt;
&lt;p&gt;Cuando el contenido de un campo es valido dicho campo obtiene automáticamente la pseudoclase &lt;strong&gt;:valid&lt;/strong&gt; y si no lo es tendrá la pseudoclase &lt;strong&gt;:invalid&lt;/strong&gt; lo que nos permite poner reglas en nuestro CSS para destacar dichos campos, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;input:invalid {
  border: 2px dashed red;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además de las anteriores tenemos las pseudoclases &lt;strong&gt;:required&lt;/strong&gt;, &lt;strong&gt;:optional&lt;/strong&gt;, que nos permiten poner reglas de estilo a los campos obligatorios o no, y &lt;strong&gt;:focus&lt;/strong&gt; para el campo con el foco.&lt;/p&gt;
&lt;p&gt;La validación del navegador se realiza al enviar el formulario. Si encuentra un error lo muestra, se detiene la validación del resto de campos y no se envía el formulario.&lt;/p&gt;
&lt;h3 id=&quot;validacion-mediante-la-api-de-validacion-de-formularios&quot; tabindex=&quot;-1&quot;&gt;Validación mediante la API de validación de formularios&lt;/h3&gt;
&lt;p&gt;Mediante Javscript tenemos acceso a todos los campos del formulario por lo que podemos hacer la validación como queramos, pero es una tarea pesada, repetitiva y que provoca código spaguetti difícil de leer y mantener más adelante.&lt;/p&gt;
&lt;p&gt;Para hacerla más simple podemos usar la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;API de validación de formularios&lt;/a&gt; de HTML5 que permite que sea el navegador quien se encargue de comprobar la validez de cada campo pero las acciones (mostrar mensajes de error, no enviar el formulario, ...) las realizamos desde Javascript.&lt;/p&gt;
&lt;p&gt;Esto nos da la ventaja de:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;los requisitos de validación de cada campo están como atributos HTML de dicho campo por lo que son fáciles de ver&lt;/li&gt;
&lt;li&gt;nos evitamos la mayor parte del código dedicada a comprobar si el contenido del campo es válido. Nosotros mediante la API sólo preguntamos si se cumplen o no y tomamos las medidas adecuadas&lt;/li&gt;
&lt;li&gt;aprovechamos las pseudo-clases &lt;em&gt;:valid&lt;/em&gt; o &lt;em&gt;:invalid&lt;/em&gt; que el navegador pone automáticamente a los campos por lo que no tenemos que añadirles clases para desacarlos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Las principales propiedades y métodos que nos proporciona esta API son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;checkValidity()&lt;/strong&gt;: método booleano que nos dice si el campo al que se aplica es o no válido. También se puede aplicar al formulario para saber si es válido o no&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;validationMessage&lt;/strong&gt;: en caso de que un campo no sea válido esta propiedad contiene el texto del error de validación proporcionado por el navegador. Si es válido esta propiedad es una cadena vacía&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;setCustomValidity(mensaje)&lt;/strong&gt;: añade un error personalizado al campo (que ahora ya NO será válido para el navegador) con el mensaje pasado como parámetro. Por ejemplo podemos usarlo para indicar que el nick elegido no es válido porque ya está en uso por otro usuario. Para quitar este error se hace &lt;code&gt;setCustomValidity(&#39;&#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ValidityState&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;validity&lt;/a&gt;&lt;/strong&gt;: es un objeto que tiene propiedades booleanas para saber qué requisito del campo es el que falla:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;valueMissing&lt;/strong&gt;: indica si no se cumple el atributo &lt;strong&gt;&lt;em&gt;required&lt;/em&gt;&lt;/strong&gt; (es decir, valdrá &lt;em&gt;true&lt;/em&gt; si el campo tiene el atributo &lt;em&gt;required&lt;/em&gt; pero no se ha introducido nada en él)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;typeMismatch&lt;/strong&gt;: indica si el contenido del campo no cumple con su atributo &lt;strong&gt;&lt;em&gt;type&lt;/em&gt;&lt;/strong&gt; (ej. type=&amp;quot;email&amp;quot;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;patternMismatch&lt;/strong&gt;: indica si no se cumple con el &lt;strong&gt;&lt;em&gt;pattern&lt;/em&gt;&lt;/strong&gt; indicado en su atributo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tooShort&lt;/strong&gt; / &lt;strong&gt;tooLong&lt;/strong&gt;: indican si no se cumple el atributo &lt;strong&gt;&lt;em&gt;minlength&lt;/em&gt;&lt;/strong&gt; o &lt;strong&gt;&lt;em&gt;maxlength&lt;/em&gt;&lt;/strong&gt; respectivamente&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;rangeUnderflow&lt;/strong&gt; / &lt;strong&gt;rangeOverflow&lt;/strong&gt;: indica si no se cumple el atributo &lt;strong&gt;&lt;em&gt;min&lt;/em&gt;&lt;/strong&gt; / &lt;strong&gt;&lt;em&gt;max&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;stepMismatch&lt;/strong&gt;: indica si no se cumple el atributo &lt;strong&gt;&lt;em&gt;step&lt;/em&gt;&lt;/strong&gt; del campo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;customError&lt;/strong&gt;: indica al campo se le ha puesto un error personalizado con &lt;strong&gt;&lt;em&gt;setCustomValidity&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;valid&lt;/strong&gt;: indica si es campo es válido&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En la página de &lt;a href=&quot;https://www.w3schools.com/js/js_validation_api.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;W3Schools&lt;/a&gt; podéis ver algún ejemplo básico de esto. También a continuación tenéis un ejemplo simple del valor de las diferentes propiedades involucradas en la validación de un campo de texto que es obligatorio y cuyo tamaño debe estar entre 5 y 50 caracteres:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/vbdrxjsz/embed/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Para validar un formulario nosotros pero usando esta API debemos añadir a la etiqueta &lt;em&gt;&amp;lt;form&amp;gt;&lt;/em&gt; el atributo &lt;strong&gt;&lt;code&gt;novalidate&lt;/code&gt;&lt;/strong&gt; que hace que no se encargue el navegador de mostrar los mensajes de error ni de decidir si se envía o no el formulario (aunque sí valida los campos) sino que lo haremos nosotros.&lt;/p&gt;
&lt;h4 id=&quot;ejemplo&quot; tabindex=&quot;-1&quot;&gt;Ejemplo&lt;/h4&gt;
&lt;p&gt;Un ejemplo sencillo de validación de un formulario podría ser:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;form novalidate&amp;gt;
  &amp;lt;label for=&amp;quot;nombre&amp;quot;&amp;gt;Por favor, introduzca su nombre (entre 5 y 50 caracteres): &amp;lt;/span&amp;gt;
  &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;nombre&amp;quot; name=&amp;quot;nombre&amp;quot; required minlength=&amp;quot;5&amp;quot; maxlength=&amp;quot;50&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&amp;lt;/label&amp;gt;
  &amp;lt;br /&amp;gt;
  &amp;lt;label for=&amp;quot;mail&amp;quot;&amp;gt;Por favor, introduzca una dirección de correo electrónico: &amp;lt;/label&amp;gt;
  &amp;lt;input type=&amp;quot;email&amp;quot; id=&amp;quot;mail&amp;quot; name=&amp;quot;mail&amp;quot; required minlength=&amp;quot;8&amp;quot;&amp;gt;
  &amp;lt;span class=&amp;quot;error&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;
  &amp;lt;button type=&amp;quot;submit&amp;quot;&amp;gt;Enviar&amp;lt;/button&amp;gt;
&amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const form  = document.getElementsByTagName(&#39;form&#39;)[0];

const nombre = document.getElementById(&#39;nombre&#39;);
const nombreError = document.querySelector(&#39;#nombre + span.error&#39;);
const email = document.getElementById(&#39;mail&#39;);
const emailError = document.querySelector(&#39;#mail + span.error&#39;);

form.addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  if(!form.checkValidity()) {
    event.preventDefault();
  }
  nombreError.textContent = nombre.validationMessage;
  emailError.textContent = email.validationMessage;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;style.css&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;.error {
  color: red;
}

input:invalid {
  border: 2px dashed red;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Estamos usando&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;validationMessage&lt;/code&gt; para mostrar el posible error de cada campo, o quitar el error cuando el campo sea válido&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkValidity()&lt;/code&gt; para no enviar/procesar el formulario si contiene errores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si no nos gusta el mensaje del navegador y queremos personalizarlo podemos hacer una función que reciba un &amp;lt;input&amp;gt; y usando su propiedad &lt;code&gt;validity&lt;/code&gt; devuelva un mensaje en función del error detectado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function customErrorValidationMessage(input) {
  if (input.checkValidity()) {
    return &#39;&#39;
  }
  if (input.validity.valueMissing) {
    return &#39;Este campo es obligatorio&#39;
  }
  if (input.validity.tooShort) {
    return `Debe tener al menos ${input.minLength} caracteres` 
  }
  // Y seguiremos comprobando cada atributo que hayamos usado en el HTML
  return &#39;Error en el campo&#39;   // por si se nos ha olvidado comprobar algo
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y ahora en vez de &lt;code&gt;nombreError.textContent = nombre.validationMessage&lt;/code&gt; haremos &lt;code&gt;nombreError.textContent = customErrorValidationMessage(nombre)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Si tenemos que validar algo que no puede hacerse mediante atributos HTML (por ejemplo si el nombre de usuario ya está en uso) deberemos hacer la validación &amp;quot;a mano&amp;quot; y en caso de no ser válido ponerle un error con &lt;code&gt;.setCustomValidity()&lt;/code&gt;, pero debemos recordar quitar el error si todo es correcto o el formulario siempre será inválido. Modificando el ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const nombre = document.getElementById(&#39;nombre&#39;);
const nombreError = document.querySelector(&#39;#nombre + span.error&#39;);

form.addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
  if (nombreEnUso(nombre.value)) {
    nombre.setCustomValidity(&#39;Ese nombre de usuario ya está en uso&#39;)
  } else {
    nombre.setCustomValidity(&#39;&#39;)  // Se quita el error personalizado
  }

  if(!form.checkValidity()) {
    ...
  }
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ficheros-en-formularios&quot; tabindex=&quot;-1&quot;&gt;Ficheros en formularios&lt;/h3&gt;
&lt;p&gt;Hay infinidad de páginas donde poder consultar cómo validar ficheros e imágenes en un formulario. Os recomiendo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/dom.html#ficheros-en-formularios&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de José Castillo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/js/js_validation_file.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#validating_files&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;developer.mozilla.org&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;yup&quot; tabindex=&quot;-1&quot;&gt;yup&lt;/h3&gt;
&lt;p&gt;Existen múltiples librerías que facilitan enormenmente el tedioso trabajo de validar un formulario. Un ejemplo es &lt;a href=&quot;https://www.npmjs.com/package/yup&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;yup&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;expresiones-regulares&quot; tabindex=&quot;-1&quot;&gt;Expresiones regulares&lt;/h2&gt;
&lt;p&gt;Las expresiones regulares permiten buscar un patrón dado en una cadena de texto. Se usan mucho a la hora de validar formularios o para buscar y reemplazar texto. En Javascript se crean poniéndolas entre caracteres &lt;code&gt;/&lt;/code&gt; (o instanciándolas de la clase &lt;em&gt;RegExp&lt;/em&gt;, aunque es mejor de la otra forma):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cadena=&#39;Hola mundo&#39;;
let expr=/mundo/;
expr.test(cadena);      // devuelve true porque en la cadena se encuentra la expresión &#39;mundo&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;patrones&quot; tabindex=&quot;-1&quot;&gt;Patrones&lt;/h3&gt;
&lt;p&gt;La potencia de las expresiones regulares es que podemos usar patrones para construir la expresión. Los más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;[..]&lt;/strong&gt; (corchetes): dentro se ponen varios caracteres o un rango y permiten comprobar si el carácter de esa posición de la cadena coincide con alguno de ellos. Ejemplos:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[abc]&lt;/code&gt;: cualquier carácter de los indicados (&#39;a&#39; o &#39;b&#39; o &#39;c&#39;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[^abc]&lt;/code&gt;: cualquiera excepto los indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-z]&lt;/code&gt;: cualquier minúscula (el carácter &#39;-&#39; indica el rango entre &#39;a&#39; y &#39;z&#39;, incluidas)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt;: cualquier letra&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;( | )&lt;/code&gt; (&lt;em&gt;pipe&lt;/em&gt;): debe coincidir con una de las opciones indocadas:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(x|y)&lt;/code&gt;: la letra x o la y (sería equivalente a &lt;code&gt;[xy]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;(http|https)&lt;/code&gt;: cualquiera de las 2 palabras&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Metacaracteres&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.&lt;/code&gt; (punto): un único carácter, sea el que sea&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;d&lt;/code&gt;: un dígito (&lt;code&gt;&#92;D&lt;/code&gt;: cualquier cosa menos dígito)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;s&lt;/code&gt;: espacio en blanco (&lt;code&gt;&#92;S&lt;/code&gt;: lo opuesto)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;w&lt;/code&gt;: una palabra o carácter alfanumérico (&lt;code&gt;&#92;W&lt;/code&gt; lo contrario)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;b&lt;/code&gt;: delimitador de palabra (espacio, ppio, fin)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&#92;n&lt;/code&gt;: nueva línea&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cuantificadores&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;: al menos 1 vez (ej. &lt;code&gt;[0-9]+&lt;/code&gt; al menos un dígito)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*&lt;/code&gt;: 0 o más veces&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt;: 0 o 1 vez&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n}&lt;/code&gt;: n caracteres (ej. &lt;code&gt;[0-9]{5}&lt;/code&gt; = 5 dígitos)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,}&lt;/code&gt;: n o más caracteres&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{n,m}&lt;/code&gt;: entre n y m caracteres&lt;/li&gt;
&lt;li&gt;&lt;code&gt;^&lt;/code&gt;: al ppio de la cadena (ej.: &lt;code&gt;^[a-zA-Z]&lt;/code&gt; = empieza por letra)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$&lt;/code&gt;: al final de la cadena (ej.: &lt;code&gt;[0-9]$&lt;/code&gt; = que acabe en dígito)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modificadores&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/i&lt;/code&gt;: que no distinga entre Maysc y minsc (Ej. &lt;code&gt;/html/i&lt;/code&gt; = buscará html, Html, HTML, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/g&lt;/code&gt;: búsqueda global, busca todas las coincidencias y no sólo la primera&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/m&lt;/code&gt;: busca en más de 1 línea (para cadenas con saltos de línea)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: contruye una expresión regular para lo que se pide a continuación y pruébala con distintas cadenas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un código postal&lt;/li&gt;
&lt;li&gt;un NIF formado por 8 números, un guión y una letra mayúscula o minúscula&lt;/li&gt;
&lt;li&gt;un número de teléfono y aceptamos 2 formatos: XXX XX XX XX o XXX XXX XXX. EL primer número debe ser un 6, un 7, un 8 o un 9&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;metodos&quot; tabindex=&quot;-1&quot;&gt;Métodos&lt;/h3&gt;
&lt;p&gt;Los usaremos para saber si la cadena coincide con determinada expresión o para buscar y reemplazar texto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expr.test(cadena)&lt;/code&gt;: devuelve &lt;strong&gt;true&lt;/strong&gt; si la cadena coincide con la expresión. Con el modificador &lt;em&gt;/g&lt;/em&gt; hará que cada vez que se llama busque desde la posición de la última coincidencia. Ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
let reg = /am/g;
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime false, hay solo dos coincidencias

let reg2 = /am/gi;          // ahora no distinguirá mayúsculas y minúsculas
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime true
console.log(reg.test(str)); // Imprime true. Ahora tenemos 3 coincidencias con este nuevo patrón
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;expr.exec(cadena)&lt;/code&gt;: igual pero en vez de &lt;em&gt;true&lt;/em&gt; o &lt;em&gt;false&lt;/em&gt; devuelve un objeto con la coincidencia encontrada, su posición y la cadena completa:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
let reg = /am/gi;
console.log(reg.exec(str)); // Imprime [&amp;quot;am&amp;quot;, index: 2, input: &amp;quot;I am amazed in America&amp;quot;]
console.log(reg.exec(str)); // Imprime [&amp;quot;am&amp;quot;, index: 5, input: &amp;quot;I am amazed in America&amp;quot;]
console.log(reg.exec(str)); // Imprime [&amp;quot;Am&amp;quot;, index: 15, input: &amp;quot;I am amazed in America&amp;quot;]
console.log(reg.exec(str)); // Imprime null
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cadena.match(expr)&lt;/code&gt;: igual que &lt;em&gt;exec&lt;/em&gt; pero se aplica a la cadena y se le pasa la expresión. Si ésta tiene el modificador &lt;em&gt;/g&lt;/em&gt; devolverá un array con todas las coincidencis:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
let reg = /am/gi;
console.log(str.match(reg)); // Imprime [&amp;quot;am&amp;quot;, &amp;quot;am&amp;quot;, &amp;quot;Am&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cadena.search(expr)&lt;/code&gt;: devuelve la posición donde se encuentra la coincidencia buscada o -1 si no aparece&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cadena.replace(expr, cadena2)&lt;/code&gt;: devuelve una nueva cadena xon las coincidncias de la cadena reemplazadas por la cedena pasada como 2º parámetro:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let str = &amp;quot;I am amazed in America&amp;quot;;
console.log(str.replace(/am/gi, &amp;quot;xx&amp;quot;)); // Imprime &amp;quot;I xx xxazed in xxerica&amp;quot;

console.log(str.replace(/am/gi, function(match) {
  return &amp;quot;-&amp;quot; + match.toUpperCase() + &amp;quot;-&amp;quot;;
})); // Imprime &amp;quot;I -AM- -AM-azed in -AM-erica&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;No vamos a profundizar más sobre las expresiones regulares. Es muy fácil encontrar por internet la que necesitemos en cada caso (para validar un e-mail, un NIF, un CP, ...). Podemos aprender más en:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/jsref/jsref_obj_regexp.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.regular-expressions.info/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;regular-expressions.info&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://html5pattern.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;html5pattern&lt;/a&gt; atributo&lt;/li&gt;
&lt;li&gt;y muchas otras páginas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También, hay páginas que nos permiten probar expresiones regulares con cualquier texto, como &lt;a href=&quot;http://regexr.com/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;regexr&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/08-forms/" >
        </entry>
        <entry>
            <title>
                07-globales
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/notes/01 Apuntes/DAW/Javascript Teoria Batoi/07-globales/</id>
            <content type="html">
                &lt;p&gt;&lt;code&gt;==&lt;/code&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/notes/01 Apuntes/DAW/Javascript Teoria Batoi/07-globales/" >
        </entry>
        <entry>
            <title>
                06-eventos
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/06-eventos/</id>
            <content type="html">
                &lt;h1 id=&quot;eventos&quot; tabindex=&quot;-1&quot;&gt;Eventos&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#c%C3%B3mo-escuchar-un-evento&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Cómo escuchar un evento&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#event-listeners&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Event listeners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#tipos-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tipos de eventos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-p%C3%A1gina&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de página&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-rat%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de ratón&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-teclado&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de teclado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-toque&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de toque&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-de-formulario&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos de formulario&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#los-objetos-this-y-event&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Los objetos &lt;em&gt;this&lt;/em&gt; y &lt;em&gt;event&lt;/em&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bindeo-del-objeto-this&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;Bindeo&lt;/em&gt; del objeto &lt;em&gt;this&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propagaci%C3%B3n-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propagación de eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#innerhtml-y-escuchadores-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;innerHTML y escuchadores de eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#delegaci%C3%B3n-de-eventos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Delegación de eventos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eventos-personalizados&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eventos personalizados&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Nos permiten detectar acciones que realiza el usuario o cambios que suceden en la página y reaccionar en respuesta a ellas. Existen muchos eventos diferentes (podéis ver la lista en &lt;a href=&quot;https://www.w3schools.com/jsref/dom_obj_event.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;w3schools&lt;/a&gt;) aunque nosotros nos centraremos en los más comunes.&lt;/p&gt;
&lt;p&gt;Javascript nos permite ejecutar código cuando se produce un evento (por ejemplo el evento &lt;em&gt;click&lt;/em&gt; del ratón) asociando al mismo una función. Hay varias formas de hacerlo.&lt;/p&gt;
&lt;h2 id=&quot;como-escuchar-un-evento&quot; tabindex=&quot;-1&quot;&gt;Cómo escuchar un evento&lt;/h2&gt;
&lt;p&gt;La manera tradicional de asociar código a un evento era añadiendo un atributo con el nombre del evento a escuchar (con &#39;on&#39; delante) en el elemento HTML. Por ejemplo, para ejecutar código al producirse el evento &#39;&lt;em&gt;click&lt;/em&gt;&#39; sobre un botón se escribía:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;boton1&amp;quot; onclick=&amp;quot;alert(&#39;Se ha pulsado&#39;);&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una mejora era llamar a una función que contenía el código:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;input type=&amp;quot;button&amp;quot; id=&amp;quot;boton1&amp;quot; onclick=&amp;quot;clicked()&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function clicked() {
  alert(&#39;Se ha pulsado&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como se trata de poner un atributo al elemento podemos usar DOM para evitar &amp;quot;ensuciar&amp;quot; con código la página HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).onclick = function () {
  alert(&#39;Se ha pulsado&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: si asociamos un evento a un elemento que aún no existe (porque aún no lo ha renderizado el navegador) no se produce ningún error pero cuando posteriormente se renderice ese elemento no tendrá asociado el evento. Para evitarlo siempre es conveniente poner los escuchadores de los eventos dentro de una función que se ejecute cuando sepamos que ya se ha renderizado toda la página, es decir tras producirse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;el evento &lt;em&gt;load&lt;/em&gt; de la ventana: se produce cuando se han cargado todos los elementos HTML de la página (incluyendo imágenes, ficheros, etc) y se ha creado el árbol DOM&lt;/li&gt;
&lt;li&gt;el evento &lt;em&gt;DOMContentLoaded&lt;/em&gt; del documento: se produce cuando se ha creado el árbol DOM pero no se han cargado imágenes, hojas de estilo, ni subframes. Es el ideal para realizar acciones del DOM sin tener que esperar a que se carguen las imágenes y el CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo mismo habría que hacer con cualquier código que modifique el árbol DOM. El código correcto sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;window.onload = function() {
  document.getElementById(&#39;boton1&#39;).onclick = function() {
    alert(&#39;Se ha pulsado&#39;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o mejor&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.onDOMContentLoaded = () =&amp;gt; {
document.getElementById(&#39;boton1&#39;).onclick = function() {
  alert(&#39;Se ha pulsado&#39;);
}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;event-listeners&quot; tabindex=&quot;-1&quot;&gt;Event listeners&lt;/h3&gt;
&lt;p&gt;Pero esta forma &lt;em&gt;tradicional&lt;/em&gt; de poner escuchadores a los eventos lo es la más adecuada. La forma recomendada de hacerlo es usando el modelo avanzado de registro de eventos del &lt;em&gt;W3C&lt;/em&gt;, mediante el método &lt;code&gt;addEventListener&lt;/code&gt; que recibe como primer parámetro el nombre del evento a escuchar (sin &#39;&lt;em&gt;on&lt;/em&gt;&#39;) y como segundo parámetro la función a ejecutar cuando se produzca (OJO, &lt;strong&gt;sin paréntesis&lt;/strong&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).addEventListener(&#39;click&#39;, pulsado);
...
function pulsado() {
  alert(&#39;Se ha pulsado&#39;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Habitualmente se usan funciones anónimas ya que no necesitan ser llamadas desde fuera del escuchador:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).addEventListener(&#39;click&#39;, () =&amp;gt; {
  alert(&#39;Se ha pulsado&#39;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos pasarle algún parámetro a la función manejadora (cosa bastante poco usual) debemos usar obligatoriamente funciones anónimas como escuchadores de eventos:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/L5pkg93w/1/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;NOTA: igual que antes debemos estar seguros de que se ha creado el árbol DOM antes de poner un escuchador por lo que se recomienda ponerlos siempre dentro una función asociada a &lt;code&gt;window.addEventListener(&amp;quot;load&amp;quot;, ...)&lt;/code&gt; o mejor a &lt;code&gt;document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, ...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Una ventaja de esta forma de poner escuchadores es que podemos poner varios escuchadores para el mismo evento y se ejecutarán todos ellos. Para eliminar un escuchador se usa el método &lt;code&gt;removeEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;boton1&#39;).removeEventListener(&#39;click&#39;, pulsado);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: no se puede quitar un escuchador si hemos usado una función anónima, para quitarlo debemos usar como escuchador una función con nombre.&lt;/p&gt;
&lt;h2 id=&quot;tipos-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Tipos de eventos&lt;/h2&gt;
&lt;p&gt;Según qué o dónde se produce un evento estos se clasifican en:&lt;/p&gt;
&lt;h3 id=&quot;eventos-de-pagina&quot; tabindex=&quot;-1&quot;&gt;Eventos de página&lt;/h3&gt;
&lt;p&gt;Se producen en el documento HTML:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;load&lt;/strong&gt;: se produce cuando termina de cargarse la página. Es útil para hacer acciones que requieran que la página esté cargada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;DOMContentLoaded&lt;/strong&gt;: se produce cuando se ha cargado el árbol DOM pero no se han cargado imágenes, hojas de estilo, ni subframes. Es el ideal para realizar acciones del DOM sin tener que esperar a que se carguen las imágenes y el CSS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;unload&lt;/strong&gt;: al destruirse el documento (ej. cerrar)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;beforeUnload&lt;/strong&gt;: antes de destruirse (podríamos mostrar un mensaje de confirmación)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;resize&lt;/strong&gt;: si cambia el tamaño del documento (porque se redimensiona la ventana)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eventos-de-raton&quot; tabindex=&quot;-1&quot;&gt;Eventos de ratón&lt;/h3&gt;
&lt;p&gt;Los produce el usuario con el ratón:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;click&lt;/strong&gt; / &lt;strong&gt;dblclick&lt;/strong&gt;: cuando se hace click/doble click sobre un elemento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mousedown&lt;/strong&gt; / &lt;strong&gt;mouseup&lt;/strong&gt;: al pulsar/soltar cualquier botón del ratón&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mouseover&lt;/strong&gt; / &lt;strong&gt;mouseout&lt;/strong&gt;: cuando el puntero del ratón entra/sale del elemento (tb. podemos usar &lt;strong&gt;mouseenter&lt;/strong&gt; / &lt;strong&gt;mouseleave&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mousemove&lt;/strong&gt;: se produce continuamente mientras el puntero se mueva dentro del elemento&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTA: si hacemos doble click sobre un elemento la secuencia de eventos que se produciría es: &lt;em&gt;mousedown&lt;/em&gt; -&amp;gt; &lt;em&gt;mouseup&lt;/em&gt; -&amp;gt; &lt;em&gt;click&lt;/em&gt; -&amp;gt; &lt;em&gt;mousedown&lt;/em&gt; -&amp;gt; &lt;em&gt;mouseup&lt;/em&gt; -&amp;gt; &lt;em&gt;click&lt;/em&gt; -&amp;gt; &lt;em&gt;dblclick&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Pon un escuchador desde la consola al botón 1 de la &lt;a href=&quot;https://pedroporo.github.io/ejemploDOM.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de ejemplo de DOM&lt;/a&gt; para que al hacer click se muestre el un alert con &#39;Click sobre botón 1&#39;. Ponle otro para que al pasar el ratón sobre él se muestre &#39;Entrando en botón 1&#39;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;eventos-de-teclado&quot; tabindex=&quot;-1&quot;&gt;Eventos de teclado&lt;/h3&gt;
&lt;p&gt;Los produce el usuario al usar el teclado:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;keydown&lt;/strong&gt;: se produce al presionar una tecla y se repite continuamente si la tecla se mantiene pulsada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keyup&lt;/strong&gt;: cuando se deja de presionar la tecla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;keypress&lt;/strong&gt;: acción de pulsar y soltar (sólo se produce en las teclas alfanuméricas)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTA: el orden de secuencia de los eventos es:&lt;br /&gt;
&lt;em&gt;keyDown&lt;/em&gt; -&amp;gt; &lt;em&gt;keyPress&lt;/em&gt; -&amp;gt; &lt;em&gt;keyUp&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&quot;eventos-de-toque&quot; tabindex=&quot;-1&quot;&gt;Eventos de toque&lt;/h3&gt;
&lt;p&gt;Se producen al usar una pantalla táctil:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;touchstart&lt;/strong&gt;: se produce cuando se detecta un toque en la pantalla táctil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touchend&lt;/strong&gt;: cuando se deja de pulsar la pantalla táctil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touchmove&lt;/strong&gt;: cuando un dedo es desplazado a través de la pantalla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;touchcancel&lt;/strong&gt;: cuando se interrumpe un evento táctil.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;eventos-de-formulario&quot; tabindex=&quot;-1&quot;&gt;Eventos de formulario&lt;/h3&gt;
&lt;p&gt;Se producen en los formularios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;focus&lt;/strong&gt; / &lt;strong&gt;blur&lt;/strong&gt;: al obtener/perder el foco el elemento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;change&lt;/strong&gt;: al perder el foco un &amp;lt;input&amp;gt; o &amp;lt;textarea&amp;gt; si ha cambiado su contenido o al cambiar de valor un &amp;lt;select&amp;gt; o un &amp;lt;checkbox&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;input&lt;/strong&gt;: al cambiar el valor de un &amp;lt;imput&amp;gt; o &amp;lt;textarea&amp;gt; (se produce cada vez que escribimos una letra es estos elementos)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;select&lt;/strong&gt;: al cambiar el valor de un &amp;lt;select&amp;gt; o al seleccionar texto de un &amp;lt;imput&amp;gt; o &amp;lt;textarea&amp;gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;submit&lt;/strong&gt; / &lt;strong&gt;reset&lt;/strong&gt;: al enviar/recargar un formulario&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;los-objetos-em-this-em-y-em-event-em&quot; tabindex=&quot;-1&quot;&gt;Los objetos &lt;em&gt;this&lt;/em&gt; y &lt;em&gt;event&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Al producirse un evento se generan automáticamente en su función manejadora 2 objetos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;this&lt;/strong&gt;: siempre hace referencia al elemento que contiene el código en donde se encuentra la variable &lt;em&gt;this&lt;/em&gt;. En el caso de una función manejadora será el elemento que tiene el escuchador que ha recibido el evento. OJO: se sobreescribe el valor anterior de &lt;em&gt;this&lt;/em&gt; por lo que si queremos conservarlo debemos guardarlo en otra variable antes de entrar en la función manejadora.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;event&lt;/strong&gt;: es un objeto y la función manejadora lo recibe como parámetro. Tiene propiedades y métodos que nos dan información sobre el evento, como:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.type&lt;/strong&gt;: qué evento se ha producido (click, submit, keyDown, ...)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.target&lt;/strong&gt;: el elemento donde se produjo el evento (puede ser &lt;em&gt;this&lt;/em&gt;  o un descendiente de &lt;em&gt;this&lt;/em&gt;, como en el ejemplo siguiente)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.currentTarget&lt;/strong&gt;: el elemento que contiene el escuchador del evento lanzado (normalmente el mismo que &lt;em&gt;this&lt;/em&gt;). Por ejemplo si tenemos un &lt;em&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/em&gt; al que le ponemos un escuchador de &#39;click&#39; que dentro tiene un elemento &lt;em&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/em&gt;, si hacemos &lt;em&gt;click&lt;/em&gt; sobre el &lt;em&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/em&gt; &lt;strong&gt;event.target&lt;/strong&gt; será el &lt;em&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/em&gt; que es donde hemos hecho click (está dentro de &lt;em&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/em&gt;) pero tanto &lt;em&gt;&lt;code&gt;&amp;lt;this&amp;gt;&lt;/code&gt;&lt;/em&gt; como &lt;em&gt;event.currentTarget&lt;/em&gt; será &lt;em&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/em&gt; (que es quien tiene el escuchador que se está ejecutando).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.relatedTarget&lt;/strong&gt;: en un evento &#39;mouseover&#39; &lt;strong&gt;event.target&lt;/strong&gt; es el elemento donde ha entrado el puntero del ratón y &lt;strong&gt;event.relatedTarget&lt;/strong&gt; el elemento del que ha salido. En un evento &#39;mouseout&#39; sería al revés.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.cancelable&lt;/strong&gt;: si el evento puede cancelarse. En caso afirmativo se puede llamar a &lt;strong&gt;event.preventDefault()&lt;/strong&gt; para cancelarlo&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.preventDefault()&lt;/strong&gt;: si un evento tiene un escuchador asociado se ejecuta el código de dicho escuchador y después el navegador realiza la acción que correspondería por defecto al evento si no tuviera escuchador (por ejemplo un escuchador del evento &lt;em&gt;click&lt;/em&gt; sobre un hiperenlace hará que se ejecute su código y después saltará a la página indicada en el &lt;em&gt;href&lt;/em&gt; del hiperenlace). Este método cancela la acción por defecto del navegador para el evento. Por ejemplo si el evento era el &lt;em&gt;submit&lt;/em&gt; de un formulario éste no se enviará o si era un &lt;em&gt;click&lt;/em&gt; sobre un hiperenlace no se irá a la página indicada en él.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.stopPropagation&lt;/strong&gt;: un evento se produce sobre un elemento y todos su padres. Por ejemplo si hacemos click en un &amp;lt;span&amp;gt; que está en un &amp;lt;p&amp;gt; que está en un &amp;lt;div&amp;gt; que está en el BODY el evento se va propagando por todos estos elementos y saltarían los escuchadores asociados a todos ellos (si los hubiera). Si alguno llama a este método el evento no se propagará a los demás elementos padre.&lt;/li&gt;
&lt;li&gt;dependiento del tipo de evento tendrá más propiedades:
&lt;ul&gt;
&lt;li&gt;eventos de ratón:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.button&lt;/strong&gt;: qué botón del ratón se ha pulsado (0: izq, 1: rueda; 2: dcho).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.screenX&lt;/strong&gt; / &lt;strong&gt;.screenY&lt;/strong&gt;: las corrdenadas del ratón respecto a la pantalla&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.clientX&lt;/strong&gt; / &lt;strong&gt;.clientY&lt;/strong&gt;: las coordenadas del ratón respecto a la ventana cuando se produjo el evento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.pageX&lt;/strong&gt; / &lt;strong&gt;.pageY&lt;/strong&gt;: las coordenadas del ratón respecto al documento (si se ha hecho un scroll será el clientX/Y más el scroll)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.offsetX&lt;/strong&gt; / &lt;strong&gt;.offsetY&lt;/strong&gt;: las coordenadas del ratón respecto al elemento sobre el que se produce el evento&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.detail&lt;/strong&gt;: si se ha hecho click, doble click o triple click&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;eventos de teclado: son los más incompatibles entre diferentes navegadores. En el teclado hay teclas normales y especiales (Alt, Ctrl, Shift, Enter, Tab, flechas, Supr, ...). En la información del teclado hay que distinguir entre el código del carácter pulsado (e=101, E=69, €=8364) y el código de la tecla pulsada (para los 3 caracteres es el 69 ya que se pulsa la misma tecla). Las principales propiedades de &lt;em&gt;event&lt;/em&gt; son:
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.key&lt;/strong&gt;: devuelve el nombre de la tecla pulsada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.which&lt;/strong&gt;: devuelve el código de la tecla pulsada&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.keyCode&lt;/strong&gt; / &lt;strong&gt;.charCode&lt;/strong&gt;: código de la tecla pulsada y del carácter pulsado (según navegadores)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;.shiftKey&lt;/strong&gt; / &lt;strong&gt;.ctrlKey&lt;/strong&gt; / &lt;strong&gt;.altKey&lt;/strong&gt; / &lt;strong&gt;.metaKey&lt;/strong&gt;: si está o no pulsada la tecla SHIFT / CTRL / ALT / META. Esta propiedad también la tienen los eventos de ratón&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTA: a la hora de saber qué tecla ha pulsado el usuario es conveniente tener en cuenta:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;para saber qué carácter se ha pulsado lo mejor usar la propiedad &lt;em&gt;key&lt;/em&gt; o &lt;em&gt;charCode&lt;/em&gt; de &lt;em&gt;keyPress&lt;/em&gt;, pero varía entre navegadores&lt;/li&gt;
&lt;li&gt;para saber la tecla especial pulsada mejor usar el &lt;em&gt;key&lt;/em&gt; o el &lt;em&gt;keyCode&lt;/em&gt; de &lt;em&gt;keyUp&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;captura sólo lo que sea necesario, se producen muchos eventos de teclado&lt;/li&gt;
&lt;li&gt;para obtener el carácter a partir del código: &lt;code&gt;String fromCharCode(codigo);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lo mejor para familiarizarse con los diferentes eventos es consultar los &lt;a href=&quot;https://www.w3schools.com/js/js_events_examples.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ejemplos de w3schools&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Pon desde la consola un escuchador al BODY de la página de ejemplo para que al mover el ratón en cualquier punto de la ventana del navegador, se muestre en algún sitio (añade un DIV o un P al HTML) la posición del puntero respecto del navegador y respecto de la página.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Pon desde la consola un escuchador al BODY de la página de ejemplo para que al pulsar cualquier tecla nos muestre en un alert el &lt;em&gt;key&lt;/em&gt; y el &lt;em&gt;keyCode&lt;/em&gt; de la tecla pulsada. Pruébalo con diferentes teclas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;em-bindeo-em-del-objeto-em-this-em&quot; tabindex=&quot;-1&quot;&gt;&lt;em&gt;Bindeo&lt;/em&gt; del objeto &lt;em&gt;this&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;En ocasiones no queremos que &lt;em&gt;this&lt;/em&gt; sea el elemento sobre quien se produce el evento sino que queremos conservar el valor que tenía antes de entrar a la función manejadora. Por ejemplo, si la función manejadora es un método de una clase en &lt;em&gt;this&lt;/em&gt; tenemos el objeto de la clase sobre el que estamos actuando pero al entrar en la función manejadora del evento se sobreescribe esta variable.&lt;/p&gt;
&lt;p&gt;Podríamos guardarla en otra variable antes de entrar en la función manejadora como vimos en el &lt;a href=&quot;https://pedroporo.github.io/05-POO.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;tema de POO&lt;/a&gt;, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let that = this;
document.getElementById(&#39;acepto&#39;).addEventListener(&#39;click&#39;, function() {
  // Aquí dentro this será el elemento sobre el que se ha hecho click
  // y that será el objeto que tenía antes de entrar en la función manejadora
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero también podemos usar el método &lt;em&gt;.bind()&lt;/em&gt;, que nos permite pasarle a una función el valor que queremos darle a la variable &lt;em&gt;this&lt;/em&gt; dentro de dicha función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado.bind(variable));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En este ejemplo el valor de &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;aceptado&lt;/em&gt; será _variable_en lugar de &lt;em&gt;event.currentTarget&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;En el ejemplo que habíamos comentado de un manejador dentro de una clase, para mantener el valor de &lt;em&gt;this&lt;/em&gt; y que haga referencia al objeto sobre el que estamos actuando haríamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado.bind(this));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;por lo que el valor de &lt;em&gt;this&lt;/em&gt; dentro de la función &lt;em&gt;aceptado&lt;/em&gt; será el mismo que tenía fuera, es decir, la instancia del objeto.&lt;/p&gt;
&lt;p&gt;Esto es lo que hacíamos en la práctica de DOM cuando le pasábamos a las funciones manejadoras del &lt;em&gt;submit&lt;/em&gt; y el &lt;em&gt;click&lt;/em&gt; del formulario en la &lt;em&gt;vista&lt;/em&gt; métodos del &lt;em&gt;controlador&lt;/em&gt; con el objeto &lt;em&gt;this&lt;/em&gt; bindeado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;this.view.setBookSubmitHandler(this.handleSubmitBook.bind(this));
this.view.setBookRemoveHandler(this.handleRemoveBook.bind(this));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin ese bindeo esos métodos perderían la referencia a la instancia del &lt;em&gt;controlador&lt;/em&gt; y no podrían acceder a sus propiedades y métodos.&lt;/p&gt;
&lt;p&gt;Podemos &lt;em&gt;bindear&lt;/em&gt;, es decir, pasarle a la función manejadora más variables declarándolas como parámetros de &lt;em&gt;bind&lt;/em&gt;. El primer parámetro será el valor de &lt;em&gt;this&lt;/em&gt; y los demás serán parámetros que recibirá la función antes de recibir el parámetro &lt;em&gt;event&lt;/em&gt; que será el último. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;document.getElementById(&#39;acepto&#39;).removeEventListener(&#39;click&#39;, aceptado.bind(var1, var2));
...
function aceptado(param1, param2, event) {
  // Aquí dentro tendremos los valores
  // this = var1
  // param1 = var2
  // param2 = var3
  // event es el objeto con la información del evento producido
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;propagacion-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Propagación de eventos&lt;/h2&gt;
&lt;p&gt;Normalmente en una página web los elementos HTML se solapan unos con otros, por ejemplo, un &amp;lt;span&amp;gt; está en un &amp;lt;p&amp;gt; que está en un &amp;lt;div&amp;gt; que está en el &amp;lt;body&amp;gt;. Si ponemos un escuchador del evento &lt;em&gt;click&lt;/em&gt; a todos ellos se ejecutarán todos ellos, pero ¿en qué orden?.&lt;/p&gt;
&lt;p&gt;Pues el W3C establecíó un modelo en el que primero se disparan los eventos de fuera hacia dentro (primero el &amp;lt;body&amp;gt;) y al llegar al más interno (el &amp;lt;span&amp;gt;) se vuelven a disparar de nuevo pero de dentro hacia afuera. La primera fase se conoce como &lt;strong&gt;fase de captura&lt;/strong&gt; y la segunda como &lt;strong&gt;fase de burbujeo (&lt;em&gt;bubbling&lt;/em&gt;)&lt;/strong&gt;. Cuando ponemos un escuchador con &lt;code&gt;addEventListener&lt;/code&gt; el tercer parámetro indica en qué fase debe dispararse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;true&lt;/strong&gt;: en fase de captura&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;false&lt;/strong&gt; (valor por defecto): en fase de burbujeo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Por tanto, por defecto se disparará el escuchador más interno (el del &amp;lt;span&amp;gt;) y continuará el resto hasta el más externo (&amp;lt;body&amp;gt;) como si fuera una burbuja que sale afuera desde el interior.&lt;/p&gt;
&lt;p&gt;Podéis ver un ejemplo en:&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/juansegura/n3b6fph0/embed/js,html,result/&quot;&gt;&lt;/script&gt;
&lt;p&gt;Sin embargo si al método &lt;code&gt;.addEventListener&lt;/code&gt; le pasamos un tercer parámetro con el valor &lt;em&gt;true&lt;/em&gt; el comportamiento será el contrario, lo que se conoce como &lt;em&gt;captura&lt;/em&gt; y el primer escuchador que se ejecutará es el del &amp;lt;body&amp;gt; y el último el del &amp;lt;span&amp;gt; (podéis probarlo añadiendo ese parámetro a los escuchadores del ejemplo anterior).&lt;/p&gt;
&lt;p&gt;En cualquier momento podemos evitar que se siga propagando el evento ejecutando el método &lt;code&gt;.stopPropagation()&lt;/code&gt; en el código de cualquiera de los escuchadores.&lt;/p&gt;
&lt;p&gt;Podéis ver las distintas fases de un evento en la página &lt;a href=&quot;https://domevents.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;domevents.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;inner-html-y-escuchadores-de-eventos&quot; tabindex=&quot;-1&quot;&gt;innerHTML y escuchadores de eventos&lt;/h2&gt;
&lt;p&gt;Como los escuchadores de eventos se asocian a un elemento, si lo borramos desaparecerá el escuchador  aunque luego lo volvamos a pintar no tendrá escuchador a menos que se lo pongamos de nuevo.&lt;/p&gt;
&lt;p&gt;Por ejemplo, si cambiamos el contenido de la propiedad &lt;em&gt;innerHTML&lt;/em&gt; de un elemento todos los escuchadores de eventos de sus elementos hijos desaparecen ya que es como eliminar su contenido y volverlo a renderizar.&lt;/p&gt;
&lt;p&gt;Eso pasaría en este ejemplo en que tenemos una tabla de datos donde al hacer dobleclick en cada fila se muestra su id. La función que añade una nueva fila podría ser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function renderNewRow(data) {
  let miTabla = document.getElementById(&#39;tabla-datos&#39;);
  let nuevaFila = `&amp;lt;tr id=&amp;quot;${data.id}&amp;quot;&amp;gt;&amp;lt;td&amp;gt;${data.dato1}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${data.dato2}...&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`;
  miTabla.innerHTML += nuevaFila;
  document.getElementById(data.id).addEventListener(&#39;dblclick&#39;, event =&amp;gt; alert(&#39;Id: &#39;+ event.target.id));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo así sólo la última fila añadida tendría escuchador ya que la línea &lt;code&gt;miTabla.innerHTML += nuevaFila&lt;/code&gt; borra todo el contenido de &lt;em&gt;myTabla&lt;/em&gt; y lo vuelve a renderizar pero ya no tendría escuchadores, excepto el de &lt;em&gt;nuevaFila&lt;/em&gt; que lo ponemos después de renderizarlo.&lt;/p&gt;
&lt;p&gt;La forma correcta de hacerlo sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function renderNewRow(data) {
  let miTabla = document.getElementById(&#39;tabla-datos&#39;);
  let nuevaFila = document.createElement(&#39;tr&#39;);
  nuevaFila.id = data.id;
  nuevaFila.innerHTML = `&amp;lt;td&amp;gt;${data.dato1}&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;${data.dato2}...&amp;lt;/td&amp;gt;`;
  nuevaFila.addEventListener(&#39;dblclick&#39;, event =&amp;gt; alert(&#39;Id: &#39; + event.target.id) );
  miTabla.appendChild(nuevaFila);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De esta forma además mejoramos el rendimiento ya que el navegador sólo tiene que renderizar el nodo correspondiente a la nuevaFila y no todas las filas de la tabla como pasaba con el primer código.&lt;/p&gt;
&lt;h2 id=&quot;delegacion-de-eventos&quot; tabindex=&quot;-1&quot;&gt;Delegación de eventos&lt;/h2&gt;
&lt;p&gt;Es un patrón de diseño que nos permite no tener que poner un escuchador a cada elemento sino uno global que haga el trabajo de todos.&lt;/p&gt;
&lt;p&gt;Por ejemplo si queremos escuchar cuándo hacemos &lt;em&gt;click&lt;/em&gt; en cada celda de la tabla en lugar de poner un escuchador en cada una (que podría tener cientos) pongo sólo 1 en la tabla y mediante la propiedad &lt;code&gt;event.target&lt;/code&gt; puedo saber sobre qué celda en concreto se ha hecho &lt;em&gt;click&lt;/em&gt;. Esto además seguirá funcionando si dinámicamente añado nuevas celdas a la tabla ya que no son ellas las que tienen el escuchador sino la propia tabla.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: ten en cuenta que a veces el evento se produce en alguna etiqueta interna al elemento por lo que &lt;code&gt;event.target&lt;/code&gt; no sería el elemento que buscamos sino su descendiente. Por ejemplo si hay una imagen en la celda el &lt;code&gt;event.target&lt;/code&gt; podría ser la &amp;lt;img&amp;gt; y no la &amp;lt;td&amp;gt;. Para asegurarnos de llegar al elemento deseado podemos usar el selector &lt;code&gt;closest()&lt;/code&gt; que vimos en el DOM (&lt;code&gt;tdClicked = event.target.closest(&#39;td&#39;)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Podéis ver más ejemplos de delegación de eventos en &lt;a href=&quot;https://es.javascript.info/event-delegation&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El Tutorial de JavaScript Moderno&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;eventos-personalizados&quot; tabindex=&quot;-1&quot;&gt;Eventos personalizados&lt;/h2&gt;
&lt;p&gt;También podemos mediante código lanzar manualmente cualquier evento sobre un elemento con el método &lt;code&gt;dispatchEvent()&lt;/code&gt; e incluso crear eventos personalizados, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const event = new Event(&#39;build&#39;);

// Listen for the event.
elem.addEventListener(&#39;build&#39;, (e) =&amp;gt; { /* ... */ });

// Dispatch the event.
elem.dispatchEvent(event);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Incluso podemos añadir datos al objeto &lt;em&gt;event&lt;/em&gt; si creamos el evento con &lt;code&gt;new CustomEvent()&lt;/code&gt;. Podéis obtener más información en la &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de MDN&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/06-eventos/" >
        </entry>
        <entry>
            <title>
                05-BOM
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/05-bom/</id>
            <content type="html">
                &lt;h1 id=&quot;browser-object-model-bom&quot; tabindex=&quot;-1&quot;&gt;Browser Object Model (BOM)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#browser-object-model-bom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Browser Object Model (BOM)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#timers&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Timers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objetos-del-bom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objetos del BOM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-window&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto window&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#di%C3%A1logos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Diálogos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-location&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto location&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-history&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto history&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objeto-navigator&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objeto navigator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otros-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otros objetos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En este tema veremos cómo acceder a objetos que nos permitan interactuar con el navegador (&lt;em&gt;Browser Object Model, BOM&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Usando los objetos BOM podemos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abrir, cambiar y cerrar ventanas&lt;/li&gt;
&lt;li&gt;Ejecutar código en cierto tiempo (&lt;em&gt;timers&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Obtener información del navegador&lt;/li&gt;
&lt;li&gt;Ver y modificar propiedades de la pantalla&lt;/li&gt;
&lt;li&gt;Gestionar cookies, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;timers&quot; tabindex=&quot;-1&quot;&gt;Timers&lt;/h2&gt;
&lt;p&gt;Permiten ejecutar código en el futuro (cuando transcurran los milisegundos indicados). Hay 2 tipos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setTimeout(función, milisegundos)&lt;/code&gt;: ejecuta la función pasada como parámetro una sóla vez, cuando transcurran los milisegundos indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setInterval(función, milisegundos)&lt;/code&gt;: ejecuta la función cada vez que transcurran los milisegundos indicados, hasta que sea cancelado el &lt;em&gt;timer&lt;/em&gt;. A ambas se le pueden pasar más parámetros tras los milisegundos y serán los parámetros que recibirá la función a ejecutar.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ambas funciones devuelven un identificador que nos permitirá cancelar la ejecución del código usando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clearTiemout(identificador)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clearInterval(identificador)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const idTimeout = setTimeout(() =&amp;gt; alert(&#39;Timeout que se ejecuta al cabo de 1 seg.&#39;), 1000);

let i = 1;
const idInterval = setInterval(() =&amp;gt; {
	alert(&#39;Interval cada 3 seg. Ejecución nº: &#39;+ i++);
  if (i === 5) {
    clearInterval(idInterval);
    alert(&#39;Fin de la ejecución del Interval&#39;);
	}
}, 3000);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta en la consola cada una de esas funciones&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;En lugar de definir la función a ejecutar podemos llamar a una función que ya exista:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showMessage() {
  alert(&#39;Timeout que se ejecuta al cabo de 1 seg.&#39;)
}

const idTimeout=setTimeout(showMessage, 1000);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero en ese caso hay que poner sólo el nombre de la función, sin &lt;code&gt;()&lt;/code&gt; ya que si los ponemos se ejecutaría la función en ese momento y no transcurrido el tiempo indicado.&lt;/p&gt;
&lt;p&gt;Si necesitamos pasarle algún parámetro a la función lo añadiremos como parámetros de &lt;code&gt;setTimeout&lt;/code&gt; o &lt;code&gt;setInterval&lt;/code&gt; después del intervalo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function showMessage(msg) {
  alert(msg)
}

const idTimeout = setTimeout(showMessage, 1000, &#39;Timeout que se ejecuta al cabo de 1 seg.&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;objetos-del-bom&quot; tabindex=&quot;-1&quot;&gt;Objetos del BOM&lt;/h2&gt;
&lt;p&gt;Al contrario que para el DOM, no existe un estándar de BOM pero es bastante parecido en los diferentes navegadores.&lt;/p&gt;
&lt;h3 id=&quot;objeto-a-href-http-www-w3schools-com-jsref-obj-window-asp-target-blank-class-external-link-window-a&quot; tabindex=&quot;-1&quot;&gt;Objeto &lt;a href=&quot;http://www.w3schools.com/jsref/obj_window.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;window&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Representa la ventana del navegador y es el objeto principal. De hecho puede omitirse al llamar a sus propiedades y métodos, por ejemplo, el método &lt;code&gt;setTimeout()&lt;/code&gt; es en realidad &lt;code&gt;window.setTimeout()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sus principales propiedades y métodos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.name&lt;/code&gt;: nombre de la ventana actual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.status&lt;/code&gt;: valor de la barra de estado&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.screenX&lt;/code&gt;/&lt;code&gt;.screenY&lt;/code&gt;: distancia de la ventana a la esquina izquierda/superior de la pantalla&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.outerWidth&lt;/code&gt;/&lt;code&gt;.outerHeight&lt;/code&gt;: ancho/alto total de la ventana, incluyendo la toolbar y la scrollbar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.innerWidth&lt;/code&gt;/&lt;code&gt;.innerHeight&lt;/code&gt;: ancho/alto útil del documento, sin la toolbar y la scrollbar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.open(url, nombre, opciones)&lt;/code&gt;: abre una nueva ventana. Devuelve el nuevo objeto ventana. Las principales opciones son:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.toolbar&lt;/code&gt;: si tendrá barra de herramientas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.location&lt;/code&gt;: si tendrá barra de dirección&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.directories&lt;/code&gt;: si tendrá botones Adelante/Atrás&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.status&lt;/code&gt;: si tendrá barra de estado&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.menubar&lt;/code&gt;: si tendrá barra de menú&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.scrollbar&lt;/code&gt;: si tendrá barras de desplazamiento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.resizable&lt;/code&gt;: si se puede cambiar su tamaño&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.width=px&lt;/code&gt;/&lt;code&gt;.height=px&lt;/code&gt;: ancho/alto&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.left=px&lt;/code&gt;/&lt;code&gt;.top=px&lt;/code&gt;: posición izq/sup de la ventana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.opener&lt;/code&gt;: referencia a la ventana desde la que se abrió esta ventana (para ventanas abiertas con &lt;em&gt;open&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.close()&lt;/code&gt;: la cierra (pide confirmación, a menos que la hayamos abierto con open)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.moveTo(x,y)&lt;/code&gt;: la mueve a las coord indicadas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.moveBy(x,y)&lt;/code&gt;: la desplaza los px indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.resizeTo(x,y)&lt;/code&gt;: la da el ancho y alto indicados&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.resizeBy(x,y)&lt;/code&gt;: le añade ese ancho/alto&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pageXoffset / pageYoffset&lt;/code&gt;: scroll actual de la ventana horizontal / vertical&lt;/li&gt;
&lt;li&gt;Otros métodos: &lt;code&gt;.back()&lt;/code&gt;, &lt;code&gt;.forward()&lt;/code&gt;, &lt;code&gt;.home()&lt;/code&gt;, &lt;code&gt;.stop()&lt;/code&gt;, &lt;code&gt;.focus()&lt;/code&gt;, &lt;code&gt;.blur()&lt;/code&gt;, &lt;code&gt;.find()&lt;/code&gt;, &lt;code&gt;.print()&lt;/code&gt;, …&lt;br /&gt;
NOTA: por seguridad no se puede mover una ventana fuera de la pantalla ni darle un tamaño menor de 100x100 px ni tampoco se puede mover una ventana no abierta con .open() o si tiene varias pestañas&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta desde la consola:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;abre una nueva ventana de dimensiones 500x200px en la posición (100,200)&lt;/li&gt;
&lt;li&gt;escribe en ella (con document.write) un título h1 que diga &#39;Hola&#39;&lt;/li&gt;
&lt;li&gt;muévela 300 px hacia abajo y 100 a la izquierda&lt;/li&gt;
&lt;li&gt;ciérrala&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Puedes ver un ejemplo de cómo abrir ventanas en &lt;a href=&quot;https://www.youtube.com/watch?v=jkTt6bs2tPo&amp;amp;list=PLI7nHlOIIPOJtTDs1HVJABswW-xJcA7_o&amp;amp;index=40&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;este vídeo&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz que a los 2 segundos de abrir la página se abra un &lt;em&gt;popup&lt;/em&gt; con un mensaje de bienvenida. Esta ventana tendrá en su interior un botón Cerrar que permitirá que el usuario la cierre haciendo clic en él. Tendrá el tamaño justo para visualizar el mensaje y no tendrá barras de scroll, ni de herramientas, ni de dirección... únicamente el mensaje.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;dialogos&quot; tabindex=&quot;-1&quot;&gt;Diálogos&lt;/h4&gt;
&lt;p&gt;Hay 3 métodos del objeto &lt;em&gt;window&lt;/em&gt; que ya conocemos y que nos permiten abrir ventanas de diálogo con el usuario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.alert(mensaje)&lt;/code&gt;: muestra un diálogo con el mensaje indicado y un botón de &#39;Aceptar&#39;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.confirm(mensaje)&lt;/code&gt;: muestra un diálogo con el mensaje indicado y botones de &#39;Aceptar&#39; y &#39;Cancelar&#39;. Devuelve &lt;em&gt;true&lt;/em&gt; si se ha pulsado el botón de aceptar del diálogo y &lt;em&gt;false&lt;/em&gt; si no.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.prompt(mensaje [, valor predeterminado])&lt;/code&gt;: muestra un diálogo con el mensaje indicado, un cuadro de texto (vacío o co el valor predeterminado indicado) y botones de &#39;Aceptar&#39; y &#39;Cancelar&#39;. Si se pulsa &#39;Aceptar&#39; devolverá un &lt;em&gt;string&lt;/em&gt; con el valor que haya en el cuadro de texto y si se pulsa &#39;Cancelar&#39; o se cierra devolverá &lt;em&gt;null&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;objeto-a-href-http-www-w3schools-com-jsref-obj-location-asp-target-blank-class-external-link-location-a&quot; tabindex=&quot;-1&quot;&gt;Objeto &lt;a href=&quot;http://www.w3schools.com/jsref/obj_location.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;location&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Contiene información sobre la URL actual del navegador y podemos modificarla. Sus principales propiedades y métodos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.href&lt;/code&gt;: devuelve la URL actual completa&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.protocol&lt;/code&gt;, &lt;code&gt;.hostname&lt;/code&gt;, &lt;code&gt;.port&lt;/code&gt;: devuelve el protocolo, host y puerto respectivamente de la URL actual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pathname&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;: devuelve la ruta al recurso actual, el gragmento (&lt;code&gt;#...&lt;/code&gt;) y la cadena de búsqueda (&lt;code&gt;?...&lt;/code&gt;) respectivamente&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.reload()&lt;/code&gt;: recarga la página actual&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.assign(url)&lt;/code&gt;: carga la página pasada como parámetro&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.replace(url)&lt;/code&gt;: ídem pero sin guardar la actual en el historial&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Ejecuta en la consola&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;muestra la ruta completa de la página actual&lt;/li&gt;
&lt;li&gt;muestra el servidor de esta página&lt;/li&gt;
&lt;li&gt;carga la página de Google usando el objeto &lt;em&gt;location&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;objeto-a-href-http-www-w3schools-com-jsref-obj-history-asp-target-blank-class-external-link-history-a&quot; tabindex=&quot;-1&quot;&gt;Objeto &lt;a href=&quot;http://www.w3schools.com/jsref/obj_history.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;history&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Permite acceder al historial de páginas visitadas y navegar por él:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.length&lt;/code&gt;: muestra el número de páginas almacenadas en el historial&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.back()&lt;/code&gt;: vuelve a la página anterior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.forward()&lt;/code&gt;: va a la siguiente página&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.go(num)&lt;/code&gt;: se mueve &lt;em&gt;num&lt;/em&gt; páginas hacia adelante o hacia atrás (si &lt;em&gt;num&lt;/em&gt; es negativo) en el historial&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: desde la consola vuelve a la página anterior&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;objeto-navigator&quot; tabindex=&quot;-1&quot;&gt;Objeto navigator&lt;/h3&gt;
&lt;p&gt;Nos da información sobre el navegador y el sistema en que se ejecuta:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.userAgent&lt;/code&gt;: muestra información sobre el navegador que usamos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.language&lt;/code&gt;: muestra el idioma del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.languages&lt;/code&gt;: muestra los idiomas instalados en el navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.appVersion&lt;/code&gt;: versión del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.appName&lt;/code&gt;: nombre del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.appCodeName&lt;/code&gt;: nombre en código del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.product&lt;/code&gt;: producto del navegador&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.platform&lt;/code&gt;: sistema en el que se ejecuta el navegador&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;También incluye objetos con sus propias API para poder interactuar con el sistema:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.geolocation&lt;/code&gt;: devuelve un objeto con la localización del dispositivo (sólo funciona en https)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.storage&lt;/code&gt;: permite acceder a los datos almacenados en el navegador (los veremos en detalle más adelante)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.clipboard&lt;/code&gt;: permite copiar texto al portapapeles del usuario con &lt;code&gt;.writeText()&lt;/code&gt; (sólo funciona en https)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.mediaDevices&lt;/code&gt;: permite acceder a los dispositivos multimedia del usuario&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.serviceWorker&lt;/code&gt;: permite trabajar con &lt;em&gt;service workers&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: desde la consola muestra la información del navegador, su lenguaje y del sistema en que se ejecuta&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;otros-objetos&quot; tabindex=&quot;-1&quot;&gt;Otros objetos&lt;/h3&gt;
&lt;p&gt;Otros objetos que incluye BOM son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3schools.com/jsref/obj_screen.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;screen&lt;/a&gt;: nos da información sobre la pantalla
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.width&lt;/code&gt;/&lt;code&gt;.height&lt;/code&gt;: ancho/alto total de la pantalla (resolución)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.availWidth&lt;/code&gt;/&lt;code&gt;.availHeight&lt;/code&gt;: igual pero excluyendo la barra del S.O.&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: obtén desde la consola todas las propiedades width/height y availWidth/availHeight del objeto &lt;em&gt;scrren&lt;/em&gt;. Compáralas con las propiedades innerWidth/innerHeight y outerWidth/outerHeight de &lt;em&gt;window&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/05-bom/" >
        </entry>
        <entry>
            <title>
                04.1-MVC
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/04-1-mvc/</id>
            <content type="html">
                &lt;h1 id=&quot;el-patron-modelo-vista-controlador&quot; tabindex=&quot;-1&quot;&gt;El patrón Modelo-Vista-Controlador&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Modelo-vista-controlador (MVC)&lt;/strong&gt; es un patrón de arquitectura de software muy utilizado en la actualidad en desarrollo web (y también en muchas aplicaciones de escritorio). Este patrón propone separar la aplicación en &lt;strong&gt;componentes&lt;/strong&gt; distintos: el &lt;strong&gt;modelo&lt;/strong&gt;, la &lt;strong&gt;vista&lt;/strong&gt; y el &lt;strong&gt;controlador&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El &lt;strong&gt;modelo&lt;/strong&gt; representa y gestiona los datos o información con la que trabaja la aplicación que normalmente serán variables extraidas de una base de datos. Normalmente el modelo no tiene conocimiento de las otras partes de la aplicación.&lt;/li&gt;
&lt;li&gt;La &lt;strong&gt;vista&lt;/strong&gt; muestra al usuario el modelo (información y lógica de negocio) en un formato adecuado para interactuar con él (usualmente la interfaz de usuario). Es la intermediaria entre la aplicación y el usuario&lt;/li&gt;
&lt;li&gt;El &lt;strong&gt;controlador&lt;/strong&gt; es el encargado de coordinar el funcionamiento de la aplicación. Responde a los eventos del usuario para lo que hace peticiones al modelo (para obtener o cambiar la información) y a la vista (para que muestre al usuario dicha información).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Además de etos componentes usualmente tendremos otros como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los &lt;strong&gt;servicios&lt;/strong&gt; que controlan la comunicación con el servidor y otras fuentes externas de datos. Gestionan los accesos a la información, tanto consultas como actualizaciones, implementando también los privilegios de acceso que se hayan descrito en las especificaciones de la aplicación (lógica de negocio).&lt;/li&gt;
&lt;li&gt;Las &lt;strong&gt;rutas&lt;/strong&gt; gestionan la navegación y las rutas de la aplicación en SPA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Este patrón de arquitectura de software se basa en las ideas de reutilización de código y la separación de conceptos, características que buscan facilitar la tarea de desarrollo de aplicaciones y su posterior mantenimiento.&lt;/p&gt;
&lt;h2 id=&quot;una-aplicacion-sin-mvc&quot; tabindex=&quot;-1&quot;&gt;Una aplicación sin MVC&lt;/h2&gt;
&lt;p&gt;Si una aplicación no utiliza este modelo la función que modifique los datos debe además reflejar dicha modificación en la página para que la vea el usuario. Por ejemplo vamos a hacer una aplicación para gestionar un almacén. Entre otras muchas cosas tendrá una función (podemos llamarle &lt;em&gt;addProduct&lt;/em&gt;) que se encargue de añadir un nuevo producto al almacén y dicha función deberá realizar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;añadir el nuevo producto al almacén (por ejemplo añadiéndolo a un array de productos)&lt;/li&gt;
&lt;li&gt;pintar en la página ese nuevo producto (por ejemplo añadiendo una nueva línea a una tabla donde se muestran los productos)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// La función que se ejecuta cuando el usuario envía el
// formulario para añadir un producto debería hacer:
document.getElementById(&#39;product-form&#39;).addEventListener(&#39;submit&#39;, async (event) =&amp;gt; {
    event.preventDefault()
    // Coge los datos del formlario
    const name = document.getElementById(&#39;product-form-name&#39;).value
    const price = document.getElementById(&#39;product-form-name&#39;).price
    ...
    // Valida cada dato
    if (!name || name.length &amp;lt; 5 || ...)
    ...
    // Añade el producto a la BBDD
    const prod = await addProductToDatabase(payload)
    let newProd = new Product(prod.id, prod.name, prod.price, prod.units)
    this.products.push(newProd)
    ...
    // Pinta en la página el nuevo producto
    const DOMproduct = document.createElement(&#39;tr&#39;)
    DOMproduct.innerHTML = `
        &amp;lt;td&amp;gt;${newProd.id}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;${newProd.name}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;${newProd.price}&amp;lt;/td&amp;gt;
        &amp;lt;td&amp;gt;${newProd.units}&amp;lt;/td&amp;gt;`
    document.getElementById(&#39;products-table&#39;).apendChild(DOMproduct)
    // Gestiona los posibles errores producidos en todo este proceso
    ...
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como vemos, se va a convertir en una función muy grande y que se encarga de muchas cosas distintas por lo que va a ser difícil mantener ese código. Además toda la función es muy dependiente del HTML (en muchas partes se buscan elementos por su id).&lt;/p&gt;
&lt;h2 id=&quot;nuestro-patron-mvc&quot; tabindex=&quot;-1&quot;&gt;Nuestro patrón MVC&lt;/h2&gt;
&lt;p&gt;En una aplicación muy sencilla podemos no seguir este modelo pero en cuanto la misma se complica un poco es imprescindible programar siguiendo buenas prácticas ya que si no lo hacemos nuestro código se volverá rápidamente muy difícil de mantener.&lt;/p&gt;
&lt;p&gt;Hay muchas formas de implementar este modelo. Si estamos haciendo un proyecto con &lt;em&gt;OOP&lt;/em&gt; podemos seguir el patrón MVC usando clases. Si sólo usamos programación estructurada será igual pero en vez de clases y métodos tendremos funciones.&lt;/p&gt;
&lt;p&gt;Para organizar el código crearemos subcarpetas dentro de la carpeta &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;: aquí incluiremos las clases que constituyen el modelo de nuestra aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;view&lt;/code&gt;: aquí crearemos un fichero JS que será el encargado de la GUI de nuestra aplicación, el único dependiente del HTML. Nuestro fichero será una clase que representa toda la vista aunque en aplicaciones mayores lo normal es tener clases para cada página, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;controller&lt;/code&gt;: aquí crearemos el fichero JS que contendrá el controlador de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;services&lt;/code&gt;: aquí crearemos el fichero JS que se encargará de comunicarse con el servidor y proporcionar los datos al modelo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;De este forma, si quiero cambiar la forma en que se muestra algo voy directamente a la vista y modifico la función que se ocupa de ello.&lt;/p&gt;
&lt;p&gt;La vista será una clase cuyas propiedades serán elementos de la página HTML a los que accedamos frecuentemente, para no tener que buscarlos cada vez y para que estén disponibles para el controlador. Contendrá métodos para renderizar los distintos elementos de la vista.&lt;/p&gt;
&lt;p&gt;El controlador será una clase cuyas propedades serán el modelo y la vista, de forma que pueda acceder a ambos elementos. Tendrá métodos para las distintas acciones que pueda hacer el usuario (y que se ejecutarán como respuesta a dichas acciones, como veremos en el tema de &lt;em&gt;eventos&lt;/em&gt;). Cada uno de esos métodos llamará a métodos del modelo (para obtener o cambiar la información necesaria) y posteriormente de la vista (para reflejar esos cambios en lo que ve el usuario).&lt;/p&gt;
&lt;p&gt;Por su parte el modelo gestionará los datos de la aplicación llamando a los servicios para obtener datos del servidor o guardar en él las modificaciones pertinentes.&lt;/p&gt;
&lt;p&gt;El fichero principal de la aplicación instanciará un controlador y lo inicializará.&lt;/p&gt;
&lt;p&gt;Por ejemplo, siguiendo con la aplicación para gestionar un almacén. El modelo constará de la clase &lt;em&gt;Store&lt;/em&gt; que es nuestro almacén de productos (con métodos para añadir o eliminar productos, etc) y la clase &lt;em&gt;Product&lt;/em&gt; que gestiona cada producto del almacén (con métodos para crear un nuevo producto, etc).&lt;/p&gt;
&lt;p&gt;El fichero principal sería algo como:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;main.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const storeApp = new Controller()		// crea el controlador
storeApp.init()				// lo inicializa

// En desarrollo podemos añadir algunas líneas que luego quitaremos para
// imitar acciones del usuario y así ver el funcionamiento de la aplicación:
storeApp.addProductToStore({ name: &#39;Portátil Acer Travelmate E2100&#39;, price: 523.12 })
storeApp.changeProduct({ id: 1, price: 515.95 })
storeApp.deleteProduct(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;controller/index.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Controller {
    constructor() {
        this.store = new Store(1)		// crea el modelo, un Store con id 1
        this.view = new View()		// crea la vista
    }

    init() {
        // inicializa la vista y el modelo, si es necesario
        this.store.init()
        this.view.init()			

        // Le indica a la vista qué funciones callback se encargarán 
        // de responder a los eventos del usuario (siguiente tema)
        this.view.setSubmitHandler(this.handleSubmitProductForm.bind(this))
    }
	
    handleSubmitProductForm(payload) {
        // haría las comprobaciones necesarias sobre los datos
        if (!payload.name || payload.name.length &amp;lt; 5 || ...) {
            this.view.showErrorMessage(&#39;error&#39;, &#39;Datos incorrectos&#39;)
            return
        }
        ...
        // y luego dice al modelo que añada el producto
        try {
            const newProd = this.store.addProduct(prod)
            // si lo ha hecho le dice a la vista que lo pinte	
            this.view.renderNewProduct(newProd)	
        } catch(err) {
            this.view.showErrorMessage(&#39;error&#39;, &#39;Error al añadir el producto&#39;)
        }
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;model/store.class.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Store {
    constructor (id) {
        this.id=Number(id)
        this.products=[]
    }

    addProduct(payload) {
        // llama a métodos de los servicios para que añada el producto
        const prod = await addProductToDatabase(payload)
        let newProd = new Product(prod.id, prod.name, prod.price, prod.units)
        this.products.push(newProd)
        return newProd
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;model/product.class.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Product {
    constructor (id, name, price, units) {
        this.id = id
        this.name = name
        this.price = price
        this.units = units
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;view/index.js&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class View {
    constructor {
        this.messageDiv = document.getElementById(&#39;messages&#39;)
        this.productForm = document.getElementById(&#39;product-form&#39;)
        this.productsList = document.getElementById(&#39;products-table&#39;)
    }

    init() {
        ...			// inicializa la vista, si es necesario
    }

    setSubmitHandler(callback) {
        // código para que el controlador llame a la función callback
        // cuando se envíe el formulario de añadir un producto
        this.productForm.addEventListener(&#39;submit&#39;, (event) =&amp;gt; {
            event.preventDefault()
            const name = document.getElementById(&#39;product-form-name&#39;).value
            const price = document.getElementById(&#39;product-form-name&#39;).price
            ...
            callback({ name, price, ... })
        })
    }

    renderNewProduct(prod) {
        // código para añadir a la tabla el producto pasado añadiendo una nueva fila
        const DOMproduct = document.createElement(&#39;tr&#39;)
        DOMproduct.innerHTML = `
            &amp;lt;td&amp;gt;${newProd.id}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${newProd.name}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${newProd.price}&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;${newProd.units}&amp;lt;/td&amp;gt;`
        this.productsList.apendChild(DOMproduct)
    }
  
    showMessage(type, message) {
        // código para mostrar mensajes al usuario y no tener que usar los alert
        const DOMmessage = document.createElement(&#39;div&#39;)
        ...
        this.messageDiv.apendChild(DOMmessage)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis obtener más información y ver un ejemplo más completo en &lt;a href=&quot;https://www.natapuntes.es/patron-mvc-en-vanilla-javascript/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.natapuntes.es/patron-mvc-en-vanilla-javascript/&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/04-1-mvc/" >
        </entry>
        <entry>
            <title>
                04-DOM
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/04-dom/</id>
            <content type="html">
                &lt;h1 id=&quot;document-object-model-dom&quot; tabindex=&quot;-1&quot;&gt;Document Object Model (DOM)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#document-object-model-dom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Document Object Model (DOM)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceso-a-los-nodos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceso a los nodos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#acceso-a-nodos-a-partir-de-otros&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Acceso a nodos a partir de otros&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-de-un-nodo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades de un nodo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#manipular-el-%C3%A1rbol-dom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Manipular el árbol DOM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-nuevos-nodos-con-innerhtml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir nuevos nodos con &lt;em&gt;innerHTML&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#atributos-de-los-nodos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Atributos de los nodos&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#estilos-de-los-nodos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Estilos de los nodos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#atributos-de-clase&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Atributos de clase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#atributos-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Atributos de datos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;La mayoría de las veces que programamos con Javascript es para que se ejecute en una página web mostrada por el navegador. En este contexto tenemos acceso a ciertos objetos que nos permiten interactuar con la página (DOM) y con el navegador (Browser Object Model, BOM).&lt;/p&gt;
&lt;p&gt;El &lt;strong&gt;DOM&lt;/strong&gt; es una estructura en árbol que representa todos los elementos HTML de la página y sus atributos. Todo lo que contiene la página se representa como nodos del árbol y mediante el DOM podemos acceder a cada nodo, modificarlo, eliminarlo o añadir nuevos nodos de forma que cambiamos dinámicamente la página mostrada al usuario.&lt;/p&gt;
&lt;p&gt;La raíz del árbol DOM es &lt;strong&gt;document&lt;/strong&gt; y de este nodo cuelgan el resto de elementos HTML. Cada uno constituye su propio nodo y tiene subnodos con sus &lt;em&gt;atributos&lt;/em&gt;, &lt;em&gt;estilos&lt;/em&gt; y elementos HTML que contiene.&lt;/p&gt;
&lt;p&gt;Por ejemplo, la página HTML:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Página simple&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Esta página es &amp;lt;strong&amp;gt;muy simple&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se convierte en el siguiente árbol DOM:&lt;/p&gt;
&lt;p&gt;![Árbol DOM](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/domSimple.png)&lt;/p&gt;
&lt;p&gt;Cada etiqueta HTML suele originar 2 nodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Element: correspondiente a la etiqueta&lt;/li&gt;
&lt;li&gt;Text: correspondiente a su contenido (lo que hay entre la etiqueta y su par de cierre)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada nodo es un objeto con sus propiedades y métodos.&lt;/p&gt;
&lt;p&gt;El ejemplo anterior está simplificado porque sólo aparecen los nodos de tipo &lt;em&gt;&lt;strong&gt;elemento&lt;/strong&gt;&lt;/em&gt; pero en realidad también generan nodos los saltos de línea, tabuladores, espacios, comentarios, etc. En el siguiente ejemplo podemos ver TODOS los nodos que realmente se generan. La página:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;title&amp;gt;My Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;h1&amp;gt;Header&amp;lt;/h1&amp;gt;
  &amp;lt;p&amp;gt;
    Paragraph
  &amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;se convierte en el siguiente árbol DOM:&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;L. David Baron [CC BY-SA 3.0 (https://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons&quot; href=&quot;https://commons.wikimedia.org/wiki/File:Dom_tree.png&quot;&gt;&lt;img width=&quot;512&quot; alt=&quot;Dom tree&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/5/58/Dom_tree.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;acceso-a-los-nodos&quot; tabindex=&quot;-1&quot;&gt;Acceso a los nodos&lt;/h2&gt;
&lt;p&gt;Los principales métodos para acceder a los diferentes nodos son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementById(id)&lt;/strong&gt;: devuelve el nodo con la &lt;em&gt;id&lt;/em&gt; pasada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodo = document.getElementById(&#39;main&#39;);   // nodo contendrá el nodo cuya id es _main_
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementsByClassName(clase)&lt;/strong&gt;: devuelve una colección (similar a un array) con todos los nodos de la &lt;em&gt;clase&lt;/em&gt; indicada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodos = document.getElementsByClassName(&#39;error&#39;);   // nodos contendrá todos los nodos cuya clase es _error_
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: las colecciones son similares a arrays (se accede a sus elementos con &lt;em&gt;[indice]&lt;/em&gt;) pero no se les pueden aplicar sus métodos &lt;em&gt;filter&lt;/em&gt;, &lt;em&gt;map&lt;/em&gt;, ... a menos que se conviertan a arrays con &lt;em&gt;Array.from()&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementsByTagName(etiqueta)&lt;/strong&gt;: devuelve una colección con todos los nodos de la &lt;em&gt;etiqueta&lt;/em&gt; HTML indicada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodos = document.getElementsByTagName(&#39;p&#39;);   // nodos contendrá todos los nodos de tipo  _&amp;lt;p&amp;gt;_
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.getElementsByName(name)&lt;/strong&gt;: devuelve una colección con todos los nodos que contengan un atributo &lt;code&gt;name&lt;/code&gt; con el valor indicado. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let radiosSexo = document.getElementsByName(&#39;sexo&#39;);   // radiosSexo contendrá todos los nodos con ese atributo (seguramente radiobuttons con name=&amp;quot;sexo&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.querySelector(selector)&lt;/strong&gt;: devuelve el primer nodo seleccionad por el &lt;em&gt;selector&lt;/em&gt; CSS indicado. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodo = document.querySelector(&#39;p.error&#39;);   // nodo contendrá el primer párrafo de clase _error_
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.querySelectorAll(selector)&lt;/strong&gt;: devuelve una colección con todos los nodos seleccionados por el &lt;em&gt;selector&lt;/em&gt; CSS indicado. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nodos = document.querySelectorAll(&#39;p.error&#39;);   // nodos contendrá todos los párrafos de clase _error_
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: al aplicar estos métodos sobre &lt;em&gt;document&lt;/em&gt; se seleccionará sobre la página pero podrían también aplicarse a cualquier nodo y en ese caso la búsqueda se realizaría sólo entre los descendientes de dicho nodo.&lt;/p&gt;
&lt;p&gt;También tenemos &#39;atajos&#39; para obtener algunos elementos comunes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.documentElement&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;html&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.head&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;head&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.body&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;body&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.title&lt;/code&gt;: devuelve el nodo del elemento &lt;em&gt;&amp;lt;title&amp;gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.link&lt;/code&gt;: devuelve una colección con todos los hiperenlaces del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.anchor&lt;/code&gt;: devuelve una colección con todas las anclas del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.forms&lt;/code&gt;: devuelve una colección con todos los formularios del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.images&lt;/code&gt;: devuelve una colección con todas las imágenes del documento&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.scripts&lt;/code&gt;: devuelve una colección con todos los scripts del documento&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Para hacer los ejercicios de este tema descárgate &lt;a href=&quot;https://pedroporo.github.io/ejemploDOM.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;esta página de ejemplo&lt;/a&gt; y ábrela en tu navegador. Obtén por consola, al menos de 2 formas diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El elemento con id &#39;input2&#39;
&lt;ul&gt;
&lt;li&gt;document.getElementById(&#39;input2&#39;) o document.querySelector(&#39;#input2&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;La colección de párrafos
&lt;ul&gt;
&lt;li&gt;document.getElementsByTagName(&#39;p&#39;) o document.querySelectorAll(&#39;p&#39;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&quot;lo-mismo-pero-solo-de-los-parrafos-que-hay-dentro-del-div-lipsum&quot; tabindex=&quot;-1&quot;&gt;Lo mismo pero sólo de los párrafos que hay dentro del div &#39;lipsum&#39;&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;El formulario (ojo, no la colección con el formulario sino sólo el formulario)&lt;/li&gt;
&lt;li&gt;Todos los inputs&lt;/li&gt;
&lt;li&gt;Sólo los inputs con nombre &#39;sexo&#39;&lt;/li&gt;
&lt;li&gt;Los items de lista de la clase &#39;important&#39; (sólo los LI)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;acceso-a-nodos-a-partir-de-otros&quot; tabindex=&quot;-1&quot;&gt;Acceso a nodos a partir de otros&lt;/h2&gt;
&lt;p&gt;En muchas ocasiones queremos acceder a cierto nodo a partir de uno dado. Para ello tenemos los siguientes métodos que se aplican sobre un elemento del árbol DOM:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.parentElement&lt;/code&gt;: devuelve el elemento padre de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.children&lt;/code&gt;: devuelve la colección con todos los elementos hijo de &lt;em&gt;elemento&lt;/em&gt; (sólo elementos HTML, no comentarios ni nodos de tipo texto)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.childNodes&lt;/code&gt;: devuelve la colección con todos los hijos de &lt;em&gt;elemento&lt;/em&gt;, incluyendo comentarios y nodos de tipo texto por lo que no suele utilizarse&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.firstElementChild&lt;/code&gt;: devuelve el elemento HTML que es el primer hijo de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.firstChild&lt;/code&gt;: devuelve el nodo que es el primer hijo de &lt;em&gt;elemento&lt;/em&gt; (incluyendo nodos de tipo texto o comentarios)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.lastElementChild&lt;/code&gt;, &lt;code&gt;elemento.lastChild&lt;/code&gt;: igual pero con el último hijo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.nextElementSibling&lt;/code&gt;: devuelve el elemento HTML que es el siguiente hermano de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.nextSibling&lt;/code&gt;: devuelve el nodo que es el siguiente hermano de &lt;em&gt;elemento&lt;/em&gt; (incluyendo nodos de tipo texto o comentarios)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.previousElementSibling&lt;/code&gt;, &lt;code&gt;elemento.previousSibling&lt;/code&gt;: igual pero con el hermano anterior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.hasChildNodes&lt;/code&gt;: indica si &lt;em&gt;elemento&lt;/em&gt; tiene o no nodos hijos&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.childElementCount&lt;/code&gt;: devuelve el nº de nodos hijo de  &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.closest(selector)&lt;/code&gt;: devuelve el ancestro más cercano que coincide con el selector. Por ejemplo si el elemento es un &amp;lt;td&amp;gt; de una tabla entonces &lt;code&gt;elemento.closest(&#39;table&#39;)&lt;/code&gt; devolverá la tabla a la que pertenece&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: a menos que me interesen comentarios, saltos de página, etc &lt;strong&gt;siempre&lt;/strong&gt; debo usar los métodos que sólo devuelven elementos HTML, no todos los nodos.&lt;/p&gt;
&lt;p&gt;![Recorrer el árbol DOM](/img/user/01 Apuntes/DAW/Javascript Teoria Batoi/img/domRelaciones.png)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Siguiento con la &lt;a href=&quot;https://pedroporo.github.io/ejemploDOM.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;página de ejemplo&lt;/a&gt; obtén desde la consola, al menos de 2 formas diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El primér párrafo que hay dentro del div &#39;lipsum&#39;&lt;/li&gt;
&lt;li&gt;El segundo párrafo de &#39;lipsum&#39;&lt;/li&gt;
&lt;li&gt;El último item de la lista&lt;/li&gt;
&lt;li&gt;La label de &#39;Escoge sexo&#39;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;propiedades-de-un-nodo&quot; tabindex=&quot;-1&quot;&gt;Propiedades de un nodo&lt;/h3&gt;
&lt;p&gt;Las principales propiedades de un nodo son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.innerHTML&lt;/code&gt;: todo lo que hay entre la etiqueta que abre &lt;em&gt;elemento&lt;/em&gt; y la que lo cierra, incluyendo otras etiquetas HTML. Por ejemplo si &lt;em&gt;elemento&lt;/em&gt; es el nodo &lt;code&gt;&amp;lt;p&amp;gt;Esta página es &amp;lt;strong&amp;gt;muy simple&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let contenido = elemento.innerHTML;   // contenido=&#39;Esta página es &amp;lt;strong&amp;gt;muy simple&amp;lt;/strong&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.textContent&lt;/code&gt;: todo lo que hay entre la etiqueta que abre &lt;em&gt;elemento&lt;/em&gt; y la que lo cierra, pero ignorando otras etiquetas HTML. Siguiendo con el ejemplo anterior:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let contenido = elemento.textContent;   // contenido=&#39;Esta página es muy simple&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.value&lt;/code&gt;: devuelve la propiedad &#39;value&#39; de un &amp;lt;input&amp;gt; (en el caso de un &amp;lt;input&amp;gt; de tipo text devuelve lo que hay escrito en él). Como los &amp;lt;inputs&amp;gt; no tienen etiqueta de cierre (&amp;lt;/input&amp;gt;) no podemos usar &lt;em&gt;.innerHTML&lt;/em&gt; ni &lt;em&gt;.textContent&lt;/em&gt;.  Por ejemplo si &lt;em&gt;elem1&lt;/em&gt; es el nodo &lt;code&gt;&amp;lt;input name=&amp;quot;nombre&amp;quot;&amp;gt;&lt;/code&gt; y &lt;em&gt;elem2&lt;/em&gt; es el nodo &lt;code&gt;&amp;lt;input tipe=&amp;quot;radio&amp;quot; value=&amp;quot;H&amp;quot;&amp;gt;Hombre&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let cont1 = elem1.value;   // cont1 valdría lo que haya escrito en el &amp;lt;input&amp;gt; en ese momento
let cont2 = elem2.value;   // cont2=&amp;quot;H&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otras propiedades:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.innerText&lt;/code&gt;: igual que &lt;em&gt;textContent&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.focus&lt;/code&gt;: da el foco a &lt;em&gt;elemento&lt;/em&gt; (para inputs, etc). Para quitarle el foco &lt;code&gt;elemento.blur&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.clientHeight&lt;/code&gt; / &lt;code&gt;elemento.clientWidth&lt;/code&gt;: devuelve el alto / ancho visible del &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.offsetHeight&lt;/code&gt; / &lt;code&gt;elemento.offsetWidth&lt;/code&gt;: devuelve el alto / ancho total del &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.clientLeft&lt;/code&gt; / &lt;code&gt;elemento.clientTop&lt;/code&gt;: devuelve la distancia de &lt;em&gt;elemento&lt;/em&gt; al borde izquierdo / superior&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.offsetLeft&lt;/code&gt; / &lt;code&gt;elemento.offsetTop&lt;/code&gt;: devuelve los píxels que hemos desplazado &lt;em&gt;elemento&lt;/em&gt; a la izquierda / abajo&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Obtén desde la consola, al menos de 2 formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El innerHTML de la etiqueta de &#39;Escoge sexo&#39;&lt;/li&gt;
&lt;li&gt;El textContent de esa etiqueta&lt;/li&gt;
&lt;li&gt;El valor del primer input de sexo&lt;/li&gt;
&lt;li&gt;El valor del sexo que esté seleccionado (difícil, búscalo por Internet)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;manipular-el-arbol-dom&quot; tabindex=&quot;-1&quot;&gt;Manipular el árbol DOM&lt;/h2&gt;
&lt;p&gt;Vamos a ver qué métodos nos permiten cambiar el árbol DOM, y por tanto modificar la página:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createElement(&#39;etiqueta&#39;)&lt;/code&gt;: crea un nuevo elemento HTML con la etiqueta indicada, pero aún no se añade a la página. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nuevoLi = document.createElement(&#39;li&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.append(elementos o texto)&lt;/code&gt;: añade al DOM los parámetros pasados como últimos hijos de &lt;em&gt;elemento&lt;/em&gt;. Se le puede pasar tanto un nodo DOM como una cadena de texto (para la que se creará su nodo de texto correspondiente) y que se le pueden pasar varios parámetros para crear varios nodos. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;nuevoLi.append(&#39;Nuevo elemento de lista&#39;);     // añade el texto pasado al elemento LI creado
let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
miPrimeraLista.append(nuevoLi);    // añade LI como último hijo de UL, es decir al final de la lista
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.prepend(elementos o texto)&lt;/code&gt;: como el anterior pero en lugar de añadirlos como últimos hijos los añade antes del primer hijo.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const primerLi = document.createElement(&#39;li&#39;);
primerLi.append(&#39;Primer elemento de lista&#39;); 
let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0]; 
miPrimeraLista.prepend(nuevoLi);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.after(elementos o texto)&lt;/code&gt;: como &lt;em&gt;append&lt;/em&gt; pero en lugar de añadirlos como últimos hijos los añade como los siguientes hermanos de &lt;em&gt;elemento&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const otroLi = document.createElement(&#39;li&#39;);
otroLi.append(&#39;Segundo elemento de lista&#39;); 
primerLi.after(otroLi);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.before(elementos o texto)&lt;/code&gt;: como el anterior pero los añade como los anteriores hermanos de &lt;em&gt;elemento&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.remove()&lt;/code&gt;: borra el nodo &lt;em&gt;elemento&lt;/em&gt; del documento.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.replaceWith(nuevoNodo)&lt;/code&gt;: reemplaza el nodo &lt;em&gt;elemento&lt;/em&gt; con el &lt;em&gt;nuevoNodo&lt;/em&gt; pasado&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let primerElementoDeLista = document.getElementsByTagName(&#39;ul&#39;)[0].firstChild;  // selecciona el 1º LI de miPrimeraLista
primerElementoDeLista.replaceChild(nuevoLi);    // reemplaza el 1º elemento de la lista con nuevoLi
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elementoAClonar.cloneNode(boolean)&lt;/code&gt;: devuelve un clon de &lt;em&gt;elementoAClonar&lt;/em&gt; o de &lt;em&gt;elementoAClonar&lt;/em&gt; con todos sus descendientes según le pasemos como parámetro &lt;em&gt;false&lt;/em&gt; o &lt;em&gt;true&lt;/em&gt;. Luego podremos insertarlo donde queramos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otros métodos menos usados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createTextNode(&#39;texto&#39;)&lt;/code&gt;: crea un nuevo nodo de texto con el texto indicado, que luego tendremos que añadir a un nodo HTML. Normalmente no se usa porque &lt;em&gt;append&lt;/em&gt; y el resto de métodos anteriores ya lo crean automáticamente. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let textoLi = document.createTextNode(&#39;Nuevo elemento de lista&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.appendChild(nuevoNodo)&lt;/code&gt;: añade &lt;em&gt;nuevoNodo&lt;/em&gt; como último hijo de &lt;em&gt;elemento&lt;/em&gt; y lo devuelve. Se diferencia con &lt;em&gt;append&lt;/em&gt; en que sólo permite un parámetro y éste debe ser un nodo, no puede ser texto. Por eso no suele usarse. Ejemplo:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;nuevoLi.appendChild(textoLi);     // añade el texto creado al elemento LI creado
let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
miPrimeraLista.appendChild(nuevoLi);    // añade LI como último hijo de UL, es decir al final de la lista
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.insertBefore(nuevoNodo, nodo)&lt;/code&gt;: añade &lt;em&gt;nuevoNodo&lt;/em&gt; como hijo de &lt;em&gt;elemento&lt;/em&gt; antes del hijo &lt;em&gt;nodo&lt;/em&gt;. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];                // selecciona el 1º UL de la página
let primerElementoDeLista = miPrimeraLista.getElementsByTagName(&#39;li&#39;)[0];   // selecciona el 1º LI de miPrimeraLista
miPrimeraLista.insertBefore(nuevoLi, primerElementoDeLista);                // añade LI al principio de la lista
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.removeChild(nodo)&lt;/code&gt;: borra &lt;em&gt;nodo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt; y por tanto se elimina de la página. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
let primerElementoDeLista = miPrimeraLista.getElementsByTagName(&#39;li&#39;)[0];  // selecciona el 1º LI de miPrimeraLista
miPrimeraLista.removeChild(primerElementoDeLista);    // borra el primer elemento de la lista
// También podríamos haberlo borrado sin tener el padre con:
primerElementoDeLista.parentElement.removeChild(primerElementoDeLista);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.replaceChild(nuevoNodo, viejoNodo)&lt;/code&gt;: reemplaza &lt;em&gt;viejoNodo&lt;/em&gt; con &lt;em&gt;nuevoNodo&lt;/em&gt; como hijo de &lt;em&gt;elemento&lt;/em&gt;. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miPrimeraLista = document.getElementsByTagName(&#39;ul&#39;)[0];  // selecciona el 1º UL de la página
let primerElementoDeLista = miPrimeraLista.getElementsByTagName(&#39;li&#39;)[0];  // selecciona el 1º LI de miPrimeraLista
miPrimeraLista.replaceChild(nuevoLi, primerElementoDeLista);    // reemplaza el 1º elemento de la lista con nuevoLi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: Si añado con el método &lt;code&gt;append&lt;/code&gt; o &lt;code&gt;appendChild&lt;/code&gt; un nodo que estaba en otro sitio &lt;strong&gt;se elimina de donde estaba&lt;/strong&gt; para añadirse a su nueva posición. Si quiero que esté en los 2 sitios deberé clonar el nodo y luego añadir el clon y no el nodo original.&lt;/p&gt;
&lt;h3 id=&quot;anadir-nuevos-nodos-con-em-inner-html-em&quot; tabindex=&quot;-1&quot;&gt;Añadir nuevos nodos con &lt;em&gt;innerHTML&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Supongamos que tenemos un DIV cuya &lt;em&gt;id&lt;/em&gt; es &lt;em&gt;myDiv&lt;/em&gt; al que queremos añadir al final dos párrafos, el último de ellos con un texto en negrita. El código podría ser:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miDiv = document.getElementById(&#39;myDiv&#39;);
let nuevoParrafo = document.createElement(&#39;p&#39;);
nuevoParrafo.textContent = &#39;Párrafo añadido al final&#39;;
let ultimoParrafo = document.createElement(&#39;p&#39;);
const textoNegrita = document.createElement(&#39;strong&#39;);
textoNegrita.textContent = &#39;con texto en negrita&#39;;
ultimoParrafo.append(&#39;Último párrafo &#39;, textoNegrita);
miDiv.append(nuevoParrafo, ultimoParrafo);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si utilizamos la propiedad &lt;strong&gt;innerHTML&lt;/strong&gt; el código a usar es mucho más simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let miDiv = document.getElementById(&#39;myDiv&#39;);
miDiv.innerHTML += &#39;&amp;lt;p&amp;gt;Párrafo añadido al final&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Último párrafo &amp;lt;strong&amp;gt;con texto en negrita&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;OJO&lt;/strong&gt;: La forma de añadir el último párrafo (línea &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#3&quot;&gt;#3&lt;/a&gt;: &lt;code&gt;miDiv.innerHTML+=&#39;&amp;lt;p&amp;gt;Párrafo añadido al final&amp;lt;/p&amp;gt;&#39;;&lt;/code&gt;) aunque es válida no es muy eficiente ya que obliga al navegador a volver a pintar TODO el contenido de miDIV.&lt;/p&gt;
&lt;p&gt;Podemos ver más ejemplos de creación y eliminación de nodos en &lt;a href=&quot;http://www.w3schools.com/js/js_htmldom_nodes.asp&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;W3Schools&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Añade a la página:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un nuevo párrafo al final del DIV &lt;em&gt;&#39;lipsum&#39;&lt;/em&gt; con el texto &amp;quot;Nuevo párrafo &lt;strong&gt;añadido&lt;/strong&gt; por javascript&amp;quot; (fíjate que una palabra está en negrita)&lt;/li&gt;
&lt;li&gt;Un nuevo elemento al formulario tras el &lt;em&gt;&#39;Dato 1&#39;&lt;/em&gt; con la etiqueta &lt;em&gt;&#39;Dato 1 bis&#39;&lt;/em&gt; y el INPUT con id &lt;em&gt;&#39;input1bis&#39;&lt;/em&gt; que al cargar la página tendrá escrito &amp;quot;Hola&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;atributos-de-los-nodos&quot; tabindex=&quot;-1&quot;&gt;Atributos de los nodos&lt;/h2&gt;
&lt;p&gt;Podemos ver y modificar los valores de los atributos de cada elemento HTML y también añadir o eliminar atributos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemento.attributes&lt;/code&gt;: devuelve un array con todos los atributos de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.hasAttribute(&#39;nombreAtributo&#39;)&lt;/code&gt;: indica si &lt;em&gt;elemento&lt;/em&gt; tiene o no definido el atributo &lt;em&gt;nombreAtributo&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.getAttribute(&#39;nombreAtributo&#39;)&lt;/code&gt;: devuelve el valor del atributo &lt;em&gt;nombreAtributo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt;. Para muchos elementos este valor puede directamente con &lt;code&gt;elemento.atributo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.setAttribute(&#39;nombreAtributo&#39;, &#39;valor&#39;)&lt;/code&gt;: establece &lt;em&gt;valor&lt;/em&gt; como nuevo valor del atributo &lt;em&gt;nombreAtributo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt;. También puede cambiarse el valor directamente con &lt;code&gt;elemento.atributo=valor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elemento.removeAttribute(&#39;nombreAtributo&#39;)&lt;/code&gt;: elimina el atributo &lt;em&gt;nombreAtributo&lt;/em&gt; de &lt;em&gt;elemento&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A algunos atributos comunes como &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;title&lt;/code&gt; o &lt;code&gt;className&lt;/code&gt; (para el atributo &lt;strong&gt;class&lt;/strong&gt;) se puede acceder y cambiar como si fueran una propiedad del elemento (&lt;code&gt;elemento.atributo&lt;/code&gt;). Ejemplos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.id = &#39;primera-lista&#39;;
// es equivalente ha hacer:
elemento.setAttribute(&#39;id&#39;, &#39;primera-lista&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;estilos-de-los-nodos&quot; tabindex=&quot;-1&quot;&gt;Estilos de los nodos&lt;/h3&gt;
&lt;p&gt;Los estilos están accesibles como el atributo &lt;strong&gt;style&lt;/strong&gt;. Cualquier estilo es una propiedad de dicho atributo pero con la sintaxis &lt;em&gt;camelCase&lt;/em&gt; en vez de &lt;em&gt;kebab-case&lt;/em&gt;. Por ejemplo para cambiar el color de fondo (propiedad background-color) y ponerle el color &lt;em&gt;rojo&lt;/em&gt; al elemento &lt;em&gt;miPrimeraLista&lt;/em&gt; haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;miPrimeraLista.style.backgroundColor = &#39;red&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De todas formas normalmente &lt;strong&gt;NO CAMBIAREMOS ESTILOS&lt;/strong&gt; a los elementos sino que les pondremos o quitaremos clases que harán que se le apliquen o no los estilos definidos para ellas en el CSS.&lt;/p&gt;
&lt;h3 id=&quot;atributos-de-clase&quot; tabindex=&quot;-1&quot;&gt;Atributos de clase&lt;/h3&gt;
&lt;p&gt;Ya sabemos que el aspecto de la página debe configurarse en el CSS por lo que no debemos aplicar atributos &lt;em&gt;style&lt;/em&gt; al HTML. En lugar de ello les ponemos clases a los elementos que harán que se les aplique el estilo definido para dicha clase.&lt;/p&gt;
&lt;p&gt;Como es algo muy común en lugar de utilizar las instrucciones de &lt;code&gt;elemento.setAttribute(&#39;className&#39;, &#39;destacado&#39;)&lt;/code&gt; o directamente &lt;code&gt;elemento.className=&#39;destacado&#39;&lt;/code&gt; podemos usar la propiedad &lt;strong&gt;&lt;em&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/API/Element/classList&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;classList&lt;/a&gt;&lt;/em&gt;&lt;/strong&gt; que devuelve la colección de todas las clases que tiene el elemento. Por ejemplo si &lt;em&gt;elemento&lt;/em&gt; es &lt;code&gt;&amp;lt;p class=&amp;quot;destacado direccion&amp;quot;&amp;gt;...&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let clases=elemento.classList;   // clases=[&#39;destacado&#39;, &#39;direccion&#39;], OJO es una colección, no un Array
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Además dispone de los métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.add(clase)&lt;/strong&gt;: añade al elemento la clase pasada (si ya la tiene no hace nada). Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.add(&#39;primero&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;destacado direccion primero&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.remove(clase)&lt;/strong&gt;: elimina del elemento la clase pasada (si no la tiene no hace nada). Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.remove(&#39;direccion&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;destacado primero&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.toogle(clase)&lt;/strong&gt;: añade la clase pasada si no la tiene o la elimina si la tiene ya. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.toogle(&#39;destacado&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;primero&amp;quot;&amp;gt;...
elemento.classList.toogle(&#39;direccion&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;primero direccion&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.contains(clase)&lt;/strong&gt;: dice si el elemento tiene o no la clase pasada. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.contains(&#39;direccion&#39;);   // devuelve true
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;.replace(oldClase, newClase)&lt;/strong&gt;: reemplaza del elemento una clase existente por una nueva. Ej.:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;elemento.classList.replace(&#39;primero&#39;, &#39;ultimo&#39;);   // ahora elemento será &amp;lt;p class=&amp;quot;ultimo direccion&amp;quot;&amp;gt;...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tened en cuenta que NO todos los navegadores soportan &lt;em&gt;classList&lt;/em&gt; por lo que si queremos añadir o quitar clases en navegadores que no lo soportan debemos hacerlo con los métodos estándar, por ejemplo para añadir la clase &#39;rojo&#39;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let clases = elemento.className.split(&amp;quot; &amp;quot;);
if (clases.indexOf(&#39;rojo&#39;) == -1) {
  elemento.className += &#39; &#39; + &#39;rojo&#39;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;atributos-de-datos&quot; tabindex=&quot;-1&quot;&gt;Atributos de datos&lt;/h3&gt;
&lt;p&gt;HTML5 permite agregar atributos personalizados no visuales a las etiquetas utilizando &lt;code&gt;data-*&lt;/code&gt;. Estos atributos pueden ser accesibles a través de JavaScript usando &lt;code&gt;dataset&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;article
    id=&amp;quot;electriccars&amp;quot;
    data-columns=&amp;quot;3&amp;quot;
    data-index-number=&amp;quot;12314&amp;quot;
    data-parent=&amp;quot;cars&amp;quot;&amp;gt;
    ...
&amp;lt;/article&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let article = document.getElementById(&#39;electriccars&#39;);
console.log(article.dataset.columns); // 3
console.log(article.dataset.indexNumber); // 12314
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fuente: &lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/dom.html#atributos-de-datos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de José Castillo&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/04-dom/" >
        </entry>
        <entry>
            <title>
                03.1-webpack
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/03-1-webpack/</id>
            <content type="html">
                &lt;h1 id=&quot;webpack&quot; tabindex=&quot;-1&quot;&gt;Webpack&lt;/h1&gt;
&lt;p&gt;Cuando trabajamos con clases la mejor forma de organizar el código es poniendo cada clase un su propio fichero javascript. Esto reduce el acoplamiento de nuestro código y nos permite reutilizar una clase en cualquier proyecto en que la necesitemos.&lt;/p&gt;
&lt;p&gt;Sin embargo tener muchos ficheros hace que tengamos que importarlos todos, y en el orden adecuado, en nuestro &lt;em&gt;index.html&lt;/em&gt; (mediante etiquetas &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;) lo que empieza a ser engorroso.&lt;/p&gt;
&lt;p&gt;Para evitar este problema se utilizan los &lt;em&gt;module bundlers&lt;/em&gt; o empaquetadores de código que unen todo el código de los distintos ficheros javascript en un único fichero que es el que se importa en el &lt;em&gt;index.html&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Además proporciona otras ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;transpila&lt;/strong&gt; el código, de forma que podemos usar sentencias javascript que aún no soportan muchos navegadores ya que se convertirán a sentencias que hacen lo mismo pero con código &lt;em&gt;legacy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minimiza&lt;/strong&gt; y &lt;strong&gt;optimiza&lt;/strong&gt; el código para que ocupe menos y su carga sea más rápida&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ofusca&lt;/strong&gt; el código al minimizarlo lo que dificulta que el usuario pueda ver en la consola lo que hace el programa y manipularlo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros usaremos el &lt;em&gt;bundler&lt;/em&gt; *&lt;em&gt;webpack&lt;/em&gt; que es el más usado en entorno &lt;em&gt;frontend&lt;/em&gt;. Junto a &lt;em&gt;npm&lt;/em&gt; tendremos una forma fácil y práctica de empaquetar el código.&lt;/p&gt;
&lt;h2 id=&quot;trabajar-con-distintos-ficheros&quot; tabindex=&quot;-1&quot;&gt;Trabajar con distintos ficheros&lt;/h2&gt;
&lt;p&gt;Para que un fichero pueda tener acceso a código de otro fichero hay que hacer 2 cosas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El fichero al que queremos acceder debe &lt;strong&gt;exportar&lt;/strong&gt; el código que desea que sea accesible desde otros ficheros&lt;/li&gt;
&lt;li&gt;El fichero que quiere acceder a ese código debe &lt;strong&gt;importarlo&lt;/strong&gt; a una variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto es lo que hacíamos en el ejercicio de la frase para poder pasar los tests y lo que haremos con los ficheros donde declaramos clases.&lt;/p&gt;
&lt;h3 id=&quot;exportamos-el-codigo&quot; tabindex=&quot;-1&quot;&gt;Exportamos el código&lt;/h3&gt;
&lt;p&gt;En el caso de un fichero con una función a exportar será lo que exportaremos. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero cuadrado.js
const cuadrado = (value) =&amp;gt; value * value
module.exports = cuadrado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso de querer exportar muchas funciones lo más sencillo es exportarlas juntas en un objeto como en el fichero &lt;em&gt;functions.js&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;module.exports = {
	letras,
	palabras,
	maysc,
	titulo,
	letrasReves,
	palabrasReves,
	palindromo
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aquí estamos exportando un objeto que contiene una serie de funciones&lt;/p&gt;
&lt;p&gt;Si es un fichero que define una clase la exportamos tal cual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Product {
    constructor() {

    }
    ...
}
module.exports = Product
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;lo-importamos-donde-queramos-usarlo&quot; tabindex=&quot;-1&quot;&gt;Lo importamos donde queramos usarlo&lt;/h3&gt;
&lt;p&gt;En el fichero donde vayamos a usar dicho código lo importamos a una variable. Si se trata de una única función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const cuadrado = require(&#39;./cuadrado.js&#39;)
console.log(&#39;El cuadrado de 2 es &#39; + cuadrado(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si es un fichero con muchas funciones exportadas a un objeto podemos importar sólo las que queramos o todas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const functions = require(&#39;./functions.js&#39;)
console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + functions.letras(&amp;quot;Hola&amp;quot;) + &#39; y al revés es &#39; + functions.letrasReves(&#39;Hola&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o bien&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const { letras, letrasReves } = require(&#39;./functions.js&#39;)
console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + letras(&amp;quot;Hola&amp;quot;) + &#39; y al revés es &#39; + letrasReves(&#39;Hola&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para usar una clase la importamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const Product = require(&#39;./product.class&#39;)
const myProd = new Product()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;usar-em-webpack-em&quot; tabindex=&quot;-1&quot;&gt;Usar &lt;em&gt;webpack&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Una vez que tenemos nuestro código correctamente exportado e importado vamos a usar &lt;em&gt;webpack&lt;/em&gt; para empaquetarlo.&lt;/p&gt;
&lt;p&gt;Lo primero que habría que hacer es crear nuestro proyecto si no lo hemos hecho ya mediante &lt;code&gt;npm init&lt;/code&gt;. Esto inicializa el proyecto y crea el fichero &lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt;. Recuerda escribir &lt;em&gt;jest&lt;/em&gt; cuando nos pregunte por los tests.&lt;/p&gt;
&lt;p&gt;Para usar &lt;em&gt;webpack&lt;/em&gt; simplemente lo incluímos mediante &lt;em&gt;npm&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D webpack webpack-cli
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La opción &lt;code&gt;-D&lt;/code&gt; instala webpack como dependencia de desarrollo, lo que significa que en la versión de producción del código no se incluirá.&lt;/p&gt;
&lt;p&gt;Para instalar todas nuestras dependencias y que se cree la carpeta &lt;em&gt;node_modules&lt;/em&gt; ejecutamos &lt;code&gt;npm install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ahora ya estamos listos para usar &lt;em&gt;webpack&lt;/em&gt;. Como hemos dicho es un &lt;em&gt;module bundler&lt;/em&gt;, es decir, un empaquetador de código. Toma el fichero que le indiquemos como fichero principal (por defecto el &lt;strong&gt;&lt;em&gt;./src/index.js&lt;/em&gt;&lt;/strong&gt;), lo junta con todas sus dependencias (sus &lt;em&gt;require&lt;/em&gt; y los de sus dependencias) y los transpila a un único fichero (por defecto &lt;strong&gt;&lt;em&gt;./dist/main.js&lt;/em&gt;&lt;/strong&gt;) que es el que se enlaza en el &lt;em&gt;index.html&lt;/em&gt;. Además minimiza y optimiza dicho código al generarlo.&lt;/p&gt;
&lt;p&gt;Para generar el código empaquetado ejecutamos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este código hay que ejecutarlo cada vez que se hagan cambios en el código. Si no quieres tener que ejecutarlo cada vez se puede lanzar con la opción &lt;code&gt;--watch&lt;/code&gt; que deja la consola abierta y ejecuta el comando automáticamente cuando guardamos cualquiera de los ficheros del proyecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --mode=development --watch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si nuestro fichero principal no es &lt;code&gt;src/index.js&lt;/code&gt; lo indicaremos con la opción &lt;code&gt;--entry&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npx webpack --entry=scripts/main.js --mode=development
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cuando usamos webpack le tenemos que indicar que tipo de código de salida queremos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;development&lt;/strong&gt;: &lt;em&gt;webpack&lt;/em&gt; permite &amp;quot;seguir&amp;quot; la ejecución del código desde la consola ya que &amp;quot;mapea&amp;quot; el código generado al original de forma que en la consola vemos como si se ejecutara nuestro código (los distintos ficheros) en vez del código generado por &lt;em&gt;webpack&lt;/em&gt; que es el que realmente se está ejecutando&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;production&lt;/strong&gt;: minimiza y optimiza el código para producción y ya no es posible desde la consola acceder al código original. Es lo que haremos para generar el código que subiremos al servidor de producción (NUNCA subimos el código de desarrollo).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podéis obtener más información en infinidad de páginas de internet y en la &lt;a href=&quot;https://webpack.js.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;web oficial de webpack&lt;/a&gt;. Las diferentes opciones que podemos pasarle a este comando las podemos consultar en la página del &lt;a href=&quot;https://webpack.js.org/api/cli/#flags&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CLI de webpack&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/03-1-webpack/" >
        </entry>
        <entry>
            <title>
                03.1-vite
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/03-1-vite/</id>
            <content type="html">
                &lt;h1 id=&quot;vite&quot; tabindex=&quot;-1&quot;&gt;Vite&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#vite&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Vite&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#crear-un-nuevo-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Crear un nuevo proyecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desarrollar-nuestro-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desarrollar nuestro proyecto&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#trabajar-con-distintos-ficheros-de-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Trabajar con distintos ficheros de código&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#named-export&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Named export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#default-export&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Default export&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#im%C3%A1genes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Imágenes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#paso-a-producci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Paso a producción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#testear-el-proyecto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Testear el proyecto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Cuando crece el tamaño de un proyecto y tenemos más ficheros de código (cómo al trabajar con clases) es necesario organizarlos de forma que sea fácil encontrarlos y que no haya problemas de dependencias.&lt;/p&gt;
&lt;p&gt;Sin embargo tener muchos ficheros hace que tengamos que importarlos todos, y en el orden adecuado, en nuestro &lt;em&gt;index.html&lt;/em&gt; (mediante etiquetas &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;) lo que empieza a ser engorroso y reduce el rendimiento al tener el navegador que hacer muchas peticiones HTTP.&lt;/p&gt;
&lt;p&gt;Además muchas veces incluimos en el código características del lenguaje que aún no están soportadas por todos los navegadores y cuantos más código usemos más se reduce el número de nevegadores que soportan nuestro código.&lt;/p&gt;
&lt;p&gt;Para evitar este problema se utilizan las herramientas de construcción de proyectos o &lt;em&gt;module bundlers&lt;/em&gt; que unen todo el código de los distintos ficheros javascript en un único fichero que es el que se importa en el &lt;em&gt;index.html&lt;/em&gt; y hacen los mismo con los ficheros CSS.&lt;/p&gt;
&lt;p&gt;Además proporcionan otras ventajas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;transpilan&lt;/strong&gt; el código, de forma que podemos usar sentencias javascript que aún no soportan muchos navegadores ya que se convertirán a sentencias que hacen lo mismo pero con código &lt;em&gt;legacy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;minimizan&lt;/strong&gt; y &lt;strong&gt;optimizan&lt;/strong&gt; el código para que ocupe menos y su carga sea más rápida, reduciendo el nombre de variables y funciones, eliminando espacios en blanco y comentarios, ...&lt;/li&gt;
&lt;li&gt;dicha minimización &lt;strong&gt;ofusca&lt;/strong&gt; el código lo que dificulta que el usuario pueda ver en la consola lo que hace el programa y manipularlo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nosotros usaremos el &lt;em&gt;bundler&lt;/em&gt; &lt;strong&gt;Vite&lt;/strong&gt; que, junto con &lt;strong&gt;webpack&lt;/strong&gt;, son los más usados en entorno &lt;em&gt;frontend&lt;/em&gt;. Junto a &lt;em&gt;npm&lt;/em&gt; tendremos una forma fácil y práctica de empaquetar el código.&lt;/p&gt;
&lt;p&gt;Además &lt;em&gt;Vite&lt;/em&gt; incorpora un servidor de desarrollo para hacer más cómoda la creación y prueba de nuestros proyectos.&lt;/p&gt;
&lt;p&gt;Para poder usar &lt;em&gt;Vite&lt;/em&gt; debemos instalarlo. Como lo usaremos en muchos proyectos lo podemos instalarlo global con&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install -g vite
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;crear-un-nuevo-proyecto&quot; tabindex=&quot;-1&quot;&gt;Crear un nuevo proyecto&lt;/h2&gt;
&lt;p&gt;Vite necesita &lt;em&gt;Node.js&lt;/em&gt; versión 16 o superior aunque lo mejor es tenerlo actualizado para poder utilitzar todas sus plantillas. Para crear un nuevo proyecto haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm create vite@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(si no tenemos instalado el paquete &lt;em&gt;create-vite&lt;/em&gt; nos preguntará si lo instala)&lt;/p&gt;
&lt;p&gt;Al crear el proyecto nos pregunta qué framework vamos a utilizar (le diremos que &lt;em&gt;Vanilla&lt;/em&gt;, es decir, Javascript sin framework) y si como lenguaje usaremos Javascript o Typescript.&lt;/p&gt;
&lt;p&gt;Esto crea el &lt;em&gt;scaffolding&lt;/em&gt; de nuestro proyecto que consiste en una carpeta con el mismo nombre que el proyecto y una serie de ficheros en su interior:&lt;br /&gt;
Nos preguntará el nombre del proyecto, la plantilla (&lt;em&gt;Vanilla&lt;/em&gt; para Javascript sin framework) y el lenguaje que queremos usar (&lt;em&gt;Javascript/Typescript&lt;/em&gt;) y se crea una carpeta con el nombre de nuestro proyecto que contiene:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;: html con un div con &lt;em&gt;id&lt;/em&gt; &lt;strong&gt;app&lt;/strong&gt; que es donde se cargará la app y una etiqueta &lt;strong&gt;script&lt;/strong&gt; que carga un módulo llamado &lt;code&gt;main.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.js&lt;/code&gt;: es el punto de entrada a la aplicación .Importa los ficheros CSS, imágenes y ficheros JS con funciones o clases y establece el contenido de la página principal&lt;/li&gt;
&lt;li&gt;&lt;code&gt;counter.js&lt;/code&gt;: módulo JS que exporta una función como ejemplo que es usada en el &lt;em&gt;main.js&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;style.css&lt;/code&gt;: fichero donde poner nuestros estilos, con CSS de ejemplo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public/&lt;/code&gt;: carpeta donde dejar elementos estáticos que no pasarán por &lt;em&gt;vite&lt;/em&gt; (como imágenes, ficheros CSS, ...)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node_modules&lt;/code&gt;: librerías de las dependencias (si usamos alguna)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;: fichero de configuración del proyecto. Además del nombre y la versión incluye apartados importantes:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devDependences&lt;/code&gt;: dependencias que se usan en desarrollo pero que no se incorporarán al código final&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dependences&lt;/code&gt;: dependencias que sí se incluirán en el código final (librerías que estemos usando)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scripts&lt;/code&gt;: para ejecutar el servidor de desarrollo (&lt;code&gt;npm run dev&lt;/code&gt;), generar el código final de producción (&lt;code&gt;npm run build&lt;/code&gt;) y previsualizarlo en modo producción  (&lt;code&gt;npm run preview&lt;/code&gt;). Podemos añadir más para tests, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Si nuestra aplicación no va a ser muy pequeña como la del ejemplo sino que tendrá diferentes ficheros Javascript, acceso a datos, interfaz de usuario, etc deberíamos organizar en código en carpetas para mejorar su legibilidad. Lo adecuando es dejar en el raíz de nuestro proyecto los ficheros &lt;code&gt;index.html&lt;/code&gt; y &lt;code&gt;main.js&lt;/code&gt; y crear una carpeta &lt;code&gt;src&lt;/code&gt; donde poner el resto de código. En función del tamaño de la aplicación podríamos crear dentro subcarpetas (os propongo un nombre para ellas aunque podéis llamarlas como queráis) para:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;: el modelo de datos, es decir, las clases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pages&lt;/code&gt; o &lt;code&gt;views&lt;/code&gt;: las páginas que tendrá nuestra SPA a las que se navega desde el router (aunque en realidad sólo hay una)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;api&lt;/code&gt;: acceso a la API que usemos. Sólo deben conectarse al servidor y transmitir los datos recibidos al resto de la aplicación&lt;/li&gt;
&lt;li&gt;&lt;code&gt;components&lt;/code&gt;: web components que usemos para cosntruir las páginas&lt;/li&gt;
&lt;li&gt;&lt;code&gt;services&lt;/code&gt;: métodos síncronos que proporcionan funcionalidad&lt;/li&gt;
&lt;li&gt;si nuestra aplicación es grande con muchos casos de uso convendría crear una carpeta &lt;code&gt;usecases&lt;/code&gt; donde guardarlos. Cada uno debería tener un único método llamado &lt;code&gt;run&lt;/code&gt; o &lt;code&gt;execute&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;: carpeta donde guardar los ficheros de test&lt;/li&gt;
&lt;li&gt;...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: todos los ficheros javascript de un proyecto con &lt;em&gt;Vite&lt;/em&gt; son módulos y en ellos, igual que en las clases, no es necesario poner &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; porque por defecto los módulos ya funcionan así.&lt;/p&gt;
&lt;h2 id=&quot;desarrollar-nuestro-proyecto&quot; tabindex=&quot;-1&quot;&gt;Desarrollar nuestro proyecto&lt;/h2&gt;
&lt;p&gt;Para empezar a trabajar ejecutamos desde la terminal el script&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto hace que &lt;em&gt;Vite&lt;/em&gt; lance un servidor web en el puerto 5173 donde podemos ver la ejecución de nuestro proyecto.&lt;/p&gt;
&lt;h3 id=&quot;trabajar-con-distintos-ficheros-de-codigo&quot; tabindex=&quot;-1&quot;&gt;Trabajar con distintos ficheros de código&lt;/h3&gt;
&lt;p&gt;Una de las razones de usar un &lt;em&gt;bundler&lt;/em&gt; es que podemos repartir el código entre varios ficheros de forma que quede más organizado.&lt;/p&gt;
&lt;p&gt;Para que un fichero pueda tener acceso a código de otro fichero hay que hacer 2 cosas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;El fichero al que queremos acceder debe &lt;strong&gt;exportar&lt;/strong&gt; el código que desea que sea accesible desde otros ficheros&lt;/li&gt;
&lt;li&gt;El fichero que quiere acceder a ese código debe &lt;strong&gt;importarlo&lt;/strong&gt; a una variable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Esto es lo que hacíamos en el ejercicio de la frase para poder pasar los tests y lo que haremos con los ficheros donde declaremos clases.&lt;/p&gt;
&lt;p&gt;ES6 nos proporciona 2 formas de exportar/importar código:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exportar con nombre (&lt;em&gt;named export&lt;/em&gt;): &lt;code&gt;export&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;exportar por defecto (&lt;em&gt;default export&lt;/em&gt;): &lt;code&gt;export default&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;named-export&quot; tabindex=&quot;-1&quot;&gt;Named export&lt;/h4&gt;
&lt;p&gt;De esta manera puedo exportar tantos elementos (funciones, variables, clases, ...) de un fichero como quiera. Por ejemplo, si es un fichero con una única función a exportar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero cuadrado.js
export function cuadrado (value) {
  return value * value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso de querer exportar muchas funciones lo más sencillo es exportarlas juntas en un objeto como en el fichero &lt;em&gt;functions.js&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function letras () {
  ...
}

function palabras () {
  ...
}

function maysc () {
  ...
}
...
export {
	letras,
	palabras,
	maysc
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si es un fichero que define una clase la exportamos tal cual:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export class Product {
    constructor() {

    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para importarlo lo hacemos poniendo lo que queremos importar entre &lt;code&gt;{ }&lt;/code&gt;. Si se trata de una única función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { cuadrado } from &#39;./cuadrado.js&#39;

console.log(&#39;El cuadrado de 2 es &#39; + cuadrado(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podríamos usar un nombre diferente para lo que importamos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { cuadrado as cuad} from &#39;./cuadrado.js&#39;

console.log(&#39;El cuadrado de 2 es &#39; + cuad(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si es un fichero con muchas funciones exportadas a un objeto podemos importar sólo las que queramos o todas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { letras, maysc } from &#39;./functions.js&#39;

console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + letras(&amp;quot;Hola&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos importarlas todas a un objeto sin indicar sus nombres, con &lt;code&gt;*&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import * as MyFunctions from &#39;./functions.js&#39;

console.log(&#39;Las letras de &amp;quot;Hola&amp;quot; son &#39; + MyFunctions.letras(&amp;quot;Hola&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para importar una clase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import { Product } from &#39;./product.class&#39;

const myProd = new Product()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;default-export&quot; tabindex=&quot;-1&quot;&gt;Default export&lt;/h4&gt;
&lt;p&gt;De esta manera sólo puedo exportar un elemento por fichero, y a la hora de importarlo le doy el nombre que quiera. Por ejemplo, si es un fichero con una única función a exportar:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// Fichero cuadrado.js
export default function cuadrado (value) {
  return value * value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y donde vaya a usarlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import myCuadrado from &#39;./cuadrado.js&#39;

console.log(&#39;El cuadrado de 2 es &#39; + myCuadrado(2))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el caso de una clase:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;export default class Product {
    constructor() {

    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y para importarla:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import Product from &#39;./product.class&#39;

const myProd = new Product()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En resumen, si exporto con &lt;code&gt;export&lt;/code&gt; importo con &lt;code&gt;{ }&lt;/code&gt; y si exporto con &lt;code&gt;export default&lt;/code&gt; importo sin &lt;code&gt;{ }&lt;/code&gt; pero sólo puedo exportar 1 elemento.&lt;/p&gt;
&lt;h2 id=&quot;imagenes&quot; tabindex=&quot;-1&quot;&gt;Imágenes&lt;/h2&gt;
&lt;p&gt;Si se trata de imágenes estáticas lo más sencillo es ponerlas dentro de la carpeta &lt;code&gt;public&lt;/code&gt; y hacer referencia a ellas usando &lt;strong&gt;ruta absoluta&lt;/strong&gt;. Todo lo que está en &lt;em&gt;public&lt;/em&gt; se referencia como si estuviera en la raíz de nuestra aplicación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;img src=&amp;quot;/vite.png&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;Logo de Vite&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos poner las imágenes en la carpeta &lt;code&gt;assets&lt;/code&gt;, pero antes de usarlas deberemos imnportarlas. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;import viteLogo from &#39;./assets/vite.png&#39;
...
const logoHtml = `&amp;lt;img src=&amp;quot;${viteLogo}&amp;quot; height=&amp;quot;100px&amp;quot; alt=&amp;quot;Vite logo&amp;quot;&amp;gt;`
document.body.prepend(logoHtml)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;em&gt;Vite&lt;/em&gt; también podemos importarlas usando &lt;code&gt;import.meta.url&lt;/code&gt;, lo que es útil si no conocemos previamente el nombre del fichero con la imagen (más información en la &lt;a href=&quot;https://vitejs.dev/guide/assets.html#new-url-url-import-meta-url&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;documentación de Vite&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function getImage(fileName, height, alt) {
  imgUrl = new URL(fileName, import.meta.url).href
  const imgHtml = `&amp;lt;img src=&amp;quot;${viteLogo}&amp;quot; height=&amp;quot;${height}&amp;quot; alt=&amp;quot;${alt}&amp;quot;&amp;gt;`
  
  return logoHtml
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;paso-a-produccion&quot; tabindex=&quot;-1&quot;&gt;Paso a producción&lt;/h2&gt;
&lt;p&gt;Cuando lo hayamos acabado y queramos subirlo a producción ejecutaremos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;que crea la carpeta &lt;code&gt;/dist&lt;/code&gt; con los ficheros que debemos subir al servidor web de producción:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;cualquier fichero que tengamos en &lt;em&gt;/public&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;carpeta &lt;code&gt;assets&lt;/code&gt; con
&lt;ul&gt;
&lt;li&gt;fichero JS con todo el código que necesita el proyecto&lt;/li&gt;
&lt;li&gt;fichero CSS con todos los estilos del proyecto&lt;/li&gt;
&lt;li&gt;otros ficheros importados en el JS como imágenes, ...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;testear-el-proyecto&quot; tabindex=&quot;-1&quot;&gt;Testear el proyecto&lt;/h2&gt;
&lt;p&gt;Si queremos testear el proyecto deberemos usar una herramienta de testing y crear los tests adecuados. Lo más sencillo es usar &lt;strong&gt;&lt;em&gt;Vitest&lt;/em&gt;&lt;/strong&gt; que es muy similar a &lt;em&gt;Jest&lt;/em&gt; pero preparado para interacutar fácilmente con &lt;em&gt;Vite&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Lo primero es importarlo como dependencia de producción (no lo usaremos en producción)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save-dev vitest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o abreviado&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm i -D vitest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Debemos añadir un nuevo script en el &lt;code&gt;package.json&lt;/code&gt; que le indique a vite que queremos usarlo para testear:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;  &amp;quot;scripts&amp;quot;: {
		...
    &amp;quot;test&amp;quot;: &amp;quot;vitest&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Crearemos los tests en una carpeta en la raíz de nuestro proyecto llamada &lt;code&gt;/test&lt;/code&gt; y en ella crearemos los diferentes fichero cuya extensión será &lt;code&gt;.spec.js&lt;/code&gt; o &lt;code&gt;.test.js&lt;/code&gt;. Cada vez que queramos pasar los tests ejecutaremos&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm run test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podéis obtener más información en infinidad de páginas de internet, como el &lt;a href=&quot;https://xxjcaxx.github.io/libro_dwec/tests.html#instalacion-de-vitest&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Curso DWEC de Jose Castillo&lt;/a&gt;, y en la &lt;a href=&quot;https://es.vitejs.dev/guide/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;web oficial de vite&lt;/a&gt;.&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/03-1-vite/" >
        </entry>
        <entry>
            <title>
                03-oop
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/03-oop/</id>
            <content type="html">
                &lt;h1 id=&quot;programacion-orientada-a-objetos-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Programación orientada a Objetos en Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#programaci%C3%B3n-orientada-a-objetos-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Programación orientada a Objetos en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#herencia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Herencia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos-y-propiedades-est%C3%A1ticas&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos y propiedades estáticas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-y-m%C3%A9todos-privados-y-protegidos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades y métodos privados y protegidos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todo-tostring&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Método &lt;em&gt;toString()&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todo-valueof&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Método &lt;em&gt;valueOf()&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#organizar-el-c%C3%B3digo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizar el código&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#el-contexto-de-this&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;El contexto de &lt;em&gt;this&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#mixins&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Mixins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#programaci%C3%B3n-orientada-a-objetos-en-js5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Programación orientada a objetos en JS5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bibliograf%C3%ADa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bibliografía&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Desde ES2015 la POO en Javascript es similar a como se hace en otros lenguajes, con clases, herencia, ...:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    constructor(nombre, apellidos, edad) {
        this.nombre = nombre
        this.apellidos = apellidos
        this.edad = edad
    }
    getInfo() {
        return &#39;El alumno &#39; + this.nombre + &#39; &#39; + this.apellidos + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
}

let alumno1 = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19)
console.log(alumno1.getInfo())     // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: en las clases no es necesario poner &lt;code&gt;&#39;use strict&#39;&lt;/code&gt; porque por defecto todas las clases ya lo tienen.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea una clase Productos con las propiedades &lt;em&gt;name&lt;/em&gt;, &lt;em&gt;category&lt;/em&gt;, &lt;em&gt;units&lt;/em&gt; y &lt;em&gt;price&lt;/em&gt; y los métodos &lt;em&gt;total&lt;/em&gt; que devuelve el importe del producto y &lt;em&gt;getInfo&lt;/em&gt; que devolverá: &#39;&lt;em&gt;Name&lt;/em&gt; (&lt;em&gt;category&lt;/em&gt;): &lt;em&gt;units&lt;/em&gt; uds x &lt;em&gt;price&lt;/em&gt; € = &lt;em&gt;total&lt;/em&gt; €&#39;. Crea 3 productos diferentes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;herencia&quot; tabindex=&quot;-1&quot;&gt;Herencia&lt;/h2&gt;
&lt;p&gt;Una clase puede heredar de otra utilizando la palabra reservada &lt;strong&gt;extends&lt;/strong&gt; y heredará todas sus propiedades y métodos. Podemos sobrescribirlos en la clase hija (seguimos pudiendo llamar a los métodos de la clase padre utilizando la palabra reservada &lt;strong&gt;super&lt;/strong&gt; -es lo que haremos si creamos un constructor en la clase hija-).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class AlumnInf extends Alumno{
  constructor(nombre, apellidos, edad, ciclo) {
    super(nombre, apellidos, edad)
    this.ciclo = ciclo
  }
  getInfo() {
    return super.getInfo() + &#39; y estudia el Grado &#39; + (this.getGradoMedio ? &#39;Medio&#39; : &#39;Superior&#39;) + &#39; de &#39; + this.ciclo
  }
  getGradoMedio() {
    if (this.ciclo.toUpperCase === &#39;SMX&#39;)
      return true
    return false
  }
}

let cpo = new AlumnInf(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19, &#39;DAW&#39;)
console.log(cpo.getInfo())     // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años y estudia el Grado Superior de DAW&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: crea una clase Televisores que hereda de Productos y que tiene una nueva propiedad llamada tamaño. El método getInfo mostrará el tamaño junto al nombre&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;metodos-y-propiedades-estaticas&quot; tabindex=&quot;-1&quot;&gt;Métodos y propiedades estáticas&lt;/h2&gt;
&lt;p&gt;Desde ES2015 podemos declarar métodos estáticos. Estos métodos se llaman directamente utilizando el nombre de la clase y no tienen acceso al objeto &lt;em&gt;this&lt;/em&gt; (ya que no hay objeto instanciado).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class User {
    ...
    static getRoles() {
        return [&amp;quot;user&amp;quot;, &amp;quot;guest&amp;quot;, &amp;quot;admin&amp;quot;]
    }
}

console.log(User.getRoles()) // [&amp;quot;user&amp;quot;, &amp;quot;guest&amp;quot;, &amp;quot;admin&amp;quot;]
let user = new User(&amp;quot;john&amp;quot;)
console.log(user.getRoles()) // Uncaught TypeError: user.getRoles is not a function
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Suelen usarse para crear funciones de la aplicación.&lt;/p&gt;
&lt;p&gt;Recientemente se han introducido también propiedades estáticas, que funcionan directamente desde la clase no desde un objeto, igual que los métodos estáticos. Al ser una adición reciente pueden no funcionar en algunos navegadores.&lt;/p&gt;
&lt;h2 id=&quot;propiedades-y-metodos-privados-y-protegidos&quot; tabindex=&quot;-1&quot;&gt;Propiedades y métodos privados y protegidos&lt;/h2&gt;
&lt;p&gt;A la hora de encapsular el código de las clases es importante el uso de este tipo de elementos pero Javascript sólo los incluye desde ES2019 donde introdujo la sintaxis &lt;strong&gt;&lt;code&gt;#&lt;/code&gt;&lt;/strong&gt; para declaralos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Position {
    &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#x&quot;&gt;#x&lt;/a&gt; = 0;
    &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#y&quot;&gt;#y&lt;/a&gt; = 0;

    constructor(x, y) {
        this.#x = x
        this.#y = y
    }
    getPosition() {
        return { x: this.#x, y: this.#y };
    }
    increaseX() {
        this.#x++;
    }
    increaseY() {
        this.#y++;
    }
}

const myPosition = new Position(20, 10);
console.log(Position.getPosition()); // { x: 20, y: 10 }
console.log(Position.x); // undefined
console.log(Position.y); // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anteriormente existía una convención de que cualquier propiedad o método que comience por el carácter &lt;code&gt;_&lt;/code&gt; se trata de una propiedad o método &lt;strong&gt;protegido&lt;/strong&gt; y no debería accederse al mismo desde el exterior (aunque en realidad el lenguaje permite hacerlo).&lt;/p&gt;
&lt;p&gt;Estas propiedades y métodos protegidos se heredan como cualquier otro.&lt;/p&gt;
&lt;h2 id=&quot;metodo-em-to-string-em&quot; tabindex=&quot;-1&quot;&gt;Método &lt;em&gt;toString()&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Al convertir un objeto a string (por ejemplo al concatenarlo con un String) se llama al método &lt;strong&gt;&lt;em&gt;.toString()&lt;/em&gt;&lt;/strong&gt; del mismo, que por defecto devuelve la cadena &lt;code&gt;[object Object]&lt;/code&gt;. Podemos sobrecargar este método para que devuelva lo que queramos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    toString() {
        return this.apellidos + &#39;, &#39; + this.nombre
    }
}

let carPerOrt = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19);
console.log(&#39;Alumno:&#39; + carPerOrt)     // imprime &#39;Alumno: Pérez Ortíz, Carlos&#39;
                                // en vez de &#39;Alumno: [object Object]&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método también es el que se usará si queremos ordenar una array de objetos (recordad que &lt;em&gt;.sort()&lt;/em&gt; ordena alfabéticamente para lo que llama al método &lt;em&gt;.toString()&lt;/em&gt; del objeto a ordenar). Por ejemplo, tenemos el array de alumnos &lt;em&gt;misAlumnos&lt;/em&gt; que queremos ordenar alfabéticamente. Si la clase &lt;em&gt;Alumno&lt;/em&gt; no tiene un método &lt;em&gt;toString&lt;/em&gt; habría que hacer como vimos en el tema de &lt;a href=&quot;https://pedroporo.github.io/02.2-arrays.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;misAlumnos.sort((alum1, alum2) =&amp;gt; (alum1.apellidos+alum1.nombre).localeCompare(alum2.apellidos+alum2.nombre));   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pero con el método &lt;em&gt;toString&lt;/em&gt; que hemos definido antes podemos hacer directamente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;misAlumnos.sort() 
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: modifica las clases Productos y Televisores para que el método que muestra los datos del producto se llame de la manera más adecuada&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea 5 productos y guárdalos en un array. Crea las siguientes funciones (todas reciben ese array como parámetro):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;prodsSortByName: devuelve un array con los productos ordenados alfabéticamente&lt;/li&gt;
&lt;li&gt;prodsSortByPrice: devuelve un array con los productos ordenados por importe&lt;/li&gt;
&lt;li&gt;prodsTotalPrice: devuelve el importe total del los productos del array, con 2 decimales&lt;/li&gt;
&lt;li&gt;prodsWithLowUnits: además del array recibe como segundo parámetro un nº y devuelve un array con todos los productos de los que quedan menos de los unidades indicadas&lt;/li&gt;
&lt;li&gt;prodsList: devuelve una cadena que dice &#39;Listado de productos:&#39; y en cada línea un guión y la información de un producto del array&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;metodo-em-value-of-em&quot; tabindex=&quot;-1&quot;&gt;Método &lt;em&gt;valueOf()&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Al comparar objetos (con &amp;gt;, &amp;lt;, ...) se usa el valor devuelto por el método &lt;strong&gt;&lt;em&gt;.valueOf()&lt;/em&gt;&lt;/strong&gt; para realizar la comparación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    valueOf() {
        return this.edad
    }
}

let cpo = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19)
let aat = new Alumno(&#39;Ana&#39;, &#39;Abad Tudela&#39;, 23)
console.log(cpo &amp;lt; aat)     // imprime true ya que 19&amp;lt;23
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si este método no existiera será &lt;em&gt;.toString()&lt;/em&gt; el que se usaría.&lt;/p&gt;
&lt;h2 id=&quot;organizar-el-codigo&quot; tabindex=&quot;-1&quot;&gt;Organizar el código&lt;/h2&gt;
&lt;p&gt;Lo más conveniente es guardar cada clase en su propio fichero, que llamaremos como la clase con la extensión &lt;code&gt;.class.js&lt;/code&gt;. Por ejemplo el fichero de la clase &lt;em&gt;Users&lt;/em&gt; seria &lt;code&gt;users.class.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;En dicho fichero exportamos la clase (con &lt;code&gt;export&lt;/code&gt; o mejor &lt;code&gt;export default&lt;/code&gt; porque sólo hay una) y donde queramos usarla la importamos (&lt;code&gt;import { Users } from &#39;users.class&#39;&lt;/code&gt; o &lt;code&gt;import Users from &#39;users.class&#39;&lt;/code&gt;, según cómo la hayamos exportado).&lt;/p&gt;
&lt;h2 id=&quot;el-contexto-de-em-this-em&quot; tabindex=&quot;-1&quot;&gt;El contexto de &lt;em&gt;this&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;El valor de la variable &lt;em&gt;this&lt;/em&gt; depende del contexto e que se ejecuta el código. Al crear una instancia de una calse con &lt;code&gt;new&lt;/code&gt; &lt;em&gt;this&lt;/em&gt; hace referencia a la instancia creada. Pero dentro de una función se crea un nuevo contexto y la variable &lt;em&gt;this&lt;/em&gt; pasa a hacer referencia a dicho contexto. Si en el ejemplo anterior hiciéramos algo como esto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    getInfo() {
        function nomAlum() {
            return this.nombre + &#39; &#39; + this.apellidos      // Aquí this no es la instancia del objeto Alumno
        }

        return &#39;El alumno &#39; + nomAlum() + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este código fallaría porque dentro de la función &lt;em&gt;nomAlum&lt;/em&gt; la variable &lt;em&gt;this&lt;/em&gt; ya no hace referencia a a instancia del objeto &lt;em&gt;Alumno&lt;/em&gt; sino al contexto de la función. Este ejemplo no tiene mucho sentido pero a veces nos pasará en manejadores de eventos.&lt;/p&gt;
&lt;p&gt;Si debemos llamar a una función dentro de un método (o de un manejador de eventos) tenemos varias formas de pasarle el valor de &lt;em&gt;this&lt;/em&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Usando una &lt;em&gt;arrow function&lt;/em&gt; que no crea un nuevo contexto por lo que &lt;em&gt;this&lt;/em&gt; conserva su valor&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    getInfo() {
        const nomAlum = () =&amp;gt; this.nombre + &#39; &#39; + this.apellidos

        return &#39;El alumno &#39; + nomAlum() + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Pasándole &lt;em&gt;this&lt;/em&gt; como parámetro a la función&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    getInfo() {
        function nomAlum(alumno) {
            return alumno.nombre + &#39; &#39; + alumno.apellidos
        }

        return &#39;El alumno &#39; + nomAlum(this) +&#39; tiene &#39; + this.edad + &#39; años&#39;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;Guardando el valor en otra variable (como &lt;em&gt;that&lt;/em&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;    getInfo() {
        function nomAlum() {
            return that.nombre + &#39; &#39; + that.apellidos      // Aquí this no es el objeto Alumno
        }

        let that = this;
        return &#39;El alumno &#39; + nomAlum() +&#39; tiene &#39; + this.edad + &#39; años&#39;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Haciendo un &lt;em&gt;bind&lt;/em&gt; de &lt;em&gt;this&lt;/em&gt; (lo veremos de nuevo al hablar de eventos)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;class Alumno {
    ...
    getInfo() {
        function nomAlum() {
            return this.nombre + &#39; &#39; + this.apellidos      // Aquí this no es el objeto Alumno
        }

        return &#39;El alumno &#39; + nomAlum.bind(this) + &#39; tiene &#39; + this.edad + &#39; años&#39;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Al llamar a la función &lt;code&gt;nomAlumn&lt;/code&gt; le &lt;em&gt;enlazamos&lt;/em&gt; (&lt;code&gt;.bind&lt;/code&gt;) el valor que queremos que tenga &lt;em&gt;this&lt;/em&gt; dentro de ella, en nuestro caso el &lt;em&gt;this&lt;/em&gt; de donde hacemos la llamada.&lt;/p&gt;
&lt;h2 id=&quot;mixins&quot; tabindex=&quot;-1&quot;&gt;Mixins&lt;/h2&gt;
&lt;p&gt;Wikipedia define un mixin como una clase que contiene métodos que pueden ser utilizados por otras clases sin necesidad de heredar de ella.&lt;/p&gt;
&lt;p&gt;En Javascript se trata de un objeto que contiene métodos que podemos aplicar a una clase para datarla de ciertos comportamientos. Por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;// mixin
let saludaMixin = {
  saluda() {
    alert(`Hola, soy ${this.nombre}`)
  }
}

class Alumno {
  constructor(nombre, apellidos, edad) {
    ...
  }
  ...
}

// asignamos el mixin a la clase
Object.assign(Alumno.prototype, saludaMixin);

// Ahora el Alumno puede decir hola
const alumno = new User(&#39;Carlos&#39;, &#39;Pérez&#39;, 25)
alumno.saluda(); // Hola, soy Carlos
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;programacion-orientada-a-objetos-en-js-5&quot; tabindex=&quot;-1&quot;&gt;Programación orientada a objetos en JS5&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTA&lt;/strong&gt;: este apartado está sólo para que comprendamos este código si lo vemos en algún programa pero nosotros programaremos como hemos visto antes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;En Javascript un objeto se crea a partir de otro (al que se llama &lt;em&gt;prototipo&lt;/em&gt;). Así se crea una cadena de prototipos, el primero de los cuales es el objeto &lt;em&gt;null&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Las versiones de Javascript anteriores a ES2015 no soportan clases ni herencia. Si queremos emular en ellas el comportamiento de las clases lo que se hace es:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;para crear el constructor se crea una función con el nombre del objeto&lt;/li&gt;
&lt;li&gt;para crear los métodos se aconseja hacerlo en el &lt;em&gt;prototipo&lt;/em&gt; del objeto para que no se cree una copia del mismo por cada instancia que creemos:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function Alumno(nombre, apellidos, edad) {
    this.nombre = nombre
    this.apellidos = apellidos
    this.edad = edad
}
Alumno.prototype.getInfo = function() {
    return `El alumno ${this.nombre} ${this.apellidos} tiene ${this.edad} años`
}

let cpo = new Alumno(&#39;Carlos&#39;, &#39;Pérez Ortiz&#39;, 19)
console.log(cpo.getInfo())     // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cada objeto tiene un prototipo del que hereda sus propiedades y métodos (es el equivalente a su clase, pero en realidad es un objeto que está instanciado). Si añadimos una propiedad o método al prototipo se añade a todos los objetos creados a partir de él lo que ahorra mucha memoria.&lt;/p&gt;
&lt;h2 id=&quot;bibliografia&quot; tabindex=&quot;-1&quot;&gt;Bibliografía&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Curso &#39;Programación con JavaScript&#39;. CEFIRE Xest. Arturo Bernal Mayordomo&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/03-oop/" >
        </entry>
        <entry>
            <title>
                02.2-arrays
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/02-2-arrays/</id>
            <content type="html">
                &lt;h1 id=&quot;arrays&quot; tabindex=&quot;-1&quot;&gt;Arrays&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrays-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays de objetos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#operaciones-con-arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Operaciones con Arrays&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#length&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;length&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#a%C3%B1adir-elementos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Añadir elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#eliminar-elementos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Eliminar elementos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#splice&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;splice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#slice&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrays-y-strings&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Arrays y Strings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#sort&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#otros-m%C3%A9todos-comunes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Otros métodos comunes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#functional-programming&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Functional Programming&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#filter&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#find&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;find&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#findindex&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;findIndex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#every--some&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;every / some&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#map&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#reduce&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;reduce&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#foreach&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;forEach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#includes&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;includes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#arrayfrom&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Array.from&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#rest-y-spread&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Rest y Spread&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desestructuraci%C3%B3n-de-arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desestructuración de arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#copia-de-arrays&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Copia de arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#map-1&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#set&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;Son un tipo de objeto y no tienen tamaño fijo sino que podemos añadirle elementos en cualquier momento.&lt;/p&gt;
&lt;p&gt;Se recomienda crearlos usando notación JSON:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = []
const b = [2,4,6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;aunque también podemos crearlos como instancias del objeto Array (NO recomendado):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = new Array()        // a = []
const b = new Array(2,4,6)   // b = [2, 4, 6]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sus elementos pueden ser de cualquier tipo, incluso podemos tener elementos de tipos distintos en un mismo array. Si no está definido un elemento su valor será &lt;em&gt;undefined&lt;/em&gt;. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
console.log(a[0])  // imprime &#39;Lunes&#39;
console.log(a[4])  // imprime 6
a[7] = &#39;Juan&#39;        // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6, , , &#39;Juan&#39;]
console.log(a[7])  // imprime &#39;Juan&#39;
console.log(a[6])  // imprime undefined
console.log(a[10])  // imprime undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Acceder a un elemento de un array que no existe no provoca un error (devuelve &lt;em&gt;undefined&lt;/em&gt;) pero sí lo provoca acceder a un elemento de algo que no es un array. Con ES2020 (ES11) se ha incluido el operador &lt;strong&gt;?.&lt;/strong&gt; para evitar tener que comprobar nosotros que sea un array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumnos?.[0])
// si alumnos es un array muestra el valor de su primer
// elemento y si no muestra undefined pero no lanza un error
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;arrays-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Arrays de objetos&lt;/h3&gt;
&lt;p&gt;Es habitual almacenar datos en arrays en forma de objetos, por ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumnos = [
  {
    id: 1,
    name: &#39;Marc Peris&#39;,
    course: &#39;2nDAW&#39;,
    age: 21
  },
  {
    id: 2,
    name: &#39;Júlia Tortosa&#39;,
    course: &#39;2nDAW&#39;,
    age: 23
  },
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;operaciones-con-arrays&quot; tabindex=&quot;-1&quot;&gt;Operaciones con Arrays&lt;/h2&gt;
&lt;p&gt;Vamos a ver los principales métodos y propiedades de los arrays.&lt;/p&gt;
&lt;h3 id=&quot;length&quot; tabindex=&quot;-1&quot;&gt;length&lt;/h3&gt;
&lt;p&gt;Esta propiedad devuelve la longitud de un array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
console.log(a.length)  // imprime 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos reducir el tamaño de un array cambiando esta propiedad, aunque es una forma poco clara de hacerlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;a.length = 3  // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;anadir-elementos&quot; tabindex=&quot;-1&quot;&gt;Añadir elementos&lt;/h3&gt;
&lt;p&gt;Podemos añadir elementos al final de un array con &lt;code&gt;push&lt;/code&gt; o al principio con &lt;code&gt;unshift&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
a.push(&#39;Juan&#39;)   // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6, &#39;Juan&#39;]
a.unshift(7)     // ahora a = [7, &#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6, &#39;Juan&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;eliminar-elementos&quot; tabindex=&quot;-1&quot;&gt;Eliminar elementos&lt;/h3&gt;
&lt;p&gt;Podemos borrar el elemento del final de un array con &lt;code&gt;pop&lt;/code&gt; o el del principio con &lt;code&gt;shift&lt;/code&gt;. Ambos métodos devuelven el elemento que hemos borrado:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
const ultimo = a.pop()         // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4] y ultimo = 6
const primero = a.shift()      // ahora a = [&#39;Martes&#39;, 2, 4] y primero = &#39;Lunes&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;a-href-https-developer-mozilla-org-es-docs-web-java-script-referencia-objetos-globales-array-splice-target-blank-class-external-link-splice-a&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Array/splice&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;splice&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Permite eliminar elementos de cualquier posición del array y/o insertar otros en su lugar. Devuelve un array con los elementos eliminados. Sintaxis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.splice(posicion, num. de elementos a eliminar, 1º elemento a insertar, 2º elemento a insertar, 3º...)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
let borrado = a.splice(1, 3)       // ahora a = [&#39;Lunes&#39;, 6] y borrado = [&#39;Martes&#39;, 2, 4]
a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
borrado = a.splice(1, 0, 45, 56)   // ahora a = [&#39;Lunes&#39;, 45, 56, &#39;Martes&#39;, 2, 4, 6] y borrado = []
a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
borrado = a.splice(1, 3, 45, 56)   // ahora a = [&#39;Lunes&#39;, 45, 56, 6] y borrado = [&#39;Martes&#39;, 2, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Guarda en un array la lista de la compra con Peras, Manzanas, Kiwis, Plátanos y Mandarinas. Haz los siguiente con splice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Elimina las manzanas (debe quedar Peras, Kiwis, Plátanos y Mandarinas)&lt;/li&gt;
&lt;li&gt;Añade detrás de los Plátanos Naranjas y Sandía (debe quedar Peras, Kiwis, Plátanos, Naranjas, Sandía y Mandarinas)&lt;/li&gt;
&lt;li&gt;Quita los Kiwis y pon en su lugar Cerezas y Nísperos (debe quedar Peras, Cerezas, Nísperos, Plátanos, Naranjas, Sandía y Mandarinas)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;slice&quot; tabindex=&quot;-1&quot;&gt;slice&lt;/h3&gt;
&lt;p&gt;Devuelve un subarray con los elementos indicados pero sin modificar el array original (sería como hacer un &lt;code&gt;substr&lt;/code&gt; pero de un array en vez de una cadena). Sintaxis:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;Array.slice(posicion, num. de elementos a devolver)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
const subArray = a.slice(1, 3)       // ahora a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6] y subArray = [&#39;Martes&#39;, 2, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Es muy útil para hacer una copia de un array:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [2, 4, 6]
const copiaDeA = a.slice()       // ahora ambos arrays contienen lo mismo pero son diferentes arrays
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;arrays-y-strings&quot; tabindex=&quot;-1&quot;&gt;Arrays y Strings&lt;/h3&gt;
&lt;p&gt;Cada objeto (y los arrays son un tipo de objeto) tienen definido el método &lt;code&gt;.toString()&lt;/code&gt; que lo convierte en una cadena. Este método es llamado automáticamente cuando, por ejemplo, queremos mostrar un array por la consola. En realidad &lt;code&gt;console.log(a)&lt;/code&gt; ejecuta &lt;code&gt;console.log(a.toString())&lt;/code&gt;. En el caso de los arrays esta función devuelve una cadena con los elementos del array dentro de corchetes y separados por coma.&lt;/p&gt;
&lt;p&gt;Además podemos convertir los elementos de un array a una cadena con &lt;code&gt;.join()&lt;/code&gt; especificando el carácter separador de los elementos. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [&#39;Lunes&#39;, &#39;Martes&#39;, 2, 4, 6]
const cadena = a.join(&#39;-&#39;)       // cadena = &#39;Lunes-Martes-2-4-6&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método es el contrario del m &lt;code&gt;.split()&lt;/code&gt; que convierte una cadena en un array. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const notas = &#39;5-3.9-6-9.75-7.5-3&#39;
const arrayNotas = notas.split(&#39;-&#39;)        // arrayNotas = [5, 3.9, 6, 9.75, 7.5, 3]
const cadena = &#39;Que tal estás&#39;
const arrayPalabras = cadena.split(&#39; &#39;)    // arrayPalabras = [&#39;Que`, &#39;tal&#39;, &#39;estás&#39;]
const arrayLetras = cadena.split(&#39;&#39;)       // arrayLetras = [&#39;Q&#39;,&#39;u&#39;,&#39;e`,&#39; &#39;,&#39;t&#39;,a&#39;,l&#39;,&#39; &#39;,&#39;e&#39;,s&#39;,t&#39;,á&#39;,s&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;sort&quot; tabindex=&quot;-1&quot;&gt;sort&lt;/h3&gt;
&lt;p&gt;Ordena &lt;strong&gt;alfabéticamente&lt;/strong&gt; los elementos del array. Cambia el array además de devolverlo. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [&#39;hola&#39;,&#39;adios&#39;,&#39;Bien&#39;,&#39;Mal&#39;,2,5,13,45]
let b = a.sort()       // b = [13, 2, 45, 5, &amp;quot;Bien&amp;quot;, &amp;quot;Mal&amp;quot;, &amp;quot;adios&amp;quot;, &amp;quot;hola&amp;quot;], pero a también queda ordenado
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También podemos pasarle una función que le indique cómo ordenar, que devolverá un valor negativo si el primer elemento es mayor, positivo si es mayor el segundo o 0 si son iguales. Ejemplo: ordenar un array de cadenas sin tener en cuenta si son mayúsculas o minúsculas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [&#39;hola&#39;,&#39;adios&#39;,&#39;Bien&#39;,&#39;Mal&#39;]
let b = a.sort(function(elem1, elem2) {
  if (elem1.toLocaleLowerCase &amp;gt; elem2.toLocaleLowerCase)
    return -1
  if (elem1.toLocaleLowerCase &amp;lt; elem2.toLocaleLowerCase)
    return 1
  return 0
})       // b = [&amp;quot;adios&amp;quot;, &amp;quot;Bien&amp;quot;, &amp;quot;hola&amp;quot;, &amp;quot;Mal&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Como más se utiliza esta función es para ordenar arrays de objetos. Por ejemplo si tenemos un objeto &lt;em&gt;alumno&lt;/em&gt; con los campos &lt;em&gt;name&lt;/em&gt; y &lt;em&gt;age&lt;/em&gt;, para ordenar un array de objetos &lt;em&gt;alumno&lt;/em&gt; por su edad haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnosOrdenado = alumnos.sort(function(alumno1, alumno2) {
  return alumno1.age - alumno2.age
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando &lt;em&gt;arrow functions&lt;/em&gt; quedaría más sencillo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnosOrdenado = alumnos.sort((alumno1, alumno2)  =&amp;gt; alumno1.age - alumno2.age)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si que queremos ordenar por un campo de texto en vez de numérico debemos usar la función &lt;em&gt;toLocaleCompare&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let alumnosOrdenado = alumnos.sort((alumno1, alumno2)  =&amp;gt; alumno1.name.localeCompare(alumno2.name))
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Haz una función que ordene las notas de un array pasado como parámetro. Si le pasamos [4,8,3,10,5] debe devolver [3,4,5,8,10]. Pruébalo en la consola&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;otros-metodos-comunes&quot; tabindex=&quot;-1&quot;&gt;Otros métodos comunes&lt;/h3&gt;
&lt;p&gt;Otros métodos que se usan a menudo con arrays son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.concat()&lt;/code&gt;: concatena arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [2, 4, 6]
let b = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
let c = a.concat(b)       // c = [2, 4, 6, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.reverse()&lt;/code&gt;: invierte el orden de los elementos del array&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = [2, 4, 6]
let b = a.reverse()       // b = [6, 4, 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.indexOf()&lt;/code&gt;: devuelve la primera posición del elemento pasado como parámetro o -1 si no se encuentra en el array&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.lastIndexOf()&lt;/code&gt;: devuelve la última posición del elemento pasado como parámetro o -1 si no se encuentra en el array&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;functional-programming&quot; tabindex=&quot;-1&quot;&gt;Functional Programming&lt;/h2&gt;
&lt;p&gt;Se trata de un paradigma de programación (una forma de programar) donde se intenta que el código se centre más en qué debe hacer una función que en cómo debe hacerlo. El ejemplo más claro es que intenta evitar los bucles &lt;em&gt;for&lt;/em&gt; y &lt;em&gt;while&lt;/em&gt; sobre arrays o  listas de elementos. Normalmente cuando hacemos un bucle es para recorrer la lista y realizar alguna acción con cada uno de sus elementos. Lo que hace &lt;em&gt;functional programing&lt;/em&gt; es que a la función que debe hacer eso se le pasa como parámetro la función que debe aplicarse a cada elemento de la lista.&lt;/p&gt;
&lt;p&gt;Desde la versión 5.1 javascript incorpora métodos de &lt;em&gt;functional programing&lt;/em&gt; en el lenguaje, especialmente para trabajar con arrays:&lt;/p&gt;
&lt;h3 id=&quot;filter&quot; tabindex=&quot;-1&quot;&gt;filter&lt;/h3&gt;
&lt;p&gt;Devuelve un nuevo array con los elementos que cumplen determinada condición del array al que se aplica. Su parámetro es una función, habitualmente anónima, que va interactuando con los elementos del array. Esta función recibe como primer parámetro el elemento actual del array (sobre el que debe actuar). Opcionalmente puede tener como segundo parámetro su índice y como tercer parámetro el array completo. La función debe devolver &lt;strong&gt;true&lt;/strong&gt; para los elementos que se incluirán en el array a devolver como resultado y &lt;strong&gt;false&lt;/strong&gt; para el resto.&lt;/p&gt;
&lt;p&gt;Ejemplo: dado un array con notas devolver un array con las notas de los aprobados. Esto usando programación &lt;em&gt;imperativa&lt;/em&gt; (la que se centra en &lt;em&gt;cómo se deben hacer las cosas&lt;/em&gt;) sería algo como:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = []
for (let i = 0 i++ i &amp;lt; arrayNotas.length) {
  let nota = arrayNotas[i]
  if (nota &amp;gt; =  5) {
    aprobados.push(nota)
  } 
}       // aprobados = [5.2, 6, 9.75, 7.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usando &lt;em&gt;functional programming&lt;/em&gt; (la que se centra en &lt;em&gt;qué resultado queremos obtener&lt;/em&gt;) sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = arrayNotas.filter(function(nota) {
  if (nota &amp;gt; =  5) {
    return true
  } else {
    return false
  } 
})       // aprobados = [5.2, 6, 9.75, 7.5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podemos refactorizar esta función para que sea más compacta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = arrayNotas.filter(function(nota) {
  return nota &amp;gt; =  5     // nota &amp;gt; =  5 se evalúa a &#39;true&#39; si es cierto o &#39;false&#39; si no lo es
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Y usando funciones lambda la sintaxis queda mucho más simple:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const aprobados = arrayNotas.filter(nota  =&amp;gt; nota &amp;gt; =  5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Las 7 líneas del código usando programación &lt;em&gt;imperativa&lt;/em&gt; quedan reducidas a sólo una.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana obtén todos los días que empiezan por &#39;M&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;find&quot; tabindex=&quot;-1&quot;&gt;find&lt;/h3&gt;
&lt;p&gt;Como &lt;em&gt;filter&lt;/em&gt; pero NO devuelve un &lt;strong&gt;array&lt;/strong&gt; sino el primer &lt;strong&gt;elemento&lt;/strong&gt; que cumpla la condición (o &lt;em&gt;undefined&lt;/em&gt; si no la cumple nadie). Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const primerAprobado = arrayNotas.find(nota  =&amp;gt; nota &amp;gt; =  5)    // primerAprobado = 5.2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Este método tiene más sentido con objetos. Por ejemplo, si queremos encontrar la persona con DNI &#39;21345678Z&#39; dentro de un array llamado personas cuyos elementos son objetos con un campo &#39;dni&#39; haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const personaBuscada = personas.find(persona  =&amp;gt; persona.dni = = = &#39;21345678Z&#39;)    // devolverá el objeto completo
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana obtén el primer día que empieza por &#39;M&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;find-index&quot; tabindex=&quot;-1&quot;&gt;findIndex&lt;/h3&gt;
&lt;p&gt;Como &lt;em&gt;find&lt;/em&gt; pero en vez de devolver el elemento devuelve su posición (o -1 si nadie cumple la condición). En el ejemplo anterior el valor devuelto sería 0 (ya que el primer elemento cumple la condición). Al igual que el anterior tiene más sentido con arrays de objetos.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana obtén la posición en el array del primer día que empieza por &#39;M&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;every-some&quot; tabindex=&quot;-1&quot;&gt;every / some&lt;/h3&gt;
&lt;p&gt;La primera devuelve &lt;strong&gt;true&lt;/strong&gt; si &lt;strong&gt;TODOS&lt;/strong&gt; los elementos del array cumplen la condición y &lt;strong&gt;false&lt;/strong&gt; en caso contrario. La segunda devuelve &lt;strong&gt;true&lt;/strong&gt; si &lt;strong&gt;ALGÚN&lt;/strong&gt; elemento del array cumple la condición. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const todosAprobados = arrayNotas.every(nota  =&amp;gt; nota &amp;gt; =  5)   // false
const algunAprobado = arrayNotas.some(nota  =&amp;gt; nota &amp;gt; =  5)     // true
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana indica si algún día empieza por &#39;S&#39;. Dado un array con los días de la semana indica si todos los días acaban por &#39;s&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;map&quot; tabindex=&quot;-1&quot;&gt;map&lt;/h3&gt;
&lt;p&gt;Permite modificar cada elemento de un array y devuelve un nuevo array con los elementos del original modificados. Ejemplo: queremos subir un 10% cada nota:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const arrayNotasSubidas = arrayNotas.map(nota  =&amp;gt; nota + nota * 10%)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana devuelve otro array con los días en mayúsculas&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;reduce&quot; tabindex=&quot;-1&quot;&gt;reduce&lt;/h3&gt;
&lt;p&gt;Devuelve un valor calculado a partir de los elementos del array. En este caso la función recibe como primer parámetro el valor calculado hasta ahora y el método tiene como 1º parámetro la función y como 2º parámetro al valor calculado inicial (si no se indica será el primer elemento del array).&lt;/p&gt;
&lt;p&gt;Ejemplo: queremos obtener la suma de las notas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const sumaNotas = arrayNotas.reduce((total,nota)  =&amp;gt; total + =  nota, 0)    // total = 35.35
// podríamos haber omitido el valor inicial 0 para total
const sumaNotas = arrayNotas.reduce((total,nota)  =&amp;gt; total + =  nota)    // total = 35.35
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejemplo: queremos obtener la nota más alta:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const maxNota = arrayNotas.reduce((max,nota)  =&amp;gt; nota &amp;gt; max ? nota : max)    // max = 9.75
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En el siguiente ejemplo gráfico tenemos un &amp;quot;array&amp;quot; de verduras al que le aplicamos una función &lt;em&gt;map&lt;/em&gt; para que las corte y al resultado le aplicamos un &lt;em&gt;reduce&lt;/em&gt; para que obtenga un valor (el sandwich) con todas ellas:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1268/1*re1sGlEEm1C95_Luq3cJbw.png&quot; alt=&quot;Functional Programming Sandwich&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado el array de notas anterior devuelve la nota media&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;for-each&quot; tabindex=&quot;-1&quot;&gt;forEach&lt;/h3&gt;
&lt;p&gt;Es el método más general de los que hemos visto. No devuelve nada sino que permite realizar algo con cada elemento del array.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
arrayNotas.forEach((nota, indice)  =&amp;gt; {
  console.log(&#39;El elemento de la posición &#39; + indice + &#39; es: &#39; + nota)
})
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;includes&quot; tabindex=&quot;-1&quot;&gt;includes&lt;/h3&gt;
&lt;p&gt;Devuelve &lt;strong&gt;true&lt;/strong&gt; si el array incluye el elemento pasado como parámetro. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
arrayNotas.includes(7.5)     // true
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado un array con los días de la semana indica si algún día es el &#39;Martes&#39;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;array-from&quot; tabindex=&quot;-1&quot;&gt;Array.from&lt;/h3&gt;
&lt;p&gt;Devuelve un array a partir de otro al que se puede aplicar una función de transformación (es similar a &lt;em&gt;map&lt;/em&gt;). Ejemplo: queremos subir un 10% cada nota:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const arrayNotasSubidas = Array.from(arrayNotas, nota  =&amp;gt; nota + nota * 10%)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Puede usarse para hacer una copia de un array, igual que &lt;em&gt;slice&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayA = [5.2, 3.9, 6, 9.75, 7.5, 3]
const arrayB = Array.from(arrayA)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se utiliza mucho para convertir colecciones en arrays y así poder usar los métodos de arrays que hemos visto. Por ejemplo si queremos mostrar por consola cada párrafo de la página que comience por la palabra &#39;If&#39; en primer lugar obtenemos todos los párrafos con:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const parrafos = document.getElementsByTagName(&#39;p&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto nos devuelve una colección con todos los párrafos de la página (lo veremos más adelante al ver DOM). Podríamos hacer un &lt;strong&gt;for&lt;/strong&gt; para recorrer la colección y mirar los que empiecen por lo indicado pero no podemos aplicarle los métodos vistos aquí porque son sólo para arrays así que hacemos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayParrafos = Array.from(parrafos)
// y ya podemos usar los métodos que queramos:
arrayParrafos.filter(parrafo  =&amp;gt; parrafo.textContent.startsWith(&#39;If&#39;))
.forEach(parrafo  =&amp;gt; alert(parrafo.textContent))
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANTE&lt;/strong&gt;: desde este momento se han acabado los bucles &lt;em&gt;for&lt;/em&gt; en nuestro código para trabajar con arrays. Usaremos siempre estas funciones!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;rest-y-spread&quot; tabindex=&quot;-1&quot;&gt;Rest y Spread&lt;/h2&gt;
&lt;p&gt;Permiten extraer a parámetros los elementos de un array o string (&lt;em&gt;spread&lt;/em&gt;) o convertir en un array un grupo de parámetros (&lt;em&gt;rest&lt;/em&gt;). El operador de ambos es &lt;strong&gt;...&lt;/strong&gt; (3 puntos).&lt;/p&gt;
&lt;p&gt;Para usar &lt;em&gt;rest&lt;/em&gt; como parámetro de una función debe ser siempre el último parámetro.&lt;/p&gt;
&lt;p&gt;Ejemplo: queremos hacer una función que calcule la media de las notas que se le pasen como parámetro y que no sabemos cuántas són. Para llamar a la función haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(notaMedia(3.6, 6.8)) 
console.log(notaMedia(5.2, 3.9, 6, 9.75, 7.5, 3)) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La función convertirá los parámetros recibidos en un array usando &lt;em&gt;rest&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function notaMedia(...notas) {
  let total = notas.reduce((total,nota)  =&amp;gt; total + =  nota)
  return total/notas.length
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si lo que queremos es convertir un array en un grupo de elementos haremos &lt;em&gt;spread&lt;/em&gt;. Por ejemplo el objeto &lt;em&gt;Math&lt;/em&gt; proporciona métodos para trabajar con números como &lt;em&gt;.max&lt;/em&gt; que devuelve el máximo de los números pasados como parámetro. Para saber la nota máxima en vez de &lt;em&gt;.reduce&lt;/em&gt; como hicimos en el ejemplo anterior podemos hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]

let maxNota = Math.max(...arrayNotas)    // maxNota = 9.75
// si hacemos Math.max(arrayNotas) devuelve NaN porque arrayNotas es un array y no un número
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;desestructuracion-de-arrays&quot; tabindex=&quot;-1&quot;&gt;Desestructuración de arrays&lt;/h2&gt;
&lt;p&gt;Igual que vimos con las propiedades de los objetos podemos extraer los elementos del array directamente a variables y viceversa. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const arrayNotas = [5.2, 3.9, 6, 9.75, 7.5, 3]
const [primera, segunda, tercera] = arrayNotas   // primera = 5.2, segunda = 3.9, tercera = 6
const [primera, , , cuarta] = arrayNotas         // primera = 5.2, cuarta = 9.75
const [primera, ...resto] = arrayNotas           // primera = 5.2, resto = [3.9, 6, 9.75, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se pueden asignar valores por defecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const preferencias = [&#39;Javascript&#39;, &#39;NodeJS&#39;]
const [lenguaje, backend = &#39;Laravel&#39;, frontend = &#39;VueJS&#39;] = preferencias  // lenguaje = &#39;Javascript&#39;, backend = &#39;NodeJS&#39;, frontend = &#39;VueJS&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;copia-de-arrays&quot; tabindex=&quot;-1&quot;&gt;Copia de arrays&lt;/h2&gt;
&lt;p&gt;Como vimos al hablar de objetos (y un array es un tipo particular de objeto) por defecto al asignarlos o pasarlos como parámetro a una función se pasan por referencia, NO se copian por lo que los datos de ambas son los mismos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [54, 23, 12]
const b = a      // a = [54, 23, 12] b = [54, 23, 12]
b[0] = 3       // a = [3, 23, 12] b = [3, 23, 12]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si queremos obtener una copia de un array que sea independiente del original podemos usar &lt;code&gt;...&lt;/code&gt;o &lt;code&gt;Object.assign&lt;/code&gt; como vimos con los objetos, pero también podemos obtener una copia con &lt;code&gt;slice&lt;/code&gt; o con &lt;code&gt;Array.from&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = [2, 4, 6]
const copiaDeA = [...a]       
const copiaDeA = a.slice()
const otraCopiaDeA = Array.fom(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En todos los casos los arrays contienen lo mismo pero son diferentes y al modificar uno no afectará al resto.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado el array arr1 con los días de la semana haz un array arr2 que sea igual al arr1. Elimina de arr2 el último día y comprueba quá ha pasado con arr1. Repita la operación con un array llamado arr3 pero que crearás haciendo una copia de arr1.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;map-1&quot; tabindex=&quot;-1&quot;&gt;Map&lt;/h2&gt;
&lt;p&gt;Es una colección de parejas de [clave,valor]. Un objeto en Javascript es un tipo particular de &lt;em&gt;Map&lt;/em&gt; en que las claves sólo pueden ser texto o números. Se puede acceder a una propiedad con &lt;strong&gt;.&lt;/strong&gt; o &lt;strong&gt;[propiedad]&lt;/strong&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const persona = {
  nombre: &#39;John&#39;,
  apellido: &#39;Doe&#39;,
  edad: 39
}
console.log(persona.nombre)      // John
console.log(persona[&#39;nombre&#39;])   // John
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un &lt;em&gt;Map&lt;/em&gt; permite que la clave sea cualquier cosa (array, objeto, ...). No vamos a ver en profundidad estos objetos pero podéis saber más en &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;MDN&lt;/a&gt; o cualquier otra página.&lt;/p&gt;
&lt;h2 id=&quot;set&quot; tabindex=&quot;-1&quot;&gt;Set&lt;/h2&gt;
&lt;p&gt;Es como un &lt;em&gt;Map&lt;/em&gt; pero que no almacena los valores sino sólo la clave. Podemos verlo como una colección que no permite duplicados. Tiene la propiedad &lt;strong&gt;size&lt;/strong&gt; que devuelve su tamaño y los métodos &lt;strong&gt;.add&lt;/strong&gt; (añade un elemento), &lt;strong&gt;.delete&lt;/strong&gt; (lo elimina) o &lt;strong&gt;.has&lt;/strong&gt; (indica si el elemento pasado se encuentra o no en la colección) y también podemos recorrerlo con &lt;strong&gt;.forEach&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Una forma sencilla de eliminar los duplicados de un array es crear con él un &lt;em&gt;Set&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const ganadores = [&#39;Márquez&#39;, &#39;Rossi&#39;, &#39;Márquez&#39;, &#39;Lorenzo&#39;, &#39;Rossi&#39;, &#39;Márquez&#39;, &#39;Márquez&#39;]
const ganadoresNoDuplicados = new Set(ganadores)    // {&#39;Márquez, &#39;Rossi&#39;, &#39;Lorenzo&#39;}
// o si lo queremos en un array:
const ganadoresNoDuplicados = Array.from(new Set(ganadores))    // [&#39;Márquez, &#39;Rossi&#39;, &#39;Lorenzo&#39;]
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/02-2-arrays/" >
        </entry>
        <entry>
            <title>
                02.1-objetos
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/02-1-objetos/</id>
            <content type="html">
                &lt;h1 id=&quot;objetos-en-javascript&quot; tabindex=&quot;-1&quot;&gt;Objetos en Javascript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#objetos-en-javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Objetos en Javascript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#introducci%C3%B3n&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propiedades-de-un-objeto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propiedades de un objeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#m%C3%A9todos-de-un-objeto&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Métodos de un objeto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#propagaci%C3%B3n-de-propiedades&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Propagación de propiedades&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#desestructuraci%C3%B3n-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Desestructuración de objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#comparaci%C3%B3n-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comparación de objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#copia-de-objetos&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Copia de objetos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pedroporo.github.io/#bibliograf%C3%ADa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Bibliografía&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;introduccion&quot; tabindex=&quot;-1&quot;&gt;Introducción&lt;/h2&gt;
&lt;p&gt;En Javascript podemos definir cualquier variable como un objeto declarándola con &lt;strong&gt;new&lt;/strong&gt; (NO se recomienda) o creando un &lt;em&gt;literal object&lt;/em&gt; (usando notación &lt;strong&gt;JSON&lt;/strong&gt;). Ejemplo con &lt;em&gt;new&lt;/em&gt; (no recomendado):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumno = new Object()
alumno.nombre = &#39;Carlos&#39;     // se crea la propiedad &#39;nombre&#39; y se le asigna un valor
alumno[&#39;apellidos&#39;] = &#39;Pérez Ortiz&#39;    // se crea la propiedad &#39;apellidos&#39;
alumno.edad = 19
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Creando un &lt;em&gt;literal object&lt;/em&gt; (es la forma &lt;strong&gt;recomendada&lt;/strong&gt;) el ejemplo anterior sería:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumno = {
    nombre: &#39;Carlos&#39;,
    apellidos: &#39;Pérez Ortiz&#39;,
    edad: 19,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;propiedades-de-un-objeto&quot; tabindex=&quot;-1&quot;&gt;Propiedades de un objeto&lt;/h2&gt;
&lt;p&gt;Podemos acceder a las propiedades con &lt;code&gt;.&lt;/code&gt; (punto) o &lt;code&gt;[ ]&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.nombre)       // imprime &#39;Carlos&#39;
console.log(alumno[&#39;nombre&#39;])    // imprime &#39;Carlos&#39;
let prop = &#39;nombre&#39;
console.log(alumno[prop])        // imprime &#39;Carlos&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si intentamos acceder a propiedades que no existen no se produce un error, se devuelve &lt;em&gt;undefined&lt;/em&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo)      // muestra undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo se genera un error si intentamos acceder a propiedades de algo que no es un objeto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo)           // muestra undefined
console.log(alumno.ciclo.descrip)      // se genera un ERROR
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para evitar ese error antes había que comprobar que existan las propiedades previas:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo &amp;amp;&amp;amp; alumno.ciclo.descrip)
// si alumno.ciclo es un objeto muestra el valor de 
// alumno.ciclo.descrip y si no muestra undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con ES2020 (ES11) se ha incluido el operador de encadenamiento opcional &lt;strong&gt;?.&lt;/strong&gt; para evitar tener que comprobar esto nosotros:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.ciclo?.descrip)
// si alumno.ciclo es un objeto muestra el valor de 
// alumno.ciclo.descrip y si no muestra undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Podremos recorrer las propiedades de un objecto con &lt;code&gt;for..in&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;for (let prop in alumno) {
    console.log(prop + &#39;: &#39; + alumno[prop])
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si el valor de una propiedad es el valor de una variable que se llama como la propiedad no es necesario ponerlo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let nombre = &#39;Carlos&#39;

const alumno = {
    nombre,            // es equivalente a nombre: nombre
    apellidos: &#39;Pérez Ortiz&#39;,
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;metodos-de-un-objeto&quot; tabindex=&quot;-1&quot;&gt;Métodos de un objeto&lt;/h2&gt;
&lt;p&gt;Una propiedad de un objeto puede ser una función:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;alumno.getInfo = function() {
    return &#39;El alumno &#39; + this.nombre + &#39; &#39; + this.apellidos + &#39; tiene &#39; + this.edad + &#39; años&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NOTA: No podemos ponerlo con sintaxis &lt;em&gt;arrow function&lt;/em&gt; porque no se podría acceder a las propiedades del objeto con &lt;code&gt;this&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Y para llamarlo se hace como con cualquier otra propiedad:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;console.log(alumno.getInfo())    // imprime &#39;El alumno Carlos Pérez Ortíz tiene 19 años&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Crea un objeto llamado tvSamsung con las propiedades nombre (&amp;quot;TV Samsung 42&amp;quot;), categoria (&amp;quot;Televisores&amp;quot;), unidades (4), precio (345.95) y con un método llamado importe que devuelve el valor total de las unidades (nº de unidades * precio)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;propagacion-de-propiedades&quot; tabindex=&quot;-1&quot;&gt;Propagación de propiedades&lt;/h2&gt;
&lt;p&gt;El operador de propagación, &lt;strong&gt;&lt;code&gt;...&lt;/code&gt;&lt;/strong&gt; (3 puntos), permite extraer las propiedades de un objeto. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const personaCarlos = {
    nombre: &#39;Carlos&#39;,
    apellidos: &#39;Pérez Ortiz&#39;,
    edad: 19,
};
const alumnoCarlos = {
    ...personaCarlos,
    ciclo: &#39;DAW&#39;,
    curso: 2,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El objeto &lt;em&gt;alumnoCarlos&lt;/em&gt; tendrá las propiedades de &lt;em&gt;personaCarlos&lt;/em&gt; y las que se le añadan. Si se repiten las propiedades se sobreescriben:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const alumnoCarlos = {
    ...personaCarlos,
    ciclo: &#39;DAW&#39;,
    curso: 2,
    edad: 20,
};
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;desestructuracion-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Desestructuración de objetos&lt;/h2&gt;
&lt;p&gt;Similar al anterior, permite extraer directamente a variables sólo las propiedades que necesitemos de un objeto. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const personaCarlos = {
    nombre: &#39;Carlos&#39;,
    apellidos: &#39;Pérez Ortiz&#39;,
    edad: 19,
};

function muestraNombre({nombre, apellidos}) {
    console.log(&#39;El nombre es &#39; + nombre + &#39; &#39; + apellidos)
}

muestraNombre(personaCarlos)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Aunque a la función se le pasa un objeto esta toma como parámetros sólo 2 de sus propiedades y las asigna a las variables &lt;em&gt;nombre&lt;/em&gt; y &lt;em&gt;apellidos&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;También podemos asignar valores por defecto:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;function miProducto({nombre, apellidos = &#39;Desconocidos&#39;}) {
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;comparacion-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Comparación de objetos&lt;/h2&gt;
&lt;p&gt;En Javascript los objetos se comparan por referencia, no por valor. Por lo que dos objetos con los mismos valores no son iguales:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = {id:2, name: &#39;object 2&#39;}
console.log(a === b)    // muestra false
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;copia-de-objetos&quot; tabindex=&quot;-1&quot;&gt;Copia de objetos&lt;/h2&gt;
&lt;p&gt;Cuando copiamos una variable de tipo &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;string&lt;/em&gt; o &lt;em&gt;number&lt;/em&gt; o se pasa como parámetro a una función se hace una copia de la misma y si se modifica la variable original no es alterada. Ej.:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;let a = 54
let b = a      // a = 54 b = 54
b = 86         // a = 54 b = 86
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo al copiar objetos (y arrays, que son un tipo de objeto) la nueva variable apunta a la misma posición de memoria que la antigua por lo que los datos de ambas son los mismos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = a
b.name = &#39;object 3&#39;      // a = {id:2, name: &#39;object 3&#39;} b = {id:2, name: &#39;object 3&#39;}

const a = [54, 23, 12]
const b = a      // a = [54, 23, 12] b = [54, 23, 12]
b[0] = 3       // a = [3, 23, 12] b = [3, 23, 12]

const fecha1 = new Date(&#39;2018-09-23&#39;)
const fecha2 = fecha1          // fecha1 = &#39;2018-09-23&#39;   fecha2 = &#39;2018-09-23&#39;
fecha2.setFullYear(1999)   // fecha1 = &#39;1999-09-23&#39;   fecha2 = &#39;1999-09-23&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obtener una copia independiente de un array o un objeto podemos usar el operador de propagación &lt;code&gt;...&lt;/code&gt; o el método &lt;code&gt;Object.assign&lt;/code&gt;. Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = {...a}      // ahora ambos objetos contienen lo mismo pero son diferentes
b.name = &#39;object 3&#39;      // a = {id:2, name: &#39;object 2&#39;} b = {id:2, name: &#39;object 3&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Con &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;Object.assign&lt;/code&gt;&lt;/a&gt; haremos:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id:2, name: &#39;object 2&#39;}
const b = Object.assign({}, a)       // ahora ambos objetos contienen lo mismo pero son diferentes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sin embargo si el objeto tiene como propiedades otros objetos estos se continúan pasando por referencia. Es ese caso lo más sencillo sería hacer:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id: 2, name: &#39;object 2&#39;, address: {street: &#39;Rue del Percebe&#39;, num: 13} }
const copiaDeA =  JSON.parse(JSON.stringify(a))       // ahora ambos objetos contienen lo mismo pero son diferentes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;o bien usar la función &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/structuredClone&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;structuredClone&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;const a = {id: 2, name: &#39;object 2&#39;, address: {street: &#39;Rue del Percebe&#39;, num: 13} }
const b =  structuredClone(a)       // ahora ambos objetos contienen lo mismo pero son diferentes
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;EJERCICIO: Dado el objeto &lt;em&gt;a&lt;/em&gt; del último ejemplo copialo a un nuevo objeto b con &lt;code&gt;...&lt;/code&gt; y prueba a cambiar las pripiedades &lt;em&gt;id&lt;/em&gt; y &lt;em&gt;street&lt;/em&gt; de &lt;em&gt;b&lt;/em&gt;. ¿Qué pasa con sus valores en &lt;em&gt;a&lt;/em&gt;?.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;bibliografia&quot; tabindex=&quot;-1&quot;&gt;Bibliografía&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Curso &#39;Programación con JavaScript&#39;. CEFIRE Xest. Arturo Bernal Mayordomo&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/javascript-teoria-batoi/02-1-objetos/" >
        </entry>
        <entry>
            <title>
                01-sintaxis
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/notes/01 Apuntes/DAW/Javascript Teoria Batoi/01-sintaxis/</id>
            <content type="html">
                &lt;p&gt;&lt;code&gt;=&lt;/code&gt; en una asignación pero debemos hacerlo siempre igual. Existen muchas guías de estilo y muy buenas: &lt;a href=&quot;https://github.com/airbnb/javascript&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Airbnb&lt;/a&gt;, &lt;a href=&quot;https://google.github.io/styleguide/javascriptguide.xml&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Google&lt;/a&gt;, &lt;a href=&quot;https://github.com/rwaldron/idiomatic.js&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Idiomatic&lt;/a&gt;, etc. Para obligarnos a seguir las reglas podemos usar alguna herramienta &lt;a href=&quot;https://www.codereadability.com/what-are-javascript-linters/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;em&gt;linter&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;También es conveniente para mejorar la legibilidad de nuestro código separar las líneas de más de 80 caracteres.&lt;/li&gt;
&lt;li&gt;Usar `&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://pedroporo.github.io/notes/01 Apuntes/DAW/Javascript Teoria Batoi/01-sintaxis/" >
        </entry>
        <entry>
            <title>
                Ingles
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/ingles/ingles/</id>
            <content type="html">
                &lt;p&gt;Profesor:&lt;/p&gt;
&lt;p&gt;agendaweb&lt;br /&gt;
1 feb entregar proyecto&lt;br /&gt;
7 feb examen&lt;br /&gt;
14Feb presentacion&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/ingles/ingles/" >
        </entry>
        <entry>
            <title>
                Indice DAW
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/indice-daw/</id>
            <content type="html">
                &lt;p&gt;Asignaturas&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/ingles/ingles/&quot;&gt;Ingles&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;br /&gt;
&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Horario:&lt;/p&gt;
&lt;p&gt;empazcm&lt;br /&gt;
PMDM-Pedro-Guillferri&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Hora&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Lunes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Martes&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Miercoles&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Jueves&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Viernes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14:55 - 15:50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Empresa&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Empresa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15:50 - 16:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Empresa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;16:45 - 17:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Tutoria&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/ingles/ingles/&quot;&gt;Ingles&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;17:40 - 18:00&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Descanso&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18:00 - 18:55&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/&quot;&gt;Despliegue de aplicaciones WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/ingles/ingles/&quot;&gt;Ingles&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18:55 - 19:50&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19:50 - 20:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/&quot;&gt;Desarollo Web en entorno servidor&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/&quot;&gt;Diseño de interfaces WEB&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20:45 - 21:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/&quot;&gt;Desarollo Web en entorno cliente&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/indice-daw/" >
        </entry>
        <entry>
            <title>
                Diseño de interfaces WEB
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/</id>
            <content type="html">
                &lt;p&gt;Hola Diseño&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jorge-Zafrilla/apuntes-DIW/tree/apuntes-DIW&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Repositorio de Diseño&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/diseno-de-interfaces-web/diseno-de-interfaces-web/" >
        </entry>
        <entry>
            <title>
                Despliegue de aplicaciones WEB
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/</id>
            <content type="html">
                &lt;p&gt;Hola despliege&lt;/p&gt;
&lt;h2 id=&quot;ssh&quot; tabindex=&quot;-1&quot;&gt;SSH&lt;/h2&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/despliegue-de-aplicaciones-web/despliegue-de-aplicaciones-web/" >
        </entry>
        <entry>
            <title>
                Desarollo Web en entorno servidor
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://github.com/cipfpbatoi/dwes2324&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Pagina de github de los apuntes&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisan route:list
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;php artisan make:resource JugadoraResource
php artisan make:component Pacient
php artisan make:model Pacient
php artisan make:seeder ZoneSeeder

php artisan make:factory ZoneFactory -m Zone

php artisan make:migration add_role_to_users_table --table=users
php artisan make:middleware RoleMiddleware
php artisan make:policy PatientPolicy --model=Patient
php artisan make:request PatientRequest
php artisan make:resource PatientResource


php artisan make:controller Api/JugadoraController --api --model=Jugadora

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ejecutar los comandos de db &lt;code&gt;php artisan migrate:fresh --seed&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;php artisan make:resource ContactResource
php artisan make:component Contact
php artisan make:model Contact
php artisan make:seeder ContactSeeder
php artisan make:factory ContactFactory -m Contact
php artisan make:migration create_table_contacts --create=contacts
php artisan make:policy ContactPolicy --model=Contact
php artisan make:request ContactRequest
php artisan make:resource ContactResource
php artisan make:controller Api/ContactController --api --model=Contact










php artisan make:resource ContactResource
php artisan make:component Contact
php artisan make:model Contact
php artisan make:seeder ContactSeeder
php artisan make:factory ContactFactory -m Contact
php artisan make:migration create_table_contacts --create=contacts
php artisan make:policy ContactPolicy --model=Contact
php artisan make:request ContactRequest

php artisan make:resource CallResource
php artisan make:component Call
php artisan make:model Call
php artisan make:seeder CallSeeder
php artisan make:factory CallFactory -m Call
php artisan make:migration create_table_calls --create=calls
php artisan make:policy CallPolicy --model=Call
php artisan make:request CallRequest

php artisan make:resource AlertResource
php artisan make:component Alert
php artisan make:model Alert
php artisan make:seeder AlertSeeder
php artisan make:factory AlertFactory -m Alert
php artisan make:migration create_table_alerts --create=alerts
php artisan make:policy AlertPolicy --model=Alert
php artisan make:request AlertRequest

php artisan make:resource ReportResource
php artisan make:component Report
php artisan make:model Report
php artisan make:seeder ReportSeeder
php artisan make:factory ReportFactory -m Report
php artisan make:migration create_table_reports --create=reports
php artisan make:policy ReportPolicy --model=Report
php artisan make:request ReportRequest

php artisan make:controller Api/ContactController --api --model=Contact
php artisan make:controller Api/CallController --api --model=Call
php artisan make:controller Api/AlertController --api --model=Alert
php artisan make:controller Api/OperatorController --api --model=User
php artisan make:controller Api/ReportController --api --model=Report

php artisan make:component User

php artisan make:resource UserResource
php artisan make:policy UserPolicy --model=User


&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-servidor/desarollo-web-en-entorno-servidor/" >
        </entry>
        <entry>
            <title>
                Desarollo Web en entorno cliente
                
            </title>
            <updated>2025-09-15T16:35:35Z</updated>
            <id>https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/</id>
            <content type="html">
                &lt;pre&gt;&lt;code class=&quot;language-button&quot;&gt;type note(function(){return this.inputEl.value}) template
action Sin título
templater true
```{ &lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#button-km7s&quot;&gt;#button-km7s&lt;/a&gt;}


[Pagina de github de los apuntes](https://github.com/cipfpbatoi/materials)
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://pedroporo.github.io/01-apuntes/daw/desarollo-web-en-entorno-cliente/desarollo-web-en-entorno-cliente/" >
        </entry>
</feed>
